var lunrIndex = {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/1015822",[0,18.552]],["body/1015822",[0,2.356,1,2.063,2,2.063,3,2.063,4,2.063,5,2.063,6,2.063,7,2.063,8,1.289,9,2.063,10,2.063,11,2.063,12,2.063,13,2.063,14,2.063,15,2.063,16,1.147,17,2.063,18,2.063,19,2.063,20,2.063,21,2.063,22,2.063,23,2.063,24,2.063,25,2.063,26,5.792,27,4.942,28,2.063,29,0.72,30,2.063,31,2.063,32,4.942,33,2.063,34,2.063,35,2.063,36,2.063,37,2.063,38,2.063,39,2.063,40,2.063,41,4.208,42,2.063,43,3.772,44,2.063,45,2.063,46,2.063,47,2.063,48,2.063,49,2.063,50,1.738,51,2.063,52,2.063,53,1.502,54,2.063,55,2.063,56,2.063,57,1.952,58,2.063,59,0.596,60,3.732,61,1.703,62,2.041,63,4.942,64,2.063,65,2.063,66,2.063,67,1.641,68,2.063,69,2.063,70,3.125,71,0.539,72,2.063,73,1.703,74,2.579,75,2.063,76,2.063,77,2.063,78,2.063,79,2.063,80,2.063,81,1.703,82,2.063,83,2.063,84,1.289,85,1.703,86,1.894,87,3.458,88,1.466,89,2.063,90,2.063,91,2.579,92,0.726,93,2.356,94,2.579,95,1.466,96,2.063,97,2.22,98,2.063,99,1.703,100,2.063,101,0.461,102,3.125,103,1.7,104,2.063,105,3.125,106,1.559,107,1.147,108,2.063,109,1.738,110,2.063,111,2.063,112,2.063,113,2.063,114,2.971,115,1.738,116,2.063,117,2.063,118,2.34,119,2.063,120,2.22,121,2.645,122,2.694,123,2.063,124,4.757,125,1.466,126,1.554,127,1.466,128,1.466,129,2.68,130,2.063,131,2.063,132,1.466,133,1.289,134,2.063,135,2.063,136,2.063,137,1.289,138,1.738,139,2.063,140,4.757,141,2.063,142,2.063,143,3.772,144,1.842,145,2.063,146,2.063,147,2.063,148,2.063,149,2.063,150,0.853,151,1.406,152,3.125,153,3.125,154,2.579,155,2.063,156,2.063,157,1.154,158,2.063,159,2.063,160,2.063,161,4.208,162,2.063,163,2.097,164,1.703,165,2.063,166,2.063,167,2.063,168,2.063,169,2.063,170,2.063,171,2.063,172,3.125,173,2.063,174,2.063,175,2.063,176,2.063,177,2.063,178,2.063,179,2.063,180,2.063,181,2.063,182,2.063,183,3.114,184,2.063,185,2.063,186,2.063,187,2.063,188,2.063,189,2.063,190,2.063,191,2.063,192,2.063,193,2.063,194,2.063,195,1.154,196,2.063,197,3.125,198,2.063,199,2.063,200,2.063,201,3.125,202,2.063,203,6,204,2.063,205,2.063,206,2.063,207,2.063,208,2.063,209,2.063,210,2.063,211,2.063,212,2.063,213,2.063,214,2.063,215,2.063,216,2.063,217,2.063,218,2.063,219,2.063,220,2.063,221,2.063,222,2.063,223,2.063,224,2.063,225,2.063,226,2.063,227,2.063,228,2.063,229,2.063,230,2.063,231,2.063,232,3.125,233,2.063,234,2.063,235,2.063,236,2.063,237,2.063,238,2.063,239,0.85,240,2.99,241,3.772,242,3.125,243,3.125,244,3.125,245,3.002,246,3.125,247,3.125,248,3.772,249,3.125,250,2.063,251,3.125,252,3.125,253,3.125,254,2.063,255,2.063,256,3.772,257,2.063,258,3.772,259,3.772,260,3.125,261,4.757,262,3.125,263,3.125,264,3.125,265,3.125,266,2.063,267,2.063,268,4.757,269,4.208,270,3.473,271,3.125,272,4.208,273,4.208,274,4.208,275,3.772,276,3.125,277,4.521,278,4.208,279,3.125,280,3.125,281,3.125,282,2.063,283,2.063,284,2.063,285,2.063,286,1.703,287,2.063,288,2.063,289,2.063,290,2.063,291,2.063,292,1.536,293,0.736,294,2.063,295,3.732,296,0.676,297,1.703,298,1.466,299,1.466,300,3.125,301,2.063,302,2.063,303,2.063,304,2.063,305,2.063,306,2.063,307,2.063,308,4.079,309,1.703,310,2.063,311,2.063,312,2.063,313,2.063,314,2.063,315,2.063,316,2.063,317,2.063,318,2.063,319,4.521,320,2.063,321,2.063,322,3.772,323,2.063,324,2.063,325,2.063,326,2.063,327,2.063,328,2.063,329,2.063,330,2.063,331,2.063,332,2.063,333,2.063,334,2.063,335,2.063,336,2.063,337,2.063,338,2.22,339,2.063,340,2.063,341,3.125,342,3.772,343,3.125,344,2.063,345,2.063,346,2.063,347,2.063,348,2.063,349,2.063,350,2.063,351,2.063,352,2.063,353,2.063,354,2.063,355,2.063,356,2.063,357,2.063,358,3.125,359,3.125,360,3.125,361,2.063,362,2.063,363,3.125,364,2.063,365,2.063,366,2.063,367,2.063,368,2.063,369,2.063,370,2.063,371,2.063,372,4.521,373,3.125,374,2.579,375,5.089,376,3.125,377,3.125,378,2.063,379,2.063,380,2.063,381,2.063,382,3.125,383,2.063,384,2.063,385,2.063,386,2.063,387,4.208,388,3.125,389,3.125,390,3.125,391,3.125,392,3.125,393,1.703,394,2.063,395,3.125,396,3.125,397,2.063,398,3.125,399,2.063,400,2.063,401,2.063,402,2.063,403,2.063,404,2.68,405,2.063,406,2.063,407,2.99,408,1.894,409,2.063,410,2.063,411,2.063,412,1.147,413,2.063,414,2.063,415,1.289,416,1.703,417,2.063,418,2.063,419,2.063,420,1.703,421,2.063,422,2.73,423,2.063,424,3.114,425,3.772,426,2.063,427,2.063,428,2.063,429,2.063,430,0.84,431,2.063,432,1.466,433,2.063,434,2.063,435,2.063,436,2.063,437,2.063,438,2.063,439,2.063,440,2.063,441,2.063,442,2.063,443,2.063,444,2.063,445,2.063,446,2.063,447,2.063,448,2.063,449,2.063,450,2.063,451,2.063,452,2.063,453,2.063,454,2.063,455,2.063,456,2.063,457,2.063,458,2.063,459,2.063,460,2.063,461,2.063,462,2.063,463,2.063,464,1.147,465,2.063,466,2.063,467,3.473,468,2.063,469,2.579,470,2.063,471,1.289,472,1.703,473,2.063,474,1.703,475,2.063,476,1.703,477,2.063,478,2.063,479,1.245,480,2.063,481,1.047,482,1.466,483,2.063,484,2.063,485,2.063,486,2.063,487,2.063,488,2.063,489,2.063,490,2.063,491,2.063,492,2.063,493,2.063,494,2.063,495,2.063,496,1.466,497,1.289,498,2.063,499,2.22,500,2.22,501,2.063,502,3.125,503,3.125,504,2.063,505,2.063,506,2.063,507,2.063,508,2.063,509,2.063,510,2.063,511,2.063,512,2.063,513,2.063,514,2.063,515,2.063,516,2.063,517,2.063,518,2.063,519,2.063,520,2.063,521,2.063,522,2.063,523,2.063,524,2.063,525,2.063,526,2.063,527,2.063,528,2.063,529,2.063,530,2.063,531,2.063,532,2.063,533,2.063,534,2.063,535,3.125,536,1.703,537,2.063,538,2.063,539,2.063,540,2.063,541,2.063,542,1.703,543,1.466,544,1.703,545,1.703,546,2.063,547,3.772,548,2.063,549,2.063,550,3.125,551,2.063,552,2.063,553,2.063,554,2.063,555,2.063,556,2.063,557,2.063,558,2.063,559,2.063,560,2.063,561,2.063,562,2.063,563,2.063,564,2.063,565,2.063,566,2.063,567,2.063,568,2.063,569,2.063,570,2.063,571,2.063,572,2.063,573,2.063,574,2.063,575,2.063,576,2.063,577,2.063,578,2.063,579,2.063,580,2.063,581,2.063,582,2.063,583,2.063,584,2.063,585,2.063,586,2.063,587,2.063,588,2.063,589,2.063,590,2.063,591,2.063,592,5.472,593,3.772,594,2.063,595,2.063,596,2.063,597,1.466,598,2.063,599,2.063,600,2.063,601,2.063,602,2.063,603,2.063,604,2.063,605,2.063,606,2.063,607,1.738,608,2.063,609,2.063,610,2.063,611,2.063,612,2.063,613,2.063,614,0.442,615,2.063,616,0.442,617,2.063,618,2.063,619,2.063,620,2.063,621,1.703,622,2.063,623,2.063,624,2.063,625,2.063,626,3.125,627,2.063,628,2.063,629,2.063,630,2.063,631,2.063,632,2.063,633,2.063,634,2.063,635,2.063,636,3.125,637,2.063,638,2.063,639,2.063,640,2.063,641,2.063,642,2.063,643,2.063,644,2.063,645,2.063,646,2.063,647,2.063,648,2.063,649,3.125,650,2.063,651,2.063,652,2.063,653,2.063,654,2.063,655,2.063,656,2.063,657,2.063,658,2.063,659,2.063,660,2.063,661,2.063,662,2.063,663,2.063,664,2.063,665,2.063,666,2.063,667,2.063,668,5.398,669,5.536,670,5.089,671,2.063,672,2.063,673,2.063,674,2.063,675,2.063,676,2.063,677,2.063,678,2.063,679,2.063,680,2.063,681,2.063,682,2.063,683,2.063,684,2.063,685,2.063,686,2.063,687,2.063,688,2.063,689,0.853,690,2.063,691,2.063,692,2.063,693,2.063,694,2.063,695,2.063,696,2.063,697,2.063,698,2.063,699,2.063,700,2.063,701,2.063,702,3.125,703,2.063,704,1.466,705,0.929,706,0.627,707,2.063,708,2.063,709,3.125,710,2.063,711,2.063,712,2.063,713,2.063,714,2.063,715,2.063,716,2.063,717,2.063,718,2.063,719,2.063,720,2.063,721,2.063,722,2.063,723,2.063,724,2.063,725,2.063,726,2.063,727,2.063,728,2.063,729,2.063,730,2.063,731,2.063,732,2.063,733,3.125,734,3.002,735,3.125,736,2.063,737,0.84,738,2.063,739,2.063,740,2.063,741,2.063,742,2.063,743,2.063,744,2.063,745,2.063,746,2.063,747,2.063,748,0.331,749,2.063,750,2.063,751,2.063,752,2.063,753,2.063,754,2.063,755,2.063,756,2.063,757,2.063,758,2.063,759,2.063,760,2.063,761,2.063,762,2.063,763,2.063,764,2.063,765,2.063,766,2.063,767,2.063,768,2.063,769,2.063,770,2.063,771,2.063,772,2.063,773,2.063,774,2.063,775,2.063,776,2.063,777,4.942,778,2.063,779,2.063,780,2.063,781,2.063,782,4.757,783,2.063,784,3.772,785,3.772,786,3.772,787,2.063,788,3.772,789,2.063,790,2.063,791,2.063,792,2.063,793,3.772,794,3.125,795,4.208,796,2.063,797,2.063,798,2.063,799,2.063,800,2.063,801,3.125,802,3.125,803,2.063,804,4.757,805,3.125,806,2.063,807,3.125,808,2.063,809,2.063,810,2.063,811,2.063,812,2.063,813,2.063,814,2.063,815,2.063,816,2.063,817,2.063,818,4.208,819,5.211,820,5.211,821,2.063,822,2.063,823,4.757,824,2.063,825,2.063,826,2.063,827,2.063,828,2.063,829,2.063,830,2.063,831,4.208,832,2.063,833,0.507,834,3.772,835,2.063,836,2.063,837,2.22,838,3.125,839,2.063,840,2.063,841,2.063,842,2.063,843,2.063,844,3.125,845,2.063,846,2.063,847,2.063,848,2.063,849,2.063,850,3.125,851,2.063,852,2.063,853,1.952,854,2.063,855,2.063,856,2.063,857,2.063,858,3.125,859,3.125,860,2.063,861,3.125,862,2.063,863,2.063,864,2.063,865,2.063,866,2.063,867,2.063,868,2.063,869,2.063,870,2.063,871,2.063,872,2.063,873,2.063,874,2.063,875,2.063,876,2.063,877,2.063,878,2.063,879,2.063,880,2.063,881,1.703,882,2.063,883,2.579,884,2.063,885,3.125,886,2.063,887,3.772,888,2.063,889,2.063,890,4.208,891,4.757,892,1.698,893,2.063,894,2.063,895,2.22,896,2.063,897,2.063,898,2.063,899,3.125,900,3.125,901,2.063,902,2.063,903,3.125,904,3.125,905,3.125,906,3.125,907,2.063,908,2.063,909,2.063,910,2.063,911,2.063,912,2.063,913,3.125,914,2.063,915,1.554,916,2.063,917,2.063,918,2.063,919,2.063,920,2.063,921,2.063,922,2.063,923,2.063,924,2.063,925,2.063,926,2.063,927,2.063,928,1.289,929,2.097,930,2.063,931,2.063,932,2.063,933,2.063,934,2.063,935,2.063,936,2.063,937,2.063,938,2.063,939,2.063,940,2.063,941,2.063,942,2.063,943,2.063,944,2.063,945,2.063,946,2.063,947,2.063,948,2.063,949,2.063,950,2.063,951,2.063,952,2.063,953,2.063,954,2.063,955,2.063,956,1.466,957,2.063,958,2.063,959,2.063,960,2.063,961,2.063,962,2.063,963,2.063,964,2.063,965,2.063,966,2.063,967,2.035,968,2.063,969,2.063,970,2.063,971,2.063,972,2.063,973,2.063,974,2.063,975,4.208,976,2.063,977,2.063,978,2.063,979,3.125,980,3.125,981,3.125,982,3.125,983,2.579,984,2.063,985,2.063,986,2.063,987,2.063,988,2.063,989,2.063,990,2.063,991,2.063,992,2.063,993,2.063,994,2.063,995,2.063,996,2.063,997,2.063,998,2.063,999,2.063,1000,2.063,1001,2.063,1002,0.762,1003,2.063,1004,0.568,1005,2.063,1006,0.691,1007,0.84,1008,2.063,1009,1.466,1010,2.063,1011,1.289,1012,2.063,1013,2.063,1014,2.063,1015,2.063,1016,2.063,1017,2.063,1018,2.063,1019,2.063,1020,2.063,1021,2.063,1022,2.063,1023,2.063,1024,2.063,1025,2.063,1026,2.063,1027,2.063,1028,2.063,1029,2.063,1030,2.063,1031,2.063,1032,2.063,1033,2.063,1034,2.063,1035,2.063,1036,2.063,1037,2.063,1038,2.063,1039,2.063,1040,2.063,1041,2.063,1042,2.063,1043,2.063,1044,2.063,1045,2.063,1046,2.063,1047,2.063,1048,2.063,1049,2.063,1050,2.063,1051,2.063,1052,2.063,1053,2.063,1054,2.063,1055,2.063,1056,3.125,1057,3.772,1058,4.521,1059,2.063,1060,2.063,1061,2.063,1062,2.063,1063,2.063,1064,2.063,1065,2.063,1066,1.703,1067,2.063,1068,1.289,1069,2.063,1070,2.063,1071,2.063,1072,2.063,1073,2.063,1074,2.063,1075,1.703,1076,2.063,1077,2.063,1078,2.063,1079,2.063,1080,2.063,1081,3.125,1082,2.063,1083,2.063,1084,0.929,1085,2.063,1086,2.063,1087,2.063,1088,2.063,1089,2.063,1090,2.063,1091,2.063,1092,2.063,1093,2.063,1094,2.063,1095,2.063,1096,2.063,1097,2.063,1098,2.063,1099,2.063,1100,2.063,1101,2.063,1102,2.063,1103,2.063,1104,2.063,1105,2.063,1106,2.063,1107,2.063,1108,2.063,1109,2.063,1110,2.063,1111,2.063,1112,0.627,1113,2.063,1114,2.063,1115,2.063,1116,2.063,1117,2.063,1118,2.063,1119,2.063,1120,2.063,1121,2.063,1122,2.063,1123,2.063,1124,3.772,1125,2.063,1126,2.063,1127,2.063,1128,2.063,1129,2.063,1130,2.063,1131,2.063,1132,3.772,1133,3.114,1134,2.063,1135,2.063,1136,2.063,1137,2.063,1138,2.063,1139,2.063,1140,2.063,1141,2.063,1142,2.063,1143,2.063,1144,2.063,1145,2.063,1146,2.063,1147,2.063,1148,2.063,1149,2.063,1150,2.063,1151,2.063,1152,2.063,1153,2.063,1154,2.063,1155,2.063,1156,2.063,1157,2.063,1158,2.063,1159,2.063,1160,2.063,1161,2.063,1162,2.063,1163,2.063,1164,2.063,1165,2.063,1166,2.063,1167,2.063,1168,2.063,1169,2.063,1170,2.063,1171,2.063,1172,3.125,1173,2.063,1174,2.063,1175,2.063,1176,2.063,1177,2.063,1178,2.063,1179,2.063,1180,2.063,1181,3.125,1182,2.063,1183,2.063,1184,2.063,1185,2.063,1186,4.521,1187,2.063,1188,3.125,1189,2.063,1190,2.063,1191,2.063,1192,3.125,1193,2.063,1194,2.063,1195,2.063,1196,2.063,1197,2.063,1198,2.063,1199,2.063,1200,2.063,1201,2.063,1202,2.063,1203,2.063,1204,2.063,1205,2.063,1206,2.063,1207,2.063,1208,2.063,1209,2.063,1210,2.063,1211,2.063,1212,2.063,1213,2.063,1214,2.063,1215,2.063,1216,2.063,1217,2.063,1218,2.063,1219,2.063,1220,2.063,1221,2.063,1222,2.063,1223,2.063,1224,2.063,1225,2.063,1226,2.063,1227,2.063,1228,2.063,1229,2.063,1230,2.063,1231,2.063,1232,2.063,1233,2.063,1234,2.063,1235,2.063,1236,2.063,1237,2.063,1238,2.063,1239,2.063,1240,2.063,1241,2.063,1242,2.063,1243,2.063,1244,2.063,1245,2.063,1246,2.063,1247,2.063,1248,2.063,1249,2.063,1250,2.063,1251,2.063,1252,2.063,1253,2.063,1254,2.063,1255,2.063,1256,2.063,1257,2.063,1258,2.063,1259,2.063,1260,2.063,1261,1.703,1262,2.063,1263,2.063,1264,2.063,1265,2.063,1266,2.063,1267,2.063,1268,2.063,1269,2.063,1270,2.063,1271,2.063,1272,2.063,1273,2.063,1274,2.063,1275,2.063,1276,2.063,1277,2.063,1278,2.063,1279,2.063,1280,2.063,1281,2.063,1282,2.063,1283,2.063,1284,2.063,1285,2.063,1286,2.063,1287,2.063,1288,2.063,1289,2.063,1290,2.063,1291,2.063,1292,2.063,1293,2.063,1294,2.063,1295,2.063,1296,4.208,1297,2.063,1298,2.063,1299,2.063,1300,2.063,1301,2.063,1302,3.125,1303,2.063,1304,2.063,1305,2.063,1306,1.703,1307,2.063,1308,1.703,1309,2.063,1310,1.703,1311,2.063,1312,2.063,1313,2.063,1314,2.063,1315,2.063,1316,2.063,1317,2.063,1318,2.063,1319,2.063,1320,2.063,1321,2.063,1322,2.063,1323,2.063,1324,2.063,1325,2.063,1326,2.063,1327,2.063,1328,2.063,1329,2.063,1330,2.063,1331,2.063]],["title/1015843",[1332,24.517]],["body/1015843",[29,0.786,59,0.423,71,0.548,86,0.877,92,0.927,93,2.274,101,0.473,103,1.724,106,0.972,107,2.45,109,2.271,126,1.344,150,0.985,157,0.719,239,1.16,270,1.608,293,0.723,296,0.993,338,2.902,422,2.729,430,1.218,479,1.397,481,1.22,614,0.79,616,0.774,689,0.855,706,1.52,737,1.664,748,0.896,833,0.647,853,2.274,892,1.346,895,1.384,915,2.223,928,1.868,967,0.877,983,2.469,1002,0.719,1004,1.003,1006,1.002,1084,1.983,1333,1.608,1334,1.948,1335,1.948,1336,1.948,1337,1.948,1338,1.948,1339,1.948,1340,1.608,1341,1.608,1342,1.948,1343,1.948,1344,1.948,1345,1.948,1346,1.948,1347,2.208,1348,1.948,1349,2.125,1350,1.608,1351,1.608,1352,1.948,1353,1.948,1354,1.948,1355,1.948,1356,2.991,1357,2.991,1358,2.991,1359,1.948,1360,4.126,1361,4.651,1362,4.084,1363,1.948,1364,2.093,1365,3.005,1366,1.608,1367,0.877,1368,1.948,1369,1.948,1370,1.948,1371,1.948,1372,1.948,1373,1.948,1374,1.948,1375,1.948,1376,1.948,1377,2.417,1378,1.948,1379,2.991,1380,1.948,1381,1.948,1382,1.948,1383,1.663,1384,1.948,1385,2.024,1386,1.948,1387,1.948,1388,2.024,1389,1.948,1390,1.948,1391,1.948,1392,1.948,1393,1.948,1394,1.948,1395,1.948,1396,1.608,1397,1.384,1398,2.036,1399,1.948,1400,2.991,1401,1.948,1402,1.948,1403,1.948,1404,1.948,1405,2.038,1406,1.948,1407,1.948,1408,1.948,1409,1.948,1410,1.948,1411,1.948,1412,1.948,1413,1.948,1414,1.948,1415,1.948,1416,1.948,1417,1.948,1418,2.469,1419,1.948,1420,1.948,1421,1.948,1422,1.948,1423,1.948,1424,1.948,1425,1.948,1426,1.948,1427,1.948,1428,1.948,1429,1.948,1430,1.948,1431,1.948,1432,1.948,1433,1.948,1434,1.948,1435,1.948,1436,1.948,1437,1.948,1438,1.948,1439,1.948,1440,1.948,1441,1.948,1442,1.948,1443,1.948,1444,1.948,1445,1.948,1446,1.948,1447,1.948,1448,1.948,1449,1.948,1450,1.948,1451,1.948,1452,1.948,1453,1.948,1454,1.948,1455,1.948,1456,1.948,1457,1.948,1458,1.948,1459,1.948,1460,1.948,1461,1.948,1462,2.991,1463,1.948,1464,1.948,1465,1.948,1466,1.948,1467,1.948,1468,1.948,1469,1.948,1470,1.948,1471,1.948,1472,3.005,1473,3.371,1474,2.991,1475,1.948,1476,1.948,1477,1.948,1478,1.948,1479,1.948,1480,1.948,1481,1.948,1482,1.948,1483,1.948,1484,1.948,1485,1.948,1486,1.948,1487,4.998,1488,1.948,1489,1.948,1490,1.948,1491,1.948,1492,1.948,1493,1.948,1494,1.948,1495,1.948,1496,1.948,1497,1.948,1498,1.948,1499,2.551,1500,1.948,1501,1.948,1502,1.948,1503,1.948,1504,1.948,1505,1.948,1506,1.948,1507,1.948,1508,1.948,1509,1.948,1510,1.948,1511,1.948,1512,1.948,1513,1.948,1514,1.948,1515,1.948,1516,1.948,1517,1.948,1518,1.948,1519,1.948,1520,2.991,1521,1.948,1522,1.948,1523,2.469,1524,1.948,1525,1.608,1526,3.131,1527,3.122,1528,1.948,1529,1.948,1530,4.406,1531,3.64,1532,2.274,1533,1.948,1534,1.948,1535,0.972,1536,1.948,1537,1.948,1538,1.948,1539,3.716,1540,1.948,1541,1.948,1542,1.384,1543,3.965,1544,1.948,1545,1.948,1546,1.948,1547,1.948,1548,2.038,1549,1.948,1550,1.948,1551,1.948,1552,1.948,1553,1.948,1554,1.948,1555,1.948,1556,1.948,1557,1.948,1558,1.948,1559,1.948,1560,1.948,1561,1.948,1562,1.948,1563,1.948,1564,1.948,1565,1.948,1566,1.948,1567,1.948,1568,1.948,1569,1.948,1570,1.948,1571,3.025,1572,3.637,1573,1.948,1574,1.948,1575,1.948,1576,1.948,1577,1.948,1578,1.948,1579,1.948,1580,1.948,1581,1.948,1582,1.948,1583,1.948,1584,1.948,1585,1.948,1586,1.948,1587,1.948,1588,1.948,1589,1.948,1590,1.948,1591,1.948,1592,1.948,1593,1.948,1594,1.948,1595,1.948,1596,1.948,1597,1.948,1598,1.948,1599,1.948,1600,1.948,1601,1.948,1602,1.948,1603,2.991,1604,2.991,1605,1.948,1606,1.948,1607,1.948,1608,1.948,1609,1.948,1610,1.948,1611,1.948,1612,1.948,1613,1.948,1614,1.948,1615,1.948,1616,1.948,1617,1.608,1618,1.868,1619,1.948,1620,1.948,1621,1.948,1622,1.948,1623,1.948,1624,1.948,1625,1.948,1626,1.948,1627,1.948,1628,1.948,1629,1.948,1630,1.948,1631,1.948,1632,1.948,1633,1.216,1634,1.948,1635,1.948,1636,1.948,1637,1.948,1638,1.948,1639,1.948,1640,1.948,1641,1.948,1642,1.948,1643,1.948,1644,1.948,1645,1.948,1646,1.948,1647,1.948,1648,1.948,1649,1.948,1650,1.948,1651,1.948,1652,1.948,1653,1.948,1654,1.948,1655,1.948,1656,1.948,1657,1.948,1658,1.948,1659,1.681,1660,1.948,1661,1.948,1662,3.278,1663,1.948,1664,1.948,1665,1.948,1666,1.216,1667,1.948,1668,1.948,1669,1.948,1670,1.948,1671,1.948,1672,1.948,1673,1.948,1674,1.948,1675,1.948,1676,1.948,1677,1.948,1678,1.948,1679,1.948,1680,1.948,1681,1.948,1682,1.948,1683,2.991,1684,2.274,1685,2.586,1686,2.991,1687,1.948,1688,1.948,1689,1.948,1690,1.948,1691,1.948,1692,1.948,1693,1.948,1694,1.384,1695,1.948,1696,1.948,1697,1.948,1698,1.948,1699,1.948,1700,1.608,1701,1.948,1702,1.948,1703,1.948,1704,1.948,1705,1.608,1706,1.948,1707,1.948,1708,1.948,1709,1.948,1710,1.948,1711,1.948,1712,0.877,1713,1.948,1714,1.948,1715,0.653,1716,1.948,1717,1.948,1718,1.948,1719,1.948,1720,2.991,1721,1.948,1722,1.948,1723,1.948,1724,1.948,1725,1.608,1726,1.948,1727,1.948,1728,1.948,1729,1.948,1730,1.948,1731,1.948,1732,1.948,1733,1.948,1734,1.948,1735,1.948,1736,1.948,1737,1.948,1738,1.948,1739,1.948,1740,1.948,1741,1.948,1742,1.948,1743,1.948,1744,1.948,1745,1.948,1746,1.948,1747,1.948,1748,1.948,1749,1.948,1750,1.948,1751,2.469,1752,1.948,1753,1.948,1754,1.948,1755,1.948,1756,2.586,1757,1.948,1758,1.948,1759,1.948,1760,1.948,1761,2.991,1762,1.948,1763,1.948,1764,1.948,1765,1.948,1766,2.991,1767,1.948,1768,1.948,1769,1.948,1770,1.948,1771,1.608,1772,1.948,1773,2.991,1774,1.948,1775,1.948,1776,1.948,1777,1.948,1778,1.948,1779,1.948,1780,1.948,1781,1.948,1782,1.948,1783,1.948,1784,1.948,1785,1.948,1786,1.948,1787,1.948,1788,1.948,1789,1.948,1790,1.948,1791,1.948,1792,1.948,1793,1.948,1794,2.417,1795,1.948,1796,4.998,1797,2.355,1798,2.991,1799,1.948,1800,1.948,1801,1.948,1802,1.948,1803,1.948,1804,1.948,1805,1.948,1806,1.948,1807,1.948,1808,1.948,1809,1.948,1810,1.948,1811,2.45,1812,2.991,1813,2.991,1814,2.991,1815,2.991,1816,1.948,1817,1.948,1818,1.948,1819,1.948,1820,1.948,1821,1.948,1822,1.948,1823,1.948,1824,1.948,1825,1.948,1826,1.948,1827,1.948,1828,1.948,1829,1.948,1830,1.948,1831,1.948,1832,1.22,1833,2.991,1834,2.991,1835,1.948,1836,1.948,1837,1.948,1838,1.948,1839,1.948,1840,1.948,1841,1.948,1842,1.948,1843,1.948,1844,1.948,1845,4.651,1846,3.64,1847,3.64,1848,2.991,1849,1.948,1850,1.948,1851,1.948,1852,1.948,1853,1.948,1854,1.948,1855,1.948,1856,1.948,1857,3.64,1858,2.991,1859,1.948,1860,1.948,1861,1.948,1862,1.948,1863,1.948,1864,1.948,1865,1.948,1866,1.948,1867,1.948,1868,1.948,1869,1.216,1870,1.948,1871,1.948,1872,1.948,1873,1.948,1874,1.948,1875,1.948,1876,1.948,1877,1.948,1878,1.948,1879,1.948,1880,1.948,1881,1.948,1882,1.948,1883,1.948,1884,1.948,1885,1.948,1886,2.991,1887,1.948,1888,1.948,1889,1.948,1890,1.948,1891,1.948,1892,1.948,1893,1.948,1894,1.948,1895,1.948,1896,1.948,1897,1.948,1898,1.948,1899,1.948,1900,1.948,1901,1.948,1902,1.948,1903,1.948,1904,1.608,1905,1.948,1906,1.948,1907,1.948,1908,2.991,1909,2.991,1910,1.948,1911,3.305,1912,1.948,1913,1.948,1914,1.948,1915,1.948,1916,1.948,1917,1.948,1918,1.948,1919,1.948,1920,1.948,1921,1.948,1922,1.948,1923,1.948,1924,1.948,1925,2.469,1926,1.948,1927,1.948,1928,2.991,1929,1.948,1930,1.483,1931,1.948,1932,1.948,1933,5.125,1934,1.948,1935,1.948,1936,1.948,1937,1.608,1938,1.608,1939,1.948,1940,1.948,1941,1.948,1942,1.948,1943,1.948,1944,1.948,1945,1.948,1946,1.948,1947,1.948,1948,1.948,1949,2.991,1950,1.948,1951,1.948,1952,1.948,1953,1.948,1954,1.948,1955,3.64,1956,1.948,1957,1.948,1958,1.948,1959,1.948,1960,1.948,1961,1.948,1962,1.948,1963,1.948,1964,1.948,1965,1.948,1966,4.406,1967,1.948,1968,1.948,1969,1.948,1970,1.948,1971,1.948,1972,2.125,1973,1.948,1974,1.948,1975,1.948,1976,1.608,1977,1.948,1978,1.948,1979,1.948,1980,1.948,1981,1.948,1982,1.948,1983,1.948,1984,1.948,1985,1.948,1986,1.948,1987,1.948,1988,1.948,1989,1.948,1990,5.469,1991,1.948,1992,1.948,1993,1.948,1994,1.948,1995,1.608,1996,1.948,1997,1.948,1998,4.651,1999,2.991,2000,1.083,2001,2.991,2002,1.216,2003,1.948,2004,1.948,2005,1.948,2006,1.948,2007,1.948,2008,1.948,2009,1.948,2010,1.948,2011,1.948,2012,1.948,2013,2.991,2014,1.948,2015,1.948,2016,1.948,2017,1.948,2018,1.948,2019,1.948,2020,1.948,2021,1.948,2022,1.948,2023,1.948,2024,1.948,2025,1.948,2026,1.948,2027,1.948,2028,1.948,2029,1.948,2030,2.469,2031,1.948,2032,1.948,2033,1.948,2034,1.948,2035,1.948,2036,1.948,2037,1.948,2038,1.948,2039,1.948,2040,1.948,2041,1.948,2042,1.948,2043,1.948,2044,1.948,2045,1.948,2046,1.948,2047,1.948,2048,1.948,2049,1.948,2050,1.948,2051,1.948,2052,1.948,2053,1.948,2054,1.948,2055,1.948,2056,1.948,2057,4.084,2058,1.948,2059,1.948,2060,1.948,2061,1.948,2062,2.991,2063,2.991,2064,1.948,2065,1.948,2066,1.948,2067,1.948,2068,1.948,2069,1.948,2070,1.948,2071,1.948,2072,1.608,2073,1.948,2074,1.948,2075,1.948,2076,1.948,2077,1.948,2078,1.948,2079,1.948,2080,1.948,2081,2.991,2082,2.991,2083,1.948,2084,1.948,2085,1.948,2086,1.948,2087,1.948,2088,1.948,2089,4.084,2090,2.991,2091,1.948,2092,1.948,2093,1.948,2094,1.948,2095,2.96,2096,1.868,2097,1.948,2098,1.948,2099,2.991,2100,1.948,2101,1.948,2102,4.084,2103,4.406,2104,4.406,2105,2.991,2106,1.948,2107,1.948,2108,1.948,2109,1.948,2110,1.948,2111,1.948,2112,1.948,2113,3.64,2114,1.948,2115,1.948,2116,1.948,2117,1.948,2118,1.948,2119,1.948,2120,1.948,2121,1.948,2122,1.948,2123,1.948,2124,1.948,2125,1.948,2126,1.948,2127,2.991,2128,4.394,2129,1.948,2130,1.948,2131,1.948,2132,1.608,2133,1.948,2134,1.948,2135,1.948,2136,1.948,2137,1.948,2138,1.948,2139,1.948,2140,1.948,2141,1.948,2142,1.948,2143,1.948,2144,1.948,2145,2.991,2146,4.084,2147,4.084,2148,1.948,2149,2.991,2150,1.948,2151,1.948,2152,1.608,2153,1.608,2154,1.948,2155,1.948,2156,1.948,2157,1.948,2158,2.469,2159,2.991,2160,1.948,2161,1.948,2162,1.948,2163,1.948,2164,1.948,2165,2.469,2166,1.948,2167,1.948,2168,1.948,2169,1.948,2170,1.948,2171,1.948,2172,1.948,2173,1.948,2174,1.948,2175,1.948,2176,1.948,2177,1.608,2178,1.608,2179,1.948,2180,1.948,2181,1.948,2182,1.948,2183,1.948,2184,1.948,2185,1.948,2186,1.948,2187,3.998,2188,1.948,2189,1.948,2190,1.948,2191,1.948,2192,1.948,2193,1.948,2194,1.948,2195,1.948,2196,1.948,2197,1.948,2198,1.948,2199,1.948,2200,1.948,2201,1.948,2202,1.948,2203,1.948,2204,1.948,2205,1.948,2206,1.948,2207,1.384,2208,1.948,2209,1.608,2210,1.948,2211,1.948,2212,1.948,2213,0.972,2214,1.948,2215,1.948,2216,1.948,2217,1.948,2218,1.948,2219,3.64,2220,1.948,2221,1.948,2222,1.948,2223,1.948,2224,1.948,2225,2.991,2226,1.948,2227,1.948,2228,1.948,2229,1.948,2230,1.948,2231,1.948,2232,1.948,2233,1.948,2234,1.948,2235,2.991,2236,2.991,2237,2.991,2238,2.991,2239,1.948,2240,3.64,2241,2.991,2242,3.64,2243,1.948,2244,3.64,2245,1.948,2246,3.64,2247,1.948,2248,1.948,2249,1.948,2250,1.948,2251,1.948,2252,2.991,2253,1.384,2254,2.991,2255,0.877,2256,1.384,2257,1.948,2258,1.948,2259,1.948,2260,4.084,2261,1.948,2262,1.948,2263,1.608,2264,1.608,2265,1.948,2266,1.948,2267,1.948,2268,1.948,2269,1.948,2270,2.991,2271,1.948,2272,1.948,2273,1.948,2274,1.948,2275,1.948,2276,1.948,2277,1.948,2278,1.948,2279,1.948,2280,1.948,2281,1.948,2282,1.948,2283,1.948,2284,1.948,2285,1.948,2286,1.948,2287,1.948,2288,1.948,2289,1.948,2290,1.948,2291,2.991,2292,1.948,2293,1.948,2294,1.948,2295,1.948,2296,4.084,2297,2.991,2298,1.948,2299,2.991,2300,1.948,2301,1.948,2302,1.948,2303,1.948,2304,1.948,2305,1.948,2306,2.991,2307,1.948,2308,1.948,2309,1.948,2310,1.948,2311,1.608,2312,1.948,2313,2.991,2314,1.948,2315,1.948,2316,1.948,2317,2.991,2318,1.948,2319,1.948,2320,1.948,2321,1.948,2322,1.948,2323,1.948,2324,1.948,2325,1.948,2326,1.948,2327,1.948,2328,1.948,2329,1.948,2330,1.948,2331,1.948,2332,1.948,2333,1.948,2334,1.948,2335,1.948,2336,1.948,2337,1.948,2338,1.948,2339,1.948,2340,2.991,2341,0.793,2342,1.492,2343,2.991,2344,1.948,2345,1.948,2346,1.948,2347,3.005,2348,1.948,2349,1.948,2350,1.948,2351,1.948,2352,1.948,2353,1.948,2354,1.948,2355,1.948,2356,2.125,2357,1.948,2358,1.948,2359,1.948,2360,1.384,2361,1.948,2362,1.948,2363,1.948,2364,1.948,2365,1.948,2366,1.948,2367,1.948,2368,1.948,2369,1.948,2370,1.948,2371,1.948,2372,1.948,2373,1.948,2374,1.948,2375,1.948,2376,2.469,2377,1.948,2378,2.469,2379,1.948,2380,1.948,2381,1.948,2382,1.948,2383,1.948,2384,1.948,2385,1.948,2386,1.948,2387,1.948,2388,1.948,2389,1.948,2390,1.948,2391,1.948,2392,1.384,2393,1.948,2394,1.384,2395,1.948,2396,1.948,2397,1.948,2398,1.948,2399,1.948,2400,1.948,2401,1.948,2402,1.948,2403,1.948]],["title/1015846",[2404,21.103]],["body/1015846",[59,0.615,126,1.605,127,3.088,157,1.605,293,0.537,430,1.77,464,2.416,689,0.698,705,1.956,706,1.578,1006,1.739,1364,2.643,1388,2.416,1398,1.77,1539,3.465,1972,3.088,2405,4.346,2406,4.346,2407,4.346,2408,4.346,2409,4.346,2410,4.346,2411,3.587,2412,4.346,2413,4.346,2414,4.346,2415,4.346,2416,4.346,2417,4.346,2418,4.346,2419,4.346,2420,4.346,2421,4.346,2422,4.346,2423,4.346,2424,4.346,2425,4.346,2426,4.346,2427,4.346,2428,4.346,2429,4.346,2430,4.346,2431,4.346,2432,2.714,2433,3.587,2434,3.587,2435,3.088,2436,3.241,2437,4.346,2438,3.587,2439,2.714,2440,4.346,2441,2.049,2442,5.189,2443,4.346,2444,4.346,2445,4.346,2446,4.346,2447,2.885,2448,2.714,2449,3.088,2450,2.589,2451,4.346,2452,3.587,2453,4.346,2454,4.346,2455,4.346,2456,4.346,2457,4.346,2458,4.346,2459,4.346,2460,4.346,2461,4.346,2462,4.346,2463,4.346,2464,4.346,2465,4.346,2466,4.346,2467,4.346,2468,4.346,2469,4.346,2470,4.346,2471,5.189,2472,4.346,2473,4.346,2474,4.346,2475,4.346,2476,4.346,2477,4.346,2478,4.346,2479,4.346,2480,4.346,2481,4.346,2482,3.587,2483,4.346,2484,3.587,2485,4.346,2486,4.346,2487,4.346,2488,4.346,2489,4.346,2490,4.346,2491,4.346,2492,4.346,2493,4.346,2494,4.346,2495,4.346,2496,4.346,2497,4.346,2498,4.346,2499,4.346,2500,4.346,2501,2.768,2502,3.587,2503,4.346,2504,5.189,2505,4.346,2506,4.346,2507,4.283,2508,4.346,2509,4.346,2510,4.346,2511,3.241,2512,4.346,2513,4.346,2514,4.346,2515,4.346,2516,4.346,2517,4.346,2518,4.346,2519,4.346,2520,4.346,2521,4.346,2522,4.346,2523,4.346,2524,3.587,2525,4.346,2526,3.088,2527,4.346,2528,3.587,2529,3.587,2530,4.346,2531,4.346,2532,4.346,2533,4.346,2534,4.346,2535,4.346,2536,4.346,2537,4.346,2538,4.346,2539,4.346,2540,4.346,2541,4.346,2542,4.346,2543,4.346,2544,4.346,2545,4.346,2546,3.587,2547,4.346,2548,4.346,2549,4.346,2550,4.346,2551,4.346,2552,4.346,2553,4.346,2554,4.346,2555,4.346,2556,4.346,2557,4.346,2558,4.346,2559,3.587,2560,4.346,2561,3.587,2562,3.587,2563,4.346,2564,4.346,2565,4.346,2566,4.346,2567,4.346,2568,4.346,2569,4.346,2570,4.346,2571,4.346,2572,4.346,2573,4.346,2574,4.346,2575,4.346,2576,4.346,2577,4.346]],["title/1015823",[2578,18.552]],["body/1015823",[29,0.669,50,1.929,53,1.246,59,0.336,62,1.734,67,1.713,71,0.541,85,1.959,86,1.068,87,3.129,92,0.831,101,0.46,103,1.73,118,2.949,120,3.203,121,3.284,122,2.646,125,3.203,126,0.877,129,1.687,144,2.107,150,0.992,239,1.012,245,2.949,292,1.67,293,0.689,296,0.852,338,2.912,474,3.722,481,1.842,614,0.336,616,0.336,689,0.724,704,1.687,705,1.068,748,0.381,833,0.511,929,1.32,1002,0.877,1004,1.129,1006,0.796,1007,0.967,1068,3.129,1527,3.48,1548,2.499,1571,3.129,1572,4.135,1712,2.255,1715,1.679,1756,1.687,2341,1.67,2449,3.559,2578,1.483,2579,2.374,2580,2.374,2581,2.374,2582,2.374,2583,2.374,2584,2.374,2585,2.374,2586,2.374,2587,2.374,2588,2.374,2589,2.374,2590,2.374,2591,2.374,2592,2.374,2593,2.374,2594,2.374,2595,3.469,2596,4.796,2597,6.154,2598,5.173,2599,2.374,2600,5.906,2601,2.374,2602,2.981,2603,3.231,2604,2.374,2605,2.374,2606,3.469,2607,2.374,2608,2.374,2609,4.796,2610,5.304,2611,3.469,2612,2.374,2613,5.173,2614,4.509,2615,3.722,2616,4.099,2617,4.509,2618,2.374,2619,3.469,2620,2.374,2621,2.374,2622,2.374,2623,2.374,2624,2.374,2625,2.374,2626,2.374,2627,2.374,2628,2.374,2629,2.374,2630,2.374,2631,2.374,2632,2.374,2633,2.374,2634,2.374,2635,2.374,2636,2.374,2637,2.374,2638,2.374,2639,4.796,2640,5.497,2641,4.106,2642,2.374,2643,2.374,2644,2.374,2645,2.374,2646,3.469,2647,5.635,2648,4.796,2649,5.737,2650,4.099,2651,2.374,2652,4.509,2653,2.374,2654,4.509,2655,2.374,2656,2.374,2657,1.184,2658,5.41,2659,2.374,2660,2.374,2661,2.374,2662,3.469,2663,4.796,2664,4.099,2665,2.374,2666,2.374,2667,4.099,2668,5.497,2669,5.497,2670,5.497,2671,5.304,2672,5.571,2673,4.099,2674,5.009,2675,5.009,2676,5.009,2677,3.52,2678,5.009,2679,5.009,2680,4.135,2681,5.009,2682,2.374,2683,1.607,2684,3.469,2685,3.469,2686,3.469,2687,3.469,2688,3.469,2689,2.374,2690,2.374,2691,2.374,2692,4.099,2693,4.509,2694,4.099,2695,2.374,2696,2.374,2697,3.469,2698,2.374,2699,3.469,2700,2.374,2701,2.374,2702,2.374,2703,3.469,2704,2.374,2705,4.796,2706,2.374,2707,3.469,2708,3.469,2709,2.374,2710,2.374,2711,2.374,2712,2.374,2713,1.687,2714,2.374,2715,2.374,2716,3.469,2717,3.469,2718,4.796,2719,3.469,2720,2.374,2721,3.469,2722,3.469,2723,4.099,2724,2.374,2725,4.099,2726,4.509,2727,3.469,2728,3.469,2729,5.009,2730,5.304,2731,2.374,2732,3.469,2733,2.374,2734,3.469,2735,2.863,2736,2.374,2737,5.009,2738,2.374,2739,2.374,2740,2.56,2741,2.374,2742,4.509,2743,1.959,2744,2.374,2745,2.374,2746,1.959,2747,2.374,2748,2.374,2749,2.374,2750,2.374,2751,3.469,2752,3.469,2753,3.469,2754,2.374,2755,2.374,2756,2.374,2757,2.374,2758,2.374,2759,1.483,2760,2.374,2761,2.374,2762,2.374,2763,2.374,2764,2.374,2765,2.374,2766,2.374,2767,2.374,2768,3.469,2769,2.374,2770,2.374,2771,2.374,2772,2.374,2773,1.959,2774,1.687,2775,1.959,2776,4.796,2777,1.959,2778,0.877,2779,1.959,2780,0.877,2781,4.099,2782,5.85,2783,3.469,2784,5.41,2785,3.384,2786,2.045,2787,1.959,2788,3.384,2789,2.374,2790,2.374,2791,2.374,2792,2.374,2793,2.374,2794,1.959,2795,2.465,2796,2.167,2797,2.374,2798,2.374,2799,2.374,2800,2.374,2801,2.374,2802,2.374,2803,2.374,2804,2.374,2805,2.374,2806,2.374,2807,2.374,2808,2.374,2809,2.374,2810,2.374,2811,3.469,2812,3.469,2813,2.374,2814,2.374,2815,2.374,2816,2.374,2817,2.374,2818,2.374,2819,2.374,2820,2.374,2821,2.374,2822,2.374,2823,2.374,2824,2.374,2825,4.099,2826,2.374,2827,2.374,2828,2.374,2829,2.374,2830,2.374,2831,2.374,2832,2.374,2833,2.374,2834,2.374,2835,2.374,2836,2.374,2837,2.374,2838,2.374,2839,2.374,2840,2.374,2841,2.374,2842,2.374,2843,2.374,2844,2.374,2845,2.374,2846,2.374,2847,2.374,2848,2.374,2849,2.374,2850,2.374,2851,2.374,2852,2.374,2853,2.374,2854,3.469,2855,2.374,2856,2.374,2857,2.374,2858,2.374,2859,2.374,2860,2.374,2861,1.959,2862,2.374,2863,2.374,2864,2.374,2865,2.374,2866,2.374,2867,2.374,2868,2.374,2869,2.374,2870,2.374,2871,2.374,2872,2.374,2873,2.374,2874,3.469,2875,2.374,2876,2.374,2877,2.374,2878,2.374,2879,2.374,2880,2.374,2881,2.374,2882,2.374,2883,2.374,2884,2.374,2885,3.469,2886,3.469,2887,2.374,2888,2.374,2889,2.374,2890,2.374,2891,2.374,2892,2.374,2893,2.374,2894,2.374,2895,2.374,2896,2.374,2897,2.374,2898,2.374,2899,2.374,2900,2.374,2901,2.374,2902,2.374,2903,2.374,2904,2.374,2905,2.374,2906,2.374,2907,2.374,2908,2.374,2909,2.374,2910,2.374,2911,2.374,2912,2.374,2913,2.374,2914,3.231,2915,5.304,2916,5.635,2917,5.497,2918,2.374,2919,2.374,2920,2.374,2921,2.374,2922,2.374,2923,2.374,2924,2.374,2925,2.374,2926,2.374,2927,2.374,2928,2.374,2929,2.374,2930,3.469,2931,2.374,2932,3.469,2933,3.469,2934,2.374,2935,2.374,2936,2.374,2937,2.374,2938,3.469,2939,2.374,2940,2.374,2941,2.374,2942,2.374,2943,2.374,2944,2.374,2945,2.374,2946,2.374,2947,2.374,2948,3.469,2949,2.279,2950,2.374,2951,4.099,2952,3.384,2953,3.469,2954,3.469,2955,3.469,2956,4.509,2957,2.374,2958,2.374,2959,2.374,2960,2.374,2961,2.374,2962,2.374,2963,3.469,2964,4.796,2965,2.374,2966,2.393,2967,2.374,2968,2.374,2969,4.509,2970,2.374,2971,4.509,2972,2.374,2973,2.374,2974,1.184,2975,2.374,2976,2.374,2977,2.374,2978,2.374,2979,3.469,2980,2.374,2981,2.374,2982,2.374,2983,2.374,2984,2.374,2985,2.374,2986,2.374,2987,2.374,2988,2.045,2989,3.469,2990,2.374,2991,2.374,2992,2.374,2993,4.509,2994,2.374,2995,2.374,2996,2.374,2997,3.203,2998,2.374,2999,2.374,3000,1.959,3001,2.374,3002,2.374,3003,2.374,3004,2.374,3005,2.374,3006,2.374,3007,2.374,3008,2.374,3009,2.374,3010,2.374,3011,2.374,3012,2.374,3013,2.374,3014,2.374,3015,1.959,3016,2.374,3017,5.009,3018,2.374,3019,2.374,3020,3.469,3021,2.374,3022,2.374,3023,2.374,3024,2.374,3025,2.374,3026,2.374,3027,2.374,3028,2.374,3029,2.374,3030,2.374,3031,2.374,3032,2.374,3033,2.374,3034,2.374,3035,2.374,3036,2.374,3037,2.374,3038,2.374,3039,3.469,3040,2.374,3041,2.374,3042,2.374,3043,2.374,3044,2.374,3045,2.374,3046,2.374,3047,2.374,3048,2.374,3049,2.374,3050,2.374,3051,2.374,3052,2.374,3053,2.374,3054,2.374,3055,2.374,3056,2.374,3057,2.374,3058,2.374,3059,4.099,3060,4.509,3061,4.099,3062,4.509,3063,4.099,3064,4.099,3065,4.099,3066,2.374,3067,2.374,3068,2.374,3069,2.374,3070,2.374,3071,2.374,3072,2.374,3073,2.374,3074,3.469,3075,2.374,3076,2.374,3077,4.099,3078,2.374,3079,2.374,3080,2.374,3081,2.374,3082,2.374,3083,2.374,3084,2.374,3085,2.374,3086,4.099,3087,2.374,3088,1.687,3089,2.374,3090,2.374,3091,2.374,3092,2.374,3093,2.374,3094,2.374,3095,2.374,3096,2.374,3097,2.374,3098,2.374,3099,2.374,3100,2.374,3101,2.374,3102,1.959,3103,2.374,3104,2.374,3105,2.374,3106,2.374,3107,2.374,3108,2.374,3109,1.959,3110,2.374,3111,2.374,3112,2.374,3113,2.374,3114,2.374,3115,2.374,3116,2.374,3117,3.676,3118,5.009,3119,5.009,3120,3.676,3121,2.374,3122,2.374,3123,2.374,3124,2.374,3125,2.374,3126,2.374,3127,2.374,3128,2.374,3129,4.099,3130,2.374,3131,3.469,3132,4.099,3133,3.469,3134,2.374,3135,2.374,3136,2.374,3137,2.374,3138,2.374,3139,2.374,3140,2.374,3141,2.374,3142,2.374,3143,2.374,3144,2.374,3145,2.374,3146,2.374,3147,2.374,3148,2.374,3149,2.374,3150,2.374,3151,2.374,3152,2.374,3153,2.374,3154,2.374,3155,2.374,3156,2.374,3157,2.374,3158,3.469,3159,2.374,3160,2.374,3161,2.374,3162,2.374,3163,2.374,3164,2.374,3165,2.374,3166,2.374,3167,2.374,3168,2.374,3169,3.469,3170,2.374,3171,2.374,3172,2.374,3173,2.374,3174,2.374,3175,2.374,3176,2.374,3177,2.374,3178,2.374,3179,2.374,3180,2.374,3181,2.374,3182,2.374,3183,2.374,3184,2.374,3185,2.374,3186,2.374,3187,3.469,3188,2.374,3189,2.374,3190,2.374,3191,2.374,3192,2.374,3193,2.374,3194,2.374,3195,2.374,3196,2.374,3197,2.374,3198,2.374,3199,2.374,3200,2.374,3201,2.374,3202,3.469,3203,2.374,3204,2.374,3205,2.374,3206,2.374,3207,2.374,3208,2.374,3209,2.374,3210,2.374,3211,2.374,3212,2.374,3213,2.374,3214,2.374,3215,2.374,3216,3.469,3217,2.374,3218,2.374,3219,2.374,3220,2.374,3221,1.483,3222,2.374,3223,2.374,3224,2.374,3225,2.374,3226,2.374,3227,2.374,3228,2.374,3229,2.374,3230,2.374,3231,2.374,3232,4.099,3233,2.374,3234,2.374,3235,2.374,3236,2.374,3237,1.959,3238,2.374,3239,2.374,3240,2.374,3241,2.374,3242,2.374,3243,2.374,3244,2.374,3245,2.374,3246,2.374,3247,2.374,3248,2.374,3249,2.374,3250,2.374,3251,2.374,3252,2.374,3253,2.374,3254,2.374,3255,2.374,3256,2.374,3257,2.374,3258,2.374,3259,2.374,3260,2.374,3261,3.469,3262,4.509,3263,2.374,3264,5.304,3265,3.469,3266,2.374,3267,2.374,3268,2.374,3269,2.374,3270,2.374,3271,3.469,3272,2.374,3273,2.374,3274,2.374,3275,2.374,3276,2.374,3277,3.469,3278,2.374,3279,2.374,3280,2.374,3281,1.959,3282,2.374,3283,1.687,3284,1.959,3285,1.959,3286,1.959,3287,2.374,3288,2.374,3289,2.374]],["title/1015840",[3290,24.517]],["body/1015840",[16,2.827,29,0.788,53,1.399,71,0.501,86,1.116,87,1.548,92,0.913,101,0.474,118,3.405,121,3.348,122,2.096,125,3.613,144,2.071,150,0.99,157,1.322,163,2.336,239,1.233,292,2.354,293,0.772,296,0.784,308,3.798,309,2.046,430,1.01,479,1.383,614,0.786,616,0.691,689,0.739,748,0.842,833,0.599,853,2.874,892,1.611,915,2.326,928,1.548,1068,2.624,1347,2.202,1349,1.761,1350,2.046,1351,2.046,1360,3.468,1388,3.357,1473,3.798,1535,1.237,1659,1.728,1662,3.236,1715,1.542,1911,4.336,1925,2.046,1995,5.076,2000,2.984,2095,2.964,2128,4.028,2132,3.798,2165,2.046,2187,2.046,2255,1.116,2263,2.046,2264,2.046,2774,2.985,3291,2.479,3292,2.479,3293,2.479,3294,2.479,3295,3.579,3296,2.479,3297,2.479,3298,2.479,3299,2.479,3300,2.479,3301,2.479,3302,2.479,3303,2.479,3304,2.479,3305,2.479,3306,2.479,3307,2.479,3308,2.479,3309,2.479,3310,4.201,3311,2.479,3312,2.479,3313,2.479,3314,2.479,3315,2.479,3316,2.479,3317,2.479,3318,2.479,3319,2.479,3320,2.479,3321,2.479,3322,2.479,3323,2.479,3324,2.479,3325,2.479,3326,2.479,3327,5.468,3328,2.479,3329,2.479,3330,3.579,3331,2.479,3332,2.479,3333,4.327,3334,2.479,3335,2.479,3336,2.479,3337,2.479,3338,2.479,3339,2.479,3340,2.479,3341,2.479,3342,2.479,3343,2.479,3344,5.085,3345,2.479,3346,2.479,3347,2.479,3348,2.479,3349,2.479,3350,4.88,3351,2.479,3352,2.479,3353,2.479,3354,2.479,3355,2.479,3356,2.479,3357,2.479,3358,2.479,3359,2.479,3360,2.479,3361,2.479,3362,2.479,3363,2.479,3364,2.479,3365,2.479,3366,2.479,3367,2.479,3368,2.479,3369,2.479,3370,2.479,3371,2.479,3372,2.479,3373,2.479,3374,2.479,3375,6.037,3376,6.091,3377,5.367,3378,2.479,3379,3.579,3380,2.479,3381,2.479,3382,2.479,3383,2.046,3384,2.479,3385,4.201,3386,4.201,3387,3.579,3388,2.543,3389,2.479,3390,2.479,3391,2.479,3392,2.479,3393,2.046,3394,2.479,3395,1.761,3396,2.479,3397,2.046,3398,2.479,3399,2.479,3400,2.479,3401,2.479,3402,2.479,3403,2.479,3404,3.579,3405,4.028,3406,2.479,3407,2.479,3408,2.479,3409,2.479,3410,2.479,3411,2.479,3412,2.479,3413,2.479,3414,2.479,3415,2.479,3416,2.479,3417,2.479,3418,2.479,3419,4.601,3420,4.601,3421,2.479,3422,2.479,3423,2.479,3424,2.479,3425,2.479,3426,2.479,3427,2.479,3428,2.479,3429,2.479,3430,2.479,3431,2.479,3432,2.479,3433,2.479,3434,2.479,3435,2.479,3436,2.479,3437,2.479,3438,2.479,3439,2.479,3440,2.479,3441,2.479,3442,2.479,3443,3.579,3444,2.479,3445,2.479,3446,2.479,3447,2.479,3448,2.479,3449,2.479,3450,2.479,3451,2.479,3452,2.479,3453,2.479,3454,2.479,3455,3.269,3456,2.479,3457,2.479,3458,2.479,3459,2.479,3460,2.479,3461,1.761,3462,2.479,3463,2.046,3464,2.046,3465,2.046,3466,2.046,3467,2.479,3468,2.479,3469,2.479,3470,2.479,3471,2.479,3472,2.479,3473,2.479,3474,3.579,3475,2.479,3476,2.479,3477,2.479,3478,2.479,3479,2.479,3480,2.479,3481,2.479,3482,2.479,3483,2.479,3484,2.479,3485,2.479,3486,2.479,3487,2.479,3488,4.201,3489,2.479,3490,2.479,3491,2.479,3492,2.479,3493,2.479,3494,2.479,3495,2.479,3496,2.479,3497,2.479,3498,2.479,3499,2.479,3500,2.479,3501,2.479,3502,2.479,3503,2.479,3504,2.479,3505,2.479,3506,2.479,3507,2.479,3508,2.479,3509,2.479,3510,2.479,3511,3.579,3512,2.479,3513,4.201,3514,2.479,3515,2.479,3516,2.479,3517,2.479,3518,2.479,3519,2.479,3520,2.479,3521,2.479,3522,2.479,3523,2.479,3524,2.479,3525,4.601,3526,5.085,3527,2.479,3528,2.479,3529,2.479,3530,2.479,3531,2.479,3532,2.479,3533,3.579,3534,2.479,3535,2.479,3536,2.479,3537,2.479,3538,2.479,3539,2.479,3540,2.479,3541,2.479,3542,3.579,3543,4.88,3544,2.479,3545,2.479,3546,4.201,3547,2.479,3548,2.479,3549,2.479,3550,2.479,3551,2.479,3552,2.479,3553,2.479,3554,2.479,3555,2.479,3556,2.479,3557,2.046,3558,2.479,3559,2.479,3560,2.479,3561,2.479,3562,2.479,3563,2.479,3564,2.479,3565,2.479,3566,2.479,3567,2.479,3568,2.479,3569,2.479,3570,2.479,3571,2.479,3572,2.479,3573,2.479,3574,2.479,3575,3.579,3576,2.479,3577,2.479,3578,2.479,3579,2.479,3580,2.479,3581,2.479,3582,2.479,3583,2.479,3584,2.479,3585,2.479,3586,2.479,3587,2.479,3588,2.479,3589,2.479,3590,2.479,3591,2.479,3592,2.479,3593,2.479,3594,2.479,3595,2.479,3596,2.479,3597,2.479,3598,2.479,3599,2.479,3600,2.479,3601,2.479,3602,3.126,3603,3.579,3604,2.479,3605,4.201,3606,4.201,3607,3.579,3608,2.479,3609,2.479,3610,2.479,3611,2.479,3612,2.479,3613,2.479,3614,3.579,3615,2.479,3616,2.479,3617,2.479,3618,2.479,3619,2.479,3620,2.479,3621,2.479,3622,2.479,3623,2.479,3624,2.479,3625,3.579,3626,5.085,3627,4.43,3628,3.579,3629,5.085,3630,4.601,3631,2.479,3632,2.479,3633,2.479,3634,4.601,3635,4.601,3636,2.479,3637,2.479,3638,2.479,3639,2.479,3640,2.479,3641,2.479,3642,2.479,3643,2.479,3644,3.579,3645,3.579,3646,3.579,3647,2.479,3648,2.479,3649,2.479,3650,2.479,3651,2.479,3652,2.479,3653,2.479,3654,2.479,3655,2.479,3656,2.479,3657,2.479,3658,2.479,3659,2.479,3660,2.479,3661,2.479,3662,2.479,3663,2.479,3664,2.479,3665,2.479,3666,2.479,3667,2.479,3668,2.479,3669,2.479,3670,2.479,3671,2.479,3672,2.479,3673,2.479,3674,2.479,3675,2.479,3676,2.479,3677,2.479,3678,2.479,3679,3.579,3680,2.479,3681,2.479,3682,2.479,3683,2.479,3684,2.479,3685,2.479,3686,2.479,3687,2.479,3688,2.479,3689,2.479,3690,2.479,3691,2.479,3692,2.479,3693,2.479,3694,2.479,3695,2.479,3696,2.479,3697,2.479,3698,2.479,3699,2.479,3700,2.479,3701,2.479,3702,2.479,3703,2.479,3704,2.479,3705,2.479,3706,2.479,3707,2.479,3708,2.479,3709,2.479,3710,2.479,3711,2.479,3712,2.479,3713,2.479,3714,2.479,3715,2.479,3716,2.479,3717,2.479,3718,2.479,3719,2.479,3720,2.479,3721,2.479,3722,2.479,3723,2.479,3724,2.479,3725,2.955,3726,3.579,3727,2.479,3728,2.479,3729,2.479,3730,2.479,3731,2.479,3732,2.479,3733,2.479,3734,2.046,3735,2.479,3736,2.479,3737,2.479,3738,2.479,3739,2.479,3740,2.479,3741,2.479,3742,2.479,3743,2.479]],["title/3440655",[3744,21.103]],["body/3440655",[29,0.657,53,1.528,59,0.856,67,1.675,71,0.519,84,2.83,86,1.573,92,0.561,97,2.483,101,0.45,109,2.958,114,3.88,144,1.424,150,0.854,151,2.039,157,1.291,239,1.24,245,3.239,293,0.432,296,0.561,298,2.483,299,2.483,404,4.083,408,1.573,412,1.943,422,2.261,471,3.639,479,1.31,481,1.171,496,2.483,497,2.183,499,4.012,500,4.012,734,1.943,833,0.536,837,3.572,915,1.291,1112,1.617,1347,1.291,1535,2.817,1694,2.483,1715,1.171,1794,2.261,1797,2.039,1832,1.171,2213,2.261,2341,1.845,2392,3.219,2394,2.483,2602,2.654,2657,2.261,2683,1.847,2786,2.261,2914,2.183,2974,1.744,2988,2.261,3745,3.495,3746,3.495,3747,3.495,3748,2.885,3749,3.495,3750,3.495,3751,3.495,3752,3.495,3753,3.495,3754,3.495,3755,3.572,3756,3.495,3757,4.39,3758,4.39,3759,5.51,3760,4.531,3761,4.39,3762,5.027,3763,3.495,3764,2.885,3765,3.495,3766,3.495,3767,3.495,3768,3.495,3769,3.495,3770,3.495,3771,4.39,3772,3.495,3773,3.495,3774,5.027,3775,3.495,3776,3.495,3777,3.495,3778,3.495,3779,5.027,3780,3.495,3781,5.027,3782,2.885,3783,5.027,3784,3.495,3785,3.495,3786,3.495,3787,1.673,3788,1.943,3789,3.495,3790,3.495,3791,3.495,3792,3.495,3793,3.495,3794,3.495,3795,3.495,3796,2.885,3797,3.495,3798,3.495,3799,3.495,3800,5.027,3801,4.531,3802,3.495,3803,3.495,3804,4.531,3805,3.495,3806,4.531,3807,3.495,3808,3.495,3809,3.495,3810,3.495,3811,4.531,3812,3.495,3813,3.495,3814,3.495,3815,3.495,3816,3.495,3817,3.495,3818,3.495,3819,3.495,3820,2.885,3821,3.495,3822,4.531,3823,3.495,3824,3.495,3825,4.809,3826,3.219,3827,4.661,3828,4.531,3829,3.495,3830,2.519,3831,2.795,3832,3.495,3833,2.483,3834,3.495,3835,3.495,3836,3.495,3837,3.495,3838,2.885,3839,4.531,3840,3.495,3841,4.15,3842,3.495,3843,3.495,3844,3.495,3845,3.495,3846,3.495,3847,3.495,3848,3.495,3849,3.495,3850,3.495,3851,3.495,3852,3.495,3853,3.495,3854,3.495,3855,3.495,3856,3.495,3857,3.495,3858,3.495,3859,3.495,3860,3.495,3861,3.495,3862,2.483,3863,2.483,3864,2.483,3865,2.885,3866,2.885,3867,3.495,3868,3.495,3869,3.495,3870,3.495,3871,4.15,3872,3.495,3873,3.495,3874,3.495,3875,3.495,3876,3.495,3877,2.885,3878,3.495,3879,3.495,3880,3.495,3881,3.495,3882,3.495,3883,3.495,3884,3.495,3885,3.495,3886,3.495,3887,2.183,3888,3.495,3889,3.572,3890,4.531,3891,3.495,3892,3.495,3893,3.495,3894,3.495,3895,2.183,3896,2.83,3897,1.744,3898,3.495,3899,3.495,3900,2.183,3901,3.495,3902,3.495,3903,3.495,3904,3.495,3905,3.495,3906,3.495,3907,3.495,3908,3.495,3909,2.885,3910,3.495,3911,3.495,3912,3.495,3913,3.495,3914,3.495,3915,3.495,3916,3.495,3917,3.495,3918,3.495,3919,3.495,3920,3.495,3921,3.495,3922,3.495,3923,2.885,3924,3.495,3925,3.495,3926,3.495,3927,3.495,3928,3.495,3929,3.495,3930,3.495,3931,3.14,3932,2.885,3933,3.495,3934,4.39,3935,3.495,3936,3.495,3937,3.495,3938,3.495,3939,3.495,3940,3.495,3941,3.495,3942,3.495,3943,3.495,3944,3.495,3945,3.495,3946,3.495,3947,3.495,3948,3.495,3949,3.495,3950,3.495,3951,3.495,3952,3.495,3953,2.885,3954,2.885,3955,3.495,3956,3.495,3957,3.495,3958,3.495,3959,3.495,3960,3.495,3961,3.495,3962,3.495,3963,4.531,3964,3.495,3965,3.495,3966,3.495,3967,3.495,3968,3.495,3969,3.495,3970,3.495,3971,3.495,3972,3.495,3973,3.495,3974,3.495,3975,3.495,3976,3.495,3977,4.15,3978,3.495,3979,4.39,3980,3.572,3981,2.885,3982,2.183,3983,2.885,3984,2.885,3985,2.885,3986,2.885,3987,3.495,3988,4.15,3989,3.495,3990,3.495,3991,2.885,3992,4.531,3993,2.885,3994,3.495,3995,3.495,3996,3.495,3997,3.495,3998,3.495,3999,3.495,4000,3.495,4001,3.495,4002,3.74,4003,4.531,4004,3.495,4005,4.531,4006,3.495,4007,3.495,4008,3.495,4009,3.495,4010,3.495,4011,3.495,4012,3.495,4013,3.495,4014,3.495,4015,3.495,4016,3.495,4017,3.495,4018,3.495,4019,3.495,4020,3.495,4021,3.495,4022,3.495,4023,3.495,4024,3.495,4025,2.885,4026,2.885,4027,3.495,4028,4.531,4029,3.495,4030,2.885,4031,3.495,4032,3.495,4033,3.495,4034,2.885,4035,3.495,4036,3.495,4037,2.183,4038,3.495,4039,3.495,4040,2.885,4041,3.74,4042,3.495,4043,2.885,4044,3.495,4045,3.495,4046,3.495,4047,3.495,4048,3.495,4049,3.495,4050,3.495,4051,3.495,4052,3.495,4053,2.885,4054,3.495,4055,3.495,4056,3.495,4057,3.495,4058,3.495,4059,3.495,4060,3.495,4061,3.495,4062,4.531,4063,3.495,4064,3.495,4065,3.495,4066,3.495,4067,3.495,4068,2.885,4069,3.495,4070,3.74,4071,2.885,4072,3.495,4073,3.495,4074,3.495,4075,3.495,4076,3.495,4077,3.495]],["title/1015820",[4078,21.103]],["body/1015820",[29,0.635,53,1.301,62,1.916,92,0.939,101,0.465,114,3.211,144,2.329,150,0.826,195,1.58,292,1.743,293,0.635,296,0.918,1685,3.652,2347,3.531,2603,2.672,2778,1.899,2780,2.111,3826,3.039,4079,4.278,4080,4.278,4081,4.278,4082,4.278,4083,4.278,4084,4.278,4085,4.278,4086,4.278,4087,4.278,4088,4.278,4089,4.278,4090,4.278,4091,4.278,4092,5.14,4093,5.14,4094,4.278,4095,4.278,4096,4.278,4097,4.278,4098,4.278,4099,3.039,4100,4.278,4101,4.278,4102,4.278,4103,4.278,4104,4.278,4105,4.278,4106,4.278,4107,4.278,4108,4.278,4109,4.278,4110,4.278,4111,4.278,4112,4.278,4113,4.278,4114,5.717,4115,4.278,4116,5.939,4117,4.278,4118,2.314,4119,5.14,4120,4.278,4121,6.129,4122,3.531,4123,5.14,4124,4.278,4125,3.652,4126,4.278,4127,5.14,4128,4.278,4129,4.278,4130,4.278,4131,4.278,4132,4.278,4133,4.278,4134,4.278,4135,4.278,4136,4.278,4137,4.278,4138,4.278,4139,4.278,4140,4.278,4141,4.278,4142,4.278,4143,4.278,4144,4.278,4145,4.278,4146,4.278,4147,4.278,4148,5.14,4149,4.278,4150,3.531,4151,4.278,4152,4.278,4153,4.278,4154,4.278,4155,4.278,4156,4.278,4157,4.278,4158,4.278,4159,4.278,4160,5.511,4161,5.511,4162,5.14,4163,5.14,4164,5.511,4165,4.278,4166,4.278,4167,4.278,4168,4.278,4169,4.278,4170,4.278,4171,4.278,4172,5.511,4173,4.278,4174,4.278,4175,4.278,4176,4.278,4177,4.278,4178,4.278,4179,4.278,4180,4.278,4181,4.278,4182,4.278,4183,4.278,4184,4.278,4185,4.278,4186,4.278,4187,4.278,4188,4.278,4189,4.278,4190,4.278,4191,4.278,4192,4.278,4193,4.278,4194,4.278,4195,4.278,4196,4.278,4197,4.278,4198,4.278,4199,4.278,4200,4.278,4201,4.278,4202,4.278,4203,4.278,4204,4.278,4205,4.278,4206,4.278,4207,4.278,4208,4.278,4209,5.14,4210,4.278,4211,4.278,4212,4.278,4213,3.039,4214,4.278,4215,4.278,4216,3.039,4217,4.278,4218,4.278,4219,4.278,4220,4.278,4221,4.278,4222,4.278,4223,4.278,4224,4.278]],["title/2949166",[4225,18.552]],["body/2949166",[29,0.71,53,1.059,59,0.824,67,1.374,71,0.525,73,3.731,92,0.953,101,0.468,103,1.673,137,2.823,150,0.953,239,1.235,293,0.71,296,0.726,479,0.783,481,1.682,614,0.64,689,0.559,706,1.789,833,0.637,853,3.134,1112,1.526,1347,1.853,1388,1.936,1659,1.673,1832,1.844,2439,3.523,2441,2.121,2450,2.814,2501,1.737,2602,1.737,2641,2.474,2683,1.78,2740,2.823,2778,1.669,2780,1.669,2988,2.865,3117,2.474,3120,2.474,3787,2.033,3833,2.474,4068,3.731,4118,2.034,4226,3.482,4227,3.482,4228,3.482,4229,3.482,4230,3.482,4231,3.482,4232,4.384,4233,4.142,4234,3.482,4235,2.874,4236,3.482,4237,4.74,4238,3.482,4239,2.874,4240,3.482,4241,2.874,4242,3.482,4243,2.874,4244,3.482,4245,2.874,4246,5.311,4247,3.482,4248,3.482,4249,3.482,4250,3.482,4251,3.482,4252,3.482,4253,3.482,4254,3.482,4255,3.482,4256,3.482,4257,3.482,4258,3.482,4259,3.482,4260,3.482,4261,3.482,4262,3.482,4263,3.482,4264,3.482,4265,3.482,4266,3.482,4267,3.482,4268,3.482,4269,3.482,4270,3.482,4271,5.018,4272,3.482,4273,3.482,4274,3.482,4275,3.482,4276,2.874,4277,3.482,4278,2.874,4279,2.874,4280,3.482,4281,3.482,4282,3.482,4283,3.482,4284,3.482,4285,3.482,4286,3.482,4287,3.482,4288,3.482,4289,3.482,4290,3.482,4291,2.175,4292,3.731,4293,3.482,4294,2.175,4295,4.384,4296,2.513,4297,2.175,4298,3.482,4299,3.482,4300,3.482,4301,3.482,4302,3.482,4303,3.482,4304,3.482,4305,3.482,4306,3.482,4307,3.482,4308,3.482,4309,3.482,4310,3.482,4311,3.482,4312,3.482,4313,3.482,4314,3.482,4315,3.482,4316,3.482,4317,5.018,4318,3.482,4319,5.977,4320,3.482,4321,3.482,4322,4.384,4323,3.482,4324,4.543,4325,3.482,4326,3.482,4327,3.482,4328,3.482,4329,3.482,4330,5.018,4331,4.52,4332,3.482,4333,3.482,4334,5.018,4335,3.482,4336,3.482,4337,3.482,4338,3.482,4339,3.482,4340,3.482,4341,3.482,4342,3.482,4343,3.482,4344,3.482,4345,3.482,4346,3.482,4347,3.482,4348,3.482,4349,3.482,4350,3.482,4351,3.482,4352,3.482,4353,3.482,4354,4.52,4355,3.482,4356,3.482,4357,5.742,4358,3.482,4359,4.52,4360,5.018,4361,3.482,4362,4.384,4363,3.482,4364,3.051,4365,3.482,4366,3.482,4367,3.482,4368,3.482,4369,2.874,4370,3.482,4371,3.482,4372,3.482,4373,3.482,4374,4.52,4375,4.136,4376,5.311,4377,5.311,4378,4.52,4379,3.482,4380,3.482,4381,3.482,4382,3.482,4383,5.64,4384,3.482,4385,3.482,4386,3.482,4387,3.482,4388,3.482,4389,4.52,4390,4.52,4391,4.52,4392,4.52,4393,4.52,4394,4.52,4395,4.52,4396,4.52,4397,3.482,4398,3.482,4399,3.482,4400,3.482,4401,5.311,4402,3.482,4403,3.565,4404,5.311,4405,3.482,4406,3.482,4407,3.482,4408,3.482,4409,3.482,4410,3.482,4411,3.482,4412,3.482,4413,3.482,4414,3.482,4415,3.482,4416,3.482,4417,3.731,4418,3.482,4419,3.482,4420,3.482,4421,3.482,4422,3.482,4423,4.934,4424,3.482,4425,3.482,4426,3.482,4427,2.474,4428,3.482,4429,3.482,4430,3.482,4431,4.52,4432,3.482,4433,3.482,4434,4.52,4435,3.482,4436,3.482,4437,3.482,4438,3.482,4439,3.482,4440,3.482,4441,3.482,4442,4.52,4443,3.482,4444,3.482,4445,3.482,4446,3.482,4447,3.482,4448,4.805,4449,3.482,4450,3.482,4451,3.482,4452,3.482,4453,3.482,4454,3.482,4455,3.482,4456,3.482,4457,3.482,4458,3.482,4459,3.482,4460,3.482,4461,3.482,4462,3.482,4463,3.482,4464,3.482,4465,3.482,4466,3.482,4467,3.482,4468,3.482,4469,3.482,4470,3.482,4471,2.874,4472,4.52,4473,3.482,4474,3.482,4475,2.874,4476,3.482,4477,3.482,4478,3.482,4479,3.482,4480,3.482,4481,3.482,4482,3.482,4483,3.482,4484,1.936,4485,2.175,4486,1.936,4487,2.175,4488,2.474,4489,3.482,4490,3.482,4491,3.482,4492,3.482,4493,2.474,4494,2.874,4495,2.874,4496,2.874,4497,3.482,4498,3.482,4499,3.482,4500,3.482,4501,3.482,4502,3.482,4503,3.482,4504,3.482,4505,3.482,4506,3.482,4507,4.52,4508,3.482,4509,3.482,4510,3.482,4511,3.482,4512,3.482,4513,3.482,4514,3.482,4515,3.482,4516,3.482,4517,3.482]],["title/3440657",[4518,21.103]],["body/3440657",[29,0.656,53,1.75,59,0.868,62,1.044,67,1.727,71,0.53,92,0.763,101,0.467,103,0.947,150,0.924,151,2.137,157,1.15,239,1.215,293,0.628,296,0.674,424,2.571,464,3.159,479,1.068,614,0.774,616,0.751,689,0.5,737,1.934,748,0.763,833,0.63,1002,1.15,1004,0.858,1112,1.662,1347,1.55,1526,2.213,1535,1.554,1659,1.276,1715,1.703,1794,2.872,1797,2.619,1832,1.044,1930,1.71,2341,2.07,2432,2.622,2436,2.622,2602,2.37,2603,1.945,2683,2.014,2786,2.095,2949,1.732,2974,2.095,2988,1.554,3787,1.754,3788,1.732,3827,3.92,3863,4.319,3897,2.37,3900,1.945,3980,4.251,3982,2.966,4232,3.465,4233,2.571,4235,2.571,4237,3.465,4239,2.571,4241,2.571,4243,2.571,4245,3.465,4403,2.213,4423,2.571,4448,2.571,4475,2.571,4493,2.213,4494,2.571,4495,2.571,4496,2.571,4519,3.114,4520,3.114,4521,3.114,4522,3.114,4523,3.114,4524,3.114,4525,3.114,4526,3.114,4527,3.114,4528,3.114,4529,3.114,4530,3.114,4531,3.114,4532,3.114,4533,3.114,4534,3.114,4535,3.114,4536,3.114,4537,3.114,4538,3.114,4539,3.114,4540,3.114,4541,3.114,4542,3.114,4543,3.114,4544,3.114,4545,3.114,4546,4.749,4547,4.749,4548,4.749,4549,4.749,4550,4.749,4551,4.749,4552,4.749,4553,4.749,4554,3.114,4555,3.114,4556,3.114,4557,3.114,4558,2.571,4559,3.114,4560,3.114,4561,3.114,4562,3.114,4563,3.114,4564,3.114,4565,3.114,4566,3.114,4567,3.114,4568,4.198,4569,4.198,4570,4.198,4571,4.198,4572,2.571,4573,3.114,4574,3.114,4575,3.114,4576,3.114,4577,3.114,4578,2.571,4579,3.114,4580,3.114,4581,3.114,4582,3.114,4583,3.114,4584,3.114,4585,3.114,4586,3.114,4587,3.114,4588,3.114,4589,3.114,4590,3.114,4591,3.114,4592,3.114,4593,3.114,4594,3.114,4595,3.114,4596,3.114,4597,3.114,4598,3.114,4599,3.114,4600,3.114,4601,3.114,4602,3.114,4603,3.114,4604,3.114,4605,3.114,4606,3.114,4607,3.114,4608,3.114,4609,3.114,4610,4.195,4611,3.114,4612,3.114,4613,3.114,4614,3.114,4615,3.114,4616,3.114,4617,3.114,4618,3.114,4619,3.114,4620,3.114,4621,3.114,4622,3.114,4623,3.114,4624,3.114,4625,3.114,4626,3.114,4627,3.114,4628,4.198,4629,3.114,4630,3.114,4631,3.92,4632,2.571,4633,4.198,4634,3.114,4635,4.198,4636,2.571,4637,3.114,4638,3.114,4639,2.571,4640,2.983,4641,3.114,4642,3.114,4643,4.198,4644,3.114,4645,4.198,4646,3.114,4647,3.114,4648,3.114,4649,3.114,4650,3.114,4651,3.114,4652,3.114,4653,3.114,4654,3.114,4655,3.114,4656,3.114,4657,3.114,4658,3.114,4659,3.114,4660,3.114,4661,3.114,4662,3.114,4663,3.114,4664,3.114,4665,3.114,4666,3.114,4667,3.114,4668,3.114,4669,3.114,4670,3.114,4671,3.114,4672,3.114,4673,3.114,4674,3.114,4675,3.114,4676,3.114,4677,2.571,4678,3.114,4679,2.571,4680,3.114,4681,3.114,4682,4.198,4683,4.198,4684,2.571,4685,4.198,4686,3.114,4687,4.198,4688,3.114,4689,4.198,4690,3.114,4691,4.198,4692,3.114,4693,4.198,4694,3.114,4695,4.198,4696,3.114,4697,4.198,4698,3.114,4699,3.114,4700,3.114,4701,3.114,4702,3.114,4703,3.114,4704,3.114,4705,3.114,4706,3.114,4707,2.983,4708,4.198,4709,3.465,4710,3.465,4711,3.114,4712,3.114,4713,3.114,4714,2.983,4715,3.114,4716,4.198,4717,4.198,4718,4.198,4719,4.749,4720,3.114,4721,3.114,4722,3.114,4723,4.198,4724,3.114,4725,3.114,4726,3.114,4727,3.114,4728,3.114,4729,3.114,4730,4.198,4731,3.114,4732,3.114,4733,3.114,4734,3.114,4735,3.114,4736,2.571,4737,3.114,4738,3.114,4739,3.114,4740,3.114,4741,3.114,4742,2.571,4743,3.114,4744,3.114,4745,3.114,4746,3.114,4747,2.571,4748,3.114,4749,3.114,4750,3.114,4751,3.114,4752,3.114,4753,3.114,4754,3.114,4755,3.114,4756,4.198,4757,3.114,4758,3.114,4759,3.114,4760,2.571,4761,3.114,4762,3.114,4763,3.114,4764,3.114,4765,3.114,4766,3.114,4767,3.114,4768,3.114,4769,3.114,4770,3.114,4771,3.114,4772,3.114,4773,3.114,4774,3.114,4775,3.114,4776,3.114,4777,3.114,4778,3.114,4779,3.114,4780,2.571,4781,3.114,4782,3.114,4783,3.114,4784,3.114,4785,3.114,4786,3.114,4787,3.114,4788,3.114,4789,3.114,4790,3.114,4791,3.114,4792,3.114,4793,3.114,4794,3.114,4795,3.114,4796,3.114,4797,3.114,4798,3.114,4799,3.114,4800,3.114,4801,3.114,4802,3.114,4803,3.114,4804,3.114,4805,3.114,4806,3.114,4807,3.114,4808,3.114,4809,3.114,4810,5.082,4811,3.114,4812,3.114,4813,5.587,4814,4.198,4815,1.945,4816,3.114,4817,3.114,4818,4.198,4819,3.114,4820,4.198,4821,3.114,4822,3.114,4823,3.114,4824,3.114,4825,3.114,4826,3.114,4827,3.114,4828,3.114,4829,3.114,4830,3.114,4831,3.114,4832,5.587,4833,3.114,4834,3.114,4835,4.198,4836,3.114,4837,3.114,4838,3.114,4839,5.082,4840,5.306,4841,4.749,4842,5.306,4843,5.306,4844,3.114,4845,4.198,4846,4.749,4847,4.198,4848,4.749,4849,4.749,4850,3.114,4851,3.114,4852,3.114,4853,3.114,4854,3.114,4855,2.213,4856,3.114,4857,3.611,4858,3.114,4859,3.114,4860,3.114,4861,2.571,4862,3.114,4863,3.114,4864,3.114,4865,3.114,4866,3.114,4867,3.114,4868,4.198,4869,4.198,4870,4.198,4871,4.198,4872,4.198,4873,3.114,4874,3.114,4875,5.082,4876,3.114,4877,3.114,4878,4.749,4879,3.114,4880,3.114,4881,2.571,4882,3.114,4883,3.114,4884,3.114,4885,3.114,4886,3.114,4887,3.114,4888,3.114,4889,3.114,4890,3.114,4891,3.114,4892,3.114,4893,3.114,4894,3.114,4895,3.114,4896,3.114,4897,3.114,4898,4.749,4899,4.749,4900,4.198,4901,3.114,4902,3.114,4903,3.114,4904,3.114,4905,4.749,4906,3.114,4907,3.114,4908,3.114,4909,3.114,4910,3.114,4911,3.114,4912,3.114,4913,3.114,4914,3.114,4915,3.114,4916,3.114,4917,3.114,4918,3.114,4919,3.114,4920,3.114,4921,3.114,4922,3.114,4923,3.114,4924,3.114,4925,3.114,4926,3.114,4927,3.114,4928,3.114,4929,3.114,4930,3.114,4931,3.114,4932,3.114,4933,3.114,4934,3.114,4935,3.114,4936,3.114,4937,4.749,4938,3.114,4939,5.082,4940,3.114,4941,3.114,4942,3.114,4943,3.114,4944,3.114,4945,3.114,4946,3.114,4947,3.114,4948,3.114,4949,3.114,4950,3.114,4951,3.114,4952,3.114,4953,3.114,4954,3.114,4955,3.114,4956,3.114,4957,4.198,4958,3.114,4959,3.114,4960,3.114,4961,3.114,4962,3.114,4963,3.114,4964,3.114,4965,3.114,4966,3.114,4967,3.114,4968,3.114,4969,3.114,4970,3.114]],["title/1015826",[4971,24.517]],["body/1015826",[0,3.069,607,2.732,2578,3.069,4078,3.491,4972,4.914,4973,4.914,4974,3.491,4975,3.491,4976,4.914,4977,3.491,4978,3.491,4979,3.491]],["title/1015825",[4980,24.517]],["body/1015825",[59,0.859,71,0.424,101,0.422,106,1.519,126,2.213,163,1.693,430,1.24,476,2.513,479,0.684,614,0.786,616,0.786,689,0.845,706,1.917,734,1.693,737,2.262,748,0.892,833,0.602,892,1.37,895,2.163,915,1.527,928,1.901,929,1.693,967,1.861,1002,1.944,1004,1.293,1006,1.385,1007,2.051,1009,3.335,1011,2.582,1084,1.861,1333,2.513,1364,2.37,1365,2.513,1366,4.156,1377,2.063,1383,1.693,1385,2.299,1396,4.585,1397,3.577,1398,2.529,1405,2.512,1499,1.901,1523,2.513,1525,2.513,1532,1.901,1539,3.288,1542,3.74,1543,2.937,1618,1.901,1633,1.901,1666,1.901,1705,2.513,1712,2.113,1715,1.82,1725,2.513,1756,2.163,1930,2.144,2072,2.513,2253,2.163,2255,1.861,2256,2.163,2441,2.176,2447,2.61,2448,2.582,2450,2.627,2526,2.163,2528,2.513,4364,2.771,4375,4.213,4981,3.044,4982,3.044,4983,3.044,4984,3.044,4985,3.044,4986,3.044,4987,3.044,4988,3.044,4989,3.044,4990,3.044,4991,3.044,4992,3.044,4993,3.044,4994,3.044,4995,3.044,4996,3.044,4997,3.044,4998,3.044,4999,3.044,5000,3.044,5001,3.044,5002,3.044,5003,3.044,5004,3.044,5005,3.044,5006,3.875,5007,3.044,5008,3.044,5009,3.044,5010,2.513,5011,3.044,5012,3.044,5013,3.044,5014,3.044,5015,3.044,5016,3.044,5017,3.044,5018,3.044,5019,3.044,5020,2.513,5021,3.044,5022,3.044,5023,3.044,5024,3.044,5025,3.044,5026,3.044,5027,3.044,5028,2.513,5029,2.513,5030,3.044,5031,3.044,5032,3.044,5033,3.044,5034,3.044,5035,3.044,5036,3.044,5037,3.044,5038,3.044,5039,3.044,5040,3.044,5041,3.044,5042,3.044,5043,3.044,5044,3.044,5045,3.044,5046,3.044,5047,3.044,5048,3.044,5049,3.044,5050,3.044,5051,3.044,5052,3.044,5053,3.044,5054,3.044,5055,3.044,5056,3.044,5057,3.044,5058,3.044,5059,3.044,5060,3.044,5061,3.044,5062,3.044,5063,3.044,5064,3.044,5065,3.044,5066,3.044,5067,3.044,5068,4.134,5069,2.513,5070,4.134,5071,2.513,5072,2.513,5073,2.513,5074,3.044,5075,2.163,5076,3.044,5077,3.044,5078,3.044,5079,3.044,5080,3.044,5081,3.044,5082,3.044,5083,3.044,5084,4.134,5085,3.044,5086,3.044,5087,3.044,5088,3.044,5089,3.044,5090,3.044,5091,3.044,5092,3.044,5093,3.044,5094,3.044,5095,3.044,5096,3.044,5097,3.044,5098,3.044,5099,3.044,5100,4.134,5101,3.044,5102,3.044,5103,3.044,5104,3.044,5105,3.044,5106,3.044,5107,3.044,5108,3.044,5109,3.044,5110,3.044,5111,3.044,5112,3.044,5113,3.044,5114,3.044,5115,3.044,5116,3.044,5117,3.044,5118,3.044,5119,3.044,5120,3.044,5121,3.044,5122,3.044,5123,3.044,5124,3.044,5125,3.044,5126,3.044,5127,3.044,5128,3.044,5129,3.044,5130,3.044,5131,3.044,5132,3.044,5133,3.044,5134,3.044,5135,3.044,5136,3.044,5137,3.044,5138,4.134,5139,3.044,5140,3.044,5141,3.044,5142,3.044,5143,3.044,5144,3.044,5145,3.044,5146,3.044,5147,4.134,5148,3.044,5149,4.134,5150,3.044,5151,3.044,5152,3.044,5153,3.044,5154,3.044,5155,3.044,5156,3.044,5157,3.044,5158,3.044,5159,3.412,5160,3.044,5161,3.044,5162,3.044,5163,3.044,5164,3.044,5165,3.044,5166,2.513,5167,3.044,5168,3.044,5169,3.044,5170,3.044,5171,3.044,5172,3.044,5173,3.044,5174,3.044,5175,3.044,5176,3.875,5177,3.044,5178,3.044,5179,3.044,5180,3.044,5181,3.044,5182,3.044,5183,3.044,5184,4.694,5185,3.044,5186,3.044,5187,3.044,5188,3.044,5189,3.044,5190,3.044,5191,3.044,5192,3.044,5193,4.694,5194,5.035,5195,4.134,5196,4.134,5197,3.044,5198,3.044,5199,3.044,5200,3.044,5201,5.264,5202,4.134,5203,5.264,5204,3.044,5205,4.134,5206,2.513,5207,4.134,5208,3.044,5209,5.035,5210,3.044,5211,3.044,5212,3.044,5213,3.044,5214,5.035,5215,4.134,5216,3.044,5217,4.134,5218,3.044,5219,3.044,5220,3.044,5221,3.044,5222,3.044,5223,3.044,5224,3.044,5225,4.134,5226,3.044,5227,3.044,5228,3.044,5229,3.044,5230,3.044,5231,3.044,5232,3.044,5233,3.044,5234,3.044,5235,3.044,5236,3.044,5237,3.044,5238,3.044,5239,3.044,5240,3.044,5241,5.891,5242,3.044,5243,3.044,5244,3.044,5245,6.042,5246,3.044,5247,3.044,5248,3.044,5249,3.044,5250,5.43,5251,3.044,5252,3.044,5253,3.044,5254,3.044,5255,3.044,5256,3.044,5257,3.044,5258,5.846,5259,3.044,5260,5.846,5261,3.044,5262,3.044,5263,3.044,5264,3.044,5265,6.019,5266,5.264,5267,5.264,5268,6.019,5269,6.019,5270,3.044,5271,3.044,5272,3.044,5273,3.044,5274,3.044,5275,3.044,5276,3.044,5277,3.044,5278,3.044,5279,3.044,5280,3.044,5281,3.044,5282,3.044,5283,3.044,5284,3.044,5285,3.044,5286,3.044,5287,3.044,5288,3.044,5289,3.044,5290,4.585,5291,5.264,5292,3.044,5293,3.044,5294,3.044,5295,3.044,5296,3.044,5297,3.044,5298,3.044,5299,3.044,5300,3.044,5301,3.044,5302,3.044,5303,3.044,5304,3.044,5305,3.044,5306,3.044,5307,3.044,5308,3.044,5309,3.044,5310,3.044,5311,3.044,5312,3.044,5313,3.044,5314,3.044,5315,3.044,5316,3.044,5317,3.044,5318,3.044,5319,3.044,5320,3.044,5321,3.044,5322,3.044,5323,3.044,5324,3.044,5325,3.044,5326,3.044,5327,3.044,5328,3.044,5329,3.044,5330,3.044,5331,3.044,5332,3.044,5333,3.044,5334,3.044,5335,3.044,5336,3.044,5337,3.044,5338,3.044,5339,3.044,5340,3.044,5341,3.044,5342,4.134,5343,4.134,5344,3.044,5345,3.044,5346,3.044,5347,3.044,5348,3.044,5349,3.044,5350,3.044,5351,3.044,5352,3.044,5353,1.901,5354,4.134,5355,3.044,5356,3.044,5357,3.044,5358,3.044,5359,3.044,5360,3.044,5361,3.044,5362,3.044,5363,3.044,5364,3.044,5365,3.044,5366,3.044,5367,3.044,5368,3.044,5369,3.044,5370,3.044,5371,3.044,5372,3.044,5373,3.044,5374,3.044,5375,3.044,5376,3.044,5377,3.044,5378,3.044,5379,3.044,5380,3.044,5381,3.044,5382,3.044,5383,3.044,5384,3.044,5385,3.044,5386,3.044,5387,3.044,5388,3.044,5389,3.044,5390,3.044,5391,3.044,5392,3.044,5393,3.044,5394,3.044,5395,3.044,5396,3.044,5397,3.044,5398,3.044,5399,3.044,5400,4.134,5401,3.044,5402,3.044,5403,3.044,5404,3.044,5405,3.044,5406,3.044,5407,3.044,5408,3.044,5409,3.044,5410,3.044,5411,3.044,5412,3.044,5413,3.044,5414,3.044,5415,3.044,5416,3.044,5417,3.044,5418,3.044,5419,3.044,5420,3.044,5421,3.044,5422,3.044,5423,3.044,5424,3.044,5425,3.044,5426,3.044,5427,3.044,5428,3.044,5429,3.044,5430,3.412,5431,3.044,5432,3.044,5433,3.044,5434,3.044,5435,3.044,5436,3.044,5437,3.044,5438,3.044]],["title/1015847",[5439,21.103]],["body/1015847",[29,0.512,59,0.714,67,1.259,71,0.536,92,0.835,101,0.469,103,0.735,109,1.954,128,1.717,150,0.964,195,0.892,239,1.115,245,1.344,293,0.691,296,0.665,408,1.582,479,1.303,481,1.178,597,3.581,614,0.498,616,0.714,689,0.835,706,1.826,748,0.665,833,0.568,892,1.864,929,2.303,956,4.055,967,1.864,1006,1.689,1007,2.213,1084,1.582,1112,0.735,1364,2.174,1377,2.754,1388,1.954,1397,2.497,1398,1.431,1405,1.753,1535,2.269,1548,2.515,1659,0.735,1684,1.509,1794,1.206,1797,1.088,1832,0.81,1930,1.431,2096,1.509,2253,2.942,2341,1.431,2360,3.23,2392,2.497,2439,3.017,2441,2.249,2501,1.206,2529,2.901,2559,3.418,2602,2.954,2657,2.066,2683,1.913,2778,0.892,2780,0.892,2786,1.753,2861,1.995,2914,3.017,2988,2.269,3000,1.995,3455,2.497,3461,1.717,3788,1.344,3796,1.995,3820,4.161,3897,2.066,3931,3.75,3953,4.161,3954,5.026,3982,1.509,4071,4.556,4118,1.088,4322,1.995,4324,1.995,4375,2.497,4417,1.995,4493,2.942,4558,3.753,4747,3.753,4780,1.995,4815,2.195,5290,2.901,5353,2.195,5440,2.416,5441,2.416,5442,2.416,5443,2.416,5444,2.416,5445,2.901,5446,2.416,5447,2.416,5448,2.416,5449,2.416,5450,2.416,5451,2.416,5452,2.416,5453,2.416,5454,2.416,5455,2.416,5456,2.416,5457,2.416,5458,2.416,5459,2.416,5460,2.416,5461,3.987,5462,2.416,5463,2.416,5464,2.416,5465,2.416,5466,4.547,5467,4.547,5468,4.547,5469,4.547,5470,6.004,5471,4.547,5472,4.547,5473,4.831,5474,4.831,5475,2.416,5476,2.416,5477,5.592,5478,2.416,5479,2.416,5480,2.416,5481,2.416,5482,2.416,5483,2.416,5484,2.416,5485,2.416,5486,2.416,5487,2.416,5488,2.416,5489,1.717,5490,2.416,5491,2.416,5492,2.416,5493,2.416,5494,2.416,5495,2.416,5496,2.416,5497,2.416,5498,2.416,5499,2.416,5500,2.416,5501,2.416,5502,2.416,5503,2.416,5504,2.416,5505,2.416,5506,2.416,5507,2.416,5508,2.416,5509,2.416,5510,2.416,5511,2.416,5512,2.416,5513,2.416,5514,2.416,5515,2.416,5516,2.416,5517,2.84,5518,2.416,5519,2.416,5520,2.416,5521,3.514,5522,3.514,5523,1.717,5524,2.416,5525,2.416,5526,2.416,5527,2.416,5528,2.416,5529,2.416,5530,2.416,5531,2.416,5532,2.416,5533,2.416,5534,2.416,5535,2.416,5536,2.416,5537,4.141,5538,2.416,5539,2.416,5540,2.416,5541,2.416,5542,2.416,5543,2.416,5544,2.416,5545,2.416,5546,2.416,5547,2.416,5548,2.416,5549,1.995,5550,2.416,5551,2.416,5552,2.416,5553,2.416,5554,2.416,5555,2.416,5556,2.416,5557,2.416,5558,2.416,5559,3.514,5560,4.831,5561,3.514,5562,2.416,5563,3.514,5564,2.416,5565,2.942,5566,2.497,5567,2.416,5568,2.416,5569,2.416,5570,2.416,5571,2.416,5572,5.04,5573,2.416,5574,2.416,5575,2.416,5576,2.416,5577,2.416,5578,2.416,5579,2.416,5580,2.416,5581,2.416,5582,2.416,5583,2.416,5584,2.416,5585,2.416,5586,2.416,5587,2.416,5588,2.416,5589,2.416,5590,2.416,5591,2.416,5592,2.416,5593,2.416,5594,2.416,5595,2.416,5596,2.416,5597,2.416,5598,2.416,5599,2.416,5600,2.416,5601,2.416,5602,4.141,5603,3.514,5604,1.088,5605,4.141,5606,2.416,5607,3.514,5608,2.416,5609,2.416,5610,2.416,5611,2.416,5612,2.416,5613,2.416,5614,2.416,5615,2.416,5616,2.416,5617,2.416,5618,2.416,5619,2.416,5620,2.416,5621,2.416,5622,2.416,5623,2.416,5624,2.416,5625,2.416,5626,2.416,5627,2.416,5628,4.547,5629,2.416,5630,2.416,5631,2.416,5632,2.416,5633,2.416,5634,2.416,5635,2.416,5636,2.416,5637,2.416,5638,2.416,5639,2.416,5640,2.416,5641,3.514,5642,3.514,5643,3.514,5644,4.141,5645,5.04,5646,3.514,5647,5.33,5648,3.514,5649,3.514,5650,4.141,5651,3.514,5652,4.547,5653,3.514,5654,3.514,5655,3.514,5656,3.514,5657,3.514,5658,3.514,5659,3.514,5660,3.514,5661,3.514,5662,2.901,5663,2.416,5664,2.416,5665,2.416,5666,2.416,5667,2.416,5668,2.416,5669,2.416,5670,3.514,5671,2.416,5672,2.416,5673,2.416,5674,3.514,5675,3.514,5676,3.514,5677,3.514,5678,3.514,5679,2.416,5680,2.416,5681,2.416,5682,2.416,5683,2.416,5684,2.416,5685,2.416,5686,2.416,5687,1.995,5688,2.416,5689,2.416,5690,1.995,5691,2.416,5692,2.416,5693,1.995,5694,2.416,5695,2.416,5696,1.995,5697,2.416,5698,2.416,5699,3.514,5700,2.416,5701,2.416,5702,2.416,5703,2.416,5704,2.416,5705,2.416,5706,2.416,5707,2.416,5708,2.416,5709,2.416,5710,2.416,5711,5.04,5712,6.037,5713,2.416,5714,5.04,5715,5.04,5716,2.416,5717,5.04,5718,5.04,5719,5.04,5720,2.416,5721,3.514,5722,3.514,5723,3.514,5724,3.514,5725,3.514,5726,3.514,5727,3.514,5728,3.514,5729,3.514,5730,2.416,5731,2.416,5732,2.416,5733,4.141,5734,2.416,5735,2.416,5736,2.416,5737,1.995,5738,1.717,5739,4.141,5740,2.416,5741,2.416,5742,3.514,5743,2.416,5744,4.141,5745,2.901,5746,2.416,5747,2.416,5748,2.416,5749,2.416,5750,2.195,5751,2.416,5752,2.416,5753,1.995,5754,3.514,5755,2.416,5756,3.514,5757,1.995,5758,2.416,5759,2.416,5760,2.416,5761,2.416,5762,2.416,5763,2.416,5764,2.416,5765,2.416,5766,2.416,5767,2.416,5768,2.416,5769,2.416,5770,2.416,5771,4.141,5772,3.514,5773,4.547,5774,2.416,5775,2.416,5776,4.547,5777,2.416,5778,2.416,5779,3.514,5780,2.416,5781,2.416,5782,2.416,5783,2.416,5784,3.514,5785,2.416,5786,2.416,5787,3.514,5788,2.416,5789,2.416,5790,2.416,5791,2.416,5792,2.416,5793,2.416,5794,2.416,5795,2.416,5796,2.416,5797,2.416,5798,2.416,5799,2.416,5800,2.416,5801,2.416,5802,2.416,5803,2.416,5804,2.416,5805,4.141,5806,4.141,5807,4.141,5808,4.141,5809,4.141,5810,4.141,5811,5.796,5812,4.141,5813,4.141,5814,4.141,5815,4.141,5816,4.141,5817,4.141,5818,4.141,5819,4.141,5820,5.04,5821,4.141,5822,5.592,5823,2.416,5824,3.514,5825,3.514,5826,2.416,5827,2.416,5828,2.416,5829,2.416,5830,2.416,5831,4.141,5832,5.654,5833,4.547,5834,5.04,5835,2.416,5836,3.514,5837,3.514,5838,4.141,5839,5.434,5840,4.831,5841,5.708,5842,4.831,5843,5.708,5844,4.831,5845,4.547,5846,3.514,5847,3.514,5848,3.514,5849,2.416,5850,3.514,5851,2.416,5852,2.416,5853,2.416,5854,2.416,5855,4.141,5856,4.141,5857,5.796,5858,5.434,5859,4.141,5860,5.434,5861,3.418,5862,2.942,5863,2.942,5864,4.141,5865,3.418,5866,4.141,5867,5.04,5868,4.141,5869,4.141,5870,4.141,5871,4.141,5872,4.141,5873,4.141,5874,4.141,5875,4.141,5876,4.141,5877,2.416,5878,4.831,5879,2.416,5880,4.831,5881,2.416,5882,2.416,5883,4.547,5884,3.514,5885,2.416,5886,2.416,5887,2.416,5888,2.416,5889,2.416,5890,2.416,5891,2.416,5892,3.514,5893,5.796,5894,3.514,5895,2.416,5896,2.416,5897,2.416,5898,2.416,5899,2.416,5900,2.416,5901,2.416,5902,2.416,5903,2.416,5904,2.416,5905,2.416,5906,2.416,5907,2.416,5908,2.416,5909,2.497,5910,3.514,5911,2.84,5912,3.514,5913,3.514,5914,3.514,5915,2.195,5916,4.547,5917,3.514,5918,3.514,5919,3.514,5920,3.514,5921,3.514,5922,2.901,5923,3.514,5924,5.202,5925,2.416,5926,2.416,5927,3.514,5928,4.831,5929,2.066,5930,4.141,5931,4.141,5932,4.141,5933,4.141,5934,4.141,5935,3.418,5936,2.416,5937,3.514,5938,3.514,5939,3.514,5940,3.514,5941,3.514,5942,2.416,5943,3.514,5944,3.514,5945,5.202,5946,3.514,5947,3.514,5948,3.514,5949,3.514,5950,3.514,5951,3.514,5952,2.416,5953,2.416,5954,2.416,5955,2.416,5956,2.416,5957,2.416,5958,1.995,5959,1.995,5960,1.995,5961,2.416,5962,2.416,5963,2.416,5964,2.416,5965,2.416,5966,2.416,5967,2.416]],["title/1015828",[4979,21.103]],["body/1015828",[16,2.202,29,0.675,59,0.892,62,1.726,71,0.556,93,3.217,97,2.814,101,0.408,103,1.9,115,2.526,122,1.976,126,1.463,132,2.032,138,2.202,144,1.165,150,0.459,195,1.056,239,1.168,240,2.032,408,1.287,415,1.786,420,2.36,432,3.484,479,0.643,481,0.958,616,0.405,689,0.636,704,2.032,734,1.59,892,1.287,1004,1.091,1007,1.165,1011,1.786,1066,3.269,1112,0.869,1310,2.36,1347,1.056,1367,2.045,1418,2.36,1712,2.398,1715,2.092,1869,2.838,1930,1.165,1972,2.032,2000,1.59,2255,1.287,2342,2.447,2411,2.36,2482,2.36,2603,2.838,2657,1.976,2683,1.954,2740,2.474,2759,1.786,2949,2.863,2966,1.976,3221,1.786,3602,2.202,3787,1.056,3830,1.59,3895,1.786,3896,2.474,3900,2.474,4216,2.032,4403,2.032,4861,2.36,5006,3.269,5029,2.36,5166,2.36,5523,3.228,5604,2.045,5750,1.786,5865,2.36,5915,2.474,5929,1.427,5968,2.859,5969,2.859,5970,2.859,5971,2.859,5972,2.859,5973,2.859,5974,2.859,5975,2.859,5976,2.859,5977,2.859,5978,2.859,5979,2.859,5980,2.859,5981,2.859,5982,2.859,5983,2.859,5984,2.859,5985,2.859,5986,2.859,5987,2.859,5988,2.859,5989,2.859,5990,2.859,5991,2.859,5992,2.859,5993,2.859,5994,2.859,5995,2.859,5996,3.96,5997,2.36,5998,4.543,5999,4.543,6000,2.859,6001,4.543,6002,2.859,6003,2.859,6004,2.859,6005,2.859,6006,2.859,6007,2.859,6008,2.859,6009,2.859,6010,2.859,6011,2.859,6012,2.859,6013,2.859,6014,2.859,6015,2.859,6016,2.859,6017,2.859,6018,2.859,6019,2.859,6020,2.859,6021,2.859,6022,2.859,6023,2.859,6024,2.859,6025,2.859,6026,2.859,6027,2.859,6028,2.859,6029,2.859,6030,2.859,6031,2.859,6032,2.859,6033,2.859,6034,2.859,6035,2.859,6036,2.859,6037,2.859,6038,2.859,6039,2.859,6040,2.859,6041,2.859,6042,2.859,6043,3.96,6044,2.859,6045,3.269,6046,2.859,6047,2.859,6048,4.543,6049,2.859,6050,4.543,6051,2.859,6052,2.859,6053,3.96,6054,2.859,6055,2.36,6056,2.859,6057,2.36,6058,2.859,6059,2.859,6060,3.96,6061,2.859,6062,2.36,6063,2.859,6064,2.032,6065,2.859,6066,2.032,6067,2.859,6068,2.859,6069,2.859,6070,4.772,6071,3.96,6072,3.96,6073,2.36,6074,3.96,6075,2.859,6076,2.859,6077,2.859,6078,2.859,6079,2.859,6080,2.859,6081,2.859,6082,2.859,6083,2.859,6084,2.859,6085,2.859,6086,2.859,6087,2.859,6088,2.859,6089,2.859,6090,2.859,6091,2.859,6092,2.859,6093,2.859,6094,2.859,6095,2.859,6096,2.859,6097,2.859,6098,2.859,6099,2.859,6100,2.859,6101,2.859,6102,4.543,6103,2.859,6104,2.859,6105,5.781,6106,2.859,6107,2.859,6108,2.859,6109,5.327,6110,2.859,6111,2.859,6112,2.859,6113,2.859,6114,2.859,6115,2.859,6116,2.36,6117,2.859,6118,2.859,6119,2.859,6120,2.859,6121,2.859,6122,2.859,6123,2.859,6124,2.859,6125,2.859,6126,2.859,6127,3.96,6128,2.859,6129,2.859,6130,2.859,6131,2.859,6132,2.859,6133,2.859,6134,2.859,6135,2.859,6136,2.859,6137,2.859,6138,2.859,6139,2.859,6140,2.859,6141,2.859,6142,2.859,6143,4.543,6144,2.859,6145,2.859,6146,2.859,6147,2.859,6148,2.859,6149,2.859,6150,2.859,6151,2.859,6152,3.96,6153,2.859,6154,2.859,6155,3.96,6156,2.859,6157,2.859,6158,2.859,6159,2.859,6160,2.859,6161,2.859,6162,2.859,6163,2.859,6164,2.859,6165,2.859,6166,2.859,6167,2.859,6168,2.859,6169,2.859,6170,2.859,6171,2.859,6172,2.859,6173,2.859,6174,2.859,6175,2.859,6176,2.859,6177,2.859,6178,2.859,6179,2.859,6180,2.859,6181,2.859,6182,2.859,6183,2.859,6184,2.859,6185,2.859,6186,2.859,6187,2.859,6188,2.859,6189,2.859,6190,2.859,6191,2.859,6192,2.859,6193,2.859,6194,3.96,6195,3.96,6196,3.96,6197,3.96,6198,3.96,6199,3.96,6200,3.96,6201,3.96,6202,4.543,6203,5.15,6204,3.96,6205,3.96,6206,3.96,6207,3.96,6208,3.96,6209,3.96,6210,3.96,6211,3.96,6212,3.96,6213,3.96,6214,3.96,6215,2.859,6216,2.859,6217,2.859,6218,4.95,6219,2.859,6220,2.859,6221,2.859,6222,2.859,6223,2.859,6224,2.859,6225,2.859,6226,2.859,6227,2.36,6228,2.859,6229,2.36,6230,2.859,6231,2.859,6232,2.859,6233,2.859,6234,2.859,6235,2.859,6236,2.859,6237,2.859,6238,2.859,6239,2.859,6240,2.859,6241,2.859,6242,2.859,6243,2.859,6244,2.859,6245,2.859,6246,2.859,6247,2.859,6248,2.032,6249,2.859,6250,2.859,6251,3.96,6252,3.96,6253,2.859,6254,2.859,6255,2.36,6256,2.859,6257,3.96,6258,2.032,6259,2.859,6260,2.859,6261,2.859,6262,2.859,6263,2.859,6264,3.96,6265,2.859,6266,2.859,6267,2.859,6268,2.859,6269,2.36,6270,2.859,6271,2.859,6272,2.859,6273,2.859,6274,2.859,6275,2.859,6276,2.859,6277,2.859,6278,2.859,6279,2.859,6280,2.36,6281,2.859,6282,2.859,6283,2.859,6284,2.859,6285,2.859,6286,2.859,6287,2.859,6288,2.859,6289,2.859,6290,2.859,6291,2.859,6292,2.859,6293,2.859,6294,2.859,6295,2.859,6296,2.859,6297,2.859,6298,2.859,6299,2.859,6300,2.859,6301,2.859,6302,2.859,6303,2.859,6304,2.859,6305,2.859,6306,2.859,6307,2.859,6308,2.859,6309,2.859,6310,2.859,6311,2.859,6312,2.859,6313,2.859,6314,2.859,6315,2.859,6316,2.859,6317,2.859,6318,2.859,6319,2.36,6320,2.859,6321,2.859,6322,2.859,6323,2.859,6324,2.859,6325,2.859,6326,2.859,6327,2.859,6328,2.859,6329,3.96,6330,2.859,6331,2.859,6332,2.859,6333,2.859,6334,2.859,6335,2.859,6336,2.859,6337,2.859,6338,2.859,6339,2.859,6340,2.859,6341,2.859,6342,2.859,6343,2.859,6344,2.859,6345,2.859,6346,2.859,6347,2.859,6348,2.859,6349,2.859,6350,2.859,6351,2.859,6352,2.859,6353,2.859,6354,2.859,6355,2.859,6356,2.859,6357,2.859,6358,2.859,6359,2.859,6360,2.859,6361,2.859,6362,2.859,6363,2.859,6364,2.859,6365,2.859,6366,2.859,6367,2.859,6368,2.859,6369,2.859,6370,2.859,6371,2.859,6372,2.859,6373,2.859,6374,2.859,6375,2.859,6376,2.859,6377,2.859,6378,2.859,6379,3.96,6380,3.96,6381,2.859,6382,2.859,6383,2.859,6384,2.859,6385,2.859,6386,2.859,6387,2.859,6388,2.859,6389,2.859,6390,2.859,6391,2.859,6392,2.859,6393,2.859,6394,2.859,6395,2.859,6396,4.904,6397,2.859,6398,2.859,6399,2.859,6400,2.859,6401,2.859,6402,2.859,6403,2.859,6404,2.859,6405,2.859,6406,2.859,6407,2.859,6408,2.859,6409,2.859,6410,2.859,6411,2.859,6412,2.859,6413,2.859,6414,2.859,6415,2.859,6416,2.859,6417,2.859,6418,2.859,6419,2.859,6420,2.859,6421,2.859,6422,2.859,6423,2.859,6424,2.859,6425,2.859,6426,2.859,6427,2.859,6428,2.859,6429,4.543,6430,2.859,6431,3.269,6432,2.859,6433,2.859,6434,2.859,6435,3.269,6436,2.859,6437,2.859,6438,2.859,6439,1.786,6440,2.859,6441,2.859,6442,2.859,6443,2.859,6444,2.859,6445,2.859,6446,2.859,6447,2.859,6448,2.859,6449,2.859,6450,2.859,6451,2.859,6452,2.859,6453,2.859,6454,2.859,6455,3.96,6456,2.36,6457,4.543,6458,2.859,6459,2.859,6460,2.859,6461,2.859,6462,2.859,6463,2.859,6464,2.859,6465,2.859,6466,3.75,6467,2.859,6468,2.859,6469,2.859,6470,2.859,6471,2.859,6472,3.96,6473,2.859,6474,3.96,6475,2.859,6476,3.96,6477,2.859,6478,3.96,6479,2.859,6480,3.96,6481,2.859,6482,2.859,6483,2.859,6484,2.859,6485,2.859,6486,2.859,6487,2.859,6488,2.859,6489,2.859,6490,2.859,6491,2.859,6492,2.859,6493,2.859,6494,2.859,6495,2.859,6496,2.859,6497,3.96,6498,3.96,6499,3.96,6500,3.96,6501,2.859,6502,2.859,6503,4.904,6504,2.859,6505,2.859,6506,2.859,6507,2.859,6508,2.859,6509,2.859,6510,2.859,6511,2.859,6512,2.859,6513,2.859,6514,2.859,6515,2.859,6516,2.859,6517,2.859,6518,2.859,6519,2.859,6520,2.859,6521,2.859,6522,2.859,6523,2.859,6524,2.859,6525,2.859,6526,2.859,6527,2.859,6528,2.859,6529,3.96,6530,2.859,6531,2.859,6532,2.859,6533,2.859,6534,2.859,6535,2.859,6536,2.859,6537,2.859,6538,2.859,6539,2.859,6540,2.859,6541,2.859,6542,3.96,6543,2.859,6544,2.859,6545,2.859,6546,2.859,6547,2.859,6548,2.859,6549,2.859,6550,2.859,6551,2.859,6552,2.859,6553,2.859,6554,2.859,6555,2.859,6556,2.859,6557,2.859,6558,2.859,6559,2.859,6560,2.859,6561,2.859,6562,2.859,6563,2.859,6564,2.859,6565,2.859,6566,2.859,6567,2.859,6568,2.859,6569,2.859,6570,2.36,6571,2.859,6572,2.859,6573,2.859,6574,2.859,6575,2.36,6576,2.859,6577,2.859,6578,2.859,6579,2.859,6580,2.474,6581,2.859,6582,2.859,6583,2.859,6584,2.859,6585,2.859,6586,2.859,6587,2.859,6588,2.859,6589,2.859,6590,2.859,6591,2.859,6592,2.859,6593,2.859,6594,2.859,6595,2.859,6596,2.859,6597,2.859,6598,2.859,6599,2.859,6600,2.859,6601,2.859,6602,2.859,6603,2.859,6604,3.96,6605,2.859,6606,2.859,6607,2.859,6608,2.859,6609,2.859,6610,2.859,6611,2.859,6612,2.859,6613,2.859,6614,2.859,6615,2.859]],["title/1015827",[6616,15.07,6617,21.21]],["body/1015827",[0,3.039,607,2.705,1332,4.016,2404,3.457,2578,3.039,3290,4.016,3744,3.457,4078,3.457,4225,3.039,4518,3.457,4971,4.016,4974,3.457,4975,3.457,4977,3.457,4978,3.457,4979,3.457,4980,4.016,5439,3.457,6618,4.865,6619,4.016,6620,3.039,6621,3.457,6622,2.705,6623,3.457,6624,3.457,6625,3.457,6626,3.457]],["title/1933380",[6623,21.103]],["body/1933380",[59,0.857,71,0.421,101,0.348,126,1.721,157,1.721,706,1.644,833,0.496,1398,2.437,2441,2.11,3725,3.847,5929,2.698,6627,4.66,6628,4.66,6629,3.847,6630,4.66,6631,4.66,6632,4.66,6633,4.66,6634,5.407,6635,4.66,6636,4.66,6637,4.66,6638,4.66,6639,4.938,6640,4.058,6641,4.66,6642,4.66,6643,5.878,6644,4.66,6645,4.66,6646,4.66,6647,4.66,6648,4.66,6649,4.66,6650,4.66,6651,4.66,6652,4.66,6653,4.66,6654,4.66,6655,4.66,6656,4.66,6657,4.66,6658,4.66,6659,4.66,6660,4.66,6661,4.66,6662,4.66,6663,4.66,6664,4.66,6665,4.66,6666,4.66,6667,4.66,6668,4.66,6669,4.66,6670,4.66,6671,4.66,6672,4.66,6673,4.66,6674,4.66,6675,4.66,6676,4.66,6677,4.66,6678,4.66,6679,4.66,6680,4.66,6681,4.66,6682,4.66,6683,4.66,6684,4.66,6685,4.66,6686,4.66]],["title/2949228",[6626,21.103]],["body/2949228",[29,0.599,53,0.984,57,2.022,59,0.837,67,1.634,71,0.555,92,0.966,101,0.456,103,1.57,144,1.318,239,1.043,240,2.3,292,1.318,293,0.697,407,2.3,464,2.989,479,1.288,481,1.085,543,3.668,614,0.731,616,0.731,689,0.692,737,1.318,748,0.692,833,0.634,915,1.591,929,1.8,1002,1.195,1004,0.892,1006,1.73,1007,1.318,1009,2.3,1011,2.022,1112,1.764,1306,4.261,1347,2.084,1367,2.419,1659,1.715,1771,3.556,1832,1.891,1869,3.025,2000,2.395,2002,2.691,2095,2.576,2255,1.939,2341,1.755,2435,4.122,2436,2.022,2501,2.15,2511,2.022,2546,2.672,2602,1.615,2683,1.085,2914,3.025,2949,3.074,3461,2.3,3463,3.556,3464,3.556,3465,3.556,3466,3.997,3787,2.164,3833,4.122,3862,2.3,3866,2.672,3895,3.716,3909,2.672,3931,2.022,4291,2.691,4294,3.737,4296,1.8,4297,2.022,4427,3.668,4484,1.8,4714,3.061,4855,3.819,4857,2.3,4881,2.672,5489,2.3,5549,3.556,5738,2.3,5929,2.416,6218,2.672,6248,2.3,6575,3.556,6687,3.237,6688,3.237,6689,3.237,6690,3.237,6691,3.237,6692,3.237,6693,3.237,6694,3.237,6695,3.237,6696,3.237,6697,4.308,6698,3.237,6699,3.237,6700,3.237,6701,3.237,6702,3.237,6703,3.237,6704,3.237,6705,3.237,6706,3.237,6707,3.237,6708,3.237,6709,3.237,6710,3.237,6711,3.237,6712,3.237,6713,3.237,6714,3.237,6715,3.237,6716,3.237,6717,3.237,6718,3.237,6719,3.237,6720,3.237,6721,3.237,6722,3.237,6723,3.237,6724,3.237,6725,3.237,6726,3.237,6727,3.237,6728,3.237,6729,3.237,6730,3.237,6731,3.237,6732,3.237,6733,3.237,6734,3.237,6735,3.237,6736,3.237,6737,3.237,6738,3.556,6739,3.237,6740,2.672,6741,3.556,6742,3.237,6743,3.237,6744,3.237,6745,3.237,6746,3.237,6747,3.237,6748,3.237,6749,3.237,6750,3.237,6751,3.237,6752,3.237,6753,3.556,6754,3.556,6755,3.061,6756,4.008,6757,3.237,6758,3.237,6759,3.237,6760,3.237,6761,3.237,6762,2.672,6763,3.237,6764,3.237,6765,3.237,6766,3.237,6767,3.237,6768,3.237,6769,3.237,6770,3.237,6771,2.672,6772,3.237,6773,3.237,6774,2.672,6775,3.237,6776,3.237,6777,3.237,6778,3.237,6779,3.237,6780,3.237,6781,2.3,6782,3.237,6783,3.237,6784,2.672,6785,3.237,6786,3.237,6787,3.237,6788,3.556,6789,3.237,6790,3.237,6791,3.237,6792,2.3,6793,2.672,6794,2.672,6795,2.672,6796,3.061,6797,4.842,6798,3.237,6799,3.237,6800,3.237,6801,3.237,6802,3.237,6803,3.556,6804,3.237,6805,3.556,6806,2.672,6807,3.237,6808,4.437,6809,5.375,6810,2.672,6811,3.237,6812,3.237,6813,3.237,6814,3.237,6815,3.237,6816,3.237,6817,3.237,6818,3.237,6819,3.556,6820,3.237,6821,3.237,6822,3.237,6823,2.672,6824,2.672,6825,2.672,6826,2.672,6827,3.237,6828,3.237,6829,3.237,6830,3.237,6831,3.237,6832,3.237,6833,3.237,6834,3.237,6835,5.801,6836,5.162,6837,2.672,6838,4.563,6839,5.162,6840,4.842,6841,3.237,6842,3.237,6843,3.556,6844,3.237,6845,3.237,6846,3.237,6847,3.237,6848,4.308,6849,3.237,6850,2.672,6851,2.672,6852,3.237,6853,2.672,6854,3.237,6855,3.237,6856,2.672,6857,3.237,6858,3.237,6859,3.237,6860,3.237,6861,3.237,6862,3.237,6863,3.237,6864,3.237,6865,3.237,6866,3.237,6867,3.237,6868,3.237,6869,3.237,6870,3.237,6871,3.237,6872,3.237,6873,3.237,6874,3.237,6875,3.237,6876,3.237,6877,3.237,6878,3.237,6879,3.237,6880,3.237,6881,3.237,6882,3.237,6883,3.237,6884,3.237,6885,3.237,6886,4.308,6887,3.237,6888,5.162,6889,4.308,6890,4.308,6891,2.3,6892,4.308,6893,2.3,6894,4.308,6895,2.3,6896,4.308,6897,2.3,6898,4.308,6899,4.308,6900,2.672,6901,3.237,6902,3.237,6903,3.237,6904,3.237,6905,4.308,6906,3.237,6907,3.237,6908,2.672,6909,3.237,6910,3.237,6911,4.308,6912,3.237,6913,3.237,6914,3.237,6915,3.237,6916,3.237,6917,3.237,6918,3.237,6919,3.237,6920,3.237,6921,3.237,6922,3.237,6923,3.237,6924,3.237,6925,3.237,6926,3.237,6927,3.237,6928,3.237,6929,3.237,6930,3.237,6931,3.237,6932,3.237,6933,3.237,6934,3.237,6935,3.237,6936,3.237,6937,4.261,6938,3.237,6939,3.237,6940,3.237,6941,3.237,6942,3.237,6943,3.237,6944,3.237,6945,2.672,6946,5.948,6947,3.237,6948,3.237,6949,3.237,6950,3.237,6951,3.237,6952,3.237,6953,3.237,6954,3.237,6955,3.237,6956,3.237,6957,3.237,6958,3.237,6959,3.237,6960,3.237,6961,3.237,6962,4.842,6963,3.237,6964,3.237,6965,4.308,6966,3.237,6967,3.237,6968,4.308,6969,3.237,6970,3.237,6971,3.237,6972,4.308,6973,3.237,6974,3.237,6975,4.308,6976,3.237,6977,3.237,6978,4.308,6979,3.237,6980,3.237,6981,3.237,6982,5.642,6983,3.237,6984,6.014,6985,3.237,6986,4.308,6987,3.237,6988,3.237,6989,3.237,6990,3.237,6991,3.237,6992,3.237,6993,3.237,6994,3.237,6995,3.237,6996,4.308,6997,3.237,6998,3.237,6999,3.237,7000,3.237,7001,3.237,7002,3.237,7003,3.237,7004,3.237,7005,3.237,7006,3.237,7007,3.237,7008,3.237,7009,2.672,7010,3.237,7011,3.237,7012,3.237,7013,3.237,7014,3.237,7015,3.237,7016,3.237,7017,3.237,7018,4.308,7019,3.237,7020,2.672,7021,3.237,7022,3.237,7023,3.237,7024,3.237,7025,3.237,7026,3.237,7027,3.237,7028,3.237,7029,3.237,7030,3.237,7031,3.237,7032,3.237,7033,3.237,7034,3.237,7035,3.237,7036,3.237,7037,3.237,7038,3.237,7039,2.672,7040,3.237,7041,3.237,7042,3.237,7043,3.237,7044,3.237,7045,3.237,7046,3.237,7047,3.237,7048,3.237,7049,3.237,7050,3.237,7051,3.237,7052,3.237,7053,3.237,7054,3.237,7055,3.237,7056,3.237,7057,3.237]],["title/1015833",[607,16.516]],["body/1015833",[8,0.696,29,0.748,50,0.62,53,1.777,57,3.499,59,0.875,60,1.568,61,1.568,62,1.543,67,1.888,71,0.565,74,0.92,81,0.92,88,1.35,91,3.328,92,0.896,93,3.453,95,1.764,101,0.469,103,1.564,106,0.556,107,1.056,114,3.651,115,1.631,118,1.993,122,0.556,126,0.412,129,0.792,132,1.764,137,0.696,138,1.831,144,1.341,150,0.98,151,2.161,154,0.92,163,1.381,164,0.92,183,2.422,195,1.739,239,0.502,245,2.757,286,0.92,293,0.443,295,2.422,296,0.921,297,2.959,298,2.864,299,2.864,374,1.568,404,3.189,408,1.482,415,2.057,416,0.92,422,2.011,430,1.195,464,2.986,467,4.433,469,2.422,471,3.593,472,1.568,479,1.059,482,2.719,496,2.719,497,2.39,499,3.788,500,3.758,536,0.92,542,2.422,543,2.988,544,2.422,545,2.959,597,1.764,607,1.056,614,0.712,616,0.702,621,0.92,689,0.771,706,1.09,734,1.381,737,1.989,748,0.817,833,0.594,837,1.764,892,0.855,915,1.216,1002,0.917,1004,0.808,1006,0.373,1075,2.422,1112,1.888,1308,1.568,1340,0.92,1341,3.597,1347,0.702,1349,1.764,1367,1.118,1499,0.696,1535,0.556,1618,1.187,1633,0.696,1659,0.578,1662,1.056,1684,0.696,1685,2.085,1694,1.764,1700,1.568,1712,1.613,1715,0.832,1751,2.05,1794,2.298,1797,2.119,1811,1.056,1832,1.637,1930,1.642,1937,1.568,1938,0.92,2000,1.831,2002,1.551,2096,1.187,2213,2.679,2255,0.855,2311,2.05,2341,2.282,2342,2.836,2356,2.085,2360,1.764,2376,2.05,2432,3.214,2433,1.568,2434,0.92,2435,3.411,2436,2.239,2438,0.92,2441,1.489,2641,0.792,2657,1.789,2683,1.103,2713,1.764,2735,0.92,2740,3.178,2743,3.887,2746,1.568,2759,0.696,2778,1.9,2780,1.9,2786,2.011,2796,2.627,2966,2.349,2974,0.948,3015,1.568,3088,0.792,3117,0.792,3120,1.764,3221,1.833,3237,1.568,3283,0.792,3383,2.422,3388,2.085,3393,0.92,3455,1.35,3602,2.242,3748,1.568,3755,0.792,3757,2.959,3758,2.718,3761,3.472,3764,0.92,3771,0.92,3787,1.773,3788,1.631,3830,1.056,3831,1.381,3838,2.05,3841,2.959,3862,1.35,3863,2.864,3864,2.719,3865,2.422,3871,3.597,3877,2.05,3887,1.833,3896,1.833,3897,1.464,3900,3.276,3923,0.92,3934,0.92,3977,2.959,3979,3.159,3980,3.523,3981,1.568,3982,2.941,3983,1.568,3984,1.568,3985,1.568,3986,1.568,3988,2.422,3991,1.568,3993,1.568,4002,1.568,4025,0.92,4026,2.05,4030,0.92,4034,0.92,4040,2.718,4041,3.963,4043,2.718,4070,1.568,4099,3.096,4118,2.316,4122,1.568,4125,1.764,4213,1.764,4216,1.35,4364,0.948,4369,2.05,4427,2.085,4484,2.669,4485,2.627,4486,2.757,4487,3.246,4488,3.523,4578,0.92,4631,2.05,4632,0.92,4636,1.568,4639,1.568,4640,2.988,4677,3.472,4679,3.328,4684,0.92,4707,3.996,4709,1.568,4710,1.568,4714,3.272,4736,3.328,4742,3.472,4855,2.864,4857,1.35,5020,0.92,5028,1.568,5075,0.792,5461,0.92,5565,3.411,5566,1.764,5604,1.893,5687,1.568,5690,0.92,5693,0.92,5696,0.92,5737,2.422,5738,2.339,5745,3.328,5750,0.696,5757,1.568,5911,1.833,5929,1.239,6055,0.92,6064,1.35,6070,1.568,6073,3.801,6248,0.792,6258,2.339,6319,1.568,6431,1.568,6439,0.696,6456,0.92,6570,2.959,6622,0.62,6629,0.92,6738,0.92,6740,0.92,6741,1.568,6753,0.92,6754,0.92,6755,2.547,6756,3.096,6762,0.92,6774,0.92,6781,1.35,6784,2.05,6788,0.92,6792,3.345,6793,0.92,6794,0.92,6795,0.92,6796,2.085,6803,1.568,6805,3.159,6806,2.422,6808,2.718,6810,0.92,6819,0.92,6823,0.92,6824,0.92,6825,0.92,6826,0.92,6837,1.568,6838,2.422,6843,1.568,6850,2.05,6851,0.92,6853,0.92,6856,1.568,6900,2.718,6908,2.05,7020,0.92,7058,1.114,7059,1.114,7060,1.114,7061,1.114,7062,1.114,7063,1.114,7064,1.114,7065,1.114,7066,1.114,7067,1.114,7068,1.114,7069,1.114,7070,1.114,7071,1.114,7072,1.114,7073,1.114,7074,1.114,7075,1.114,7076,1.114,7077,1.114,7078,1.114,7079,4.031,7080,1.114,7081,1.114,7082,1.114,7083,1.114,7084,1.114,7085,1.114,7086,1.114,7087,1.114,7088,1.114,7089,0.92,7090,1.114,7091,0.92,7092,1.114,7093,1.114,7094,1.114,7095,1.114,7096,1.114,7097,1.114,7098,1.114,7099,1.114,7100,1.114,7101,1.114,7102,1.114,7103,1.114,7104,1.114,7105,1.114,7106,0.92,7107,1.114,7108,1.114,7109,1.114,7110,1.114,7111,1.114,7112,1.114,7113,1.114,7114,1.114,7115,1.114,7116,1.114,7117,1.114,7118,1.114,7119,1.114,7120,1.114,7121,1.114,7122,1.114,7123,3.584,7124,1.114,7125,1.114,7126,1.114,7127,1.114,7128,1.114,7129,1.114,7130,1.114,7131,1.114,7132,1.114,7133,1.114,7134,2.483,7135,1.114,7136,1.114,7137,1.114,7138,1.9,7139,1.114,7140,1.114,7141,1.114,7142,1.114,7143,1.114,7144,1.114,7145,1.114,7146,1.114,7147,1.114,7148,1.114,7149,1.114,7150,1.114,7151,1.114,7152,1.114,7153,1.114,7154,2.483,7155,1.114,7156,1.9,7157,1.114,7158,1.114,7159,1.114,7160,1.114,7161,1.114,7162,1.114,7163,1.114,7164,1.9,7165,1.9,7166,1.114,7167,1.114,7168,1.114,7169,2.483,7170,1.114,7171,1.9,7172,1.114,7173,1.114,7174,1.114,7175,1.114,7176,1.114,7177,1.114,7178,1.114,7179,3.584,7180,3.584,7181,1.114,7182,1.114,7183,1.114,7184,1.114,7185,1.114,7186,1.114,7187,1.114,7188,1.114,7189,1.114,7190,1.114,7191,1.114,7192,1.114,7193,1.114,7194,1.114,7195,1.114,7196,1.114,7197,1.114,7198,1.114,7199,1.114,7200,1.114,7201,1.114,7202,1.114,7203,1.114,7204,1.114,7205,1.114,7206,1.114,7207,1.114,7208,1.9,7209,4.031,7210,1.114,7211,1.9,7212,2.483,7213,1.114,7214,1.9,7215,4.489,7216,1.114,7217,2.934,7218,1.114,7219,3.328,7220,2.422,7221,3.292,7222,1.114,7223,1.9,7224,2.085,7225,1.9,7226,1.114,7227,2.483,7228,2.483,7229,3.705,7230,1.114,7231,3.292,7232,1.9,7233,1.114,7234,1.9,7235,1.9,7236,1.114,7237,1.114,7238,1.114,7239,1.114,7240,1.114,7241,1.114,7242,1.114,7243,1.114,7244,2.483,7245,1.114,7246,1.114,7247,1.9,7248,1.114,7249,1.114,7250,1.9,7251,1.114,7252,1.114,7253,1.9,7254,1.114,7255,1.114,7256,1.114,7257,1.114,7258,1.9,7259,1.114,7260,1.114,7261,1.9,7262,1.114,7263,1.114,7264,1.114,7265,1.114,7266,1.114,7267,2.483,7268,1.114,7269,1.114,7270,1.114,7271,1.114,7272,1.114,7273,1.114,7274,1.114,7275,1.114,7276,1.114,7277,1.114,7278,1.114,7279,1.114,7280,1.114,7281,1.114,7282,1.114,7283,1.114,7284,1.114,7285,1.114,7286,1.114,7287,1.114,7288,1.114,7289,1.114,7290,1.9,7291,1.9,7292,1.114,7293,1.9,7294,1.9,7295,1.114,7296,1.114,7297,1.114,7298,1.114,7299,1.114,7300,0.92,7301,1.114,7302,1.114,7303,1.114,7304,1.114,7305,1.114,7306,1.114,7307,1.114,7308,1.114,7309,1.114,7310,1.114,7311,1.114,7312,1.114,7313,1.114,7314,1.114,7315,1.114,7316,1.114,7317,1.114,7318,1.114,7319,1.114,7320,1.114,7321,1.114,7322,1.114,7323,1.114,7324,1.114,7325,1.114,7326,1.114,7327,1.114,7328,1.114,7329,1.114,7330,1.114,7331,1.114,7332,1.114,7333,1.114,7334,1.114,7335,1.114,7336,1.114,7337,1.114,7338,1.114,7339,1.114,7340,1.114,7341,1.114,7342,2.483,7343,1.114,7344,1.114,7345,1.114,7346,1.114,7347,1.114,7348,1.114,7349,1.114,7350,1.114,7351,1.114,7352,1.114,7353,1.114,7354,2.718,7355,1.114,7356,1.114,7357,1.114,7358,1.114,7359,1.114,7360,1.114,7361,1.114,7362,1.114,7363,1.114,7364,1.114,7365,1.114,7366,1.114,7367,1.114,7368,1.114,7369,1.114,7370,2.483,7371,1.114,7372,1.114,7373,1.114,7374,1.9,7375,1.114,7376,1.114,7377,1.114,7378,1.114,7379,1.114,7380,1.114,7381,1.114,7382,1.114,7383,1.114,7384,1.114,7385,1.114,7386,1.114,7387,1.114,7388,1.114,7389,1.9,7390,1.114,7391,1.114,7392,1.114,7393,1.114,7394,1.114,7395,1.114,7396,1.114,7397,3.584,7398,1.9,7399,2.05,7400,1.114,7401,1.114,7402,1.114,7403,1.114,7404,4.206,7405,1.9,7406,1.114,7407,1.114,7408,1.114,7409,1.114,7410,1.9,7411,2.934,7412,1.114,7413,1.114,7414,1.114,7415,1.114,7416,1.114,7417,1.114,7418,1.114,7419,1.114,7420,1.114,7421,1.114,7422,1.114,7423,1.114,7424,1.114,7425,1.114,7426,1.114,7427,2.934,7428,1.9,7429,1.114,7430,1.114,7431,1.114,7432,0.92,7433,0.92,7434,1.568,7435,1.9,7436,1.9,7437,1.114,7438,1.9,7439,1.114,7440,1.114,7441,1.114,7442,1.114,7443,1.568,7444,1.114,7445,1.114,7446,1.114,7447,1.114,7448,1.114,7449,1.114,7450,1.114,7451,2.934,7452,2.934,7453,2.934,7454,2.422,7455,1.114,7456,1.114,7457,1.114,7458,1.114,7459,1.114,7460,1.114,7461,1.114,7462,1.114,7463,1.114,7464,1.114,7465,1.114,7466,1.114,7467,1.114,7468,1.114,7469,1.114,7470,2.483,7471,1.114,7472,1.114,7473,1.114,7474,1.9,7475,2.483,7476,1.9,7477,1.9,7478,1.114,7479,1.114,7480,1.114,7481,1.114,7482,1.114,7483,1.114,7484,1.114,7485,1.9,7486,1.114,7487,1.114,7488,1.114,7489,1.114,7490,1.114,7491,4.357,7492,1.9,7493,1.9,7494,1.9,7495,2.934,7496,3.159,7497,1.114,7498,1.114,7499,1.114,7500,1.114,7501,1.114,7502,1.114,7503,1.114,7504,1.114,7505,1.114,7506,1.114,7507,1.114,7508,1.114,7509,1.114,7510,1.9,7511,1.114,7512,2.483,7513,1.114,7514,1.114,7515,1.114,7516,1.114,7517,1.114,7518,3.292,7519,1.114,7520,1.9,7521,1.114,7522,1.114,7523,1.114,7524,1.114,7525,1.568,7526,1.114,7527,1.114,7528,1.114,7529,1.114,7530,1.114,7531,0.92,7532,0.92,7533,0.92,7534,1.114,7535,1.114,7536,1.114,7537,2.483,7538,2.483,7539,2.483,7540,1.9,7541,1.9,7542,1.9,7543,2.934,7544,2.934,7545,1.9,7546,1.114,7547,1.114,7548,1.114,7549,1.114,7550,1.114,7551,1.114,7552,1.114,7553,1.114,7554,1.114,7555,1.114,7556,1.114,7557,1.114,7558,1.114,7559,1.114,7560,1.114,7561,1.114,7562,1.114,7563,1.568,7564,1.114,7565,1.114,7566,1.114,7567,0.92,7568,0.92,7569,0.92,7570,1.114,7571,0.92,7572,1.114,7573,1.114,7574,1.114,7575,1.9,7576,1.9,7577,1.9,7578,1.114,7579,2.483,7580,1.114,7581,1.9,7582,1.114,7583,1.114,7584,2.05,7585,2.483,7586,2.483,7587,1.114,7588,1.114,7589,1.114,7590,2.483,7591,2.483,7592,1.9,7593,1.114,7594,1.114,7595,1.114,7596,1.114,7597,1.114,7598,1.114,7599,1.9,7600,1.114,7601,1.114,7602,1.114,7603,1.114,7604,1.114,7605,1.114,7606,1.114,7607,1.9,7608,1.9,7609,1.114,7610,1.9,7611,1.9,7612,1.9,7613,1.9,7614,2.934,7615,2.934,7616,1.9,7617,1.9,7618,1.9,7619,1.9,7620,1.9,7621,1.9,7622,1.114,7623,1.114,7624,1.114,7625,1.114,7626,1.114,7627,1.114,7628,1.9,7629,1.114,7630,1.114,7631,1.114,7632,1.114,7633,1.114,7634,1.114,7635,1.114,7636,1.114,7637,1.114,7638,1.114,7639,1.114,7640,1.114,7641,1.114,7642,1.114,7643,1.114,7644,1.114,7645,1.114,7646,1.114,7647,1.114,7648,1.114,7649,1.114,7650,1.114,7651,1.114,7652,1.114,7653,1.114,7654,1.114,7655,1.114,7656,1.114,7657,1.114,7658,1.114,7659,1.114,7660,1.114,7661,1.114,7662,3.292,7663,1.114,7664,1.114,7665,1.114,7666,1.114,7667,1.114,7668,4.357,7669,1.114,7670,1.114,7671,1.114,7672,1.114,7673,1.114,7674,2.483,7675,1.114,7676,1.114,7677,1.114,7678,1.114,7679,1.114,7680,1.114,7681,2.483,7682,1.114,7683,1.114,7684,1.114,7685,1.114,7686,1.9,7687,1.568,7688,1.114,7689,0.92,7690,1.114,7691,1.114,7692,1.114,7693,1.114,7694,1.114,7695,1.114,7696,1.114,7697,1.114,7698,1.114,7699,1.114,7700,1.114,7701,1.114,7702,1.114,7703,1.114,7704,1.114,7705,1.114,7706,1.114,7707,1.114,7708,3.827,7709,1.114,7710,1.114,7711,1.114,7712,1.114,7713,1.114,7714,1.114,7715,1.114,7716,1.114,7717,1.114,7718,1.114,7719,1.114,7720,1.114,7721,1.114,7722,3.292,7723,2.483,7724,1.114,7725,1.9,7726,1.114,7727,1.114,7728,1.114,7729,1.114,7730,1.114,7731,1.9,7732,3.292,7733,3.292,7734,1.9,7735,2.483,7736,2.422,7737,1.9,7738,1.9,7739,1.9,7740,1.9,7741,1.9,7742,1.9,7743,1.9,7744,1.9,7745,1.9,7746,2.934,7747,1.9,7748,1.9,7749,1.9,7750,1.9,7751,3.827,7752,1.9,7753,4.206,7754,1.9,7755,1.9,7756,1.9,7757,1.9,7758,3.292,7759,1.9,7760,3.292,7761,1.9,7762,1.9,7763,1.9,7764,1.9,7765,3.292,7766,4.031,7767,4.031,7768,1.9,7769,3.292,7770,3.292,7771,1.9,7772,1.9,7773,1.9,7774,1.9,7775,2.934,7776,1.9,7777,1.9,7778,1.9,7779,1.9,7780,1.9,7781,1.9,7782,1.9,7783,1.9,7784,1.9,7785,1.114,7786,1.9,7787,1.114,7788,1.114,7789,1.114,7790,1.114,7791,1.114,7792,1.114,7793,1.9,7794,1.114,7795,1.114,7796,1.114,7797,1.114,7798,1.114,7799,1.114,7800,1.114,7801,1.114,7802,1.114,7803,1.114,7804,1.114,7805,2.483,7806,1.114,7807,1.114,7808,1.114,7809,1.114,7810,1.9,7811,1.114,7812,1.114,7813,1.114,7814,1.114,7815,1.114,7816,1.9,7817,2.483,7818,1.114,7819,1.9,7820,1.9,7821,1.114,7822,1.114,7823,1.114,7824,1.114,7825,1.9,7826,0.92,7827,1.114,7828,1.114,7829,1.114,7830,1.114,7831,1.114,7832,1.114,7833,1.114,7834,1.114,7835,1.114,7836,1.114,7837,1.9,7838,1.114,7839,1.9,7840,1.114,7841,1.114,7842,3.292,7843,1.114,7844,1.114,7845,1.114,7846,1.114,7847,1.114,7848,2.483,7849,2.483,7850,1.114,7851,1.114,7852,2.483,7853,2.483,7854,2.483,7855,2.483,7856,1.114,7857,2.483,7858,1.114,7859,1.9,7860,1.9,7861,1.114,7862,1.9,7863,1.9,7864,1.9,7865,1.114,7866,1.114,7867,1.114,7868,1.114,7869,1.114,7870,1.114,7871,1.114,7872,1.114,7873,1.114,7874,1.114,7875,1.114,7876,1.114,7877,1.9,7878,1.114,7879,1.114,7880,1.114,7881,1.114,7882,1.114,7883,1.9,7884,1.114,7885,1.114,7886,1.114,7887,1.114,7888,1.114,7889,1.114,7890,1.114,7891,1.114,7892,1.114,7893,1.114,7894,1.114,7895,1.114,7896,1.114,7897,1.114,7898,1.114,7899,1.114,7900,1.114,7901,1.114,7902,1.114,7903,1.114,7904,1.114,7905,1.114,7906,1.114,7907,1.114,7908,1.114,7909,1.114,7910,1.114,7911,1.114,7912,1.114,7913,1.114,7914,1.114,7915,1.114,7916,1.114,7917,1.114,7918,1.114,7919,1.114,7920,1.114,7921,1.114,7922,1.114,7923,1.114,7924,1.114,7925,1.114,7926,1.114,7927,1.114,7928,1.114,7929,1.114,7930,1.114,7931,1.114,7932,1.114,7933,1.114,7934,1.114,7935,1.114,7936,1.114,7937,1.114,7938,1.114,7939,1.114,7940,1.114,7941,1.114,7942,1.114,7943,1.114,7944,1.114,7945,0.92,7946,1.114,7947,1.114,7948,1.114,7949,1.114,7950,1.114,7951,1.114,7952,1.114,7953,1.114,7954,2.483,7955,1.9,7956,1.9,7957,1.114,7958,1.114,7959,1.114,7960,1.114,7961,1.114,7962,1.35,7963,1.114,7964,1.114,7965,2.934,7966,1.9,7967,2.483,7968,2.483,7969,4.031,7970,1.9,7971,1.114,7972,1.114,7973,1.114,7974,2.483,7975,1.114,7976,1.114,7977,1.114,7978,1.114,7979,1.114,7980,1.114,7981,1.114,7982,1.114,7983,1.114,7984,1.114,7985,1.114,7986,1.114,7987,1.114,7988,1.114,7989,1.114,7990,1.114,7991,1.114,7992,1.114,7993,1.114,7994,1.9,7995,1.114,7996,1.114,7997,1.114,7998,1.114,7999,1.114,8000,2.483,8001,1.114,8002,1.114,8003,1.114,8004,1.114,8005,1.114,8006,1.114,8007,1.114,8008,1.114,8009,1.114,8010,1.114,8011,1.9,8012,1.9,8013,1.114,8014,1.114,8015,1.114,8016,1.114,8017,1.114,8018,1.114,8019,1.114,8020,1.114,8021,1.114,8022,1.114,8023,1.114,8024,1.114,8025,1.114,8026,1.114,8027,1.114,8028,1.114,8029,1.114,8030,1.114,8031,1.114,8032,1.114,8033,1.114,8034,1.114,8035,1.114,8036,1.114,8037,1.114,8038,1.9,8039,1.114,8040,1.114,8041,1.114,8042,1.114,8043,1.114,8044,1.114,8045,1.114,8046,1.114,8047,1.114,8048,1.114,8049,1.114,8050,1.114,8051,1.114,8052,1.114,8053,1.114,8054,1.114,8055,1.114,8056,1.9,8057,1.9,8058,1.9,8059,1.114,8060,1.114,8061,1.114,8062,1.9,8063,1.114,8064,1.114,8065,1.114,8066,1.114,8067,1.114,8068,2.483,8069,1.9,8070,3.292,8071,1.114,8072,1.114,8073,1.114,8074,1.114,8075,1.114,8076,1.114,8077,1.114,8078,1.114,8079,1.114,8080,1.114,8081,1.114,8082,1.114,8083,1.9,8084,1.114,8085,1.9,8086,1.114,8087,1.114,8088,1.114,8089,1.114,8090,1.114,8091,1.114,8092,1.114,8093,1.114,8094,1.114,8095,1.114,8096,1.114,8097,1.114,8098,1.114,8099,1.114,8100,1.114,8101,1.114,8102,1.114,8103,1.114,8104,1.114,8105,1.114,8106,1.114,8107,1.114,8108,1.114,8109,4.206,8110,2.483,8111,2.934,8112,1.114,8113,2.934,8114,1.114,8115,2.934,8116,2.05,8117,1.114,8118,2.934,8119,1.114,8120,1.9,8121,2.483,8122,2.483,8123,1.114,8124,1.114,8125,1.114,8126,1.114,8127,1.114,8128,2.483,8129,1.114,8130,1.114,8131,1.114,8132,1.114,8133,3.292,8134,1.114,8135,1.114,8136,1.114,8137,1.9,8138,1.9,8139,2.934,8140,1.114,8141,1.114,8142,1.114,8143,1.114,8144,1.114,8145,1.114,8146,1.114,8147,1.114,8148,1.114,8149,1.114,8150,1.114,8151,1.114,8152,1.114,8153,1.114,8154,1.114,8155,1.114,8156,1.114,8157,1.114,8158,1.114,8159,1.114,8160,3.292,8161,1.114,8162,1.114,8163,1.114,8164,1.114,8165,2.934,8166,1.9,8167,1.114,8168,1.114,8169,1.114,8170,1.114,8171,1.114,8172,1.114,8173,1.114,8174,1.114,8175,1.9,8176,1.114,8177,1.114,8178,1.114,8179,1.114,8180,1.114,8181,1.114,8182,1.114,8183,1.114,8184,1.9,8185,1.114,8186,1.114,8187,1.114,8188,1.114,8189,1.114,8190,1.114,8191,1.9,8192,1.114,8193,1.114,8194,1.114,8195,1.114,8196,1.114,8197,1.114,8198,1.114,8199,1.9,8200,1.9,8201,1.114,8202,1.114,8203,1.114,8204,0.92,8205,1.114,8206,1.114,8207,1.9,8208,1.9,8209,1.9,8210,1.114,8211,1.114,8212,1.114,8213,1.9,8214,1.114,8215,1.114,8216,1.114,8217,1.114,8218,1.114,8219,1.114,8220,1.114,8221,1.114,8222,1.114,8223,1.114,8224,1.114,8225,0.92,8226,1.114,8227,1.114,8228,1.114,8229,1.114,8230,1.114,8231,2.483,8232,2.483,8233,3.584,8234,1.9,8235,1.9,8236,1.9,8237,1.9,8238,1.9,8239,5.245,8240,1.9,8241,1.9,8242,1.9,8243,2.483,8244,2.483,8245,2.483,8246,3.584,8247,3.584,8248,2.483,8249,2.483,8250,2.483,8251,2.934,8252,2.483,8253,2.483,8254,1.114,8255,1.114,8256,1.114,8257,1.114,8258,1.114,8259,1.114,8260,1.114,8261,1.114,8262,1.114,8263,1.114,8264,1.114,8265,1.9,8266,1.114,8267,1.114,8268,1.114,8269,1.114,8270,2.934,8271,1.9,8272,1.114,8273,1.114,8274,1.114,8275,1.114,8276,0.92,8277,1.114,8278,1.114,8279,1.114,8280,1.114,8281,1.114,8282,1.114,8283,1.114,8284,1.114,8285,1.114,8286,1.114,8287,1.114,8288,1.114,8289,1.114,8290,1.114,8291,1.114,8292,1.114,8293,1.114,8294,1.114,8295,1.114,8296,1.114,8297,1.35,8298,1.114,8299,1.114,8300,1.114,8301,1.114,8302,1.114,8303,1.114,8304,1.114,8305,1.114,8306,1.114,8307,1.114,8308,1.114,8309,1.114,8310,1.114,8311,1.114,8312,1.114,8313,1.114,8314,1.114,8315,1.114,8316,1.114,8317,1.114,8318,1.114,8319,1.114,8320,1.9,8321,3.292,8322,2.483,8323,1.114,8324,1.114,8325,1.114,8326,1.114,8327,1.114,8328,1.114,8329,1.9,8330,1.114,8331,1.114,8332,1.114,8333,1.114,8334,1.114,8335,1.114,8336,1.114,8337,1.114,8338,1.114,8339,1.114,8340,1.114,8341,1.114,8342,1.114,8343,1.114,8344,1.114,8345,1.9,8346,1.114,8347,1.114,8348,1.114,8349,1.114,8350,1.114,8351,1.114,8352,1.114,8353,1.114,8354,1.9,8355,1.114,8356,1.9,8357,1.114,8358,1.114,8359,1.114,8360,1.114,8361,1.114,8362,1.114,8363,1.114,8364,1.114,8365,1.114,8366,1.114,8367,1.9,8368,1.114,8369,1.114,8370,1.114,8371,1.114,8372,1.114,8373,1.114,8374,1.114,8375,1.114,8376,1.114,8377,1.114,8378,1.114,8379,1.114,8380,2.483,8381,1.114,8382,1.114,8383,1.114,8384,1.114,8385,1.114,8386,1.114,8387,1.114,8388,1.114,8389,1.114,8390,1.114,8391,1.114,8392,1.9,8393,1.114,8394,1.114,8395,1.114,8396,1.114,8397,1.114,8398,1.114,8399,1.114,8400,1.114,8401,1.114,8402,1.114,8403,1.114,8404,1.114,8405,1.114,8406,2.483,8407,1.114,8408,1.114,8409,2.483,8410,1.9,8411,1.114,8412,1.114,8413,1.114,8414,2.934,8415,4.958,8416,1.114,8417,1.114,8418,1.114,8419,1.114,8420,1.114,8421,1.114,8422,1.114,8423,1.114,8424,1.114,8425,1.114,8426,1.114,8427,1.114,8428,1.114,8429,1.114,8430,1.114,8431,1.114,8432,1.114,8433,1.114,8434,1.114,8435,1.114,8436,1.114,8437,1.9,8438,1.114,8439,2.934,8440,1.114,8441,1.9,8442,1.114,8443,1.114,8444,1.114,8445,1.114,8446,1.9,8447,2.934,8448,4.031,8449,4.357,8450,1.9,8451,1.9,8452,1.9,8453,3.292,8454,1.9,8455,1.9,8456,3.292,8457,1.9,8458,1.9,8459,1.9,8460,1.9,8461,1.9,8462,2.483,8463,1.9,8464,1.9,8465,3.584,8466,1.9,8467,2.483,8468,1.9,8469,1.9,8470,1.114,8471,1.114,8472,1.9,8473,1.114,8474,1.114,8475,1.114,8476,1.114,8477,1.114,8478,2.934,8479,1.114,8480,1.114,8481,2.934,8482,1.114,8483,1.9,8484,1.114,8485,1.114,8486,1.114,8487,1.114,8488,1.114,8489,2.934,8490,1.114,8491,1.114,8492,1.114,8493,1.114,8494,1.114,8495,1.114,8496,1.9,8497,2.934,8498,1.114,8499,1.114,8500,1.114,8501,1.114,8502,1.114,8503,0.92,8504,1.114,8505,1.114,8506,1.9,8507,1.114,8508,1.114,8509,1.9,8510,1.9,8511,3.584,8512,1.9,8513,3.584,8514,1.9,8515,1.9,8516,1.9,8517,1.9,8518,1.9,8519,1.9,8520,1.9,8521,1.9,8522,1.9,8523,2.483,8524,1.114,8525,1.114,8526,1.114,8527,1.114,8528,1.114,8529,1.114,8530,1.114,8531,1.114,8532,1.114,8533,1.114,8534,1.114,8535,1.114,8536,1.114,8537,1.114,8538,1.114,8539,1.114,8540,1.114,8541,1.114,8542,1.114,8543,1.114,8544,1.114,8545,1.114,8546,1.114,8547,1.114,8548,1.114,8549,1.114,8550,1.114,8551,1.114,8552,1.114,8553,1.114,8554,1.114,8555,1.114,8556,3.292,8557,1.114,8558,2.483,8559,1.114,8560,4.883,8561,1.114,8562,1.114,8563,1.114,8564,1.114,8565,1.114,8566,1.9,8567,1.114,8568,1.114,8569,1.114,8570,1.114,8571,1.114,8572,1.114,8573,1.114,8574,1.9,8575,1.9,8576,1.9,8577,1.9,8578,1.9,8579,1.9,8580,1.114,8581,1.114,8582,1.114,8583,1.114,8584,1.114,8585,1.114,8586,1.114,8587,1.114,8588,1.114,8589,1.114,8590,1.114,8591,1.114,8592,1.114,8593,1.114,8594,1.114,8595,1.114,8596,1.114,8597,1.114,8598,1.114,8599,1.114,8600,1.114,8601,1.114,8602,1.114,8603,1.114,8604,1.114,8605,1.114,8606,1.114,8607,1.114,8608,1.114,8609,1.114,8610,1.114,8611,1.114,8612,1.114,8613,1.114,8614,1.114,8615,1.114,8616,1.114,8617,1.9,8618,1.114,8619,1.114,8620,2.483,8621,1.114,8622,1.114,8623,1.9,8624,1.114,8625,1.114,8626,4.031,8627,1.114,8628,2.483,8629,1.114,8630,1.114,8631,1.114,8632,1.114,8633,1.9,8634,2.934,8635,1.9,8636,2.483,8637,2.483,8638,2.934,8639,2.934,8640,1.114,8641,1.114,8642,1.114,8643,1.114,8644,1.114,8645,1.114,8646,1.114,8647,2.483,8648,1.114,8649,1.114,8650,1.114,8651,1.114,8652,1.9,8653,1.114,8654,1.114,8655,1.114,8656,1.114,8657,1.114,8658,1.114,8659,1.114,8660,1.114,8661,1.114,8662,1.114,8663,1.114,8664,1.114,8665,1.114,8666,1.114,8667,1.114,8668,1.114,8669,1.114,8670,0.92,8671,1.114,8672,1.114,8673,1.114,8674,1.114,8675,1.114,8676,1.114,8677,1.114,8678,1.114,8679,1.114,8680,1.114,8681,1.114,8682,1.114,8683,1.114]],["title/1933378",[6622,16.516]],["body/1933378",[29,0.67,59,0.663,71,0.516,92,0.871,101,0.35,150,0.752,151,2.107,296,0.752,471,3.386,689,0.752,705,2.107,748,0.871,1004,1.29,1112,1.423,1659,1.423,1832,1.569,2432,3.574,2778,1.729,2780,1.729,2974,2.855,3787,1.729,4118,2.107,6622,2.603,7300,3.864,7354,3.864,8684,4.681,8685,3.864,8686,4.681,8687,4.681,8688,4.681,8689,4.681,8690,4.681,8691,4.681,8692,4.681,8693,4.681,8694,4.681,8695,4.681,8696,4.681,8697,4.681,8698,4.681,8699,3.864,8700,4.681,8701,4.681,8702,4.681,8703,4.681,8704,4.681,8705,4.681,8706,4.681,8707,4.681,8708,4.681,8709,4.681,8710,4.681,8711,4.681,8712,4.681,8713,5.421,8714,4.681,8715,4.681,8716,4.681,8717,4.681,8718,4.681,8719,4.681,8720,4.681,8721,4.681,8722,4.681,8723,4.681,8724,4.681,8725,4.681,8726,4.681,8727,4.681,8728,4.681,8729,4.681,8730,4.681,8731,4.681,8732,4.681,8733,4.681,8734,4.681]],["title/1015832",[6619,24.517]],["body/1015832",[2404,3.486,3744,3.486,4225,3.065,4518,3.486,5439,3.486,6620,3.065,6621,3.486,6622,2.729,6623,3.486,6624,3.486,6625,3.486,6626,3.486,8735,4.907,8736,4.907]],["title/1015850",[4975,21.103]],["body/1015850",[29,0.691,50,3.109,62,1.986,71,0.362,84,3.493,92,0.794,99,3.31,101,0.369,103,1.629,106,2.466,107,2.229,126,1.481,133,3.087,293,0.611,296,0.961,481,1.344,614,0.568,616,0.7,748,0.898,833,0.526,1004,1.476,1007,2.013,1068,2.504,1548,2.466,1571,2.504,1904,4.74,2511,3.346,2787,3.31,2795,3.511,2966,2.987,3755,3.806,3831,2.229,3896,2.504,4125,3.973,4213,2.849,5010,3.31,6066,4.336,6280,4.98,6580,3.653,6616,2.849,6945,4.079,7826,4.422,8297,2.849,8685,3.31,8737,4.009,8738,4.009,8739,4.009,8740,4.009,8741,4.009,8742,4.009,8743,4.009,8744,4.009,8745,4.009,8746,4.009,8747,4.009,8748,4.009,8749,6.217,8750,4.009,8751,4.009,8752,4.009,8753,4.009,8754,4.009,8755,4.009,8756,4.009,8757,4.009,8758,4.009,8759,4.942,8760,4.009,8761,4.009,8762,4.942,8763,4.942,8764,4.009,8765,4.009,8766,4.009,8767,4.009,8768,4.009,8769,5.357,8770,4.009,8771,5.592,8772,4.009,8773,4.009,8774,4.009,8775,4.009,8776,4.009,8777,4.009,8778,4.009,8779,4.009,8780,4.009,8781,4.009,8782,4.009,8783,4.009,8784,5.592,8785,4.009,8786,5.357,8787,4.009,8788,4.009,8789,5.357,8790,4.009,8791,4.009,8792,4.009,8793,4.009,8794,4.009,8795,4.009,8796,4.009,8797,4.009,8798,4.009,8799,4.009,8800,4.009,8801,4.009,8802,4.009,8803,4.009,8804,4.009,8805,4.009,8806,4.009,8807,4.009,8808,4.009,8809,4.009,8810,4.009,8811,4.009,8812,4.009,8813,4.009,8814,4.009,8815,4.009,8816,6.189,8817,4.009,8818,4.009,8819,4.009,8820,4.009,8821,4.009,8822,4.009,8823,4.009,8824,4.009,8825,4.009,8826,4.942,8827,4.009,8828,4.009,8829,4.009,8830,4.009,8831,4.009,8832,4.942,8833,5.357,8834,4.009,8835,4.009,8836,4.009,8837,4.009,8838,4.009,8839,4.009,8840,4.009,8841,4.009,8842,4.009,8843,4.079,8844,4.009,8845,4.009,8846,4.009,8847,4.009,8848,4.009,8849,4.009,8850,4.009,8851,3.31,8852,4.009,8853,4.942,8854,4.009,8855,4.009,8856,4.009,8857,4.009,8858,3.31,8859,4.009,8860,4.009,8861,4.009,8862,4.009,8863,4.009,8864,4.009,8865,5.848,8866,4.009,8867,4.009,8868,4.009,8869,4.009,8870,4.009,8871,5.743,8872,3.31,8873,4.009,8874,3.31,8875,4.009,8876,4.009,8877,4.009,8878,4.009,8879,3.31,8880,4.009,8881,4.009,8882,4.009,8883,4.009,8884,4.009,8885,4.009,8886,4.009,8887,4.009,8888,4.009,8889,4.009,8890,2.849,8891,4.009,8892,4.009,8893,4.942,8894,4.009,8895,4.009,8896,4.009,8897,3.31,8898,4.009,8899,4.009,8900,4.009]],["title/1015831",[6620,18.552]],["body/1015831",[16,1.971,29,0.713,59,0.803,71,0.556,92,0.875,95,1.737,101,0.453,106,1.22,127,1.737,128,2.518,137,2.604,138,2.699,157,1.689,163,1.36,195,0.903,239,0.494,292,1.698,293,0.707,296,0.813,415,2.214,422,2.08,430,2.254,479,1.202,614,0.59,616,0.59,689,0.984,706,1.886,748,0.779,833,0.556,915,1.54,1006,2.05,1007,1.698,1084,1.876,1261,2.018,1347,2.013,1364,2.058,1367,1.595,1377,2.08,1383,2.318,1385,2.318,1398,2.178,1405,2.08,1472,2.018,1499,2.856,1527,2.214,1532,2.856,1539,3.843,1542,2.518,1543,3.248,1617,2.926,1618,1.527,1633,2.214,1659,1.476,1662,1.36,1666,1.527,1715,1.188,1811,1.36,1832,1.532,1911,1.737,1976,2.018,2002,1.527,2095,1.769,2378,2.926,2439,3.34,2441,2.214,2447,1.971,2450,2.08,2511,3.457,2526,1.737,2562,2.926,2677,3.032,2795,3.596,2966,1.22,3627,2.018,3787,1.975,3831,1.36,3887,1.527,4037,3.54,4225,1.527,4362,2.018,4364,2.08,4471,2.926,4572,2.018,4815,1.527,5069,2.018,5071,2.926,5072,2.018,5073,4.178,5075,1.737,5159,4.414,5353,3.404,5430,3.441,5445,2.018,5489,1.737,5523,4.427,5753,2.018,5862,1.737,5909,3.248,5911,2.856,5929,1.769,6045,2.018,6057,4.006,6064,3.448,6066,3.248,6227,3.441,6229,3.774,6255,4.006,6269,2.018,6580,2.214,6620,1.527,6640,1.737,6771,2.926,7009,2.018,7229,4.006,7945,2.018,7962,1.737,8116,2.018,8901,2.445,8902,2.445,8903,2.445,8904,3.544,8905,2.445,8906,3.544,8907,2.445,8908,2.445,8909,3.544,8910,2.445,8911,2.445,8912,2.445,8913,2.445,8914,3.544,8915,2.445,8916,2.445,8917,2.445,8918,2.445,8919,2.445,8920,2.445,8921,2.445,8922,2.445,8923,2.445,8924,4.169,8925,4.572,8926,2.445,8927,2.445,8928,2.445,8929,2.445,8930,2.018,8931,2.445,8932,2.445,8933,2.445,8934,2.445,8935,2.445,8936,2.445,8937,4.853,8938,2.445,8939,2.445,8940,2.445,8941,2.445,8942,2.445,8943,2.445,8944,2.445,8945,3.544,8946,4.169,8947,2.445,8948,2.445,8949,2.445,8950,2.445,8951,2.445,8952,2.445,8953,2.445,8954,2.445,8955,2.445,8956,2.445,8957,2.445,8958,2.445,8959,2.445,8960,2.445,8961,2.445,8962,2.445,8963,2.445,8964,2.445,8965,2.445,8966,2.445,8967,2.445,8968,2.445,8969,2.445,8970,2.445,8971,2.445,8972,2.445,8973,2.445,8974,2.445,8975,2.445,8976,2.445,8977,2.445,8978,2.445,8979,2.445,8980,2.445,8981,2.445,8982,2.445,8983,2.445,8984,2.445,8985,2.445,8986,2.445,8987,2.445,8988,2.445,8989,2.445,8990,2.445,8991,2.445,8992,3.544,8993,2.445,8994,2.445,8995,2.445,8996,2.445,8997,2.445,8998,2.445,8999,2.445,9000,2.445,9001,2.445,9002,2.445,9003,2.445,9004,2.445,9005,2.445,9006,2.445,9007,2.445,9008,2.445,9009,2.445,9010,2.445,9011,2.445,9012,2.445,9013,2.445,9014,3.544,9015,2.445,9016,2.445,9017,2.445,9018,2.445,9019,2.445,9020,3.544,9021,2.445,9022,2.445,9023,2.445,9024,2.445,9025,2.445,9026,2.445,9027,2.445,9028,2.445,9029,2.445,9030,2.445,9031,2.445,9032,2.445,9033,2.445,9034,2.445,9035,2.445,9036,2.445,9037,2.445,9038,2.445,9039,2.445,9040,2.445,9041,2.445,9042,2.445,9043,2.445,9044,2.445,9045,2.445,9046,2.445,9047,2.445,9048,2.445,9049,2.445,9050,2.445,9051,2.445,9052,2.445,9053,2.445,9054,2.445,9055,2.445,9056,2.445,9057,2.445,9058,2.445,9059,2.445,9060,2.445,9061,2.445,9062,2.445,9063,2.445,9064,2.445,9065,2.445,9066,2.445,9067,2.445,9068,2.445,9069,2.445,9070,2.445,9071,2.445,9072,2.445,9073,2.445,9074,2.445,9075,2.445,9076,2.445,9077,2.445,9078,4.169,9079,2.445,9080,2.445,9081,2.445,9082,4.572,9083,2.445,9084,2.445,9085,2.445,9086,2.445,9087,2.445,9088,2.445,9089,2.445,9090,2.445,9091,2.018,9092,2.445,9093,2.445,9094,2.445,9095,2.445,9096,2.445,9097,2.445,9098,2.445,9099,2.445,9100,2.445,9101,2.445,9102,2.445,9103,3.441,9104,3.441,9105,2.445,9106,2.445,9107,3.544,9108,2.445,9109,2.445,9110,2.445,9111,2.445,9112,2.445,9113,2.445,9114,2.518,9115,2.445,9116,2.445,9117,2.445,9118,2.445,9119,2.445,9120,2.445,9121,2.445,9122,2.445,9123,2.445,9124,2.445,9125,2.445,9126,2.445,9127,2.445,9128,2.445,9129,2.445,9130,2.445,9131,2.445,9132,4.572,9133,4.572,9134,2.445,9135,2.445,9136,2.445,9137,2.445,9138,3.544,9139,2.445,9140,2.445,9141,2.445,9142,2.445,9143,2.445,9144,2.445,9145,2.445,9146,2.445,9147,2.445,9148,2.445,9149,2.445,9150,2.445,9151,2.445,9152,2.445,9153,2.445,9154,2.445,9155,2.445,9156,2.445,9157,2.445,9158,2.445,9159,2.445,9160,3.544,9161,2.445,9162,2.445,9163,2.445,9164,4.169,9165,2.445,9166,2.445,9167,2.445,9168,2.445,9169,2.445,9170,2.445,9171,2.445,9172,4.169,9173,2.445,9174,2.445,9175,2.445,9176,2.445,9177,2.445,9178,2.445,9179,2.445,9180,2.445,9181,2.445,9182,2.445,9183,2.445,9184,2.445,9185,2.445,9186,2.445,9187,2.445,9188,2.445,9189,2.445,9190,2.445,9191,2.445,9192,2.445,9193,2.445,9194,2.445,9195,2.445,9196,2.445,9197,2.445,9198,2.445,9199,2.445,9200,2.445,9201,2.445,9202,2.445,9203,2.445,9204,2.445,9205,2.445,9206,2.445,9207,3.544,9208,2.445,9209,2.445,9210,2.445,9211,2.445,9212,2.445,9213,2.445,9214,3.544,9215,3.544,9216,2.445,9217,3.544,9218,2.926,9219,2.445,9220,4.169,9221,4.169,9222,2.445,9223,2.445,9224,2.445,9225,2.445,9226,2.445,9227,2.445,9228,2.445,9229,2.445,9230,2.445,9231,2.445,9232,2.445,9233,2.445,9234,2.445,9235,2.445,9236,2.445,9237,2.445,9238,5.45,9239,2.445,9240,2.445,9241,2.445,9242,2.445,9243,2.445,9244,2.445,9245,2.445,9246,2.445,9247,2.445,9248,2.445,9249,2.445,9250,2.445,9251,2.445,9252,2.445,9253,2.445,9254,2.445,9255,2.445,9256,2.445,9257,2.445,9258,2.445,9259,2.445,9260,2.445,9261,2.445,9262,2.445,9263,2.445,9264,2.445,9265,2.445,9266,2.445,9267,2.445,9268,2.445,9269,2.445,9270,2.926,9271,2.445,9272,2.445,9273,2.445,9274,2.445,9275,2.445,9276,2.445,9277,2.445,9278,2.445,9279,2.445,9280,2.445,9281,2.445,9282,2.445,9283,2.445,9284,2.445,9285,2.445,9286,2.445,9287,2.445,9288,2.445,9289,2.445,9290,2.445,9291,2.445,9292,2.445,9293,2.445,9294,2.445,9295,2.445,9296,2.445,9297,2.445,9298,2.445,9299,2.445,9300,2.445,9301,2.445,9302,3.544,9303,2.445,9304,3.544,9305,3.544,9306,2.445,9307,2.445,9308,2.445,9309,2.445,9310,4.169,9311,4.169,9312,4.169,9313,4.572,9314,4.169,9315,4.169,9316,4.169,9317,4.169,9318,4.169,9319,4.169,9320,4.169,9321,4.169,9322,4.169,9323,3.544,9324,3.544,9325,5.061,9326,4.169,9327,4.169,9328,4.169,9329,4.169,9330,4.169,9331,4.169,9332,4.169,9333,3.544,9334,2.445,9335,2.445,9336,2.445,9337,2.445,9338,5.061,9339,5.061,9340,5.061,9341,3.544,9342,2.445,9343,3.544,9344,2.018,9345,2.445,9346,4.572,9347,2.926,9348,3.544,9349,2.445,9350,2.445,9351,2.445,9352,3.544,9353,3.544,9354,2.445,9355,2.445,9356,2.445,9357,2.445,9358,2.445,9359,2.445,9360,2.445,9361,2.445,9362,2.445,9363,2.445,9364,2.445,9365,2.445,9366,2.445,9367,2.445,9368,2.445,9369,2.445,9370,2.445,9371,2.445,9372,2.445,9373,2.445,9374,2.445,9375,2.445,9376,2.445,9377,2.445,9378,2.018,9379,2.445,9380,2.445,9381,2.445,9382,2.445,9383,2.445,9384,3.544,9385,3.544,9386,2.445,9387,2.445,9388,2.445,9389,2.445,9390,2.445,9391,2.445,9392,2.445,9393,2.445,9394,2.445,9395,2.445,9396,2.445,9397,2.445,9398,2.445,9399,2.445,9400,2.445,9401,3.544,9402,2.445,9403,5.842,9404,4.169,9405,2.445,9406,2.445,9407,2.445,9408,2.445,9409,2.445,9410,2.445,9411,2.445,9412,2.445,9413,2.445,9414,2.445,9415,2.445,9416,2.445,9417,2.445,9418,2.445,9419,2.445,9420,2.445,9421,2.445,9422,2.445,9423,2.445,9424,2.445,9425,2.445,9426,2.445,9427,2.445,9428,2.445,9429,2.445,9430,2.445,9431,2.445,9432,2.445,9433,2.445,9434,2.445,9435,2.445,9436,2.445,9437,2.445,9438,2.445,9439,2.445,9440,2.445,9441,2.445,9442,2.445,9443,2.445,9444,2.445,9445,2.445,9446,2.445,9447,2.445,9448,2.445,9449,2.445,9450,2.445,9451,2.445,9452,2.445,9453,2.445,9454,2.445,9455,2.445,9456,2.445,9457,2.445,9458,4.169,9459,4.572,9460,2.445,9461,2.445,9462,2.445,9463,2.445,9464,2.445,9465,2.445,9466,2.445,9467,2.445,9468,2.445,9469,2.445,9470,2.445,9471,2.445,9472,2.445,9473,2.445,9474,2.445,9475,2.445,9476,2.445,9477,2.445,9478,2.445,9479,2.445,9480,2.018,9481,2.445,9482,2.445,9483,2.445,9484,2.445,9485,2.445,9486,2.445,9487,2.445,9488,2.445,9489,2.445,9490,2.445,9491,3.544,9492,2.445,9493,2.445,9494,2.445,9495,2.445,9496,2.445,9497,2.445,9498,2.445,9499,2.445,9500,2.445,9501,2.445,9502,2.445,9503,2.445,9504,2.445,9505,3.544,9506,2.445,9507,2.445,9508,2.445,9509,2.445,9510,2.445,9511,2.445,9512,2.445,9513,2.445,9514,2.445,9515,2.445,9516,2.445,9517,2.445,9518,2.445,9519,2.445,9520,2.445,9521,2.445,9522,2.445,9523,2.445,9524,2.445,9525,2.445,9526,2.445,9527,2.445,9528,2.445,9529,2.445,9530,2.445,9531,2.445,9532,2.445,9533,2.445,9534,2.445,9535,2.445,9536,2.445,9537,2.445,9538,2.445,9539,2.445,9540,2.445,9541,2.445,9542,2.445,9543,2.445,9544,2.445,9545,2.445,9546,2.445,9547,2.445,9548,2.445,9549,2.445,9550,2.445,9551,2.445,9552,2.445,9553,2.445,9554,2.445,9555,2.445,9556,2.445,9557,2.445,9558,2.445,9559,2.445,9560,2.445,9561,2.445,9562,2.445,9563,2.445,9564,2.445,9565,4.169,9566,2.445,9567,2.445,9568,2.445,9569,2.445,9570,2.445,9571,2.445,9572,2.445,9573,2.445,9574,2.445,9575,2.445,9576,2.445,9577,2.445,9578,2.445,9579,2.445,9580,2.445,9581,2.445,9582,2.445,9583,2.445,9584,2.445,9585,2.445,9586,2.445,9587,2.445,9588,2.445,9589,2.445,9590,2.445,9591,2.445,9592,2.445,9593,2.445,9594,2.445,9595,2.445,9596,2.445,9597,2.445,9598,2.445,9599,2.445,9600,2.445,9601,2.445,9602,2.445,9603,2.445,9604,2.445,9605,2.445,9606,2.445,9607,2.445,9608,2.445,9609,2.445,9610,2.445,9611,2.445,9612,2.445,9613,2.445,9614,2.445,9615,2.445,9616,2.445,9617,2.445,9618,2.445,9619,2.445,9620,2.445,9621,2.445,9622,2.445,9623,2.445,9624,2.445,9625,2.445,9626,2.445,9627,2.445,9628,2.445,9629,2.445]],["title/1015818",[4974,21.103]],["body/1015818",[29,0.773,50,1.501,59,0.539,62,1.935,67,1.762,71,0.57,86,1.215,87,1.687,92,0.741,101,0.464,103,1.591,107,2.565,109,0.95,120,3.993,121,1.501,150,0.863,151,1.865,195,0.631,239,1.191,292,0.696,293,0.636,296,0.979,393,1.41,407,1.214,408,0.769,422,0.852,479,0.991,482,1.918,497,1.067,614,0.837,616,0.77,689,0.81,705,0.769,737,2.054,748,0.931,833,0.633,883,1.41,956,1.214,967,1.865,1002,1.237,1112,0.519,1367,1.865,1527,1.067,1548,2.198,1571,1.067,1666,1.067,1684,1.067,1712,1.712,1715,1.65,1794,2.516,1797,2.609,1811,2.45,1869,1.687,1930,2.19,2030,1.41,2095,2.198,2096,1.067,2158,1.41,2207,1.214,2256,1.918,2342,2.198,2356,3.498,2394,1.214,2615,1.41,2677,1.687,2683,1.122,2759,1.687,2778,1.9,2780,1.9,2786,2.302,2794,2.229,2949,0.95,2966,2.198,2997,1.214,3102,3.141,3109,2.764,3388,1.214,3395,1.918,3397,2.229,3602,2.304,3788,1.501,3826,2.703,3830,0.95,3831,0.95,3889,1.214,3895,1.067,3897,2.198,4037,3.213,4118,2.315,4295,3.636,4484,1.501,4485,1.687,4486,1.501,4487,1.067,4488,1.214,4640,1.214,4707,1.214,4760,2.229,5565,3.934,5604,0.769,5662,3.141,5997,1.41,6062,3.636,6116,1.41,6616,1.214,7443,2.229,7496,1.41,7689,1.41,7962,1.918,8225,1.41,8297,3.278,8843,1.41,8851,1.41,8858,3.141,8872,2.229,8874,4.064,8879,2.229,8890,2.379,8897,4.852,8930,1.41,9104,4.318,9114,2.379,9347,2.764,9480,1.41,9630,1.708,9631,1.708,9632,1.708,9633,1.708,9634,1.708,9635,1.708,9636,1.708,9637,1.708,9638,1.708,9639,1.708,9640,1.708,9641,1.708,9642,1.708,9643,1.708,9644,1.708,9645,1.708,9646,1.708,9647,1.708,9648,1.708,9649,1.708,9650,1.708,9651,1.708,9652,1.708,9653,1.708,9654,1.708,9655,1.708,9656,1.708,9657,1.708,9658,1.708,9659,1.708,9660,1.708,9661,1.708,9662,1.708,9663,1.708,9664,2.7,9665,2.7,9666,1.708,9667,1.708,9668,1.708,9669,2.7,9670,2.7,9671,1.708,9672,1.708,9673,1.708,9674,2.7,9675,1.708,9676,1.708,9677,1.708,9678,1.708,9679,1.708,9680,1.708,9681,1.708,9682,1.708,9683,1.708,9684,1.708,9685,1.708,9686,1.708,9687,1.708,9688,1.708,9689,1.708,9690,1.708,9691,1.708,9692,1.708,9693,1.708,9694,1.708,9695,1.708,9696,1.708,9697,1.708,9698,1.708,9699,3.805,9700,1.708,9701,1.708,9702,1.708,9703,1.708,9704,1.708,9705,1.708,9706,1.708,9707,1.708,9708,1.708,9709,1.708,9710,1.708,9711,1.708,9712,1.708,9713,1.708,9714,2.7,9715,1.708,9716,5.144,9717,4.924,9718,3.805,9719,3.348,9720,5.042,9721,3.348,9722,5.144,9723,1.708,9724,1.708,9725,1.708,9726,3.348,9727,1.708,9728,1.708,9729,1.708,9730,4.405,9731,1.708,9732,4.405,9733,5.042,9734,4.783,9735,4.144,9736,1.708,9737,3.348,9738,4.924,9739,1.708,9740,2.7,9741,1.708,9742,1.708,9743,5.489,9744,1.708,9745,1.708,9746,4.614,9747,1.708,9748,4.783,9749,2.7,9750,2.7,9751,1.708,9752,1.708,9753,1.708,9754,1.708,9755,1.708,9756,6.031,9757,1.708,9758,1.708,9759,1.708,9760,1.708,9761,1.708,9762,2.7,9763,1.708,9764,1.708,9765,3.805,9766,1.708,9767,1.708,9768,1.708,9769,1.708,9770,1.708,9771,2.7,9772,1.708,9773,1.708,9774,1.708,9775,1.708,9776,1.708,9777,1.708,9778,1.708,9779,2.7,9780,1.708,9781,4.924,9782,4.783,9783,1.708,9784,4.783,9785,4.783,9786,1.708,9787,4.783,9788,5.042,9789,4.783,9790,4.144,9791,4.924,9792,4.924,9793,1.708,9794,1.708,9795,1.708,9796,3.805,9797,1.708,9798,1.708,9799,1.708,9800,1.708,9801,1.708,9802,1.708,9803,3.348,9804,4.405,9805,4.783,9806,3.805,9807,3.348,9808,1.708,9809,1.708,9810,3.805,9811,1.708,9812,5.231,9813,2.7,9814,3.805,9815,4.144,9816,3.348,9817,4.614,9818,1.708,9819,1.708,9820,3.348,9821,3.348,9822,1.708,9823,1.708,9824,1.708,9825,3.348,9826,3.348,9827,1.708,9828,1.708,9829,3.348,9830,4.144,9831,1.708,9832,1.708,9833,1.708,9834,1.708,9835,1.708,9836,2.7,9837,1.708,9838,1.708,9839,1.708,9840,4.783,9841,4.783,9842,5.773,9843,4.783,9844,1.708,9845,5.537,9846,4.614,9847,4.614,9848,3.348,9849,4.405,9850,4.405,9851,4.405,9852,3.348,9853,3.348,9854,2.7,9855,3.348,9856,1.708,9857,1.708,9858,2.7,9859,1.708,9860,2.7,9861,4.614,9862,1.708,9863,2.7,9864,1.708,9865,2.7,9866,2.7,9867,1.708,9868,4.405,9869,1.708,9870,2.7,9871,2.7,9872,1.708,9873,1.708,9874,1.708,9875,1.708,9876,1.708,9877,1.708,9878,1.708,9879,1.708,9880,1.708,9881,1.708,9882,1.708,9883,1.708,9884,1.708,9885,1.708,9886,3.348,9887,1.708,9888,1.708,9889,1.708,9890,1.708,9891,2.7,9892,1.708,9893,1.708,9894,1.708,9895,1.708,9896,1.708,9897,1.708,9898,1.708,9899,1.708,9900,1.708,9901,1.708,9902,1.708,9903,1.708,9904,1.708,9905,1.708,9906,1.708,9907,1.708,9908,1.708,9909,1.708,9910,1.708,9911,1.708,9912,1.708,9913,1.708,9914,1.708,9915,1.708,9916,1.708,9917,1.708,9918,1.708,9919,1.708,9920,1.708,9921,1.708,9922,1.708,9923,1.708,9924,1.708,9925,1.708,9926,1.708,9927,1.708,9928,1.708,9929,1.708,9930,1.708,9931,1.708,9932,1.708,9933,1.708,9934,1.708,9935,1.708,9936,1.708,9937,1.708,9938,1.708,9939,1.708,9940,2.7,9941,3.348,9942,2.7,9943,1.708,9944,3.805,9945,2.7,9946,2.7,9947,1.708,9948,1.708,9949,2.7,9950,1.708,9951,1.708,9952,1.708,9953,1.708,9954,1.708,9955,1.708,9956,2.7,9957,3.348,9958,4.144,9959,2.7,9960,1.708,9961,1.708,9962,1.708,9963,1.708,9964,1.708,9965,1.708,9966,2.7,9967,1.708,9968,1.708,9969,1.708,9970,3.348,9971,1.708,9972,1.708,9973,1.708,9974,1.708,9975,1.708,9976,1.708,9977,1.708,9978,1.708,9979,1.708,9980,1.708,9981,1.708,9982,1.708,9983,1.708,9984,1.708,9985,2.7,9986,1.708,9987,1.708,9988,1.708,9989,1.708,9990,1.708,9991,1.708,9992,1.708,9993,1.708,9994,1.708,9995,1.708,9996,1.708,9997,1.708,9998,1.708,9999,1.708,10000,4.783,10001,1.708,10002,1.708,10003,1.708,10004,1.708,10005,2.7,10006,1.708,10007,1.708,10008,1.708,10009,1.708,10010,1.708,10011,1.708,10012,1.708,10013,1.708,10014,1.708,10015,1.708,10016,1.708,10017,1.708,10018,1.708,10019,1.708,10020,3.348,10021,5.042,10022,3.348,10023,1.708,10024,3.348,10025,1.708,10026,2.7,10027,1.708,10028,3.348,10029,1.41,10030,1.708,10031,1.708,10032,1.708,10033,1.708,10034,1.708,10035,1.708,10036,1.708,10037,1.708,10038,1.708,10039,1.708,10040,3.805,10041,2.7,10042,1.708,10043,1.708,10044,1.708,10045,1.708,10046,1.708,10047,1.708,10048,1.708,10049,1.708,10050,1.708,10051,1.708,10052,1.708,10053,1.708,10054,1.708,10055,1.708,10056,3.348,10057,1.708,10058,1.708,10059,1.708,10060,1.708,10061,1.708,10062,1.708,10063,1.708,10064,1.708,10065,4.614,10066,1.708,10067,1.708,10068,1.708,10069,1.708,10070,1.708,10071,1.708,10072,1.708,10073,1.708,10074,1.708,10075,1.708,10076,1.708,10077,1.708,10078,1.708,10079,1.708,10080,2.7,10081,1.708,10082,1.708,10083,1.708,10084,1.708,10085,1.708,10086,1.708,10087,2.7,10088,1.708,10089,1.708,10090,1.708,10091,1.708,10092,1.708,10093,1.708,10094,1.708,10095,1.708,10096,1.708,10097,1.708,10098,1.708,10099,1.708,10100,1.708,10101,1.708,10102,1.708,10103,1.708,10104,1.708,10105,1.708,10106,1.708,10107,1.708,10108,1.708,10109,1.708,10110,1.708,10111,1.708,10112,1.708,10113,1.708,10114,1.708,10115,1.708,10116,2.7,10117,2.7,10118,1.708,10119,1.708,10120,4.924,10121,4.924,10122,1.708,10123,5.489,10124,1.708,10125,1.708,10126,1.708,10127,1.708,10128,5.797,10129,3.805,10130,4.144,10131,3.805,10132,3.805,10133,1.708,10134,1.708,10135,3.805,10136,1.708,10137,1.708,10138,3.348,10139,1.708,10140,1.708,10141,1.708,10142,1.708,10143,1.708,10144,1.708,10145,3.805,10146,3.805,10147,1.708,10148,1.708,10149,2.7,10150,1.708,10151,1.708,10152,1.708,10153,1.708,10154,1.708,10155,1.708,10156,1.708,10157,4.405,10158,1.708,10159,1.708,10160,1.708,10161,1.708,10162,1.708,10163,1.708,10164,1.708,10165,1.708,10166,1.708,10167,1.708,10168,1.708,10169,1.708,10170,3.348,10171,2.7,10172,3.348,10173,2.7,10174,1.708,10175,1.708,10176,1.708,10177,1.708,10178,1.708,10179,4.924,10180,5.656,10181,4.924,10182,1.708,10183,1.708,10184,1.708,10185,1.708,10186,1.708,10187,1.708,10188,2.229,10189,1.708,10190,2.7,10191,4.924,10192,1.708,10193,1.708,10194,1.708,10195,1.708,10196,1.708,10197,1.708,10198,1.708,10199,1.708,10200,1.708,10201,4.405,10202,3.348,10203,3.348,10204,3.348,10205,3.348,10206,4.405,10207,3.348,10208,3.348,10209,3.348,10210,3.348,10211,3.348,10212,3.348,10213,3.348,10214,3.348,10215,3.348,10216,3.348,10217,3.805,10218,3.348,10219,4.924,10220,3.348,10221,3.348,10222,4.405,10223,3.348,10224,3.348,10225,3.348,10226,3.348,10227,3.348,10228,4.405,10229,3.348,10230,3.348,10231,1.708,10232,3.348,10233,3.348,10234,3.348,10235,4.405,10236,4.405,10237,3.348,10238,3.348,10239,3.348,10240,3.348,10241,3.348,10242,3.348,10243,3.348,10244,3.348,10245,3.348,10246,4.405,10247,3.348,10248,3.348,10249,3.348,10250,3.348,10251,3.348,10252,3.348,10253,1.708,10254,1.708,10255,1.708,10256,1.708,10257,1.708,10258,1.708,10259,1.708,10260,1.708,10261,1.708,10262,2.7,10263,3.348,10264,1.708,10265,1.708,10266,1.708,10267,1.708,10268,1.708,10269,1.708,10270,1.708,10271,1.708,10272,1.708,10273,1.708,10274,1.708,10275,1.708,10276,1.708,10277,1.708,10278,1.708,10279,1.708,10280,1.708,10281,1.708,10282,1.708,10283,1.708,10284,1.708,10285,1.708,10286,1.708,10287,1.708,10288,1.708,10289,1.708,10290,1.708,10291,1.708,10292,1.708,10293,1.708,10294,1.708,10295,1.708,10296,2.7,10297,3.805,10298,2.7,10299,3.805,10300,2.7,10301,2.7,10302,2.7,10303,2.7,10304,2.7,10305,2.7,10306,2.7,10307,2.7,10308,2.7,10309,3.805,10310,2.7,10311,2.7,10312,4.405,10313,2.7,10314,3.805,10315,2.7,10316,5.042,10317,2.7,10318,3.805,10319,2.7,10320,2.7,10321,2.7,10322,2.7,10323,2.7,10324,2.7,10325,2.7,10326,1.708,10327,4.144,10328,1.708,10329,1.708,10330,1.708,10331,1.708,10332,1.708,10333,1.708,10334,1.708,10335,2.7,10336,2.7,10337,2.7,10338,5.042,10339,2.7,10340,2.7,10341,2.7,10342,2.7,10343,2.7,10344,2.7,10345,2.7,10346,2.7,10347,2.7,10348,2.7,10349,2.7,10350,2.7,10351,2.7,10352,2.7,10353,2.7,10354,2.7,10355,2.7,10356,2.7,10357,2.7,10358,2.7,10359,2.7,10360,2.7,10361,2.7,10362,1.708,10363,1.708,10364,1.708,10365,1.708,10366,1.708,10367,1.708,10368,1.708,10369,1.708,10370,1.708,10371,1.708,10372,1.708,10373,1.708,10374,1.708,10375,1.708,10376,1.708,10377,1.708,10378,1.41,10379,1.708,10380,2.7,10381,1.708,10382,1.708,10383,2.7,10384,2.7,10385,1.708,10386,1.708,10387,1.708,10388,2.7,10389,1.708,10390,2.7,10391,1.708,10392,1.708,10393,1.708,10394,1.708,10395,1.708,10396,1.708,10397,1.708,10398,1.708,10399,1.708,10400,2.7,10401,3.348,10402,1.708,10403,4.144,10404,1.708,10405,1.708,10406,1.708,10407,3.348,10408,1.708,10409,1.708,10410,1.708,10411,1.708,10412,1.708,10413,1.708,10414,1.708,10415,1.708,10416,1.708,10417,1.708,10418,1.708,10419,1.708,10420,1.708,10421,1.708,10422,1.708,10423,1.708,10424,1.708,10425,1.708,10426,1.708,10427,1.708,10428,1.708,10429,1.708,10430,1.708,10431,1.708,10432,1.708,10433,1.708,10434,1.708,10435,1.708,10436,1.708,10437,1.708,10438,1.708,10439,1.708,10440,1.708,10441,1.708,10442,1.708,10443,1.708,10444,1.708,10445,1.708,10446,1.708,10447,1.708,10448,1.708,10449,1.708,10450,1.708,10451,1.708,10452,1.708,10453,1.708,10454,1.708,10455,1.708,10456,1.708,10457,1.708,10458,1.708,10459,1.708,10460,1.708,10461,4.783,10462,5.231,10463,1.708,10464,2.7,10465,2.7,10466,1.708,10467,1.708,10468,1.708,10469,2.7,10470,2.7,10471,1.708,10472,1.708,10473,1.708,10474,1.708,10475,1.708,10476,2.7,10477,1.708,10478,1.708,10479,1.708,10480,1.41,10481,1.708,10482,1.708,10483,1.708,10484,1.708,10485,2.7,10486,1.708,10487,1.708,10488,1.708,10489,1.708,10490,2.7,10491,1.708,10492,1.708,10493,1.708,10494,1.708,10495,2.7,10496,1.708,10497,1.708,10498,1.708,10499,2.7,10500,1.708,10501,1.708,10502,1.708,10503,1.708,10504,1.708,10505,1.708,10506,1.708,10507,1.708,10508,1.708,10509,1.708,10510,1.708,10511,1.708,10512,1.708,10513,1.708,10514,1.708,10515,1.708,10516,1.708,10517,1.708,10518,1.708,10519,1.708,10520,2.7,10521,2.7,10522,3.805,10523,1.708,10524,1.708,10525,2.7,10526,2.7,10527,2.7,10528,2.7,10529,1.708,10530,1.708,10531,1.708,10532,1.708,10533,1.708,10534,1.708,10535,1.708,10536,2.7,10537,1.708,10538,1.708]],["title/2424889",[6625,21.103]],["body/2424889",[29,0.589,53,1.717,57,3.259,59,0.776,67,1.8,71,0.539,92,0.88,101,0.446,115,2.901,133,3.259,138,2.103,150,0.88,151,2.348,195,1.927,293,0.468,296,0.765,481,1.748,614,0.739,616,0.536,748,0.607,833,0.623,1112,1.816,1659,1.449,1832,1.597,2213,1.887,2341,2.231,2501,2.876,2778,1.76,2780,1.76,2796,2.362,3787,1.76,3931,2.362,4118,2.145,4150,4.307,4291,3.6,4294,3.655,4296,3.046,4297,3.259,4484,2.65,4485,2.976,4486,2.65,4487,2.976,5517,3.83,5604,2.348,6792,3.707,6796,3.707,6891,3.891,6893,2.687,6895,3.707,6897,2.687,7220,3.933,7432,3.122,7433,3.122,7434,3.122,7454,3.122,7525,3.122,7531,3.122,7532,3.122,7533,3.122,7563,3.122,7567,3.122,7568,3.122,7569,3.122,7571,3.122,7584,4.307,8276,3.122,8503,3.933,10029,3.122,10539,3.782,10540,3.782,10541,3.782,10542,3.782,10543,3.782,10544,3.782,10545,3.782,10546,3.782,10547,3.782,10548,3.782,10549,3.782,10550,3.782,10551,3.782,10552,3.782,10553,3.782,10554,3.782,10555,3.782,10556,3.782,10557,3.782,10558,3.782,10559,3.782,10560,3.782,10561,4.765,10562,4.765,10563,4.765,10564,4.765,10565,3.782,10566,3.782,10567,3.782,10568,3.782,10569,3.782,10570,4.011,10571,3.782,10572,3.707,10573,3.782,10574,3.782,10575,3.782,10576,4.307,10577,3.782,10578,3.122,10579,3.782,10580,4.765,10581,3.782,10582,3.122,10583,3.782,10584,3.782,10585,3.782,10586,3.782,10587,3.782,10588,3.782,10589,3.782,10590,3.782,10591,3.782,10592,3.782,10593,3.782,10594,3.782,10595,3.782,10596,3.782,10597,3.782,10598,3.782,10599,3.782,10600,3.782,10601,4.765,10602,3.782,10603,3.782,10604,3.782,10605,3.782,10606,3.782,10607,3.782,10608,3.782,10609,3.782,10610,3.782,10611,3.782,10612,3.782,10613,3.782,10614,3.122,10615,4.758,10616,3.782,10617,3.782,10618,3.782,10619,3.122,10620,3.782,10621,3.782,10622,3.782,10623,3.782,10624,3.782,10625,3.782,10626,3.782,10627,3.782,10628,3.782,10629,3.782,10630,3.782,10631,3.782,10632,3.782,10633,3.782,10634,3.782,10635,3.782,10636,3.782,10637,3.782,10638,3.782,10639,3.782,10640,3.782,10641,3.782,10642,3.782,10643,3.782,10644,5.217,10645,3.782,10646,5.217,10647,5.217,10648,4.307,10649,5.217,10650,5.477,10651,3.782,10652,5.217,10653,3.782,10654,3.782,10655,3.782,10656,3.782,10657,3.782,10658,3.782,10659,3.782,10660,3.782,10661,3.782,10662,3.782,10663,3.782,10664,3.782,10665,3.782,10666,3.782,10667,3.782,10668,3.782,10669,3.782,10670,3.782,10671,3.782,10672,3.782,10673,3.782,10674,3.782,10675,3.782,10676,3.782,10677,3.782,10678,3.782,10679,3.782,10680,3.782,10681,3.782,10682,3.782,10683,3.782,10684,3.782,10685,3.782,10686,3.782,10687,3.782,10688,3.782,10689,3.782,10690,3.782,10691,3.782,10692,3.782,10693,3.782,10694,3.782,10695,4.765,10696,3.782,10697,4.765,10698,3.782,10699,3.782,10700,3.782,10701,3.782,10702,3.782,10703,3.782,10704,3.782,10705,3.782,10706,3.782,10707,3.782,10708,3.782,10709,3.782,10710,3.782,10711,3.782,10712,3.782,10713,3.782,10714,3.782,10715,3.782,10716,3.782,10717,3.782,10718,3.782,10719,3.782,10720,3.782,10721,3.782,10722,3.782,10723,3.782,10724,3.122,10725,4.765,10726,3.782,10727,3.782,10728,3.782,10729,3.782,10730,3.782,10731,3.782,10732,3.782,10733,3.782,10734,3.782,10735,3.782,10736,3.782,10737,3.782,10738,3.782,10739,3.782,10740,3.782,10741,3.782,10742,3.782,10743,3.782,10744,3.782,10745,3.782,10746,3.782,10747,3.782,10748,3.782,10749,3.782,10750,3.782,10751,3.782,10752,3.782,10753,3.782,10754,3.782,10755,3.782,10756,3.782,10757,3.782,10758,3.782,10759,3.782,10760,3.782,10761,3.782,10762,3.782,10763,3.782,10764,3.782,10765,3.782,10766,3.782]],["title/2424869",[6624,21.103]],["body/2424869",[71,0.513,101,0.313,133,2.621,195,1.55,293,0.746,296,0.816,614,0.774,616,0.594,833,0.447,2213,2.535,2501,2.727,2988,2.094,3864,2.981,3932,3.463,4053,3.463,4278,3.463,4291,3.413,4294,3.173,4296,3.38,4297,2.621,5517,3.693,5604,1.888,6466,3.463,6891,2.981,6893,2.981,6895,2.981,6897,2.981,7219,3.463,7224,2.981,10570,3.61,10572,3.61,10578,4.194,10582,3.463,10614,3.463,10648,3.463,10724,3.463,10767,4.196,10768,4.196,10769,4.196,10770,4.196,10771,4.196,10772,4.196,10773,4.196,10774,4.688,10775,4.196,10776,4.196,10777,4.196,10778,3.463,10779,4.196,10780,4.196,10781,4.196,10782,4.196,10783,4.196,10784,4.196,10785,4.196,10786,4.196,10787,4.196,10788,4.196,10789,4.196,10790,4.196,10791,4.196,10792,4.196,10793,4.196,10794,4.196,10795,4.196,10796,4.196,10797,4.802,10798,3.463,10799,4.194,10800,3.463,10801,4.688,10802,4.196,10803,5.465,10804,4.196,10805,5.081,10806,4.196,10807,4.196,10808,4.196,10809,4.196,10810,4.196,10811,4.196,10812,4.196,10813,4.196,10814,5.081,10815,5.68,10816,5.081,10817,4.196,10818,4.196,10819,4.196,10820,4.196,10821,4.196,10822,4.196,10823,4.196,10824,4.196,10825,4.196,10826,4.196,10827,4.196,10828,5.081,10829,4.196,10830,4.196,10831,4.196,10832,3.463,10833,5.081,10834,4.196,10835,4.196,10836,4.196,10837,5.081,10838,4.196,10839,5.081,10840,5.081,10841,4.196,10842,4.196,10843,5.081,10844,4.196,10845,4.196,10846,4.196,10847,5.081,10848,4.196,10849,4.196,10850,4.196,10851,4.196,10852,4.196,10853,5.081,10854,4.196,10855,4.196,10856,4.196,10857,4.196,10858,4.196,10859,4.196,10860,5.081,10861,4.196,10862,4.196,10863,4.196,10864,4.196,10865,4.196,10866,4.196,10867,4.196,10868,4.196,10869,4.196,10870,4.196,10871,4.196,10872,4.196,10873,4.196,10874,4.196,10875,4.196,10876,4.196,10877,4.196,10878,4.196,10879,4.196,10880,4.196,10881,4.196,10882,5.081,10883,4.196,10884,4.196,10885,4.196,10886,4.196,10887,4.196,10888,4.196,10889,4.196,10890,4.196,10891,4.196,10892,4.196,10893,4.196,10894,4.196,10895,4.196,10896,4.196,10897,4.196,10898,4.196,10899,4.196,10900,3.463,10901,4.196,10902,4.196,10903,4.196,10904,4.196,10905,4.196,10906,4.196,10907,5.081,10908,4.196,10909,4.196,10910,4.196,10911,4.196,10912,4.196,10913,4.196,10914,4.196,10915,4.196,10916,4.196,10917,4.196,10918,4.196,10919,4.196,10920,4.196,10921,4.196,10922,4.196,10923,4.196,10924,4.196,10925,4.196,10926,4.196,10927,4.196,10928,4.196,10929,4.196,10930,4.196,10931,4.196,10932,4.196,10933,4.196,10934,4.196,10935,4.196]],["title/1703937",[6621,21.103]],["body/1703937",[8,2.05,29,0.668,59,0.786,62,1.457,101,0.364,115,2.418,122,1.638,150,0.783,157,1.917,239,0.663,293,0.759,296,0.891,412,1.825,614,0.616,616,0.616,705,2.548,706,1.847,748,0.527,833,0.463,967,1.477,1084,2.431,1133,2.71,1364,2.548,1377,2.59,1383,2.711,1385,3.003,1398,2.26,1405,2.825,1548,3.019,1797,1.477,2255,1.477,2342,2.59,2441,2.148,2447,2.711,2448,2.716,2450,2.433,2452,4.025,2484,2.71,2502,2.71,2507,3.589,2524,2.71,2561,2.71,2657,1.638,2677,3.046,2683,1.1,2796,2.05,3283,2.332,3285,2.71,3602,1.825,3734,3.589,3887,2.05,3897,2.59,4099,2.332,4276,2.71,4279,2.71,4292,2.71,4296,3.448,4364,2.433,4486,3.148,4610,2.71,4815,2.05,5517,3.242,5862,3.09,5863,2.332,5909,2.332,5911,2.05,5915,3.046,5922,2.71,5958,2.71,6435,2.71,6439,2.05,6640,3.837,6755,2.332,6756,2.332,6937,3.589,7039,4.458,7224,3.09,8699,2.71,9270,2.71,9378,3.589,10188,3.589,10378,4.673,10570,3.464,10572,3.688,10576,2.71,10615,3.589,10619,2.71,10774,4.025,10778,2.71,10797,2.71,10798,2.71,10799,2.71,10800,2.71,10801,2.71,10832,4.888,10900,3.589,10936,3.283,10937,3.283,10938,3.283,10939,4.348,10940,4.348,10941,3.283,10942,3.283,10943,3.283,10944,5.748,10945,3.283,10946,3.283,10947,3.283,10948,3.283,10949,4.348,10950,4.348,10951,3.283,10952,3.283,10953,3.283,10954,2.71,10955,3.283,10956,3.283,10957,3.283,10958,3.283,10959,3.283,10960,4.348,10961,3.283,10962,4.348,10963,3.283,10964,3.589,10965,2.71,10966,4.348,10967,3.283,10968,3.283,10969,2.71,10970,3.283,10971,3.283,10972,4.348,10973,3.283,10974,2.71,10975,3.283,10976,3.283,10977,3.283,10978,3.283,10979,3.283,10980,3.283,10981,2.71,10982,3.283,10983,3.283,10984,3.283,10985,2.71,10986,3.283,10987,3.283,10988,3.283,10989,3.283,10990,3.283,10991,3.283,10992,3.283,10993,3.283,10994,3.283,10995,3.283,10996,3.283,10997,3.283,10998,3.283,10999,3.283,11000,4.348,11001,3.283,11002,3.283,11003,3.283,11004,3.283,11005,3.283,11006,3.283,11007,3.283,11008,3.283,11009,3.283,11010,3.283,11011,3.283,11012,3.283,11013,5.191,11014,4.876,11015,4.876,11016,3.283,11017,3.283,11018,3.283,11019,3.283,11020,3.283,11021,3.283,11022,3.283,11023,3.283,11024,3.283,11025,2.71,11026,3.283,11027,3.283,11028,3.283,11029,3.283,11030,3.283,11031,3.283,11032,3.283,11033,3.283,11034,3.283,11035,3.283,11036,3.283,11037,4.348,11038,4.348,11039,3.283,11040,3.283,11041,3.283,11042,3.283,11043,3.283,11044,3.283,11045,3.283,11046,3.283,11047,3.283,11048,3.283,11049,3.283,11050,3.283,11051,3.283,11052,4.348,11053,3.283,11054,3.283,11055,3.283,11056,3.283,11057,3.283,11058,3.283,11059,3.283,11060,3.283,11061,3.283,11062,3.283,11063,3.283,11064,3.283,11065,3.283,11066,4.876,11067,3.283,11068,3.283,11069,3.283,11070,3.283,11071,3.283,11072,3.283,11073,3.283,11074,3.283,11075,3.283,11076,3.283,11077,2.71,11078,3.283,11079,3.283,11080,3.283,11081,3.283,11082,3.283,11083,3.283,11084,3.283,11085,3.283,11086,3.283,11087,3.283,11088,3.283,11089,3.283,11090,3.283,11091,3.283,11092,3.283,11093,3.283,11094,3.283,11095,4.348,11096,3.283,11097,3.283,11098,3.283,11099,3.283,11100,3.283,11101,3.283,11102,3.283,11103,3.283,11104,3.283,11105,3.283,11106,3.283,11107,3.283,11108,3.283,11109,3.283,11110,3.283,11111,4.348,11112,3.283,11113,5.4,11114,3.283,11115,3.283,11116,3.283,11117,3.283,11118,3.283,11119,3.283,11120,3.283,11121,3.283,11122,3.283,11123,5.921,11124,4.876,11125,4.876,11126,3.283,11127,3.283,11128,3.283,11129,3.283,11130,4.876,11131,3.283,11132,3.283,11133,3.283,11134,3.283,11135,3.283,11136,5.921,11137,3.283,11138,3.283,11139,4.348,11140,4.348,11141,3.283,11142,3.283,11143,3.283,11144,3.283,11145,3.283,11146,3.283,11147,3.283,11148,3.283,11149,3.283,11150,3.283,11151,3.283,11152,3.283,11153,4.876,11154,3.283,11155,3.283,11156,3.283,11157,4.876,11158,5.191,11159,5.661,11160,3.283,11161,3.283,11162,3.283,11163,3.283,11164,3.283,11165,4.876,11166,3.283,11167,3.283,11168,3.283,11169,3.283,11170,3.283,11171,3.283,11172,3.283,11173,3.283,11174,3.283,11175,3.283,11176,3.283,11177,3.283,11178,3.283,11179,3.283,11180,4.348,11181,3.283,11182,3.283,11183,3.283,11184,3.283,11185,3.283,11186,3.283,11187,3.283,11188,3.283,11189,3.283,11190,3.283,11191,3.283,11192,3.283,11193,3.283,11194,3.283,11195,3.283,11196,3.283,11197,3.283,11198,3.283,11199,3.283,11200,3.283,11201,3.283,11202,3.283,11203,3.283,11204,3.283,11205,3.283,11206,3.283,11207,3.283,11208,3.283,11209,4.348,11210,3.283,11211,3.283,11212,3.283,11213,3.283,11214,3.283,11215,3.283,11216,3.283,11217,3.283,11218,3.283,11219,3.283,11220,3.283,11221,3.283,11222,3.283,11223,3.283,11224,3.283,11225,3.283,11226,3.283,11227,3.283,11228,3.283,11229,3.283,11230,3.283,11231,3.283,11232,3.283,11233,3.283,11234,3.283,11235,3.283,11236,3.283,11237,3.283,11238,3.283,11239,3.283,11240,3.283,11241,3.283,11242,3.283,11243,3.283,11244,3.283,11245,3.283,11246,3.283,11247,3.283,11248,3.283,11249,3.283,11250,3.283,11251,3.283,11252,3.283,11253,3.283,11254,3.283,11255,3.283,11256,3.283,11257,3.283,11258,3.283,11259,3.283,11260,3.283,11261,3.283,11262,3.283,11263,3.283,11264,3.283,11265,3.283,11266,3.283,11267,3.283,11268,3.283,11269,3.283,11270,3.283,11271,3.283,11272,3.283,11273,3.283,11274,3.283,11275,3.283,11276,3.283,11277,3.283,11278,3.283,11279,3.283,11280,3.283,11281,4.348,11282,3.283,11283,4.348,11284,3.283,11285,3.283,11286,3.283,11287,3.283,11288,3.283,11289,3.283,11290,3.283,11291,3.283,11292,3.283,11293,3.283,11294,3.283,11295,3.283,11296,3.283,11297,3.283,11298,3.283,11299,3.283,11300,3.283,11301,3.283,11302,3.283,11303,3.283,11304,3.283,11305,3.283,11306,3.283,11307,3.283,11308,3.283]],["title/1015814",[4977,21.103]],["body/1015814",[29,0.752,53,1.372,62,1.634,67,0.858,71,0.479,84,2.818,86,2.569,88,2.788,92,0.982,94,2.33,101,0.47,118,2.182,121,2.182,150,0.891,239,0.57,292,1.15,293,0.752,412,2.95,432,3.206,479,1.224,614,0.808,616,0.751,689,0.725,737,2.325,748,0.874,833,0.62,881,3.724,915,1.666,1002,1.449,1004,1.243,1006,1.512,1659,0.858,1662,1.569,1811,2.182,1930,1.986,2095,2.943,2152,4.38,2153,2.33,2177,2.33,2178,2.33,2342,1.958,2773,3.724,2774,4.055,2775,4.711,2777,3.724,2778,1.666,2779,3.724,2780,1.666,2785,5.065,2788,5.035,2952,2.33,2974,2.251,3088,2.005,3221,3.046,3333,4.025,3405,4.897,3557,2.33,3825,3.724,3830,2.182,3889,2.005,5566,4.133,5604,2.45,6258,2.005,6781,2.005,7399,3.24,7687,2.33,7736,2.33,8204,3.24,8890,2.788,10480,3.24,11309,2.822,11310,2.822,11311,2.822,11312,2.822,11313,2.822,11314,2.822,11315,2.822,11316,2.822,11317,2.822,11318,2.822,11319,2.822,11320,2.822,11321,2.822,11322,2.822,11323,2.822,11324,2.822,11325,2.822,11326,2.822,11327,2.822,11328,4.512,11329,2.822,11330,2.822,11331,4.512,11332,2.822,11333,5.636,11334,3.924,11335,2.822,11336,2.822,11337,2.822,11338,2.822,11339,2.822,11340,2.822,11341,4.512,11342,4.877,11343,2.822,11344,3.924,11345,2.822,11346,4.512,11347,2.822,11348,4.877,11349,2.822,11350,2.822,11351,2.822,11352,2.822,11353,5.125,11354,4.512,11355,2.822,11356,3.924,11357,2.822,11358,2.822,11359,2.822,11360,2.822,11361,3.924,11362,2.822,11363,2.822,11364,4.512,11365,2.822,11366,2.822,11367,2.822,11368,2.822,11369,2.822,11370,3.924,11371,2.822,11372,3.924,11373,2.822,11374,2.822,11375,2.822,11376,2.822,11377,2.822,11378,2.822,11379,2.822,11380,2.822,11381,2.822,11382,2.822,11383,2.822,11384,3.924,11385,2.822,11386,2.822,11387,2.822,11388,2.822,11389,2.822,11390,2.822,11391,2.822,11392,2.822,11393,2.822,11394,2.822,11395,2.822,11396,2.822,11397,2.822,11398,2.822,11399,2.822,11400,2.822,11401,2.822,11402,2.822,11403,2.822,11404,2.822,11405,2.822,11406,2.822,11407,2.822,11408,2.822,11409,2.822,11410,2.822,11411,2.822,11412,2.822,11413,3.924,11414,2.822,11415,2.822,11416,2.822,11417,2.822,11418,2.822,11419,2.822,11420,2.822,11421,2.822,11422,3.924,11423,2.822,11424,2.822,11425,2.822,11426,2.822,11427,2.822,11428,2.822,11429,5.125,11430,2.822,11431,5.443,11432,2.822,11433,4.512,11434,2.822,11435,4.512,11436,2.822,11437,3.924,11438,4.877,11439,3.924,11440,3.924,11441,2.822,11442,4.512,11443,3.924,11444,2.822,11445,2.822,11446,3.924,11447,2.822,11448,2.822,11449,2.822,11450,2.822,11451,2.822,11452,2.822,11453,2.822,11454,2.822,11455,4.512,11456,2.822,11457,2.822,11458,2.822,11459,2.822,11460,2.822,11461,3.924,11462,2.822,11463,3.924,11464,2.822,11465,3.924,11466,2.822,11467,3.924,11468,3.924,11469,5.988,11470,3.924,11471,5.55,11472,2.822,11473,3.924,11474,3.924,11475,2.822,11476,3.924,11477,3.924,11478,2.822,11479,3.924,11480,4.877,11481,2.822,11482,3.924,11483,2.822,11484,3.924,11485,2.822,11486,2.822,11487,2.822,11488,2.822,11489,2.822,11490,2.822,11491,2.822,11492,2.822,11493,2.822,11494,2.822,11495,2.822,11496,5.443,11497,2.822,11498,2.822,11499,2.822,11500,2.822,11501,2.822,11502,2.822,11503,2.822,11504,2.822,11505,2.822,11506,2.822,11507,2.822,11508,2.822,11509,2.822,11510,2.822,11511,2.822,11512,2.822,11513,2.822,11514,2.822,11515,2.822,11516,2.822,11517,3.924,11518,2.822,11519,2.822,11520,2.822,11521,3.924,11522,3.924,11523,2.822,11524,2.822,11525,2.822,11526,2.822,11527,2.822,11528,2.822,11529,2.822,11530,2.822,11531,2.822,11532,2.822,11533,2.822,11534,2.822,11535,2.822,11536,2.822,11537,2.822,11538,2.822,11539,2.822,11540,4.512,11541,2.822,11542,3.924,11543,2.822,11544,4.512,11545,2.822,11546,2.822,11547,4.512,11548,3.924,11549,2.822,11550,2.822,11551,2.822,11552,4.877,11553,2.822,11554,2.822,11555,4.877,11556,2.822,11557,2.822,11558,2.822,11559,2.822,11560,2.822,11561,2.822,11562,2.822,11563,2.822,11564,5.443,11565,2.822,11566,2.822,11567,2.822,11568,4.512,11569,2.822,11570,2.822,11571,2.822,11572,2.822,11573,2.822,11574,3.924,11575,2.822,11576,2.822,11577,2.822,11578,3.924,11579,2.822,11580,2.822,11581,2.822,11582,2.822,11583,2.822,11584,2.822,11585,4.512,11586,3.924,11587,2.822,11588,2.822,11589,2.822,11590,2.822,11591,2.822,11592,2.822,11593,2.822,11594,2.822,11595,2.822,11596,2.822,11597,2.822,11598,2.822,11599,2.822,11600,2.822,11601,2.822,11602,2.822,11603,2.822,11604,2.822,11605,2.822,11606,2.822,11607,2.822,11608,2.822,11609,3.924,11610,3.924,11611,3.924,11612,2.822,11613,2.822,11614,2.822,11615,2.822,11616,2.822,11617,2.822,11618,2.822,11619,2.822,11620,2.822,11621,2.822,11622,5.125,11623,2.822,11624,6.157,11625,2.822,11626,2.822,11627,2.822,11628,2.822,11629,2.822,11630,2.822,11631,4.512,11632,2.822,11633,2.822,11634,2.822,11635,2.822,11636,2.822,11637,2.822,11638,2.822,11639,2.822,11640,2.822,11641,2.822,11642,2.822,11643,2.822,11644,2.822,11645,2.822,11646,2.822,11647,2.822,11648,2.822,11649,2.822,11650,2.822,11651,2.822,11652,2.822,11653,2.822,11654,2.822,11655,2.822,11656,3.924,11657,2.822,11658,2.822,11659,3.924,11660,3.924,11661,2.822,11662,3.924,11663,3.924,11664,3.924,11665,5.767,11666,2.822,11667,2.822,11668,2.822,11669,2.822,11670,2.822,11671,2.822,11672,2.822,11673,2.822,11674,5.443,11675,2.822,11676,2.822,11677,2.822,11678,2.822,11679,3.924,11680,2.822,11681,2.822,11682,2.822,11683,2.822,11684,2.822,11685,2.822,11686,2.822,11687,2.822,11688,2.822,11689,2.822,11690,2.822,11691,2.822,11692,2.822,11693,2.822,11694,2.822,11695,2.822,11696,2.822,11697,3.924,11698,2.822,11699,2.822,11700,2.822,11701,2.822,11702,2.822,11703,2.822,11704,2.822,11705,2.822,11706,2.822,11707,2.822,11708,4.512,11709,2.822,11710,2.822,11711,2.822,11712,2.822,11713,2.822,11714,2.822,11715,2.822,11716,2.822,11717,5.125,11718,2.822,11719,2.822,11720,2.822,11721,2.822,11722,2.822,11723,2.822,11724,2.822,11725,2.822,11726,2.822,11727,2.822,11728,2.822,11729,2.822,11730,2.822,11731,2.822,11732,2.822,11733,2.822,11734,2.822,11735,2.822,11736,2.822,11737,2.822,11738,2.822,11739,2.822,11740,2.822,11741,2.822,11742,2.822,11743,2.822,11744,3.924,11745,4.512,11746,2.822,11747,2.822,11748,4.512,11749,2.822,11750,2.822,11751,2.822,11752,2.822,11753,2.822,11754,2.822,11755,2.822,11756,4.877,11757,3.924,11758,4.877,11759,5.306,11760,5.306,11761,2.822,11762,2.822,11763,2.822,11764,2.822,11765,2.822,11766,2.822,11767,2.822,11768,3.924,11769,2.822,11770,2.822,11771,2.822,11772,2.822,11773,2.822,11774,2.822,11775,2.822,11776,2.822,11777,2.822,11778,2.822,11779,2.822,11780,2.822]],["title/1015817",[4978,21.103]],["body/1015817",[8,2.089,16,2.448,71,0.562,150,0.537,408,1.982,412,3.343,430,1.362,614,0.817,616,0.474,689,0.84,705,1.982,706,1.885,748,0.537,833,0.643,967,1.982,1004,0.922,1084,2.511,1364,2.598,1367,1.982,1377,2.784,1383,3.102,1385,3.102,1398,1.793,1405,2.88,1526,3.128,1532,2.089,1712,2.215,2207,2.377,2209,2.761,2213,1.669,2441,2.255,2447,3.247,2448,2.089,2449,2.377,2450,2.784,2680,2.761,2713,2.377,2997,4.101,3281,2.761,3284,2.761,3286,2.761,3395,2.377,3782,2.761,4037,2.089,4364,3.026,5176,2.761,5206,2.761,5353,3.267,5750,3.074,5861,5.055,5863,3.128,5915,3.267,5935,2.761,5959,2.761,5960,2.761,6439,2.089,6580,2.089,6639,4.764,7089,2.761,7091,2.761,7106,2.761,8670,3.634,9091,2.761,9103,3.634,9114,3.128,9218,3.634,9344,2.761,10954,2.761,10964,3.634,10965,2.761,10969,4.062,10974,2.761,10981,2.761,10985,2.761,11025,2.761,11077,2.761,11781,3.345,11782,3.345,11783,3.345,11784,3.345,11785,3.345,11786,3.345,11787,3.345,11788,3.345,11789,3.345,11790,3.345,11791,3.345,11792,3.345,11793,3.345,11794,3.345,11795,3.345,11796,3.345,11797,3.345,11798,3.345,11799,3.345,11800,3.345,11801,3.345,11802,3.345,11803,3.345,11804,3.345,11805,3.345,11806,3.345,11807,3.345,11808,3.345,11809,3.345,11810,3.345,11811,3.345,11812,3.345,11813,3.345,11814,3.345,11815,3.345,11816,3.345,11817,3.345,11818,3.345,11819,3.345,11820,3.345,11821,3.345,11822,3.345,11823,3.345,11824,5.23,11825,3.345,11826,3.345,11827,3.345,11828,3.345,11829,3.345,11830,3.345,11831,3.345,11832,3.345,11833,3.345,11834,3.345,11835,3.345,11836,3.345,11837,3.345,11838,3.345,11839,3.345,11840,3.345,11841,3.345,11842,5.839,11843,5.894,11844,3.345,11845,3.345,11846,3.345,11847,3.345,11848,3.345,11849,3.345,11850,3.345,11851,3.345,11852,3.345,11853,3.345,11854,3.345,11855,3.345,11856,3.345,11857,3.345,11858,3.345,11859,3.345,11860,3.345,11861,3.345,11862,3.345,11863,3.345,11864,3.345,11865,3.345,11866,3.345,11867,3.345,11868,3.345,11869,3.345,11870,6.154,11871,4.403,11872,3.345,11873,3.345,11874,3.345,11875,3.345,11876,3.345,11877,3.345,11878,3.345,11879,3.345,11880,3.345,11881,3.345,11882,3.345,11883,3.345,11884,3.345,11885,3.345,11886,4.403,11887,3.345,11888,3.345,11889,3.345,11890,3.345,11891,3.345,11892,3.345,11893,3.345,11894,3.345,11895,3.345,11896,5.839,11897,3.345,11898,3.345,11899,3.345,11900,3.345,11901,3.345,11902,3.345,11903,3.345,11904,3.345,11905,3.345,11906,3.345,11907,3.345,11908,4.403,11909,3.345,11910,3.345,11911,5.839,11912,3.345,11913,3.345,11914,3.345,11915,4.403,11916,3.345,11917,4.403,11918,3.345,11919,4.403,11920,3.345,11921,4.403,11922,3.345,11923,4.403,11924,3.345,11925,4.403,11926,3.345,11927,4.403,11928,4.403,11929,3.345,11930,4.403,11931,3.345,11932,4.403,11933,3.345,11934,4.403,11935,3.345,11936,4.403,11937,4.403,11938,3.345,11939,4.403,11940,4.403,11941,4.403,11942,3.345,11943,3.345,11944,3.345,11945,3.345,11946,3.345,11947,3.345,11948,3.345,11949,3.345,11950,3.345,11951,4.403,11952,4.403,11953,4.403,11954,3.345,11955,3.345,11956,3.345,11957,4.403,11958,3.345,11959,5.434,11960,5.23,11961,4.921,11962,5.23,11963,4.403,11964,4.403,11965,5.23,11966,3.345,11967,3.345,11968,3.345,11969,3.345,11970,3.345,11971,3.345,11972,3.345,11973,3.345,11974,4.403,11975,4.403,11976,3.345,11977,4.403,11978,3.345,11979,3.345,11980,3.345,11981,3.345,11982,3.345,11983,3.345,11984,4.921,11985,3.345,11986,3.345,11987,5.23,11988,4.403,11989,3.345,11990,3.345,11991,3.345,11992,3.345,11993,3.345,11994,3.345,11995,5.23,11996,3.345,11997,3.345,11998,3.345,11999,5.434,12000,5.23,12001,4.403,12002,4.403,12003,3.345,12004,3.345,12005,3.345,12006,3.345,12007,3.345,12008,3.345,12009,3.345,12010,3.345,12011,3.345,12012,3.345,12013,4.921,12014,4.403,12015,3.345,12016,3.345,12017,3.345,12018,3.345,12019,5.23,12020,5.23,12021,3.345,12022,3.345,12023,3.345,12024,3.345,12025,3.345,12026,3.345,12027,3.345,12028,3.345,12029,3.345,12030,3.345,12031,3.345,12032,3.345,12033,3.345,12034,4.403,12035,3.345,12036,3.345,12037,3.345,12038,3.345,12039,3.345,12040,4.403,12041,3.345,12042,3.345,12043,3.345,12044,3.345,12045,3.345,12046,4.403,12047,3.345,12048,4.921,12049,3.345,12050,3.345,12051,3.345,12052,3.345,12053,3.345,12054,3.345,12055,4.403,12056,3.345,12057,3.345,12058,3.345,12059,3.345,12060,3.345,12061,3.345,12062,3.345,12063,3.345,12064,3.345,12065,3.345,12066,3.345,12067,3.345,12068,3.345,12069,3.345,12070,3.345,12071,3.345,12072,3.345,12073,3.345,12074,3.345,12075,3.345]]],"invertedIndex":[["0",{"_index":71,"title":{},"body":{"1015814":{},"1015817":{},"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1933378":{},"1933380":{},"2424869":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["0*4",{"_index":9404,"title":{},"body":{"1015831":{}}}],["0,\"寮犱笁\"},{1,\"鏉庡洓\"},{2,\"鐜嬩簲",{"_index":2063,"title":{},"body":{"1015843":{}}}],["0,0",{"_index":2052,"title":{},"body":{"1015843":{}}}],["0,1,2,3,4",{"_index":2133,"title":{},"body":{"1015843":{}}}],["0.0.0.0",{"_index":9647,"title":{},"body":{"1015818":{}}}],["0.0.0.117",{"_index":9681,"title":{},"body":{"1015818":{}}}],["0.001英寸",{"_index":644,"title":{},"body":{"1015822":{}}}],["0.01毫米",{"_index":640,"title":{},"body":{"1015822":{}}}],["0.01英寸",{"_index":642,"title":{},"body":{"1015822":{}}}],["0.1毫米",{"_index":638,"title":{},"body":{"1015822":{}}}],["0.3.15",{"_index":4521,"title":{},"body":{"3440657":{}}}],["0.8",{"_index":6434,"title":{},"body":{"1015828":{}}}],["0.8*2=1.6，1.6的1拿走则表示二进制位为1，然后再乘以2，以此类推...但是这里我们发现这里就进入了循环状态，一直都是0110，永远无法得到结果小数点为0的情况",{"_index":1591,"title":{},"body":{"1015843":{}}}],["00",{"_index":1617,"title":{},"body":{"1015831":{},"1015843":{}}}],["000",{"_index":1539,"title":{},"body":{"1015825":{},"1015831":{},"1015843":{},"1015846":{}}}],["00000000.00000000.00000000.01110101",{"_index":9680,"title":{},"body":{"1015818":{}}}],["00000000.00000000.00000000.1111111",{"_index":9678,"title":{},"body":{"1015818":{}}}],["0000ec00`000800",{"_index":9207,"title":{},"body":{"1015831":{}}}],["0000）则表示存在进位",{"_index":5136,"title":{},"body":{"1015825":{}}}],["0000，100我们可以转为二进制：0001",{"_index":1538,"title":{},"body":{"1015843":{}}}],["0000，则表示不存在进位，步骤四的结果则为4+5的最后结果",{"_index":5140,"title":{},"body":{"1015825":{}}}],["0000，在这里x为111",{"_index":1560,"title":{},"body":{"1015843":{}}}],["0001",{"_index":1542,"title":{},"body":{"1015825":{},"1015831":{},"1015843":{}}}],["0001转为十六进制即为0x01（0x开头表示这是一个十六进制，每4个0和1转为一个十六进制），那么字节（byte）的存储范围使用十六进制表示则为：0",{"_index":5091,"title":{},"body":{"1015825":{}}}],["0001，但这是最终存入计算机中的二进制吗？并不是，在计算机中有符号数负数存储是以补码形式存储的",{"_index":5115,"title":{},"body":{"1015825":{}}}],["0001，我们可以知道其反码为：111",{"_index":5117,"title":{},"body":{"1015825":{}}}],["0001，然后拆分",{"_index":12018,"title":{},"body":{"1015817":{}}}],["0001；同理数字6也是如此",{"_index":5113,"title":{},"body":{"1015825":{}}}],["001",{"_index":2526,"title":{},"body":{"1015825":{},"1015831":{},"1015846":{}}}],["0010",{"_index":1633,"title":{},"body":{"1015825":{},"1015831":{},"1015833":{},"1015843":{}}}],["0012ffc4才可以清晰的看出数据存储位置",{"_index":5231,"title":{},"body":{"1015825":{}}}],["001b",{"_index":8926,"title":{},"body":{"1015831":{}}}],["0023",{"_index":8924,"title":{},"body":{"1015831":{}}}],["003b",{"_index":8928,"title":{},"body":{"1015831":{}}}],["00401005",{"_index":3459,"title":{},"body":{"1015840":{}}}],["0040101",{"_index":1378,"title":{},"body":{"1015843":{}}}],["00401010",{"_index":1376,"title":{},"body":{"1015843":{}}}],["00401013",{"_index":1380,"title":{},"body":{"1015843":{}}}],["00401016",{"_index":1382,"title":{},"body":{"1015843":{}}}],["00401017",{"_index":1384,"title":{},"body":{"1015843":{}}}],["00401018",{"_index":1386,"title":{},"body":{"1015843":{}}}],["00401019",{"_index":1387,"title":{},"body":{"1015843":{}}}],["0040101c",{"_index":1391,"title":{},"body":{"1015843":{}}}],["00401021",{"_index":1393,"title":{},"body":{"1015843":{}}}],["00401026",{"_index":1395,"title":{},"body":{"1015843":{}}}],["00401028",{"_index":1399,"title":{},"body":{"1015843":{}}}],["0040102b",{"_index":1402,"title":{},"body":{"1015843":{}}}],["0040102e",{"_index":1404,"title":{},"body":{"1015843":{}}}],["0040102f",{"_index":1406,"title":{},"body":{"1015843":{}}}],["0040103",{"_index":1410,"title":{},"body":{"1015843":{}}}],["00401030",{"_index":1407,"title":{},"body":{"1015843":{}}}],["00401031",{"_index":1408,"title":{},"body":{"1015843":{}}}],["00401034",{"_index":1411,"title":{},"body":{"1015843":{}}}],["0040109",{"_index":1509,"title":{},"body":{"1015843":{}}}],["00401094",{"_index":1505,"title":{},"body":{"1015843":{}}}],["00401097",{"_index":1507,"title":{},"body":{"1015843":{}}}],["004010a",{"_index":1373,"title":{},"body":{"1015843":{}}}],["004010b0",{"_index":1511,"title":{},"body":{"1015843":{}}}],["004012e0",{"_index":3456,"title":{},"body":{"1015840":{}}}],["00401a20",{"_index":3462,"title":{},"body":{"1015840":{}}}],["0040ec00`0008b4b0",{"_index":9225,"title":{},"body":{"1015831":{}}}],["0040ec03`0008b4b0",{"_index":9235,"title":{},"body":{"1015831":{}}}],["00410938",{"_index":1711,"title":{},"body":{"1015843":{}}}],["0041093c",{"_index":1714,"title":{},"body":{"1015843":{}}}],["00410940",{"_index":1718,"title":{},"body":{"1015843":{}}}],["00410942",{"_index":1719,"title":{},"body":{"1015843":{}}}],["00410946",{"_index":1722,"title":{},"body":{"1015843":{}}}],["0041094a",{"_index":1724,"title":{},"body":{"1015843":{}}}],["0041094c",{"_index":1726,"title":{},"body":{"1015843":{}}}],["00:00:0",{"_index":8791,"title":{},"body":{"1015850":{}}}],["00:00:01",{"_index":8796,"title":{},"body":{"1015850":{}}}],["00aa003e0",{"_index":2671,"title":{},"body":{"1015823":{}}}],["00aa003e0eed}\\\\inprocserver32",{"_index":2754,"title":{},"body":{"1015823":{}}}],["00aa003e0eed}，其实就是com对象的id，这些都是要在注册表中去注册的，其也是一段guid的格式，也就是变量clsid_dbsample所表示的内容；在代码中的db_dll.dll，这个为当前com组件的文件名，自己需要注意修改一下",{"_index":2756,"title":{},"body":{"1015823":{}}}],["00cf9b00`0000fff",{"_index":9141,"title":{},"body":{"1015831":{}}}],["00cf9f00`0000fff",{"_index":9146,"title":{},"body":{"1015831":{}}}],["00cffb00`0000fff",{"_index":9134,"title":{},"body":{"1015831":{}}}],["00，call指令开始的位置就是0xfe8，加上imagebase就是0x400fe8，0x77d5050b减去(0x400fe8+5)（包括指令本身的宽度）等于0x7794f51e，再拼接指令就是：e8",{"_index":6355,"title":{},"body":{"1015828":{}}}],["00，e8后面的4字节表示一个偏移值，表示当前指令地址与需要调用指令地址之间的偏移，我们可以使用需要调用指令地址减去当前指令地址（包含本身的宽度）就得出这个偏移值",{"_index":6350,"title":{},"body":{"1015828":{}}}],["00，同样这后面的4字节也是偏移值，用程序入口地址减去当前地址即可：0x4010b0",{"_index":6361,"title":{},"body":{"1015828":{}}}],["00，接着就是调用函数messagebox了，但是在这里的调用是需要遵循导入表的（后面章节会了解导入表内容），是一个间接调用，我们插入的时候需要修改成直接调用的形式，也就是：e8",{"_index":6349,"title":{},"body":{"1015828":{}}}],["01",{"_index":6580,"title":{},"body":{"1015817":{},"1015828":{},"1015831":{},"1015850":{}}}],["010",{"_index":1618,"title":{},"body":{"1015825":{},"1015831":{},"1015833":{},"1015843":{}}}],["0100(十进制：4",{"_index":9115,"title":{},"body":{"1015831":{}}}],["0100、000",{"_index":5132,"title":{},"body":{"1015825":{}}}],["0100，拆分如下",{"_index":12067,"title":{},"body":{"1015817":{}}}],["0100，这里与运算结果不为0（二进制：000",{"_index":5135,"title":{},"body":{"1015825":{}}}],["0101",{"_index":5068,"title":{},"body":{"1015825":{}}}],["0101，然后拆分",{"_index":12039,"title":{},"body":{"1015817":{}}}],["011",{"_index":5069,"title":{},"body":{"1015825":{},"1015831":{}}}],["0110",{"_index":2528,"title":{},"body":{"1015825":{},"1015846":{}}}],["01~999",{"_index":8787,"title":{},"body":{"1015850":{}}}],["026",{"_index":2668,"title":{},"body":{"1015823":{}}}],["02x:%02x:%02x:%02x:%02x:%02x",{"_index":10236,"title":{},"body":{"1015818":{}}}],["03",{"_index":8788,"title":{},"body":{"1015850":{}}}],["03:14:07",{"_index":8799,"title":{},"body":{"1015850":{}}}],["0ch],eax",{"_index":1727,"title":{},"body":{"1015843":{}}}],["0x%p",{"_index":4838,"title":{},"body":{"3440657":{}}}],["0x%p\\n",{"_index":4905,"title":{},"body":{"3440657":{}}}],["0x%x",{"_index":6329,"title":{},"body":{"1015828":{}}}],["0x0",{"_index":2677,"title":{},"body":{"1015818":{},"1015823":{},"1015831":{},"1703937":{}}}],["0x00",{"_index":4294,"title":{},"body":{"2424869":{},"2424889":{},"2949166":{},"2949228":{}}}],["0x000",{"_index":6517,"title":{},"body":{"1015828":{}}}],["0x0000000",{"_index":5523,"title":{},"body":{"1015828":{},"1015831":{},"1015847":{}}}],["0x00000001",{"_index":6221,"title":{},"body":{"1015828":{}}}],["0x00000002",{"_index":6223,"title":{},"body":{"1015828":{}}}],["0x00000003",{"_index":6494,"title":{},"body":{"1015828":{}}}],["0x00000004",{"_index":6225,"title":{},"body":{"1015828":{}}}],["0x00000006",{"_index":6492,"title":{},"body":{"1015828":{}}}],["0x00000008",{"_index":6227,"title":{},"body":{"1015828":{},"1015831":{}}}],["0x00000010",{"_index":6229,"title":{},"body":{"1015828":{},"1015831":{}}}],["0x00000020",{"_index":6231,"title":{},"body":{"1015828":{}}}],["0x00000023",{"_index":9325,"title":{},"body":{"1015831":{}}}],["0x00000030",{"_index":9328,"title":{},"body":{"1015831":{}}}],["0x00000040",{"_index":6233,"title":{},"body":{"1015828":{}}}],["0x00000080",{"_index":6235,"title":{},"body":{"1015828":{}}}],["0x000000a",{"_index":6490,"title":{},"body":{"1015828":{}}}],["0x000000dc",{"_index":6550,"title":{},"body":{"1015828":{}}}],["0x0000010",{"_index":6237,"title":{},"body":{"1015828":{}}}],["0x0000017f",{"_index":6461,"title":{},"body":{"1015828":{}}}],["0x0000020",{"_index":5865,"title":{},"body":{"1015828":{},"1015847":{}}}],["0x0000040",{"_index":6241,"title":{},"body":{"1015828":{}}}],["0x0000080",{"_index":6243,"title":{},"body":{"1015828":{}}}],["0x0000100",{"_index":6247,"title":{},"body":{"1015828":{}}}],["0x0000100f",{"_index":6498,"title":{},"body":{"1015828":{}}}],["0x00001014",{"_index":6500,"title":{},"body":{"1015828":{}}}],["0x00001019",{"_index":6499,"title":{},"body":{"1015828":{}}}],["0x000010a",{"_index":6497,"title":{},"body":{"1015828":{}}}],["0x0000200",{"_index":6249,"title":{},"body":{"1015828":{}}}],["0x0000400",{"_index":6252,"title":{},"body":{"1015828":{}}}],["0x00007f范围之间，则采用0xxxxxx的方式进行存储，也就是按照一个字节的方式来不会改变什么，而汉字”中“则不一样了",{"_index":7102,"title":{},"body":{"1015833":{}}}],["0x0000800",{"_index":6257,"title":{},"body":{"1015828":{}}}],["0x0000ec0",{"_index":9204,"title":{},"body":{"1015831":{}}}],["0x0001000",{"_index":6262,"title":{},"body":{"1015828":{}}}],["0x0001a7a8，即之前所说的公式，找到_mmpfn结构体，再根据pagelocation（0xc偏移位结构体成员的成员）确认这是一个零化物理页",{"_index":6997,"title":{},"body":{"2949228":{}}}],["0x0001ce80",{"_index":6549,"title":{},"body":{"1015828":{}}}],["0x0002",{"_index":6519,"title":{},"body":{"1015828":{}}}],["0x0002000",{"_index":6264,"title":{},"body":{"1015828":{}}}],["0x0002ad",{"_index":6511,"title":{},"body":{"1015828":{}}}],["0x0002ad80",{"_index":6460,"title":{},"body":{"1015828":{}}}],["0x0002ada8",{"_index":6496,"title":{},"body":{"1015828":{}}}],["0x0002adc",{"_index":6516,"title":{},"body":{"1015828":{}}}],["0x0002adc0",{"_index":6510,"title":{},"body":{"1015828":{}}}],["0x0002add2",{"_index":6487,"title":{},"body":{"1015828":{}}}],["0x0002ade2",{"_index":6512,"title":{},"body":{"1015828":{}}}],["0x0002ade6",{"_index":6513,"title":{},"body":{"1015828":{}}}],["0x0003000",{"_index":4951,"title":{},"body":{"3440657":{}}}],["0x0004000",{"_index":6267,"title":{},"body":{"1015828":{}}}],["0x0005",{"_index":6518,"title":{},"body":{"1015828":{}}}],["0x0007c7a8（flink），成功找到了另一个零化物理页_mmpfn结构体",{"_index":7001,"title":{},"body":{"2949228":{}}}],["0x0008000",{"_index":6269,"title":{},"body":{"1015828":{},"1015831":{}}}],["0x001",{"_index":10646,"title":{},"body":{"2424889":{}}}],["0x0010000",{"_index":6271,"title":{},"body":{"1015828":{}}}],["0x002",{"_index":10648,"title":{},"body":{"2424869":{},"2424889":{}}}],["0x0020000",{"_index":6273,"title":{},"body":{"1015828":{}}}],["0x003",{"_index":10649,"title":{},"body":{"2424889":{}}}],["0x0030000",{"_index":6275,"title":{},"body":{"1015828":{}}}],["0x004",{"_index":4297,"title":{},"body":{"2424869":{},"2424889":{},"2949166":{},"2949228":{}}}],["0x0040000",{"_index":6277,"title":{},"body":{"1015828":{}}}],["0x00401020",{"_index":9322,"title":{},"body":{"1015831":{}}}],["0x00401030",{"_index":8491,"title":{},"body":{"1015833":{}}}],["0x00401080",{"_index":8492,"title":{},"body":{"1015833":{}}}],["0x004010d0",{"_index":8493,"title":{},"body":{"1015833":{}}}],["0x0050000",{"_index":6279,"title":{},"body":{"1015828":{}}}],["0x0060000",{"_index":6283,"title":{},"body":{"1015828":{}}}],["0x0070000",{"_index":6285,"title":{},"body":{"1015828":{}}}],["0x008",{"_index":6891,"title":{},"body":{"2424869":{},"2424889":{},"2949228":{}}}],["0x0080000",{"_index":6287,"title":{},"body":{"1015828":{}}}],["0x0090000",{"_index":6289,"title":{},"body":{"1015828":{}}}],["0x00a000",{"_index":6291,"title":{},"body":{"1015828":{}}}],["0x00b0000",{"_index":6293,"title":{},"body":{"1015828":{}}}],["0x00c",{"_index":6893,"title":{},"body":{"2424869":{},"2424889":{},"2949228":{}}}],["0x00c0000",{"_index":6295,"title":{},"body":{"1015828":{}}}],["0x00d0000",{"_index":6297,"title":{},"body":{"1015828":{}}}],["0x00e000",{"_index":6299,"title":{},"body":{"1015828":{}}}],["0x00f0000",{"_index":6301,"title":{},"body":{"1015828":{}}}],["0x00ffff范围之间",{"_index":7105,"title":{},"body":{"1015833":{}}}],["0x01",{"_index":7089,"title":{},"body":{"1015817":{},"1015833":{}}}],["0x010",{"_index":6895,"title":{},"body":{"2424869":{},"2424889":{},"2949228":{}}}],["0x0100000",{"_index":6303,"title":{},"body":{"1015828":{}}}],["0x014",{"_index":10578,"title":{},"body":{"2424869":{},"2424889":{}}}],["0x015",{"_index":10782,"title":{},"body":{"2424869":{}}}],["0x016",{"_index":10582,"title":{},"body":{"2424869":{},"2424889":{}}}],["0x018",{"_index":6897,"title":{},"body":{"2424869":{},"2424889":{},"2949228":{}}}],["0x01c",{"_index":10724,"title":{},"body":{"2424869":{},"2424889":{}}}],["0x01d",{"_index":10727,"title":{},"body":{"2424889":{}}}],["0x01，用如上那张表和我们所学的modr/m的知识对该指令进行一步步解析",{"_index":12015,"title":{},"body":{"1015817":{}}}],["0x020",{"_index":10842,"title":{},"body":{"2424869":{}}}],["0x0200000",{"_index":6306,"title":{},"body":{"1015828":{}}}],["0x0201（#def",{"_index":517,"title":{},"body":{"1015822":{}}}],["0x0201），也就是当消息类型是左键按下时断点",{"_index":518,"title":{},"body":{"1015822":{}}}],["0x024",{"_index":10845,"title":{},"body":{"2424869":{}}}],["0x028",{"_index":10848,"title":{},"body":{"2424869":{}}}],["0x02c",{"_index":10850,"title":{},"body":{"2424869":{}}}],["0x02d",{"_index":10852,"title":{},"body":{"2424869":{}}}],["0x02e",{"_index":10855,"title":{},"body":{"2424869":{}}}],["0x034",{"_index":10796,"title":{},"body":{"2424869":{}}}],["0x04",{"_index":3397,"title":{},"body":{"1015818":{},"1015840":{}}}],["0x0400000",{"_index":6309,"title":{},"body":{"1015828":{}}}],["0x05c",{"_index":10616,"title":{},"body":{"2424889":{}}}],["0x06",{"_index":10360,"title":{},"body":{"1015818":{}}}],["0x070",{"_index":10618,"title":{},"body":{"2424889":{}}}],["0x08",{"_index":3395,"title":{},"body":{"1015817":{},"1015818":{},"1015840":{}}}],["0x0800000",{"_index":6312,"title":{},"body":{"1015828":{}}}],["0x0c",{"_index":3393,"title":{},"body":{"1015833":{},"1015840":{}}}],["0x0f",{"_index":5861,"title":{},"body":{"1015817":{},"1015847":{}}}],["0x0fff，去掉后三位就是索引0x0000）对应的_mmpfn结构体地址：0x8108600",{"_index":6936,"title":{},"body":{"2949228":{}}}],["0x1",{"_index":1365,"title":{},"body":{"1015825":{},"1015843":{}}}],["0x10",{"_index":1535,"title":{},"body":{"1015833":{},"1015840":{},"1015843":{},"1015847":{},"3440655":{},"3440657":{}}}],["0x100",{"_index":6431,"title":{},"body":{"1015828":{},"1015833":{}}}],["0x1000*2",{"_index":6754,"title":{},"body":{"1015833":{},"2949228":{}}}],["0x1000000",{"_index":6315,"title":{},"body":{"1015828":{}}}],["0x101",{"_index":7838,"title":{},"body":{"1015833":{}}}],["0x1013000锛堟寚浠ゅ紑濮嬪湴鍧�锛",{"_index":6392,"title":{},"body":{"1015828":{}}}],["0x1013003",{"_index":6389,"title":{},"body":{"1015828":{}}}],["0x102",{"_index":7840,"title":{},"body":{"1015833":{}}}],["0x10ffff，其可以容纳100多万个符号，但是unicode本身也存在问题，因为unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何去存储",{"_index":7076,"title":{},"body":{"1015833":{}}}],["0x10位置指向的链表头，找到它所拥有的所有互斥体，将这些互斥体的abandoned成员值设置为1，并对它们调用kereleasemutant(x",{"_index":10754,"title":{},"body":{"2424889":{}}}],["0x1111222",{"_index":5743,"title":{},"body":{"1015847":{}}}],["0x1111：ax占2个字节（4个16进制），ax表示eax中的2个低位字节（或者可以理解：表示eax从右到左的2个字节",{"_index":5174,"title":{},"body":{"1015825":{}}}],["0x1122334",{"_index":5300,"title":{},"body":{"1015825":{}}}],["0x11c",{"_index":10992,"title":{},"body":{"1703937":{}}}],["0x11cf",{"_index":2675,"title":{},"body":{"1015823":{}}}],["0x120",{"_index":11079,"title":{},"body":{"1703937":{}}}],["0x123",{"_index":7483,"title":{},"body":{"1015833":{}}}],["0x12345678",{"_index":5929,"title":{},"body":{"1015828":{},"1015831":{},"1015833":{},"1015847":{},"1933380":{},"2949228":{}}}],["0x12345678是一个线性地址，cpu要解析这个线性地址就需要通过页目录表找到对应的物理页。而要找到页目录表就需要通页目录表基址，也就表示我们需要cr3寄存器，cr3寄存器值来源于当前的进程结构体（_kprocess.directorytablebase）。因此我们可以理解为进程提供给线程运行的空间环境（界定了哪些内存可以访问",{"_index":11271,"title":{},"body":{"1703937":{}}}],["0x12ffc4",{"_index":5297,"title":{},"body":{"1015825":{}}}],["0x12ffd0",{"_index":5298,"title":{},"body":{"1015825":{}}}],["0x134",{"_index":11033,"title":{},"body":{"1703937":{}}}],["0x138",{"_index":10798,"title":{},"body":{"1703937":{},"2424869":{}}}],["0x13ffc4",{"_index":5214,"title":{},"body":{"1015825":{}}}],["0x13ffd0",{"_index":5205,"title":{},"body":{"1015825":{}}}],["0x13ffd8",{"_index":5207,"title":{},"body":{"1015825":{}}}],["0x14",{"_index":5916,"title":{},"body":{"1015847":{}}}],["0x140",{"_index":11035,"title":{},"body":{"1703937":{}}}],["0x14c",{"_index":10800,"title":{},"body":{"1703937":{},"2424869":{}}}],["0x16",{"_index":10804,"title":{},"body":{"2424869":{}}}],["0x165",{"_index":10802,"title":{},"body":{"2424869":{}}}],["0x174",{"_index":2484,"title":{},"body":{"1015846":{},"1703937":{}}}],["0x175",{"_index":2486,"title":{},"body":{"1015846":{}}}],["0x176",{"_index":2488,"title":{},"body":{"1015846":{}}}],["0x18",{"_index":2452,"title":{},"body":{"1015846":{},"1703937":{}}}],["0x1a0",{"_index":10997,"title":{},"body":{"1703937":{}}}],["0x1a2b",{"_index":5225,"title":{},"body":{"1015825":{}}}],["0x1b0",{"_index":11000,"title":{},"body":{"1703937":{}}}],["0x1c",{"_index":6937,"title":{},"body":{"1703937":{},"2949228":{}}}],["0x1ec",{"_index":11040,"title":{},"body":{"1703937":{}}}],["0x1fff，去掉后三位就是索引0x1000）对应的_mmpfn结构体地址：0x8108600",{"_index":6939,"title":{},"body":{"2949228":{}}}],["0x2",{"_index":1366,"title":{},"body":{"1015825":{},"1015843":{}}}],["0x20",{"_index":5862,"title":{},"body":{"1015831":{},"1015847":{},"1703937":{}}}],["0x2000000",{"_index":6318,"title":{},"body":{"1015828":{}}}],["0x20:0x004183d7",{"_index":9111,"title":{},"body":{"1015831":{}}}],["0x20ac00",{"_index":9332,"title":{},"body":{"1015831":{}}}],["0x220",{"_index":11044,"title":{},"body":{"1703937":{}}}],["0x2233445",{"_index":5795,"title":{},"body":{"1015847":{}}}],["0x22c",{"_index":11047,"title":{},"body":{"1703937":{}}}],["0x22：al占1个字节（2个16进制），al表示ax中的一个低位字节",{"_index":5175,"title":{},"body":{"1015825":{}}}],["0x23",{"_index":7090,"title":{},"body":{"1015833":{}}}],["0x26",{"_index":2674,"title":{},"body":{"1015823":{}}}],["0x28",{"_index":5922,"title":{},"body":{"1015847":{},"1703937":{}}}],["0x2c",{"_index":3285,"title":{},"body":{"1015823":{},"1703937":{}}}],["0x2d",{"_index":3283,"title":{},"body":{"1015823":{},"1015833":{},"1703937":{}}}],["0x2d，它属于0x00080",{"_index":7104,"title":{},"body":{"1015833":{}}}],["0x2e进0环的过程，首先找到idt表，然后根据0x2e索引找到对应的门描述符位置",{"_index":2473,"title":{},"body":{"1015846":{}}}],["0x3",{"_index":5957,"title":{},"body":{"1015847":{}}}],["0x30",{"_index":2524,"title":{},"body":{"1015846":{},"1703937":{}}}],["0x30df3430",{"_index":2694,"title":{},"body":{"1015823":{}}}],["0x30df3432",{"_index":2673,"title":{},"body":{"1015823":{}}}],["0x33：ah占1个字节（2个16进制），ah表示ax中的一个高位字节",{"_index":5177,"title":{},"body":{"1015825":{}}}],["0x34",{"_index":11024,"title":{},"body":{"1703937":{}}}],["0x38",{"_index":10949,"title":{},"body":{"1703937":{}}}],["0x391000），内存属性也对应了virtualalloc的参数",{"_index":6760,"title":{},"body":{"2949228":{}}}],["0x3c",{"_index":10950,"title":{},"body":{"1703937":{}}}],["0x3e",{"_index":2679,"title":{},"body":{"1015823":{}}}],["0x3ff8",{"_index":5869,"title":{},"body":{"1015847":{}}}],["0x3ffffc",{"_index":5876,"title":{},"body":{"1015847":{}}}],["0x3f的门，通过这个门就可以找到中断处理程序，如下图所示，时钟中断和其硬件设备的中断下标是不一样的",{"_index":9580,"title":{},"body":{"1015831":{}}}],["0x4",{"_index":2448,"title":{},"body":{"1015817":{},"1015825":{},"1015846":{},"1703937":{}}}],["0x40",{"_index":6439,"title":{},"body":{"1015817":{},"1015828":{},"1015833":{},"1703937":{}}}],["0x4000000",{"_index":6321,"title":{},"body":{"1015828":{}}}],["0x400000（imagebase）得出0x2ba30，其是rva，也是foa，直接使用winhex打开找到",{"_index":6341,"title":{},"body":{"1015828":{}}}],["0x400fe8+5+5)，最终得出：0xbe，那么指令就变成了：e9",{"_index":6362,"title":{},"body":{"1015828":{}}}],["0x40的地址（也就是esp提升0x40后的地址）给到edi，再将0x10（十进制则表示16）给到ecx（这里ecx是循环计数器），接着将0xcccccccc给到eax，然后rep",{"_index":1441,"title":{},"body":{"1015843":{}}}],["0x41",{"_index":11859,"title":{},"body":{"1015817":{}}}],["0x4104",{"_index":1620,"title":{},"body":{"1015843":{}}}],["0x41414142",{"_index":8271,"title":{},"body":{"1015833":{}}}],["0x42",{"_index":11860,"title":{},"body":{"1015817":{}}}],["0x43",{"_index":11861,"title":{},"body":{"1015817":{}}}],["0x4321",{"_index":6773,"title":{},"body":{"2949228":{}}}],["0x45",{"_index":7091,"title":{},"body":{"1015817":{},"1015833":{}}}],["0x46",{"_index":11862,"title":{},"body":{"1015817":{}}}],["0x47",{"_index":11863,"title":{},"body":{"1015817":{}}}],["0x48",{"_index":9218,"title":{},"body":{"1015817":{},"1015831":{}}}],["0x48、72",{"_index":5100,"title":{},"body":{"1015825":{}}}],["0x48，其对应的opcode、modr/m、sib如下",{"_index":12065,"title":{},"body":{"1015817":{}}}],["0x49",{"_index":11864,"title":{},"body":{"1015817":{}}}],["0x4a",{"_index":11865,"title":{},"body":{"1015817":{}}}],["0x4b",{"_index":9344,"title":{},"body":{"1015817":{},"1015831":{}}}],["0x4c",{"_index":11866,"title":{},"body":{"1015817":{}}}],["0x4d",{"_index":11867,"title":{},"body":{"1015817":{}}}],["0x4e",{"_index":7106,"title":{},"body":{"1015817":{},"1015833":{}}}],["0x4e10",{"_index":3280,"title":{},"body":{"1015823":{}}}],["0x4f",{"_index":11868,"title":{},"body":{"1015817":{}}}],["0x5",{"_index":11848,"title":{},"body":{"1015817":{}}}],["0x50",{"_index":11844,"title":{},"body":{"1015817":{}}}],["0x51",{"_index":11077,"title":{},"body":{"1015817":{},"1703937":{}}}],["0x52",{"_index":11845,"title":{},"body":{"1015817":{}}}],["0x524",{"_index":7355,"title":{},"body":{"1015833":{}}}],["0x53",{"_index":11846,"title":{},"body":{"1015817":{}}}],["0x54",{"_index":11847,"title":{},"body":{"1015817":{}}}],["0x56",{"_index":3284,"title":{},"body":{"1015817":{},"1015823":{}}}],["0x57",{"_index":11849,"title":{},"body":{"1015817":{}}}],["0x58",{"_index":11850,"title":{},"body":{"1015817":{}}}],["0x59",{"_index":11851,"title":{},"body":{"1015817":{}}}],["0x5a",{"_index":11852,"title":{},"body":{"1015817":{}}}],["0x5b",{"_index":11853,"title":{},"body":{"1015817":{}}}],["0x5c",{"_index":10954,"title":{},"body":{"1015817":{},"1703937":{}}}],["0x5d",{"_index":11854,"title":{},"body":{"1015817":{}}}],["0x5e",{"_index":11855,"title":{},"body":{"1015817":{}}}],["0x5f",{"_index":11856,"title":{},"body":{"1015817":{}}}],["0x6",{"_index":2529,"title":{},"body":{"1015846":{},"1015847":{}}}],["0x62",{"_index":10959,"title":{},"body":{"1703937":{}}}],["0x65",{"_index":12034,"title":{},"body":{"1015817":{}}}],["0x68",{"_index":5931,"title":{},"body":{"1015847":{}}}],["0x6c",{"_index":11029,"title":{},"body":{"1703937":{}}}],["0x6f",{"_index":3282,"title":{},"body":{"1015823":{}}}],["0x7",{"_index":11926,"title":{},"body":{"1015817":{}}}],["0x70",{"_index":10964,"title":{},"body":{"1015817":{},"1703937":{}}}],["0x700，cf和pf位之间的下标为1的空，默认为1",{"_index":5436,"title":{},"body":{"1015825":{}}}],["0x71",{"_index":11914,"title":{},"body":{"1015817":{}}}],["0x72",{"_index":11916,"title":{},"body":{"1015817":{}}}],["0x73",{"_index":11918,"title":{},"body":{"1015817":{}}}],["0x74",{"_index":11920,"title":{},"body":{"1015817":{}}}],["0x75",{"_index":11922,"title":{},"body":{"1015817":{}}}],["0x76",{"_index":11924,"title":{},"body":{"1015817":{}}}],["0x76d3d4f8",{"_index":6394,"title":{},"body":{"1015828":{}}}],["0x7748",{"_index":6428,"title":{},"body":{"1015828":{}}}],["0x77d5050b锛圡essageboxa锛",{"_index":6391,"title":{},"body":{"1015828":{}}}],["0x78",{"_index":10965,"title":{},"body":{"1015817":{},"1703937":{}}}],["0x780",{"_index":6429,"title":{},"body":{"1015828":{}}}],["0x79",{"_index":11929,"title":{},"body":{"1015817":{}}}],["0x7a",{"_index":11931,"title":{},"body":{"1015817":{}}}],["0x7ac",{"_index":8706,"title":{},"body":{"1933378":{}}}],["0x7b",{"_index":11933,"title":{},"body":{"1015817":{}}}],["0x7c",{"_index":11935,"title":{},"body":{"1015817":{}}}],["0x7c0",{"_index":6440,"title":{},"body":{"1015828":{}}}],["0x7d",{"_index":5960,"title":{},"body":{"1015817":{},"1015847":{}}}],["0x7e",{"_index":11938,"title":{},"body":{"1015817":{}}}],["0x7f",{"_index":11908,"title":{},"body":{"1015817":{}}}],["0x7ffdf00",{"_index":8929,"title":{},"body":{"1015831":{}}}],["0x7ffdf000+0x0，如若你将mov指令后的gs换成ds则编译运行就会报错",{"_index":8950,"title":{},"body":{"1015831":{}}}],["0x7ffdf000+0x1000写入内容，由于fs段的长度只有0xfff，0x1000很明显大于0xfff，所以这段代码编译运行就会报错",{"_index":8955,"title":{},"body":{"1015831":{}}}],["0x7ffdf000，所以我们可以使用如下代码去探测",{"_index":8944,"title":{},"body":{"1015831":{}}}],["0x7ffe030",{"_index":2451,"title":{},"body":{"1015846":{}}}],["0x7ffe0300就是_kuser_shared_data结构体的成员systemcall，它的作用就是进入0环，而具体进入0环的方式则由cpu决定，当cpu支持sysenter、sysexit指令则使用的是ntdll!kifastsystemcall方式，否则则是ntdll!kiintsystemcall方式",{"_index":2461,"title":{},"body":{"1015846":{}}}],["0x7ffff8",{"_index":5871,"title":{},"body":{"1015847":{}}}],["0x7ffffffff，向上跳的范围是：0x8000000",{"_index":11944,"title":{},"body":{"1015817":{}}}],["0x7ff杩欎釜鑼冨洿锛屼綘鍙互浣跨敤0x80",{"_index":5752,"title":{},"body":{"1015847":{}}}],["0x7f，向上跳的范围是0x80",{"_index":11913,"title":{},"body":{"1015817":{}}}],["0x7f，而之后的0x80",{"_index":7068,"title":{},"body":{"1015833":{}}}],["0x8",{"_index":5915,"title":{},"body":{"1015817":{},"1015828":{},"1015847":{},"1703937":{}}}],["0x80",{"_index":5750,"title":{},"body":{"1015817":{},"1015828":{},"1015833":{},"1015847":{}}}],["0x800",{"_index":6435,"title":{},"body":{"1015828":{},"1703937":{}}}],["0x8000000",{"_index":6324,"title":{},"body":{"1015828":{}}}],["0x80000005",{"_index":5529,"title":{},"body":{"1015847":{}}}],["0x8000闄や互0x1000鍚戜笂鍙栨暣(绗﹀彿鈱堚寜",{"_index":6381,"title":{},"body":{"1015828":{}}}],["0x800123",{"_index":6610,"title":{},"body":{"1015828":{}}}],["0x800456",{"_index":6611,"title":{},"body":{"1015828":{}}}],["0x800789",{"_index":6612,"title":{},"body":{"1015828":{}}}],["0x81",{"_index":11945,"title":{},"body":{"1015817":{}}}],["0x8108600",{"_index":6996,"title":{},"body":{"2949228":{}}}],["0x82",{"_index":11946,"title":{},"body":{"1015817":{}}}],["0x83",{"_index":11947,"title":{},"body":{"1015817":{}}}],["0x84",{"_index":10969,"title":{},"body":{"1015817":{},"1703937":{}}}],["0x85",{"_index":11948,"title":{},"body":{"1015817":{}}}],["0x86",{"_index":11949,"title":{},"body":{"1015817":{}}}],["0x87",{"_index":11950,"title":{},"body":{"1015817":{}}}],["0x87654321",{"_index":5209,"title":{},"body":{"1015825":{}}}],["0x89",{"_index":11951,"title":{},"body":{"1015817":{}}}],["0x8a",{"_index":11952,"title":{},"body":{"1015817":{}}}],["0x8b",{"_index":11953,"title":{},"body":{"1015817":{}}}],["0x8c",{"_index":11954,"title":{},"body":{"1015817":{}}}],["0x8d",{"_index":5959,"title":{},"body":{"1015817":{},"1015847":{}}}],["0x8d7c23e2",{"_index":3278,"title":{},"body":{"1015823":{}}}],["0x8e",{"_index":11955,"title":{},"body":{"1015817":{}}}],["0x8f",{"_index":11941,"title":{},"body":{"1015817":{}}}],["0x90",{"_index":10974,"title":{},"body":{"1015817":{},"1703937":{}}}],["0x91",{"_index":11899,"title":{},"body":{"1015817":{}}}],["0x92",{"_index":11900,"title":{},"body":{"1015817":{}}}],["0x93",{"_index":3286,"title":{},"body":{"1015817":{},"1015823":{}}}],["0x94",{"_index":11901,"title":{},"body":{"1015817":{}}}],["0x95",{"_index":11902,"title":{},"body":{"1015817":{}}}],["0x96",{"_index":3281,"title":{},"body":{"1015817":{},"1015823":{}}}],["0x97",{"_index":11903,"title":{},"body":{"1015817":{}}}],["0x9c",{"_index":10975,"title":{},"body":{"1703937":{}}}],["0xa",{"_index":2678,"title":{},"body":{"1015823":{}}}],["0xa6",{"_index":2676,"title":{},"body":{"1015823":{}}}],["0xa8",{"_index":10979,"title":{},"body":{"1703937":{}}}],["0xab",{"_index":5962,"title":{},"body":{"1015847":{}}}],["0xac",{"_index":10980,"title":{},"body":{"1703937":{}}}],["0xb",{"_index":9091,"title":{},"body":{"1015817":{},"1015831":{}}}],["0xb0",{"_index":10981,"title":{},"body":{"1015817":{},"1703937":{}}}],["0xb1",{"_index":11872,"title":{},"body":{"1015817":{}}}],["0xb2",{"_index":11874,"title":{},"body":{"1015817":{}}}],["0xb3",{"_index":11875,"title":{},"body":{"1015817":{}}}],["0xb4",{"_index":11877,"title":{},"body":{"1015817":{}}}],["0xb5",{"_index":11878,"title":{},"body":{"1015817":{}}}],["0xb6",{"_index":11880,"title":{},"body":{"1015817":{}}}],["0xb7",{"_index":11882,"title":{},"body":{"1015817":{}}}],["0xb8",{"_index":11887,"title":{},"body":{"1015817":{}}}],["0xb9",{"_index":11888,"title":{},"body":{"1015817":{}}}],["0xba",{"_index":2449,"title":{},"body":{"1015817":{},"1015823":{},"1015846":{}}}],["0xbc",{"_index":10985,"title":{},"body":{"1015817":{},"1703937":{}}}],["0xbd",{"_index":11889,"title":{},"body":{"1015817":{}}}],["0xbe",{"_index":11890,"title":{},"body":{"1015817":{}}}],["0xbf",{"_index":11891,"title":{},"body":{"1015817":{}}}],["0xc",{"_index":4815,"title":{},"body":{"1015831":{},"1015847":{},"1703937":{},"3440657":{}}}],["0xc0",{"_index":5958,"title":{},"body":{"1015847":{},"1703937":{}}}],["0xc000000",{"_index":9493,"title":{},"body":{"1015831":{}}}],["0xc000000d",{"_index":5526,"title":{},"body":{"1015847":{}}}],["0xc0000094",{"_index":4360,"title":{},"body":{"2949166":{}}}],["0xc000100",{"_index":9472,"title":{},"body":{"1015831":{}}}],["0xc030000",{"_index":9490,"title":{},"body":{"1015831":{}}}],["0xc2",{"_index":11986,"title":{},"body":{"1015817":{}}}],["0xc3",{"_index":5935,"title":{},"body":{"1015817":{},"1015847":{}}}],["0xc4",{"_index":10989,"title":{},"body":{"1703937":{}}}],["0xca",{"_index":11992,"title":{},"body":{"1015817":{}}}],["0xcb",{"_index":11990,"title":{},"body":{"1015817":{}}}],["0xd1",{"_index":3287,"title":{},"body":{"1015823":{}}}],["0xd8",{"_index":5961,"title":{},"body":{"1015847":{}}}],["0xde",{"_index":3784,"title":{},"body":{"3440655":{}}}],["0xe",{"_index":2680,"title":{},"body":{"1015817":{},"1015823":{}}}],["0xe0",{"_index":5863,"title":{},"body":{"1015817":{},"1015847":{},"1703937":{}}}],["0xe1",{"_index":11966,"title":{},"body":{"1015817":{}}}],["0xe2",{"_index":11968,"title":{},"body":{"1015817":{}}}],["0xe26fa0",{"_index":8705,"title":{},"body":{"1933378":{}}}],["0xe3",{"_index":11970,"title":{},"body":{"1015817":{}}}],["0xe8",{"_index":11025,"title":{},"body":{"1015817":{},"1703937":{}}}],["0xe9",{"_index":8670,"title":{},"body":{"1015817":{},"1015833":{}}}],["0xeb",{"_index":3782,"title":{},"body":{"1015817":{},"3440655":{}}}],["0xed",{"_index":2681,"title":{},"body":{"1015823":{}}}],["0xede3",{"_index":3279,"title":{},"body":{"1015823":{}}}],["0xef",{"_index":3780,"title":{},"body":{"3440655":{}}}],["0xf",{"_index":1526,"title":{},"body":{"1015817":{},"1015843":{},"3440657":{}}}],["0xfa",{"_index":3288,"title":{},"body":{"1015823":{}}}],["0xff",{"_index":5753,"title":{},"body":{"1015831":{},"1015847":{}}}],["0xffc",{"_index":5874,"title":{},"body":{"1015847":{}}}],["0xfff",{"_index":270,"title":{},"body":{"1015822":{},"1015843":{}}}],["0xfff0fff",{"_index":4941,"title":{},"body":{"3440657":{}}}],["0xfffffef",{"_index":4958,"title":{},"body":{"3440657":{}}}],["0xffffffe",{"_index":4953,"title":{},"body":{"3440657":{}}}],["0xfffffff",{"_index":1532,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015843":{}}}],["0xffffffff这个范围",{"_index":7191,"title":{},"body":{"1015833":{}}}],["0xffffffff，能存储的位数就是(0xffffffff+1)*8，加一是因为0也算一位，乘八是因为每块内存可以存储一个字节（8位），转为十进制就是：34359738368",{"_index":5183,"title":{},"body":{"1015825":{}}}],["0xffff，双字（doubleword）的存储范围：0",{"_index":5093,"title":{},"body":{"1015825":{}}}],["0xff在标准的ascii编码中是不存在的，所以就出现了我们所说的ascii编码的扩展",{"_index":7069,"title":{},"body":{"1015833":{}}}],["0xff，以此类推，字（word）的存储范围：0",{"_index":5092,"title":{},"body":{"1015825":{}}}],["0xff，用如上那张表和我们所学的modr/m的知识对该指令进行一步步解析",{"_index":12035,"title":{},"body":{"1015817":{}}}],["0xf，并且0x8是一个界限点，当值小于0x8则表示当前段是数据段，反之则是代码段",{"_index":9041,"title":{},"body":{"1015831":{}}}],["0~16777215字节",{"_index":8811,"title":{},"body":{"1015850":{}}}],["0~4294967295字节",{"_index":8813,"title":{},"body":{"1015850":{}}}],["0~65535字节",{"_index":8809,"title":{},"body":{"1015850":{}}}],["0到3跨环调用",{"_index":4050,"title":{},"body":{"3440655":{}}}],["0指令找到cr3值输入到程序中即可，最终我们可以看到获取到的寄存器值确实为我们所构建的tss中对应的值",{"_index":9381,"title":{},"body":{"1015831":{}}}],["0指令获取cr3的值填入到程序中。但是我们需要导入符号表才能使用windbg这个指令，所以根据我们的系统版本找到对应的离线符号表安装包（这里我是window",{"_index":9355,"title":{},"body":{"1015831":{}}}],["0来找到test.exe的进程结构体地址，如下图所示地址为890dd778",{"_index":8697,"title":{},"body":{"1933378":{}}}],["0的代码中调用窗口过程函数。这种调用是通过内核提供的机制实现的，允许ring",{"_index":4059,"title":{},"body":{"3440655":{}}}],["0的代码可以与用户模式的窗口过程进行交互，以实现特定的功能或处理特定事件。这种机制通常由操作系统提供，如sendmessage或postmessage函数",{"_index":4061,"title":{},"body":{"3440655":{}}}],["0的代码向特定窗口的过程函数发送消息。通过这种方式，ring",{"_index":4060,"title":{},"body":{"3440655":{}}}],["0随便找个程序，进入它的内存空间，查看该内存空间中的地址0xbab63000内容",{"_index":5595,"title":{},"body":{"1015847":{}}}],["0（内核/驱动层）的权限分级，我们也可以称之为0环、3环",{"_index":9069,"title":{},"body":{"1015831":{}}}],["0（内核模式）转移到ring",{"_index":4056,"title":{},"body":{"3440655":{}}}],["0，所以它没有权限直接向操作系统申请内存。那么heapalloc是如何在堆中分配内存呢？这涉及到对堆的理解。堆实际上是操作系统通过调用virtualalloc函数预先分配的一大块内存区域。heapalloc的作用是从这个预分配的内存区域中划分出一小部分来使用",{"_index":6767,"title":{},"body":{"2949228":{}}}],["0，随便找一个进程，查看它的进程结构体_eprocess，在该结构体的0x11c偏移位成员vadroot（vad，vir",{"_index":6695,"title":{},"body":{"2949228":{}}}],["0：段上线为64kb",{"_index":9061,"title":{},"body":{"1015831":{}}}],["0：采用32位寻址方式",{"_index":9050,"title":{},"body":{"1015831":{}}}],["0：隐式栈访问指令（如：push",{"_index":9055,"title":{},"body":{"1015831":{}}}],["0；如果是结构体，那么结构体的起始地址则是其最宽的数据类型成员的整数倍；这种方式可以提升程序编译的效率",{"_index":2022,"title":{},"body":{"1015843":{}}}],["1",{"_index":833,"title":{},"body":{"1015814":{},"1015817":{},"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{},"1933380":{},"2424869":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["1(1a",{"_index":12026,"title":{},"body":{"1015817":{}}}],["1)*(q",{"_index":10437,"title":{},"body":{"1015818":{}}}],["1+(b*tabh",{"_index":921,"title":{},"body":{"1015822":{}}}],["1+1",{"_index":5033,"title":{},"body":{"1015825":{}}}],["1+2",{"_index":5034,"title":{},"body":{"1015825":{}}}],["1+3",{"_index":5036,"title":{},"body":{"1015825":{}}}],["1+4",{"_index":5039,"title":{},"body":{"1015825":{}}}],["1+5",{"_index":5043,"title":{},"body":{"1015825":{}}}],["1+6",{"_index":5048,"title":{},"body":{"1015825":{}}}],["1+7",{"_index":5054,"title":{},"body":{"1015825":{}}}],["1,1",{"_index":2053,"title":{},"body":{"1015843":{}}}],["1,2,1,4,5,6,7,8,9,1,2,3",{"_index":1966,"title":{},"body":{"1015843":{}}}],["1,2,3",{"_index":1925,"title":{},"body":{"1015840":{},"1015843":{}}}],["1,2,3,4",{"_index":1949,"title":{},"body":{"1015843":{}}}],["1,2,3,4,5,6,7,8,9,0",{"_index":2260,"title":{},"body":{"1015843":{}}}],["1,2,3,4,5,6,7,8,9,10",{"_index":2202,"title":{},"body":{"1015843":{}}}],["1,2,3}杩欎釜鏁扮粍鐨勯鍦板潃",{"_index":2280,"title":{},"body":{"1015843":{}}}],["1,2},{3,4",{"_index":1952,"title":{},"body":{"1015843":{}}}],["1.00001",{"_index":1603,"title":{},"body":{"1015843":{}}}],["1.23f",{"_index":1576,"title":{},"body":{"1015843":{}}}],["1.cobuildversion：获取com库的版本号2.coinitialize：初始化com库3.couninitialize：终止co服务4.cofreeunsedlibraries：释放进程中所有不在使用的组件程序",{"_index":2833,"title":{},"body":{"1015823":{}}}],["1.cogetclassobiject：获取对象的类工厂2.cocreateinstance：创建com对象3.cocreateinstanceex：创建com对象，可指定多个接口或远程对象4.coregisterclassobject：登记一个对象，以便其它应用程序可以连接到该对象5.corevokeclassobject：取消对象的登记操作6.codisconnectobject：断开其他应用程序与对象的连接",{"_index":2837,"title":{},"body":{"1015823":{}}}],["1.cotaskmemalloc：内存分配函数2.cotaskmemrealloç",{"_index":2839,"title":{},"body":{"1015823":{}}}],["1.deque是doubl",{"_index":11378,"title":{},"body":{"1015814":{}}}],["1.ex",{"_index":4096,"title":{},"body":{"1015820":{}}}],["1.isequaiguid：判断两个guid是否相等2.isequaiiid：判断两个iid是否相等3.isequaiclsid：判断两个clsid是否相等4.clsidfromprogid：把字符串形式的对像标识转换为clsid结构形式5.stringfromclsid：把clsid结构形式转化为字符串形式6.iidfromstring：把字符串形式的接口标识转换为iid结构形式7.stringfromiid：把iid结构形式转换为字符串形式8.stringfromguid2：把guid结构形式转换为字符串形式9.progidfromclsid：从clsid获取对象标识",{"_index":2835,"title":{},"body":{"1015823":{}}}],["1.list容器是一个双向链表",{"_index":11394,"title":{},"body":{"1015814":{}}}],["1.使用create直接构造它",{"_index":46,"title":{},"body":{"1015822":{}}}],["1.分配或初始化与mysql_real_connect()相适应的mysql对象",{"_index":8864,"title":{},"body":{"1015850":{}}}],["1.创建数据表",{"_index":8815,"title":{},"body":{"1015850":{}}}],["1.创建项目（选择win32",{"_index":1339,"title":{},"body":{"1015843":{}}}],["1.向vector、deque、list、stack、queue容器中添加自定义对象，实际是将对象复制一份放到容器里，要调用对象的拷贝函数，定义了拷贝函数的调用定义的拷贝函数，没定义的调用默认的拷贝函数",{"_index":11752,"title":{},"body":{"1015814":{}}}],["1.堆栈中会存在一个执行地址的内存表，其顺序是按照case后的常量大小排序的，最大的常量所在的分支执行地址最先压入表中；如下图所示我将代码顺序打乱后还是如此",{"_index":1822,"title":{},"body":{"1015843":{}}}],["1.外平栈：使用add指令",{"_index":5387,"title":{},"body":{"1015825":{}}}],["1.将cdbsrvfactory类由idbsrvfactory类派生改为由iclassfactory类派生，将createdb成员函数改为createinstance，同时删除该成员函数的定义，并添加一个成员函数lockserver；为cdb类和cdbsrvfactory类都添加一个引用计数变量m_dwrefcount；为cdb类和cdbsrvfactory类加上queryinterface、addref和release三个成员函数",{"_index":2645,"title":{},"body":{"1015823":{}}}],["1.将idb类改为由iunknown类派生，删除release成员函数声明（包括cdb类",{"_index":2638,"title":{},"body":{"1015823":{}}}],["1.底层使用平衡的搜索树：红黑树",{"_index":11422,"title":{},"body":{"1015814":{}}}],["1.查看全部数据库",{"_index":8757,"title":{},"body":{"1015850":{}}}],["1.查看数据宽度，显示为16",{"_index":3440,"title":{},"body":{"1015840":{}}}],["1.查看表的数据",{"_index":8842,"title":{},"body":{"1015850":{}}}],["1.标准消息",{"_index":445,"title":{},"body":{"1015822":{}}}],["1/1440英寸",{"_index":646,"title":{},"body":{"1015822":{}}}],["1/2",{"_index":1587,"title":{},"body":{"1015843":{}}}],["10",{"_index":689,"title":{},"body":{"1015814":{},"1015817":{},"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015846":{},"1015847":{},"1933378":{},"2949166":{},"2949228":{},"3440657":{}}}],["10(1",{"_index":7109,"title":{},"body":{"1015833":{}}}],["10(10",{"_index":7110,"title":{},"body":{"1015833":{}}}],["10,20",{"_index":1999,"title":{},"body":{"1015843":{}}}],["100",{"_index":106,"title":{},"body":{"1015822":{},"1015825":{},"1015831":{},"1015833":{},"1015843":{},"1015850":{}}}],["100.01",{"_index":1602,"title":{},"body":{"1015843":{}}}],["100000",{"_index":10412,"title":{},"body":{"1015818":{}}}],["10000010",{"_index":1616,"title":{},"body":{"1015843":{}}}],["10000h",{"_index":5884,"title":{},"body":{"1015847":{}}}],["10001",{"_index":10515,"title":{},"body":{"1015818":{}}}],["1000，其有无符号数的结果截然不同",{"_index":5102,"title":{},"body":{"1015825":{}}}],["1000，它为无符号数编码规则是如何的？为有符号数呢",{"_index":5097,"title":{},"body":{"1015825":{}}}],["1000，得出：000",{"_index":5138,"title":{},"body":{"1015825":{}}}],["1000，拆分如下",{"_index":12071,"title":{},"body":{"1015817":{}}}],["1001",{"_index":5070,"title":{},"body":{"1015825":{}}}],["1001转为十进制：9",{"_index":5142,"title":{},"body":{"1015825":{}}}],["101",{"_index":5072,"title":{},"body":{"1015825":{},"1015831":{}}}],["101,\"寮犱笁\",18,'m",{"_index":1996,"title":{},"body":{"1015843":{}}}],["1010",{"_index":5071,"title":{},"body":{"1015825":{},"1015831":{}}}],["1011。最终指令如下",{"_index":9137,"title":{},"body":{"1015831":{}}}],["1011得出cpl",{"_index":9075,"title":{},"body":{"1015831":{}}}],["1024",{"_index":5184,"title":{},"body":{"1015825":{}}}],["1024byt",{"_index":5187,"title":{},"body":{"1015825":{}}}],["1024kb",{"_index":5189,"title":{},"body":{"1015825":{}}}],["1024mb），这也就是「每个应用程序都会有自己的独立4gb内存空间」的原因",{"_index":5191,"title":{},"body":{"1015825":{}}}],["10]，数组指针的定义如下",{"_index":2221,"title":{},"body":{"1015843":{}}}],["10一次方",{"_index":1606,"title":{},"body":{"1015843":{}}}],["10了，这个就可以通过给的对角线的两个点来确定",{"_index":771,"title":{},"body":{"1015822":{}}}],["10到20",{"_index":761,"title":{},"body":{"1015822":{}}}],["10和20",{"_index":768,"title":{},"body":{"1015822":{}}}],["10的三次方",{"_index":1610,"title":{},"body":{"1015843":{}}}],["10的二次方",{"_index":1608,"title":{},"body":{"1015843":{}}}],["10的数字，但实际上因为我们添加了break所以到最后只会输出0",{"_index":1865,"title":{},"body":{"1015843":{}}}],["10的数字，但由于这里变量i没有变化，导致表达式结果是永真，固会进入死循环，一直输出0",{"_index":1853,"title":{},"body":{"1015843":{}}}],["10，指定右下角坐标为：20",{"_index":757,"title":{},"body":{"1015822":{}}}],["11,20",{"_index":2014,"title":{},"body":{"1015843":{}}}],["110",{"_index":5073,"title":{},"body":{"1015825":{},"1015831":{}}}],["11000000.10101000.00001000.0000000",{"_index":9672,"title":{},"body":{"1015818":{}}}],["11000000.10101000.00001000.01110101",{"_index":9669,"title":{},"body":{"1015818":{}}}],["1101",{"_index":5074,"title":{},"body":{"1015825":{}}}],["1101)，括号包裹起来的就是汉字“中”的unicode编码",{"_index":7111,"title":{},"body":{"1015833":{}}}],["1101，其以utf",{"_index":7107,"title":{},"body":{"1015833":{}}}],["111",{"_index":1543,"title":{},"body":{"1015825":{},"1015831":{},"1015843":{}}}],["1110",{"_index":5075,"title":{},"body":{"1015825":{},"1015831":{},"1015833":{}}}],["1110，补码（可以理解为在反码的基础上加一）为：111",{"_index":5118,"title":{},"body":{"1015825":{}}}],["11111111.11111111.11111111.0000000",{"_index":9670,"title":{},"body":{"1015818":{}}}],["1111（十进制数0",{"_index":10273,"title":{},"body":{"1015818":{}}}],["1111，也就是0xfffffff",{"_index":1563,"title":{},"body":{"1015843":{}}}],["1111，但由于这是一个有符号数，所以其余位为符号位，也就是1，最终二进制数为：111",{"_index":1562,"title":{},"body":{"1015843":{}}}],["1111，那么二进制数为：二进制数：000",{"_index":1561,"title":{},"body":{"1015843":{}}}],["11cf",{"_index":2669,"title":{},"body":{"1015823":{}}}],["11位available是给操作系统软件用的，cpu不使用；从第12",{"_index":9529,"title":{},"body":{"1015831":{}}}],["12",{"_index":1007,"title":{},"body":{"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015831":{},"1015847":{},"1015850":{},"2949228":{}}}],["120",{"_index":870,"title":{},"body":{"1015822":{}}}],["123",{"_index":1472,"title":{},"body":{"1015831":{},"1015843":{}}}],["123.4f",{"_index":1645,"title":{},"body":{"1015843":{}}}],["123123",{"_index":11526,"title":{},"body":{"1015814":{}}}],["12345678",{"_index":12059,"title":{},"body":{"1015817":{}}}],["12345678]时，仅仅靠modr/m字段，是描述不出来的，这时就在modr/m后面增加一个sib字节，其与modr/m字段共同描述",{"_index":12049,"title":{},"body":{"1015817":{}}}],["127",{"_index":1629,"title":{},"body":{"1015843":{}}}],["127.0.0.1",{"_index":7249,"title":{},"body":{"1015833":{}}}],["127.255.255.25",{"_index":9648,"title":{},"body":{"1015818":{}}}],["127，用十六进制表示是0x0",{"_index":7067,"title":{},"body":{"1015833":{}}}],["128",{"_index":883,"title":{},"body":{"1015818":{},"1015822":{}}}],["128.0.0.0",{"_index":9650,"title":{},"body":{"1015818":{}}}],["12;i",{"_index":1704,"title":{},"body":{"1015843":{}}}],["12f*4",{"_index":9429,"title":{},"body":{"1015831":{}}}],["12、2",{"_index":9389,"title":{},"body":{"1015831":{}}}],["12中的12就确定了；（页内偏移，找到任一一个字节",{"_index":9505,"title":{},"body":{"1015831":{}}}],["12中的第一个10也就确定了。（寻找pti",{"_index":9509,"title":{},"body":{"1015831":{}}}],["12中的第一个9确定了",{"_index":9516,"title":{},"body":{"1015831":{}}}],["12中的第二个10也确定了；（寻找pte",{"_index":9507,"title":{},"body":{"1015831":{}}}],["12中的第二个9确定了",{"_index":9514,"title":{},"body":{"1015831":{}}}],["12位是页表基址，低12位填0，共36位",{"_index":9538,"title":{},"body":{"1015831":{}}}],["12分页",{"_index":9384,"title":{},"body":{"1015831":{}}}],["12分页。之前在c:\\boot.ini文件中设置execute/noexecute参数，其本质就是就是修改pae位；pse位用于控制pde中ps位的开关，当pse为1时，ps位才有效。具体如下",{"_index":9618,"title":{},"body":{"1015831":{}}}],["12分页机制",{"_index":9526,"title":{},"body":{"1015831":{}}}],["12分页机制下由于物理地址的拓展，会导致读取的字节更多，甚至在某些情况下，数据不在同一物理页，就会存在跨页的情况",{"_index":9549,"title":{},"body":{"1015831":{}}}],["12分页机制下，pde与pte的最高位为xd/nx位",{"_index":9546,"title":{},"body":{"1015831":{}}}],["12分页机制之前我们需要从10",{"_index":9501,"title":{},"body":{"1015831":{}}}],["12分页机制分为三个部分，前两部分需要*4",{"_index":9402,"title":{},"body":{"1015831":{}}}],["12分页机制又有了新的认知",{"_index":9475,"title":{},"body":{"1015831":{}}}],["12分页机制可以根据成员数来理解，物理页存储的是数据，以字节为成员单位，物理页有4096个字节，也就是2的12次方，而页表、页目录表成员单位都是4字节，有1024个成员，所以就是2的10次方",{"_index":9420,"title":{},"body":{"1015831":{}}}],["12分页机制开始了解，它们的分页设计的逻辑，这样便于我们掌握和学习",{"_index":9502,"title":{},"body":{"1015831":{}}}],["12分页机制所划分出来的",{"_index":9397,"title":{},"body":{"1015831":{}}}],["12分页机制拆分为三部分",{"_index":9428,"title":{},"body":{"1015831":{}}}],["12分页机制的话就是pde、pte进行and运算的结果",{"_index":9555,"title":{},"body":{"1015831":{}}}],["12分页机制进行拆分",{"_index":9457,"title":{},"body":{"1015831":{}}}],["12分页机制，又称为pae（物理地址扩展）分页",{"_index":9498,"title":{},"body":{"1015831":{}}}],["12分页机制，在这种机制方式下物理地址最多可达4gb。但随着硬件发展，4gb的物理地址范围已经无法满足需求，intel在1996年就已经意识到这个问题了，所以设计了新的分页机制，这也就是我们本节课要讲的2",{"_index":9497,"title":{},"body":{"1015831":{}}}],["12分页机制，大致的流程我们已经清楚了，但是我们之前所提到的第n级，实际上它们有自己的名字",{"_index":9415,"title":{},"body":{"1015831":{}}}],["12分页机制，本质上就是将线性地址按位分为三个部分，分别是10位、10位、12位，然后通过这三个部分作为索引找到物理页",{"_index":9399,"title":{},"body":{"1015831":{}}}],["12分页模式下使用",{"_index":2495,"title":{},"body":{"1015846":{}}}],["12分页模式下使用）、ntkrnlpa.exe（2",{"_index":2494,"title":{},"body":{"1015846":{}}}],["12分页模式，也仍然无法超越4gb，这是因为",{"_index":6873,"title":{},"body":{"2949228":{}}}],["12分页结构中cr3指向的就是pdt，而在2",{"_index":9523,"title":{},"body":{"1015831":{}}}],["12分页：最多识别物理内存为4gb",{"_index":6869,"title":{},"body":{"2949228":{}}}],["12分页：最多识别物理内存为64gb",{"_index":6870,"title":{},"body":{"2949228":{}}}],["12的分页机制下，需要先读pde在读pte，最后读4字节的页，这样从本质上来说读取的内容有12个字节，很影响效率；并且在2",{"_index":9548,"title":{},"body":{"1015831":{}}}],["12的分页结构中，在pdt之前，也就是cr3指向的是pdpt表，这张表有四个成员（因为pdpi只有2位，最多能交叉4个结果：0",{"_index":9524,"title":{},"body":{"1015831":{}}}],["12的分页结构，在10",{"_index":9522,"title":{},"body":{"1015831":{}}}],["12的分页设计逻辑",{"_index":9511,"title":{},"body":{"1015831":{}}}],["12的分页设计逻辑如下",{"_index":9503,"title":{},"body":{"1015831":{}}}],["12的实验一样，属性部分（低12位）要填0",{"_index":9532,"title":{},"body":{"1015831":{}}}],["12的结构差不多，灰色部分为保留部分，当ps位为1时是大页（下图中的第一个结构），第35",{"_index":9535,"title":{},"body":{"1015831":{}}}],["12鎷嗗垎灏辨槸濡備笅锛",{"_index":9481,"title":{},"body":{"1015831":{}}}],["12，noexecute则表示当前的分页机制为2",{"_index":9392,"title":{},"body":{"1015831":{}}}],["12，我们本节要学的就是前者",{"_index":9390,"title":{},"body":{"1015831":{}}}],["13",{"_index":5006,"title":{},"body":{"1015825":{},"1015828":{}}}],["13锛堟寚浠ゆ湰韬暱搴︼級",{"_index":6393,"title":{},"body":{"1015828":{}}}],["14",{"_index":1009,"title":{},"body":{"1015822":{},"1015825":{},"2949228":{}}}],["14也就是数组的第一个值的地址给了eax，最后eax压入堆栈，也就是传递给了函数",{"_index":2137,"title":{},"body":{"1015843":{}}}],["15",{"_index":1011,"title":{},"body":{"1015822":{},"1015825":{},"1015828":{},"2949228":{}}}],["150",{"_index":7865,"title":{},"body":{"1015833":{}}}],["15位)反映操作的状态，winerror.h定义了win32函数所有可能返回结果",{"_index":2859,"title":{},"body":{"1015823":{}}}],["15），其中一个最小长度为0字节，最大长度为60字节，一般来说此处的值为0101，表示头长度为20字节",{"_index":10274,"title":{},"body":{"1015818":{}}}],["16",{"_index":2255,"title":{},"body":{"1015825":{},"1015828":{},"1015833":{},"1015840":{},"1015843":{},"1703937":{},"2949228":{}}}],["16/utf",{"_index":7080,"title":{},"body":{"1015833":{}}}],["16bcf000+0",{"_index":9409,"title":{},"body":{"1015831":{}}}],["16bi",{"_index":1528,"title":{},"body":{"1015843":{}}}],["16d0e000+2a8",{"_index":9411,"title":{},"body":{"1015831":{}}}],["16会存在浪费空间的情况，因为其16位（2字节）为一个单位，它需要字节对齐，例如字母a只需要一个字节就可以表示，而使用utf",{"_index":7094,"title":{},"body":{"1015833":{}}}],["16位",{"_index":5158,"title":{},"body":{"1015825":{}}}],["16位、2个字节",{"_index":5086,"title":{},"body":{"1015825":{}}}],["16位属性指的的是当前段寄存器的可读、可写的属性；32位base表示当前段是从哪里开始的；32位limit表示当前段的整个长度",{"_index":8916,"title":{},"body":{"1015831":{}}}],["16位标志寄存器是：flag",{"_index":5402,"title":{},"body":{"1015825":{}}}],["16在本地存储是没有啥问题的，顶多就是浪费一点硬盘空间，但是如果在网络中传输，那就太过于浪费了",{"_index":7097,"title":{},"body":{"1015833":{}}}],["16存储的时候，“中”这个字肯定是存储的0x1234，但是“国”这个字就不一样",{"_index":7086,"title":{},"body":{"1015833":{}}}],["16时就会变成2个字节，所以很浪费，而这时候utf",{"_index":7095,"title":{},"body":{"1015833":{}}}],["16是16位（2字节）为一个单位，所以国这个字拆下来存储应该是0x0",{"_index":7088,"title":{},"body":{"1015833":{}}}],["16是否是最优解呢？其实不然，我们通过如上的例子中可以看到一个很明显的缺点，那就是utf",{"_index":7093,"title":{},"body":{"1015833":{}}}],["16的优点一看便知：计算、拆分、解析非常方便，2个字节为一个单位，一个一个来",{"_index":7092,"title":{},"body":{"1015833":{}}}],["16的方式去解析该怎么办？如何让对方只采用utf",{"_index":7114,"title":{},"body":{"1015833":{}}}],["16编码是以16个无符号整数位单位，注意是16位为一个单位，但不表示一个字符就只有16位，具体的要看字符的unicode编码所在范围，有可能是2字节，有可能是4字节，现在机器上的unicode编码一般指的就是utf",{"_index":7082,"title":{},"body":{"1015833":{}}}],["16进制形式打印",{"_index":1675,"title":{},"body":{"1015843":{}}}],["16进制表示",{"_index":1619,"title":{},"body":{"1015843":{}}}],["16）：wchar_",{"_index":7126,"title":{},"body":{"1015833":{}}}],["17",{"_index":2256,"title":{},"body":{"1015818":{},"1015825":{},"1015843":{}}}],["19",{"_index":8798,"title":{},"body":{"1015850":{}}}],["1901~215",{"_index":8785,"title":{},"body":{"1015850":{}}}],["191.255.255.25",{"_index":9651,"title":{},"body":{"1015818":{}}}],["192.0.0.0",{"_index":9653,"title":{},"body":{"1015818":{}}}],["192.168.8.0",{"_index":9674,"title":{},"body":{"1015818":{}}}],["192.168.8.127",{"_index":9690,"title":{},"body":{"1015818":{}}}],["192.168.8.128",{"_index":9691,"title":{},"body":{"1015818":{}}}],["192.168.8.191",{"_index":9692,"title":{},"body":{"1015818":{}}}],["192.168.8.192",{"_index":9693,"title":{},"body":{"1015818":{}}}],["192.168.8.25",{"_index":9694,"title":{},"body":{"1015818":{}}}],["192.168.8.255，可用的主机号计算公式就是2的8（主机位）次方",{"_index":9685,"title":{},"body":{"1015818":{}}}],["192.168.8.63",{"_index":9688,"title":{},"body":{"1015818":{}}}],["192.168.8.64",{"_index":9689,"title":{},"body":{"1015818":{}}}],["1970",{"_index":8795,"title":{},"body":{"1015850":{}}}],["1=65535字节，不过由于链路层的mtu限制，超过1480字节后就会被分段（以太帧mtu为1500的情况下，除去20字节的包头",{"_index":10277,"title":{},"body":{"1015818":{}}}],["1>2",{"_index":1779,"title":{},"body":{"1015843":{}}}],["1e",{"_index":6356,"title":{},"body":{"1015828":{}}}],["1ff20000+0",{"_index":9471,"title":{},"body":{"1015831":{}}}],["1gb",{"_index":5190,"title":{},"body":{"1015825":{}}}],["1kb",{"_index":5186,"title":{},"body":{"1015825":{}}}],["1mb",{"_index":5188,"title":{},"body":{"1015825":{}}}],["1、本节必须掌握的知识点",{"_index":27,"title":{},"body":{"1015822":{}}}],["1、通过从mfc的afxwinmain入口函数下断，分析他的大概框架原理",{"_index":533,"title":{},"body":{"1015822":{}}}],["1。因此我们可以看见它是动态变化的，并不是固定值",{"_index":4463,"title":{},"body":{"2949166":{}}}],["1中有描述",{"_index":12028,"title":{},"body":{"1015817":{}}}],["1位",{"_index":5082,"title":{},"body":{"1015825":{}}}],["1像素",{"_index":635,"title":{},"body":{"1015822":{}}}],["1则表示不能使用调试寄存器：dr0",{"_index":11022,"title":{},"body":{"1703937":{}}}],["1吗？是的，是可以输入，单同样，我们可以在成员函数内做条件判断来控制输入的内容",{"_index":3537,"title":{},"body":{"1015840":{}}}],["1字节",{"_index":1462,"title":{},"body":{"1015843":{}}}],["1就是地址的终点。该值必须是0x1000（4kb，即一个物理页）的整数倍",{"_index":6745,"title":{},"body":{"2949228":{}}}],["1是一个正数，所以二进制原码、反码、补码都为：000",{"_index":5112,"title":{},"body":{"1015825":{}}}],["1是一个负数，我们知道有符号数最高位为符号位（最高位就是左边第一个数字），负数符号位为1，所以其二进制的原码为：100",{"_index":5114,"title":{},"body":{"1015825":{}}}],["1的值，使用goto需要定义标签，例如如上代码b就是一个标签，则代表当前的执行地址，goto则跳转到改标签对应的执行地址开始执行，在里面加入if进行判断即可实现循环效果",{"_index":1839,"title":{},"body":{"1015843":{}}}],["1的内容还是0xff呢？这是因为在编译器中，不管你是如何定义这个数的，只要看见",{"_index":1555,"title":{},"body":{"1015843":{}}}],["1这三个有符号数存入计算机中，其二进制表示为",{"_index":5111,"title":{},"body":{"1015825":{}}}],["1銆佺墿鐞嗛〉鍙鍐欍�佺敵璇蜂竴涓墿鐞嗛",{"_index":7972,"title":{},"body":{"1015833":{}}}],["1鏄璁＄畻鍒扮粨灏惧",{"_index":8645,"title":{},"body":{"1015833":{}}}],["1），第二个成员handler指向了异常处理函数",{"_index":4290,"title":{},"body":{"2949166":{}}}],["1，但我们一般使用16进制去表示，例如：0x00000000），程序独立存储的内存空间范围为：0",{"_index":5182,"title":{},"body":{"1015825":{}}}],["1，其表示将eax的值变成1",{"_index":5155,"title":{},"body":{"1015825":{}}}],["1，即清空",{"_index":2535,"title":{},"body":{"1015846":{}}}],["1，因此就不会去使用定时器，如果我们设置为一个正整数值，则定时器就会被启用",{"_index":10621,"title":{},"body":{"2424889":{}}}],["1，它们的含义如下",{"_index":4416,"title":{},"body":{"2949166":{}}}],["1，我们也可以通过[ebp",{"_index":4461,"title":{},"body":{"2949166":{}}}],["1，根据取值公式此时limit的最大值为0xffffff",{"_index":9029,"title":{},"body":{"1015831":{}}}],["1，第三个结构体的previoustrylevel值为1，是因为它是在嵌套_try_except程序块中，上面确实有一层_try_except程序块，因此我们可以通过这个值来判断当前在第几层嵌套中；成员lpfnfilter指向过滤函数的首地址，如图所示也就是我们的_except(过滤表达式)那个地址，通过返汇编我们可以看见这是有ret返回结果的，所以当异常发生时，代码会经过多次跳转和返回；成员lpfnhandler指向异常处理函数的首地址，也就是_except程序块内的异常处理代码，即下图所示中的printf函数部分",{"_index":4454,"title":{},"body":{"2949166":{}}}],["1，这在代码层面（语法）是合法的，但是不合理，因为人的年龄不可能是负数；所以从设计层面以上代码就不正确、不合理",{"_index":3530,"title":{},"body":{"1015840":{}}}],["1，这里我们可以看见有两个结构体的成员previoustrylevel值均为",{"_index":4453,"title":{},"body":{"2949166":{}}}],["1，那么一定会以其补码形式存储",{"_index":1556,"title":{},"body":{"1015843":{}}}],["1：readonly：只读",{"_index":6726,"title":{},"body":{"2949228":{}}}],["1：段上线为4gb",{"_index":9060,"title":{},"body":{"1015831":{}}}],["1：采用16位寻址方式",{"_index":9051,"title":{},"body":{"1015831":{}}}],["1：隐式栈访问指令（如：push",{"_index":9053,"title":{},"body":{"1015831":{}}}],["2",{"_index":614,"title":{},"body":{"1015814":{},"1015817":{},"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{},"2424869":{},"2424889":{},"2949166":{},"2949228":{},"3440657":{}}}],["2+2",{"_index":5035,"title":{},"body":{"1015825":{}}}],["2+3",{"_index":5037,"title":{},"body":{"1015825":{}}}],["2+4",{"_index":5040,"title":{},"body":{"1015825":{}}}],["2+5",{"_index":5044,"title":{},"body":{"1015825":{}}}],["2+6",{"_index":5049,"title":{},"body":{"1015825":{}}}],["2+7",{"_index":5055,"title":{},"body":{"1015825":{}}}],["2,2",{"_index":2054,"title":{},"body":{"1015843":{}}}],["2.1",{"_index":8643,"title":{},"body":{"1015833":{}}}],["2.2",{"_index":8648,"title":{},"body":{"1015833":{}}}],["2.3",{"_index":8650,"title":{},"body":{"1015833":{}}}],["2.34",{"_index":1577,"title":{},"body":{"1015843":{}}}],["2.34l",{"_index":1578,"title":{},"body":{"1015843":{}}}],["2.deque容器与vector容器相似都是模拟动态数组，它们都是顺序容器，所有适用于vector的操作都适用于deq",{"_index":11380,"title":{},"body":{"1015814":{}}}],["2.wm_comma",{"_index":447,"title":{},"body":{"1015822":{}}}],["2.不支持随机存取，不支持at函数和[]操作符",{"_index":11395,"title":{},"body":{"1015814":{}}}],["2.与mysql数据库引擎建立连接",{"_index":8869,"title":{},"body":{"1015850":{}}}],["2.为表中所有字段添加数据",{"_index":8845,"title":{},"body":{"1015850":{}}}],["2.元素包含两部分key和value，key和value可以是任意类型",{"_index":11489,"title":{},"body":{"1015814":{}}}],["2.内平栈：使用ret指令，例如压入了2个32位（4字节）数据就可以写为r",{"_index":5388,"title":{},"body":{"1015825":{}}}],["2.内部元素有序排列，新元素插入的位置取决于它的值，查找速度快",{"_index":11423,"title":{},"body":{"1015814":{}}}],["2.创建数据库",{"_index":8758,"title":{},"body":{"1015850":{}}}],["2.创建文件（sourç",{"_index":1342,"title":{},"body":{"1015843":{}}}],["2.删除类工厂idbsrvfactory声明，因为我们现在要使用标准类工厂接口iclassfact",{"_index":2642,"title":{},"body":{"1015823":{}}}],["2.向set和map容器中添加自定义对象也是将对象复制一份放到容器了，不同的是：set和map容器添加自定义对象的时候要实现比较器函数",{"_index":11753,"title":{},"body":{"1015814":{}}}],["2.在cdb构造函数中将m_dwrefcount初始化为0，实现cdb类的queryinterface，addref，release三个成员函数",{"_index":2659,"title":{},"body":{"1015823":{}}}],["2.在样式里选中notif",{"_index":1108,"title":{},"body":{"1015822":{}}}],["2.指针方式调用，可以成功调用获取到值",{"_index":3441,"title":{},"body":{"1015840":{}}}],["2.查询当前数据库的所有表",{"_index":8820,"title":{},"body":{"1015850":{}}}],["2.根据内存表存储顺序，直接将传入的值减去1，然后*4（这里也是数据宽度4字节）+最后压入的堆栈地址",{"_index":1823,"title":{},"body":{"1015843":{}}}],["2/2",{"_index":1586,"title":{},"body":{"1015843":{}}}],["20",{"_index":892,"title":{},"body":{"1015822":{},"1015825":{},"1015828":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{}}}],["20,18,39",{"_index":1909,"title":{},"body":{"1015843":{}}}],["2003服务器版本可以识别4g以上",{"_index":7910,"title":{},"body":{"1015833":{}}}],["200a7000+0指令的结果，0x0开始是第一个ptt表的地址，0x4开始就是第二个ptt表的地址，也就是需要指令变为!",{"_index":9467,"title":{},"body":{"1015831":{}}}],["200a7000+4",{"_index":9470,"title":{},"body":{"1015831":{}}}],["200a7000+4指令，我们再根据这个指令进行反推",{"_index":9468,"title":{},"body":{"1015831":{}}}],["200a7000+c0",{"_index":9469,"title":{},"body":{"1015831":{}}}],["2013\\\\projects\\\\dbtest\\\\dbtest\\\\debug\\\\dbtest.tlp",{"_index":3112,"title":{},"body":{"1015823":{}}}],["2038",{"_index":8797,"title":{},"body":{"1015850":{}}}],["20和20",{"_index":770,"title":{},"body":{"1015822":{}}}],["20就是为了确定位置，另外两个点就是10",{"_index":769,"title":{},"body":{"1015822":{}}}],["20然后画圆",{"_index":758,"title":{},"body":{"1015822":{}}}],["20画一条直线，而后取中心点，在中心点开始画圆（类似圆规",{"_index":762,"title":{},"body":{"1015822":{}}}],["21",{"_index":2253,"title":{},"body":{"1015825":{},"1015843":{},"1015847":{}}}],["21h2版本，但是页面中并没有对应的版本选择，所以我把所有windows10的wdk安装包都下载下来了",{"_index":5452,"title":{},"body":{"1015847":{}}}],["21位是大页的物理地址，这样36位的物理地址的低21位为0，这就意味着页的大小为2mb，且都是2mb对齐；并且多了一个pat位（页属性表），也就是第12位，该位与cpu相关，但并不是所有cpu都支持该位，如果不支持，该位会填0",{"_index":9536,"title":{},"body":{"1015831":{}}}],["223.255.255.25",{"_index":9654,"title":{},"body":{"1015818":{}}}],["224",{"_index":6000,"title":{},"body":{"1015828":{}}}],["224.0.0.0",{"_index":9656,"title":{},"body":{"1015818":{}}}],["22_0",{"_index":7343,"title":{},"body":{"1015833":{}}}],["23",{"_index":1705,"title":{},"body":{"1015825":{},"1015843":{}}}],["239.255.255.25",{"_index":9657,"title":{},"body":{"1015818":{}}}],["23:59:59",{"_index":8793,"title":{},"body":{"1015850":{}}}],["24",{"_index":5007,"title":{},"body":{"1015825":{}}}],["240.0.0.0",{"_index":9659,"title":{},"body":{"1015818":{}}}],["243",{"_index":1877,"title":{},"body":{"1015843":{}}}],["243...循环结束直至表达式2不成立为止",{"_index":1878,"title":{},"body":{"1015843":{}}}],["245",{"_index":885,"title":{},"body":{"1015822":{}}}],["247.255.255.25",{"_index":9660,"title":{},"body":{"1015818":{}}}],["25",{"_index":895,"title":{},"body":{"1015822":{},"1015825":{},"1015843":{}}}],["255字节",{"_index":8808,"title":{},"body":{"1015850":{}}}],["256",{"_index":7370,"title":{},"body":{"1015833":{}}}],["25d97867",{"_index":9435,"title":{},"body":{"1015831":{}}}],["25f0100",{"_index":9434,"title":{},"body":{"1015831":{}}}],["26",{"_index":5008,"title":{},"body":{"1015825":{}}}],["260",{"_index":8062,"title":{},"body":{"1015833":{}}}],["27",{"_index":5009,"title":{},"body":{"1015825":{}}}],["28_21",{"_index":7695,"title":{},"body":{"1015833":{}}}],["28位)表示结果操作来源，在windows平台上，其定义如下",{"_index":2847,"title":{},"body":{"1015823":{}}}],["2][2])1",{"_index":2250,"title":{},"body":{"1015843":{}}}],["2][2])3",{"_index":2245,"title":{},"body":{"1015843":{}}}],["2]也是如此，所以我们也就知道权限切换时esp、ss的值是从tss中获取的",{"_index":9293,"title":{},"body":{"1015831":{}}}],["2^23",{"_index":1636,"title":{},"body":{"1015843":{}}}],["2^52",{"_index":1639,"title":{},"body":{"1015843":{}}}],["2_18",{"_index":7917,"title":{},"body":{"1015833":{}}}],["2a8",{"_index":9406,"title":{},"body":{"1015831":{}}}],["2、cwinap",{"_index":534,"title":{},"body":{"1015822":{}}}],["2、需要简单了解的内容",{"_index":32,"title":{},"body":{"1015822":{}}}],["2中，有0x80、0x81、0x82、0x83这几个编码没有给出具体的指令，我们可以看见在原来指令的位置变成了imm",{"_index":12024,"title":{},"body":{"1015817":{}}}],["2字节",{"_index":1529,"title":{},"body":{"1015843":{}}}],["2字节、char",{"_index":1461,"title":{},"body":{"1015843":{}}}],["2得到对应的结构",{"_index":12068,"title":{},"body":{"1015817":{}}}],["2得到对应的结构：[ebp+dis8(8位偏移量)]，reg/opcode字段根据上文所示那张表就可以得到对应的指令为：a",{"_index":12041,"title":{},"body":{"1015817":{}}}],["2核就是50",{"_index":11221,"title":{},"body":{"1703937":{}}}],["2涓狝pc闃熷垪锛�2涓弻鍚戦摼琛紝鍗曡〃鍗犵敤8瀛楄妭锛�4瀛楄妭鎸囧悜閾捐〃澶达紝4瀛楄妭鎸囧悜閾捐〃灏撅級锛屽垎鍒槸鐢ㄦ埛apc銆佸唴鏍窤pc",{"_index":10777,"title":{},"body":{"2424869":{}}}],["2的scale次方",{"_index":12062,"title":{},"body":{"1015817":{}}}],["2的三次方(指数是3",{"_index":1604,"title":{},"body":{"1015843":{}}}],["2，这里结果也就是254，为什么我们还需要减去2，这是因为根据计算方法，192.168.8.0就是网络号（代表当前网络），同时根据定义，主机号位全为1的地址为此网段的广播地址，此时的广播地址为192.168.8.255，去掉网络地址和广播地址，也就是254个主机号可用",{"_index":9686,"title":{},"body":{"1015818":{}}}],["2：execute：可执行",{"_index":6727,"title":{},"body":{"2949228":{}}}],["3",{"_index":616,"title":{},"body":{"1015814":{},"1015817":{},"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{},"2424869":{},"2424889":{},"2949228":{},"3440657":{}}}],["3+3",{"_index":5038,"title":{},"body":{"1015825":{}}}],["3+4",{"_index":5041,"title":{},"body":{"1015825":{}}}],["3+5",{"_index":5045,"title":{},"body":{"1015825":{}}}],["3+6",{"_index":5050,"title":{},"body":{"1015825":{}}}],["3+7",{"_index":5056,"title":{},"body":{"1015825":{}}}],["3,3",{"_index":2055,"title":{},"body":{"1015843":{}}}],["3,4}}，所以(*px)[1][1]为4",{"_index":2290,"title":{},"body":{"1015843":{}}}],["3.14",{"_index":1669,"title":{},"body":{"1015843":{}}}],["3.1415f",{"_index":1667,"title":{},"body":{"1015843":{}}}],["3.6.0",{"_index":4100,"title":{},"body":{"1015820":{}}}],["3.deque还有push_front函数(将元素插入到前面)和pop_front函数(删除最前面的元素)操作（vector容器只有在尾部操作的方法，因此vector适用于尾部的操作",{"_index":11381,"title":{},"body":{"1015814":{}}}],["3.list容器除了具有所有顺序容器都有的函数以外，还支持以下函数",{"_index":11396,"title":{},"body":{"1015814":{}}}],["3.删除dllgetclassfactoryobject函数的声明和定义",{"_index":2643,"title":{},"body":{"1015823":{}}}],["3.双击静态文本创建函数",{"_index":1109,"title":{},"body":{"1015822":{}}}],["3.定义全局变量g_dwrefcount；在构造函数中将m_dwrefcount初始化为0；实现cdbsrvfactory类的queryinterface，addref，release三个成员函数；将cdbsrvfactory类的createdb成员函数修改为createinstance；实现lockserver成员函数；添加dllgetclassobject、dllcanunloadnow、dllunregisterserver、dllregisterserver四个成员函数",{"_index":2691,"title":{},"body":{"1015823":{}}}],["3.控件通知",{"_index":450,"title":{},"body":{"1015822":{}}}],["3.支持通过键值实现快速读取",{"_index":11424,"title":{},"body":{"1015814":{}}}],["3.更新数据",{"_index":8850,"title":{},"body":{"1015850":{}}}],["3.查看数据表",{"_index":8821,"title":{},"body":{"1015850":{}}}],["3.查询创建好的数据库",{"_index":8760,"title":{},"body":{"1015850":{}}}],["3.根据元素的key自动对元素排序，因此根据元素的key进行定位很快，但根据元素的value定位很慢",{"_index":11490,"title":{},"body":{"1015814":{}}}],["3.编写入口程序",{"_index":1343,"title":{},"body":{"1015843":{}}}],["3.选择一个mysql数据库",{"_index":8885,"title":{},"body":{"1015850":{}}}],["30",{"_index":163,"title":{},"body":{"1015822":{},"1015825":{},"1015831":{},"1015833":{},"1015840":{}}}],["300*4",{"_index":9458,"title":{},"body":{"1015831":{}}}],["30df3430",{"_index":2692,"title":{},"body":{"1015823":{}}}],["30df3432",{"_index":2667,"title":{},"body":{"1015823":{}}}],["31",{"_index":5010,"title":{},"body":{"1015825":{},"1015850":{}}}],["31位和1",{"_index":7045,"title":{},"body":{"2949228":{}}}],["31位的页面文件偏移），从pagefile.sys中获取数据内容，并将其加载到一个新的物理页上。然后将pte的12",{"_index":7030,"title":{},"body":{"2949228":{}}}],["31位设置为新的物理页地址，并将p位设置为1。这样，缺页异常的处理就完成了。这种类型的缺页异常非常常见，几乎时刻都在发生，但对于用户来说，是察觉不到任何异常的，程序仍然正常执行",{"_index":7031,"title":{},"body":{"2949228":{}}}],["31位都有值，表示线性地址是有效的，只是对应的数据位于硬盘上",{"_index":7028,"title":{},"body":{"2949228":{}}}],["31），第0位表示调用者是否允许关闭该句柄默认值为1，第1位表示该句柄是否可继承（是否可以将句柄项拷贝到其他句柄表中），第2位表示",{"_index":8718,"title":{},"body":{"1933378":{}}}],["32",{"_index":2072,"title":{},"body":{"1015825":{},"1015843":{}}}],["329655ac6fb0",{"_index":10211,"title":{},"body":{"1015818":{}}}],["32bi",{"_index":1530,"title":{},"body":{"1015843":{}}}],["32位",{"_index":5157,"title":{},"body":{"1015825":{}}}],["32位、2个字、4个字节",{"_index":5088,"title":{},"body":{"1015825":{}}}],["32位操作系统中，即使是2",{"_index":6872,"title":{},"body":{"2949228":{}}}],["32位操作系统最多可以识别物理内存为64g，但是操作系统会进行限制，例如xp这个系统只能识别4g的物理内存（window",{"_index":7909,"title":{},"body":{"1015833":{}}}],["32位的通用寄存器（8个）：eax、ecx、edx、ebx、esp、ebp、esi、",{"_index":5153,"title":{},"body":{"1015825":{}}}],["32位系统上将线性地址转为物理地址有2种方式：10",{"_index":9388,"title":{},"body":{"1015831":{}}}],["32位，所以我将target32目录放入虚拟机中，并且按如下步骤操作",{"_index":5490,"title":{},"body":{"1015847":{}}}],["32浣嶉�氱敤瀵勫瓨鍣",{"_index":5196,"title":{},"body":{"1015825":{}}}],["33个链表",{"_index":11089,"title":{},"body":{"1703937":{}}}],["34",{"_index":5011,"title":{},"body":{"1015825":{}}}],["34.构建（f7",{"_index":1344,"title":{},"body":{"1015843":{}}}],["35",{"_index":5012,"title":{},"body":{"1015825":{}}}],["35位就是物理页基址，低12位填0，共36位。物理页基址加12位的页内偏移，就可以找到具体的数据",{"_index":9541,"title":{},"body":{"1015831":{}}}],["35位就是页目录表基址",{"_index":9530,"title":{},"body":{"1015831":{}}}],["36",{"_index":5013,"title":{},"body":{"1015825":{}}}],["37",{"_index":5014,"title":{},"body":{"1015825":{}}}],["386以及后续的型号cpu运行则值为0x14c，支持64位的cpu型号则值为0x8664",{"_index":6113,"title":{},"body":{"1015828":{}}}],["3])1",{"_index":2249,"title":{},"body":{"1015843":{}}}],["3])2",{"_index":2243,"title":{},"body":{"1015843":{}}}],["3][3][3])1",{"_index":2251,"title":{},"body":{"1015843":{}}}],["3][3][3])4",{"_index":2247,"title":{},"body":{"1015843":{}}}],["3d",{"_index":806,"title":{},"body":{"1015822":{}}}],["3、cframewn",{"_index":537,"title":{},"body":{"1015822":{}}}],["3中有值时，可以确定是某个硬件断点触发了单步异常。如果b0",{"_index":4924,"title":{},"body":{"3440657":{}}}],["3中的任意一个寄存器。当cpu执行到该线性地址时，如果发现与调试寄存器中的值相同，就会触发断点异常，进而暂停执行。需要注意的是，设置断点是修改当前线程context中记录的调试寄存器的值，不同线程之间是相互隔离的，因此设置硬件断点不会影响其他线程的执行",{"_index":4927,"title":{},"body":{"3440657":{}}}],["3为对应关系，如dr0对应l0、g0、len0、r/w0",{"_index":4916,"title":{},"body":{"3440657":{}}}],["3存储线性地址后，lx或gx必须有一个为1，才会触发",{"_index":4920,"title":{},"body":{"3440657":{}}}],["3寄存器是否有效，确定是局部（lx）还是全局（gx）断点。每次异常触发后，lx都被清零，gx不清零。当你向dr0",{"_index":4919,"title":{},"body":{"3440657":{}}}],["3引起的异常就会被挂起",{"_index":4807,"title":{},"body":{"3440657":{}}}],["3指令是否为系统断点，如果是系统断点，则无需修复。issystemint3函数需要自行实现。如果不是系统断点则通过调试事件来获取对应的异常地址，然后将原指令写入回去",{"_index":4824,"title":{},"body":{"3440657":{}}}],["3指令让程序中断在windbg中，观察一下栈",{"_index":9245,"title":{},"body":{"1015831":{}}}],["3指令），查询中断描述符表，找到对应的中断处理函数（3号），中断处理函数内部会调用commondispatchexception函数，在commondispatchexception函数内部又会调用kidispatchexception函数",{"_index":4800,"title":{},"body":{"3440657":{}}}],["3指令，软件断点的实现就是将下断点的地址处硬编码指令修改为0xc",{"_index":4795,"title":{},"body":{"3440657":{}}}],["3指令，这个指令就是用来执行中断门的",{"_index":9255,"title":{},"body":{"1015831":{}}}],["3断点",{"_index":4756,"title":{},"body":{"3440657":{}}}],["3涓嶄负绌",{"_index":4948,"title":{},"body":{"3440657":{}}}],["3环的api调用就是根据系统调用号找到函数再去使用，虽然系统调用号有32位（4字节）但是真正使用的只有低13位，这13位也分成两部分：第12位值为0则为第一张表（ntoskrl.exe），值为1则为第二张表（win32k.sys）；低12位（第0至第11位）就是对应的函数地址、参数表索引",{"_index":2551,"title":{},"body":{"1015846":{}}}],["3环进0环部分",{"_index":2454,"title":{},"body":{"1015846":{}}}],["3环部分",{"_index":2405,"title":{},"body":{"1015846":{}}}],["3用于设置硬件断点，也就是存储对应的线性地址，由于只有4个断点寄存器，所以最多只能设置4个硬件调试断点。dr4",{"_index":4912,"title":{},"body":{"3440657":{}}}],["3的值都为空，那么说明是由eflags的tf标志位为1引起的单步异常",{"_index":4925,"title":{},"body":{"3440657":{}}}],["3软件断点的处理函数，下面仅列出相关代码，其每一步的意义如下",{"_index":4822,"title":{},"body":{"3440657":{}}}],["3都是与dr0",{"_index":4915,"title":{},"body":{"3440657":{}}}],["3鐜繘0鐜繚瀛樼幇鍦烘墍鐢ㄧ殑缁撴瀯浣",{"_index":4277,"title":{},"body":{"2949166":{}}}],["3（应用层）、ring",{"_index":9068,"title":{},"body":{"1015831":{}}}],["3（应用层，3环",{"_index":9077,"title":{},"body":{"1015831":{}}}],["3（用户模式）。在这种情况下，操作系统会将异常传递给目标进程的异常处理程序，由用户模式代码处理该异常",{"_index":4057,"title":{},"body":{"3440655":{}}}],["3）到执行到对应的线性地址，就会触发单步异常",{"_index":4931,"title":{},"body":{"3440657":{}}}],["3）到执行到对应的线性地址，就会触发单步异常。然后就进行了异常的处理流程",{"_index":4929,"title":{},"body":{"3440657":{}}}],["3，base对应着eax，base和index就是[ecx*2]，最终得到[eax",{"_index":12074,"title":{},"body":{"1015817":{}}}],["3，也就表示当前进程的权限是ring",{"_index":9076,"title":{},"body":{"1015831":{}}}],["3，也证明了异常调试事件是来源于此。至于为什么会突然出现这个断点，我们需要回顾一下进程的创建过程",{"_index":4753,"title":{},"body":{"3440657":{}}}],["3，然后单步执行后就恢复再以此类推去设置。但是这样的方式很笨拙，因此intel在设计cpu时考虑到了调试程序的必要性，就在eflags寄存器中设置了一个tf位。tf位我们可以称之为单步标志，当tf位被置1时，每执行完一行指令就会产生一个异常",{"_index":4963,"title":{},"body":{"3440657":{}}}],["3，这是因为od为了更好的用户体验展示的时候保留了原指令",{"_index":4797,"title":{},"body":{"3440657":{}}}],["3，这是用来断点的（跟软件调试有关，原理在后续章节中讲解），所以代码执行到该函数时候就会中断；并且我们需要注意虽然当前代码是在低2g中，但是通过调用门这段代码的权限就已经提升为0环的权限了，也因此，我们在3环是没法捕捉到这个断点的，只能在0环的调试器中去捕捉，也就是中断到我们的windbg调试器",{"_index":9227,"title":{},"body":{"1015831":{}}}],["3，这种运算计算机是通过位运算去实现的，所以计算机本质上是不会做加法的。所以本章节主要是学习位运算：与、或、异或、非、左移、右移",{"_index":5121,"title":{},"body":{"1015825":{}}}],["3：execu",{"_index":6728,"title":{},"body":{"2949228":{}}}],["4",{"_index":748,"title":{},"body":{"1015814":{},"1015817":{},"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{},"1933378":{},"2424889":{},"2949228":{},"3440657":{}}}],["4+4",{"_index":5042,"title":{},"body":{"1015825":{}}}],["4+5",{"_index":5046,"title":{},"body":{"1015825":{}}}],["4+5的运算过程",{"_index":5130,"title":{},"body":{"1015825":{}}}],["4+6",{"_index":5051,"title":{},"body":{"1015825":{}}}],["4+7",{"_index":5057,"title":{},"body":{"1015825":{}}}],["4,4",{"_index":2056,"title":{},"body":{"1015843":{}}}],["4,5,6",{"_index":2275,"title":{},"body":{"1015843":{}}}],["4.8.2",{"_index":4086,"title":{},"body":{"1015820":{}}}],["4.8.6",{"_index":4095,"title":{},"body":{"1015820":{}}}],["4.sql语句查询",{"_index":8888,"title":{},"body":{"1015850":{}}}],["4.不可以使用at函数与[]操作符",{"_index":11425,"title":{},"body":{"1015814":{}}}],["4.不能直接改变元素的key，可以通过[]操作符操作元素的valu",{"_index":11491,"title":{},"body":{"1015814":{}}}],["4.修改数据库",{"_index":8761,"title":{},"body":{"1015850":{}}}],["4.修改表",{"_index":8823,"title":{},"body":{"1015850":{}}}],["4.删除数据",{"_index":8854,"title":{},"body":{"1015850":{}}}],["4/2",{"_index":1585,"title":{},"body":{"1015843":{}}}],["40",{"_index":734,"title":{},"body":{"1015822":{},"1015825":{},"1015828":{},"1015833":{},"3440655":{}}}],["40.png?version=2&modificationdate=1621614305000&api=v2",{"_index":7344,"title":{},"body":{"1015833":{}}}],["4096",{"_index":9494,"title":{},"body":{"1015831":{}}}],["4096个字节",{"_index":6414,"title":{},"body":{"1015828":{}}}],["40h",{"_index":1390,"title":{},"body":{"1015843":{}}}],["40；我们观察到结构体数组在内存中是连续存储的",{"_index":2073,"title":{},"body":{"1015843":{}}}],["41",{"_index":5015,"title":{},"body":{"1015825":{}}}],["42",{"_index":5016,"title":{},"body":{"1015825":{}}}],["4294967295",{"_index":1664,"title":{},"body":{"1015843":{}}}],["43",{"_index":5017,"title":{},"body":{"1015825":{}}}],["45",{"_index":5018,"title":{},"body":{"1015825":{}}}],["450",{"_index":7864,"title":{},"body":{"1015833":{}}}],["4503599627370496",{"_index":1640,"title":{},"body":{"1015843":{}}}],["45，也就是pe",{"_index":8590,"title":{},"body":{"1015833":{}}}],["46",{"_index":5019,"title":{},"body":{"1015825":{}}}],["47",{"_index":5020,"title":{},"body":{"1015825":{},"1015833":{}}}],["47），表示访问掩码，是给openprocess函数使用的，其存储的值就是openprocess函数的第一个参数对应的值",{"_index":8716,"title":{},"body":{"1933378":{}}}],["49.png?version=2&modificationdate=1622628469111&api=v2",{"_index":7918,"title":{},"body":{"1015833":{}}}],["4972",{"_index":4251,"title":{},"body":{"2949166":{}}}],["49e60bebca55，如下图所示我们可以看见，整数除0时的异常状态码为0xc0000094",{"_index":4253,"title":{},"body":{"2949166":{}}}],["4=？10*4=？10/4=？首先，我们需要知道八进制的八个符号分别是什么，分别是：0、1、2、3、4、5、6、7",{"_index":5001,"title":{},"body":{"1015825":{}}}],["4],0x1122334",{"_index":5332,"title":{},"body":{"1015825":{}}}],["4],1",{"_index":1713,"title":{},"body":{"1015843":{}}}],["4]来找到该值，接着我们会发现每个_try都会有一次的trylevel的修改，根据数值来看这就像是一共索引，第一个_try_except块trylevel值为0，第二个则值为1，以此类推，如果是嵌套的_try_except块则内嵌的块指向结束之后会将该trylevel值修改为上层的索引值，如果当上层没有_try_except块时，执行完毕就会将trylevel值修改为",{"_index":4462,"title":{},"body":{"2949166":{}}}],["4b:004010c",{"_index":9138,"title":{},"body":{"1015831":{}}}],["4bc",{"_index":9430,"title":{},"body":{"1015831":{}}}],["4eb3",{"_index":10209,"title":{},"body":{"1015818":{}}}],["4g（换算：1byt",{"_index":5185,"title":{},"body":{"1015825":{}}}],["4kb",{"_index":9028,"title":{},"body":{"1015831":{}}}],["4、ebp",{"_index":1490,"title":{},"body":{"1015843":{}}}],["4个int类型的参数，或者一个lpcrect类型的参数（这个可以通过crect来创建，原因如下图所示，lpcrect本质上就是一个宏，其用于表示rect指针，而rect则是tagrect实例化的对象，crect又继承于tagrect，所以我们可以直接使用crect来创建），而如果你使用crect创建对象传入的还是四个int类型的参数，其实本质上和直接传入4个int类型的参数没有区别",{"_index":752,"title":{},"body":{"1015822":{}}}],["4位、5",{"_index":7026,"title":{},"body":{"2949228":{}}}],["4字节",{"_index":1531,"title":{},"body":{"1015843":{}}}],["4字节、shor",{"_index":1460,"title":{},"body":{"1015843":{}}}],["4就是依次向前查4位，10*4就等于10+10+10+10，那么是否等于从10这个数字开始依次往后查3个10位呢？其实并不是，因为这里是八进制，我们要严格按照八进制的表示来，这里的10（一零）实际上表示8个，也就是从10这个数字开始依次往后查3个8位，10*4的结果也就是40",{"_index":5031,"title":{},"body":{"1015825":{}}}],["4锛�5锛�6}鐨勯鍦板潃",{"_index":2285,"title":{},"body":{"1015843":{}}}],["4）给了eax，而后eax又作为了内存地址去寻找对应存储的值，但是这里eax为0x1，所以在内存中根本就不存在这个地址，也就没办法找到对应的值，自然就无法运行",{"_index":2117,"title":{},"body":{"1015843":{}}}],["4），之后这个局部变量（ebp",{"_index":2116,"title":{},"body":{"1015843":{}}}],["4），也就是将返回值存到当前函数的缓冲区内",{"_index":1495,"title":{},"body":{"1015843":{}}}],["4，cr1是保留的，cr3就是我们之前经常使用到的，通过cr3可以找到页目录表基址（分页机制决定",{"_index":9597,"title":{},"body":{"1015831":{}}}],["4，程序会到00000002这个执行地址继续执行，而不再是call指令下一行地址继续执行",{"_index":5383,"title":{},"body":{"1015825":{}}}],["4：readwrite：读、写",{"_index":6730,"title":{},"body":{"2949228":{}}}],["5",{"_index":737,"title":{},"body":{"1015814":{},"1015818":{},"1015822":{},"1015825":{},"1015833":{},"1015843":{},"2949228":{},"3440657":{}}}],["5+5",{"_index":5047,"title":{},"body":{"1015825":{}}}],["5+6",{"_index":5052,"title":{},"body":{"1015825":{}}}],["5+7",{"_index":5058,"title":{},"body":{"1015825":{}}}],["5.map容器中不允许key相同的元素，multimap容器允许key相同的元素",{"_index":11492,"title":{},"body":{"1015814":{}}}],["5.sql语句查询返回结果集",{"_index":8892,"title":{},"body":{"1015850":{}}}],["5.不可以直接修改set或multiset容器中的元素值，因为该类容器是自动排序的，如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素",{"_index":11426,"title":{},"body":{"1015814":{}}}],["5.删除数据库",{"_index":8768,"title":{},"body":{"1015850":{}}}],["5.删除表",{"_index":8840,"title":{},"body":{"1015850":{}}}],["5.运行（f5",{"_index":1345,"title":{},"body":{"1015843":{}}}],["50",{"_index":5021,"title":{},"body":{"1015825":{}}}],["51",{"_index":5022,"title":{},"body":{"1015825":{}}}],["51.png?version=2&modificationdate=1622209820000&api=v2",{"_index":7696,"title":{},"body":{"1015833":{}}}],["52",{"_index":5023,"title":{},"body":{"1015825":{}}}],["53",{"_index":5024,"title":{},"body":{"1015825":{}}}],["54",{"_index":5025,"title":{},"body":{"1015825":{}}}],["56",{"_index":5026,"title":{},"body":{"1015825":{}}}],["57",{"_index":5027,"title":{},"body":{"1015825":{}}}],["5])1",{"_index":2241,"title":{},"body":{"1015843":{}}}],["5a，也就是mz，当看见这两个字节后，在其位置向后找第64字节，发现是e0，那么就从模块起始位置0x7c920000加0xe0，这样就成了0x7c9200e0，然后我们找到对应地址的两个字节为50",{"_index":8589,"title":{},"body":{"1015833":{}}}],["5是保留的，我们可以不用看",{"_index":4913,"title":{},"body":{"3440657":{}}}],["5，b+4",{"_index":2085,"title":{},"body":{"1015843":{}}}],["5：writecopy：写拷贝",{"_index":6731,"title":{},"body":{"2949228":{}}}],["6",{"_index":1930,"title":{},"body":{"1015814":{},"1015818":{},"1015825":{},"1015828":{},"1015833":{},"1015843":{},"1015847":{},"3440657":{}}}],["6+6",{"_index":5053,"title":{},"body":{"1015825":{}}}],["6+7",{"_index":5059,"title":{},"body":{"1015825":{}}}],["6.multiset支持同一个键多次出现的set类型",{"_index":11427,"title":{},"body":{"1015814":{}}}],["6.关闭连接",{"_index":8895,"title":{},"body":{"1015850":{}}}],["60",{"_index":5028,"title":{},"body":{"1015825":{},"1015833":{}}}],["6043",{"_index":10208,"title":{},"body":{"1015818":{}}}],["61",{"_index":5029,"title":{},"body":{"1015825":{},"1015828":{}}}],["63位），低字节保留（一直都是0），高位字节是给sethandleinformation这个函数用的，例如当执行如下语句",{"_index":8711,"title":{},"body":{"1933378":{}}}],["64",{"_index":5997,"title":{},"body":{"1015818":{},"1015828":{}}}],["65535",{"_index":9699,"title":{},"body":{"1015818":{}}}],["6a",{"_index":6396,"title":{},"body":{"1015828":{}}}],["6这张表的内容，才能知道具体的指令是什么",{"_index":12032,"title":{},"body":{"1015817":{}}}],["6，因为减去一个星号还是指针，指针的宽度永远是4",{"_index":2086,"title":{},"body":{"1015843":{}}}],["6：execute_readwrite：可执行、读、写",{"_index":6732,"title":{},"body":{"2949228":{}}}],["7",{"_index":1002,"title":{},"body":{"1015814":{},"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015833":{},"1015843":{},"2949228":{},"3440657":{}}}],["7+7",{"_index":5060,"title":{},"body":{"1015825":{}}}],["7,8,9",{"_index":2276,"title":{},"body":{"1015843":{}}}],["7.1",{"_index":8673,"title":{},"body":{"1015833":{}}}],["7.2",{"_index":8676,"title":{},"body":{"1015833":{}}}],["7.3",{"_index":8679,"title":{},"body":{"1015833":{}}}],["7.释放结果集使用的内存",{"_index":8898,"title":{},"body":{"1015850":{}}}],["76",{"_index":6401,"title":{},"body":{"1015828":{}}}],["77，这边注意我们是按小端存储模式去写入的",{"_index":6358,"title":{},"body":{"1015828":{}}}],["7c920000即可看到该模块的信息",{"_index":8587,"title":{},"body":{"1015833":{}}}],["7ffdf000命令来查看teb结构体",{"_index":8545,"title":{},"body":{"1015833":{}}}],["7ffdf000，回车即可看到堆栈的地址范围了",{"_index":5325,"title":{},"body":{"1015825":{}}}],["7、xp",{"_index":5145,"title":{},"body":{"1015825":{}}}],["7浣",{"_index":9203,"title":{},"body":{"1015831":{}}}],["7：execute_writecopy：可执行、写拷贝",{"_index":6733,"title":{},"body":{"2949228":{}}}],["8",{"_index":1004,"title":{},"body":{"1015814":{},"1015817":{},"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015833":{},"1015843":{},"1015850":{},"1933378":{},"2949228":{},"3440657":{}}}],["8...以此类推，这也就是为什么局部变量使用前需赋初值，不然里面是垃圾数据（c",{"_index":1491,"title":{},"body":{"1015843":{}}}],["8.25",{"_index":1601,"title":{},"body":{"1015843":{}}}],["8.25等于",{"_index":1622,"title":{},"body":{"1015843":{}}}],["8.25转成浮点存储，小数部分这样计算",{"_index":1589,"title":{},"body":{"1015843":{}}}],["80",{"_index":1694,"title":{},"body":{"1015833":{},"1015843":{},"3440655":{}}}],["8003f048",{"_index":9133,"title":{},"body":{"1015831":{}}}],["8008a4",{"_index":10516,"title":{},"body":{"1015818":{}}}],["80486或以上的cpu，cr0的第16位是写保护（wr",{"_index":9609,"title":{},"body":{"1015831":{}}}],["80x86有两条中断请求线",{"_index":9567,"title":{},"body":{"1015831":{}}}],["80编码规则后，就要知道一个中文代表2个字节",{"_index":1699,"title":{},"body":{"1015843":{}}}],["80，两种编码可能使用相同的数字代表两个不同的符号，或者使用相同的数字代表不同的符号，这种编码方式有很大的弊端，当此种编码方式的数据在其他国家使用的时候，如果其他国家使用类似的编码规则，那么数据就会失去原本的意义",{"_index":1696,"title":{},"body":{"1015843":{}}}],["8388608",{"_index":1637,"title":{},"body":{"1015843":{}}}],["838:59:59~838:59:59",{"_index":8790,"title":{},"body":{"1015850":{}}}],["89",{"_index":10341,"title":{},"body":{"1015818":{}}}],["890dd778指令以结构体形式展示这块内存，找到成员objeç",{"_index":8700,"title":{},"body":{"1933378":{}}}],["8],of",{"_index":1716,"title":{},"body":{"1015843":{}}}],["8bi",{"_index":1525,"title":{},"body":{"1015825":{},"1015843":{}}}],["8c",{"_index":6504,"title":{},"body":{"1015828":{}}}],["8位",{"_index":5084,"title":{},"body":{"1015825":{}}}],["8字节",{"_index":1573,"title":{},"body":{"1015843":{}}}],["8字节（在某些平台的编译器中可能是16个字节",{"_index":1574,"title":{},"body":{"1015843":{}}}],["8存储的方式是有对应表的",{"_index":7100,"title":{},"body":{"1015833":{}}}],["8指令来找到，如下图所示我们可以看见有10个一样的句柄表成员，这也就是我们所使用的10个内核对象",{"_index":8707,"title":{},"body":{"1933378":{}}}],["8是unicode存储的实现方式；utf",{"_index":7081,"title":{},"body":{"1015833":{}}}],["8横空出世。（utf",{"_index":7096,"title":{},"body":{"1015833":{}}}],["8瀛楄妭锛塆dt琛ㄧ殑鏁版嵁",{"_index":8999,"title":{},"body":{"1015831":{}}}],["8的文本格式发给对方，那对方如果按照utf",{"_index":7113,"title":{},"body":{"1015833":{}}}],["8的方式去解析呢",{"_index":7115,"title":{},"body":{"1015833":{}}}],["8的方式存储就是1110",{"_index":7108,"title":{},"body":{"1015833":{}}}],["8称之为可变长存储方案，其存储根据字符大小来分配，例如字母a就分配一个字节，汉字“中”就分配两个字节",{"_index":7098,"title":{},"body":{"1015833":{}}}],["9",{"_index":1006,"title":{},"body":{"1015814":{},"1015822":{},"1015823":{},"1015825":{},"1015831":{},"1015833":{},"1015843":{},"1015846":{},"1015847":{},"2949228":{}}}],["9/2",{"_index":1584,"title":{},"body":{"1015843":{}}}],["9059",{"_index":10210,"title":{},"body":{"1015818":{}}}],["912）分页；为0时，是10",{"_index":9617,"title":{},"body":{"1015831":{}}}],["94",{"_index":6357,"title":{},"body":{"1015828":{}}}],["98",{"_index":11360,"title":{},"body":{"1015814":{}}}],["999",{"_index":8792,"title":{},"body":{"1015850":{}}}],["9bbc",{"_index":4252,"title":{},"body":{"2949166":{}}}],["9位和12",{"_index":7027,"title":{},"body":{"2949228":{}}}],["9位，将p位设置为1。这样，线性地址与物理页之间建立了映射关系",{"_index":7046,"title":{},"body":{"2949228":{}}}],["9的数字",{"_index":1866,"title":{},"body":{"1015843":{}}}],["__as",{"_index":5911,"title":{},"body":{"1015831":{},"1015833":{},"1015847":{},"1703937":{}}}],["__cdecl",{"_index":2296,"title":{},"body":{"1015843":{}}}],["__cdecl，更换调用约定就是在函数名称前面加上关键词",{"_index":2305,"title":{},"body":{"1015843":{}}}],["__chkesp",{"_index":1510,"title":{},"body":{"1015843":{}}}],["__cplusplu",{"_index":3800,"title":{},"body":{"3440655":{}}}],["__declspec(",{"_index":5909,"title":{},"body":{"1015831":{},"1015847":{},"1703937":{}}}],["__excep",{"_index":5537,"title":{},"body":{"1015847":{}}}],["__except(unhandledexceptionfilter(getexceptioninf",{"_index":4494,"title":{},"body":{"2949166":{},"3440657":{}}}],["__fastcal",{"_index":2300,"title":{},"body":{"1015843":{}}}],["__i",{"_index":2344,"title":{},"body":{"1015843":{}}}],["__ou",{"_index":2345,"title":{},"body":{"1015843":{}}}],["__stdcal",{"_index":338,"title":{},"body":{"1015822":{},"1015823":{},"1015843":{}}}],["__stdcall，我们写的代码默认使用",{"_index":2304,"title":{},"body":{"1015843":{}}}],["__tagbreç",{"_index":3005,"title":{},"body":{"1015823":{}}}],["__tagv",{"_index":2950,"title":{},"body":{"1015823":{}}}],["__tri",{"_index":4493,"title":{},"body":{"1015847":{},"2949166":{},"3440657":{}}}],["__unn",{"_index":6888,"title":{},"body":{"2949228":{}}}],["__variant_name_1",{"_index":3012,"title":{},"body":{"1015823":{}}}],["__variant_name_2",{"_index":3011,"title":{},"body":{"1015823":{}}}],["__variant_name_3",{"_index":3010,"title":{},"body":{"1015823":{}}}],["__variant_name_4",{"_index":3009,"title":{},"body":{"1015823":{}}}],["_afxcbtfilterhook(",{"_index":498,"title":{},"body":{"1015822":{}}}],["_as",{"_index":2439,"title":{},"body":{"1015831":{},"1015846":{},"1015847":{},"2949166":{}}}],["_cdecl",{"_index":4390,"title":{},"body":{"2949166":{}}}],["_client_",{"_index":11042,"title":{},"body":{"1703937":{}}}],["_clientinf",{"_index":3816,"title":{},"body":{"3440655":{}}}],["_clientthreadinf",{"_index":3810,"title":{},"body":{"3440655":{}}}],["_col",{"_index":3751,"title":{},"body":{"3440655":{}}}],["_contex",{"_index":4394,"title":{},"body":{"2949166":{}}}],["_create_process_debug_inf",{"_index":4713,"title":{},"body":{"3440657":{}}}],["_create_thread_debug_inf",{"_index":4706,"title":{},"body":{"3440657":{}}}],["_dbgkm_apinump",{"_index":4574,"title":{},"body":{"3440657":{}}}],["_dbgkpsetprocessdebugobject函数的作用就是将调试对象与被调试进程关联，如下图所示，我们可以看见在获取了被调试进程结构体地址之后判断被调试进程是否已经属于被调试状态，即_eprocess的0xbc偏移位成员debugport是否非0，如果为0则表示没有被调试继续向下执行。接着就是最关键的，将调试对象放进被调试进程结构体的debugport成员当中，至此就将两者成功关联起来",{"_index":4542,"title":{},"body":{"3440657":{}}}],["_dbguidebugactiveprocess函数位于ntdll.dll模块中，所以需要切过去进行查看。在该函数内先获取当前线程的_teb，然后获取_teb的0xf24偏移位成员，即调试对象，将其与被调试进程句柄一并作为参数带入到_ntdebugactiveprocess函数。而这个函数仍然是一个系统调用，最终进入0环",{"_index":4538,"title":{},"body":{"3440657":{}}}],["_debug_ev",{"_index":4674,"title":{},"body":{"3440657":{}}}],["_debug_object结构体",{"_index":4543,"title":{},"body":{"3440657":{}}}],["_debug_objeç",{"_index":4546,"title":{},"body":{"3440657":{}}}],["_declspec(dllexp",{"_index":8320,"title":{},"body":{"1015833":{}}}],["_declspec(dllimp",{"_index":8367,"title":{},"body":{"1015833":{}}}],["_desktop",{"_index":3812,"title":{},"body":{"3440655":{}}}],["_desktopinf",{"_index":3814,"title":{},"body":{"3440655":{}}}],["_dispatcher_h",{"_index":10615,"title":{},"body":{"1703937":{},"2424889":{}}}],["_driver_objeç",{"_index":5602,"title":{},"body":{"1015847":{}}}],["_ebp",{"_index":4437,"title":{},"body":{"2949166":{}}}],["_em",{"_index":5860,"title":{},"body":{"1015847":{}}}],["_eproç",{"_index":8699,"title":{},"body":{"1703937":{},"1933378":{}}}],["_ethr",{"_index":2504,"title":{},"body":{"1015846":{}}}],["_except(1",{"_index":4448,"title":{},"body":{"2949166":{},"3440657":{}}}],["_except(exception_execute_handl",{"_index":4424,"title":{},"body":{"2949166":{}}}],["_except(getexceptionç",{"_index":4425,"title":{},"body":{"2949166":{}}}],["_except(getfiltercode(getexceptioninf",{"_index":4426,"title":{},"body":{"2949166":{}}}],["_exception_debug_inf",{"_index":4702,"title":{},"body":{"3440657":{}}}],["_exception_disp",{"_index":4298,"title":{},"body":{"2949166":{}}}],["_exception_poin",{"_index":4317,"title":{},"body":{"2949166":{}}}],["_exception_registr",{"_index":4431,"title":{},"body":{"2949166":{}}}],["_exception_registration_reç",{"_index":4292,"title":{},"body":{"1703937":{},"2949166":{}}}],["_exception_reç",{"_index":4232,"title":{},"body":{"2949166":{},"3440657":{}}}],["_exit_process_debug_inf",{"_index":4726,"title":{},"body":{"3440657":{}}}],["_exit_thread_debug_inf",{"_index":4722,"title":{},"body":{"3440657":{}}}],["_field_size_bytes_part_opt_(maximumlength",{"_index":5563,"title":{},"body":{"1015847":{}}}],["_final",{"_index":4472,"title":{},"body":{"2949166":{}}}],["_gu",{"_index":2684,"title":{},"body":{"1015823":{}}}],["_handle_",{"_index":10990,"title":{},"body":{"1703937":{}}}],["_heap_alloc_dbgu",{"_index":3464,"title":{},"body":{"1015840":{},"2949228":{}}}],["_heap_alloc_p",{"_index":3465,"title":{},"body":{"1015840":{},"2949228":{}}}],["_image_base_reloç",{"_index":6601,"title":{},"body":{"1015828":{}}}],["_image_dos_h",{"_index":6041,"title":{},"body":{"1015828":{}}}],["_image_export_direct",{"_index":6465,"title":{},"body":{"1015828":{}}}],["_image_file_h",{"_index":6097,"title":{},"body":{"1015828":{}}}],["_image_import_by_",{"_index":6585,"title":{},"body":{"1015828":{}}}],["_image_import_descript",{"_index":6540,"title":{},"body":{"1015828":{}}}],["_image_nt_h",{"_index":6086,"title":{},"body":{"1015828":{}}}],["_image_optional_h",{"_index":6123,"title":{},"body":{"1015828":{}}}],["_image_section_h",{"_index":6195,"title":{},"body":{"1015828":{}}}],["_image_thunk_data32",{"_index":6567,"title":{},"body":{"1015828":{}}}],["_in_",{"_index":3077,"title":{},"body":{"1015823":{}}}],["_inout_",{"_index":3073,"title":{},"body":{"1015823":{}}}],["_kapc",{"_index":10826,"title":{},"body":{"2424869":{}}}],["_kapc_",{"_index":10774,"title":{},"body":{"1703937":{},"2424869":{}}}],["_kestackattachproç",{"_index":11293,"title":{},"body":{"1703937":{}}}],["_kgdtentr",{"_index":11072,"title":{},"body":{"1703937":{}}}],["_kiattachproç",{"_index":11294,"title":{},"body":{"1703937":{}}}],["_kidtentr",{"_index":11068,"title":{},"body":{"1703937":{}}}],["_kiswapproç",{"_index":11295,"title":{},"body":{"1703937":{}}}],["_kmu",{"_index":10718,"title":{},"body":{"2424889":{}}}],["_kpcr",{"_index":2507,"title":{},"body":{"1015846":{},"1703937":{}}}],["_kpcr结构体其他几个成员的信息如下",{"_index":11062,"title":{},"body":{"1703937":{}}}],["_kprcb",{"_index":11066,"title":{},"body":{"1703937":{}}}],["_kprcb是_kpcr结构体的拓展结构体，我们先了解几个成员，后续用到了再逐个去了解",{"_index":11082,"title":{},"body":{"1703937":{}}}],["_kproc",{"_index":10778,"title":{},"body":{"1703937":{},"2424869":{}}}],["_ksemaph",{"_index":10700,"title":{},"body":{"2424889":{}}}],["_kservice_table_descript",{"_index":5814,"title":{},"body":{"1015847":{}}}],["_ksystem_service_",{"_index":5806,"title":{},"body":{"1015847":{}}}],["_kt",{"_index":11075,"title":{},"body":{"1703937":{}}}],["_kthre",{"_index":10572,"title":{},"body":{"1703937":{},"2424869":{},"2424889":{}}}],["_ktrap_fr",{"_index":2502,"title":{},"body":{"1015846":{},"1703937":{}}}],["_kuser_shared_",{"_index":2456,"title":{},"body":{"1015846":{}}}],["_kwait_block的大小",{"_index":10613,"title":{},"body":{"2424889":{}}}],["_kwait_bloç",{"_index":10576,"title":{},"body":{"1703937":{},"2424889":{}}}],["_large_integi",{"_index":10966,"title":{},"body":{"1703937":{}}}],["_list_entr",{"_index":10570,"title":{},"body":{"1703937":{},"2424869":{},"2424889":{}}}],["_load_dll_debug_inf",{"_index":4729,"title":{},"body":{"3440657":{}}}],["_mac",{"_index":4032,"title":{},"body":{"3440655":{}}}],["_map_",{"_index":8489,"title":{},"body":{"1015833":{}}}],["_messageentr",{"_index":373,"title":{},"body":{"1015822":{}}}],["_midopoolcop",{"_index":11292,"title":{},"body":{"1703937":{}}}],["_mmcopyvirtualme",{"_index":11291,"title":{},"body":{"1703937":{}}}],["_mmpfn",{"_index":6886,"title":{},"body":{"2949228":{}}}],["_mmpfnentr",{"_index":6943,"title":{},"body":{"2949228":{}}}],["_mmpte",{"_index":6890,"title":{},"body":{"2949228":{}}}],["_mmvad",{"_index":6697,"title":{},"body":{"2949228":{}}}],["_mmvad_flagı",{"_index":6715,"title":{},"body":{"2949228":{}}}],["_msc_ver",{"_index":105,"title":{},"body":{"1015822":{}}}],["_my_excep",{"_index":4383,"title":{},"body":{"2949166":{}}}],["_nh_malloc_dbgu",{"_index":3463,"title":{},"body":{"1015840":{},"2949228":{}}}],["_nh_malloç",{"_index":6765,"title":{},"body":{"2949228":{}}}],["_nt_tib",{"_index":11052,"title":{},"body":{"1703937":{}}}],["_ntusercreatewindow",{"_index":3963,"title":{},"body":{"3440655":{}}}],["_object_h",{"_index":8720,"title":{},"body":{"1933378":{}}}],["_output_debug_string_inf",{"_index":4735,"title":{},"body":{"3440657":{}}}],["_peb",{"_index":11002,"title":{},"body":{"1703937":{}}}],["_read：可执行、读",{"_index":6729,"title":{},"body":{"2949228":{}}}],["_rip_inf",{"_index":4740,"title":{},"body":{"3440657":{}}}],["_startupinf",{"_index":7265,"title":{},"body":{"1015833":{}}}],["_stdcal",{"_index":2641,"title":{},"body":{"1015823":{},"1015833":{},"2949166":{}}}],["_string",{"_index":5558,"title":{},"body":{"1015847":{}}}],["_t",{"_index":2726,"title":{},"body":{"1015823":{}}}],["_t(\"al",{"_index":3162,"title":{},"body":{"1015823":{}}}],["_t(\"checksql",{"_index":3161,"title":{},"body":{"1015823":{}}}],["_t(\"clsid\\\\{30df3430",{"_index":2725,"title":{},"body":{"1015823":{}}}],["_t(\"err",{"_index":3118,"title":{},"body":{"1015823":{}}}],["_t(\"inprocserver32",{"_index":2739,"title":{},"body":{"1015823":{}}}],["_t(\"titl",{"_index":3119,"title":{},"body":{"1015823":{}}}],["_tchar",{"_index":2779,"title":{},"body":{"1015814":{},"1015823":{}}}],["_threadinf",{"_index":3801,"title":{},"body":{"3440655":{}}}],["_tmain(",{"_index":2777,"title":{},"body":{"1015814":{},"1015823":{}}}],["_trap_fr",{"_index":2499,"title":{},"body":{"1015846":{}}}],["_trap_frame结构体在系统调用章节已经学过了，它的结构成员如下",{"_index":11239,"title":{},"body":{"1703937":{}}}],["_tri",{"_index":4423,"title":{},"body":{"2949166":{},"3440657":{}}}],["_try_excep",{"_index":4412,"title":{},"body":{"2949166":{}}}],["_try_f",{"_index":4465,"title":{},"body":{"2949166":{}}}],["_unicode_str",{"_index":5569,"title":{},"body":{"1015847":{}}}],["_unload_dll_debug_inf",{"_index":4733,"title":{},"body":{"3440657":{}}}],["_user_message_qu",{"_index":3806,"title":{},"body":{"3440655":{}}}],["_user_sent_messagı",{"_index":3822,"title":{},"body":{"3440655":{}}}],["_variant_bol",{"_index":2963,"title":{},"body":{"1015823":{}}}],["_veh_registr",{"_index":4334,"title":{},"body":{"2949166":{}}}],["_verntusercreatewindowex",{"_index":3962,"title":{},"body":{"3440655":{}}}],["_w32thre",{"_index":3802,"title":{},"body":{"3440655":{}}}],["_windowcl",{"_index":3756,"title":{},"body":{"3440655":{}}}],["_zwcreatedebugobject函数其实什么也没干，就是通过系统调用号进入0环执行对应的0环函数来做具体的事情，根据函数的命名，我们可以推断，这个函数的作用是用于创建调试对象_debug_object（以下简称为调试对象）。调试对象充当了我们之前提到的媒介，目前调试器与调试对象已经关联起来了",{"_index":4533,"title":{},"body":{"3440657":{}}}],["_璋冪敤绾﹀畾",{"_index":8368,"title":{},"body":{"1015833":{}}}],["a','b','c','d','e','f",{"_index":2157,"title":{},"body":{"1015843":{}}}],["a(1",{"_index":3692,"title":{},"body":{"1015840":{}}}],["a(3,4),b(1,2",{"_index":3607,"title":{},"body":{"1015840":{}}}],["a+1",{"_index":1474,"title":{},"body":{"1015843":{}}}],["a,b,c",{"_index":9237,"title":{},"body":{"1015831":{}}}],["a.directorytablep",{"_index":11281,"title":{},"body":{"1703937":{}}}],["a.h这个头文件一起给别人",{"_index":8291,"title":{},"body":{"1015833":{}}}],["a.max(p",{"_index":3608,"title":{},"body":{"1015840":{}}}],["a<b",{"_index":1764,"title":{},"body":{"1015843":{}}}],["a>",{"_index":1753,"title":{},"body":{"1015843":{}}}],["a>=",{"_index":1755,"title":{},"body":{"1015843":{}}}],["a>b",{"_index":3645,"title":{},"body":{"1015840":{}}}],["a[10",{"_index":1918,"title":{},"body":{"1015843":{}}}],["aa*4",{"_index":9405,"title":{},"body":{"1015831":{}}}],["abandı",{"_index":10725,"title":{},"body":{"2424889":{}}}],["abc",{"_index":2159,"title":{},"body":{"1015843":{}}}],["abcdefghijklmnopqrstuvwxyz",{"_index":896,"title":{},"body":{"1015822":{}}}],["abov",{"_index":3861,"title":{},"body":{"3440655":{}}}],["absol",{"_index":10647,"title":{},"body":{"2424889":{}}}],["ac",{"_index":6258,"title":{},"body":{"1015814":{},"1015828":{},"1015833":{}}}],["accep",{"_index":9798,"title":{},"body":{"1015818":{}}}],["accept(ssoç",{"_index":9806,"title":{},"body":{"1015818":{}}}],["acceptsockaddrinf",{"_index":9803,"title":{},"body":{"1015818":{}}}],["acceptsockaddrl",{"_index":9804,"title":{},"body":{"1015818":{}}}],["access_",{"_index":5840,"title":{},"body":{"1015847":{}}}],["accessexceptionproc(exception_debug_inf",{"_index":4897,"title":{},"body":{"3440657":{}}}],["accessexceptionproc(pexceptioninf",{"_index":4894,"title":{},"body":{"3440657":{}}}],["accoun",{"_index":3894,"title":{},"body":{"3440655":{}}}],["acexclusivelockcount[gdiobjtyp",{"_index":3913,"title":{},"body":{"3440655":{}}}],["act",{"_index":421,"title":{},"body":{"1015822":{}}}],["activeprocessl",{"_index":10972,"title":{},"body":{"1703937":{}}}],["activethr",{"_index":10998,"title":{},"body":{"1703937":{}}}],["activexobject(\"dualdbconnect.ado.1",{"_index":3219,"title":{},"body":{"1015823":{}}}],["ad",{"_index":126,"title":{},"body":{"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015833":{},"1015843":{},"1015846":{},"1015850":{},"1933380":{}}}],["addr",{"_index":1367,"title":{},"body":{"1015817":{},"1015818":{},"1015828":{},"1015831":{},"1015833":{},"1015843":{},"2949228":{}}}],["addref",{"_index":2648,"title":{},"body":{"1015823":{}}}],["addressof",{"_index":6573,"title":{},"body":{"1015828":{}}}],["addressofentrypoin",{"_index":6135,"title":{},"body":{"1015828":{}}}],["addressoffunç",{"_index":6476,"title":{},"body":{"1015828":{}}}],["addressofn",{"_index":6478,"title":{},"body":{"1015828":{}}}],["addressofna",{"_index":6480,"title":{},"body":{"1015828":{}}}],["address成员位中",{"_index":11256,"title":{},"body":{"1703937":{}}}],["addrl",{"_index":9800,"title":{},"body":{"1015818":{}}}],["addstr",{"_index":1152,"title":{},"body":{"1015822":{}}}],["addvectoredexceptionhandl",{"_index":4327,"title":{},"body":{"2949166":{}}}],["add指令",{"_index":5262,"title":{},"body":{"1015825":{}}}],["af",{"_index":10955,"title":{},"body":{"1703937":{}}}],["af_",{"_index":9788,"title":{},"body":{"1015818":{}}}],["afx",{"_index":425,"title":{},"body":{"1015822":{}}}],["afx_",{"_index":259,"title":{},"body":{"1015822":{}}}],["afx_co",{"_index":274,"title":{},"body":{"1015822":{}}}],["afx_datadef",{"_index":275,"title":{},"body":{"1015822":{}}}],["afx_insert_loç",{"_index":130,"title":{},"body":{"1015822":{}}}],["afx_msg",{"_index":995,"title":{},"body":{"1015822":{}}}],["afx_msg_cal",{"_index":390,"title":{},"body":{"1015822":{}}}],["afx_msgmap",{"_index":375,"title":{},"body":{"1015822":{}}}],["afx_msgmap_entr",{"_index":372,"title":{},"body":{"1015822":{}}}],["afx_msgmap_entry结构和afx_msgmap",{"_index":362,"title":{},"body":{"1015822":{}}}],["afx_pmsg",{"_index":427,"title":{},"body":{"1015822":{}}}],["afx_pmsg)(afx_pmsgw)(v",{"_index":389,"title":{},"body":{"1015822":{}}}],["afx_pmsg)0",{"_index":396,"title":{},"body":{"1015822":{}}}],["afx_stdafx_h__a9db83db_a9fd_11d0_bfd1_444553540000__included_",{"_index":104,"title":{},"body":{"1015822":{}}}],["afxap",{"_index":540,"title":{},"body":{"1015822":{}}}],["afxgetafxwndproç",{"_index":504,"title":{},"body":{"1015822":{}}}],["afxgetap",{"_index":551,"title":{},"body":{"1015822":{}}}],["afxgetthr",{"_index":548,"title":{},"body":{"1015822":{}}}],["afxinitthr",{"_index":556,"title":{},"body":{"1015822":{}}}],["afxmessagebox(\"123",{"_index":951,"title":{},"body":{"1015822":{}}}],["afxmessagebox(\"cl",{"_index":825,"title":{},"body":{"1015822":{}}}],["afxmessagebox函数就是一个弹框，弹框内容为test，在这里我们允许程序左键按下就会出现弹框",{"_index":369,"title":{},"body":{"1015822":{}}}],["afxsig_",{"_index":395,"title":{},"body":{"1015822":{}}}],["afxsig_vwp",{"_index":388,"title":{},"body":{"1015822":{}}}],["afxw",{"_index":554,"title":{},"body":{"1015822":{}}}],["afxwin.h",{"_index":116,"title":{},"body":{"1015822":{}}}],["afxwinmain(h",{"_index":541,"title":{},"body":{"1015822":{}}}],["afxwndproç",{"_index":502,"title":{},"body":{"1015822":{}}}],["ag",{"_index":1911,"title":{},"body":{"1015831":{},"1015840":{},"1015843":{}}}],["age[0",{"_index":1927,"title":{},"body":{"1015843":{}}}],["age[1",{"_index":1928,"title":{},"body":{"1015843":{}}}],["age[3",{"_index":1908,"title":{},"body":{"1015843":{}}}],["ah",{"_index":5176,"title":{},"body":{"1015817":{},"1015825":{}}}],["al",{"_index":6280,"title":{},"body":{"1015828":{},"1015850":{}}}],["alength",{"_index":2129,"title":{},"body":{"1015843":{}}}],["aler",{"_index":10606,"title":{},"body":{"2424889":{}}}],["algorith",{"_index":11446,"title":{},"body":{"1015814":{}}}],["alldevsp",{"_index":10121,"title":{},"body":{"1015818":{}}}],["alllen[",{"_index":10324,"title":{},"body":{"1015818":{}}}],["alllen[0",{"_index":10333,"title":{},"body":{"1015818":{}}}],["alllen[1",{"_index":10331,"title":{},"body":{"1015818":{}}}],["alllen[2",{"_index":10323,"title":{},"body":{"1015818":{}}}],["alloç",{"_index":7926,"title":{},"body":{"1015833":{}}}],["al、ah",{"_index":5160,"title":{},"body":{"1015825":{}}}],["and指令",{"_index":5273,"title":{},"body":{"1015825":{}}}],["ansi_str",{"_index":5567,"title":{},"body":{"1015847":{}}}],["ansi_string字符串",{"_index":5576,"title":{},"body":{"1015847":{}}}],["ansi_string字符串的定义如下",{"_index":5557,"title":{},"body":{"1015847":{}}}],["ap",{"_index":8,"title":{},"body":{"1015817":{},"1015822":{},"1015833":{},"1703937":{}}}],["apc",{"_index":10797,"title":{},"body":{"1703937":{},"2424869":{}}}],["apcdis",{"_index":10728,"title":{},"body":{"2424889":{}}}],["apcdisable锛�0",{"_index":10761,"title":{},"body":{"2424889":{}}}],["apcdisable锛�1",{"_index":10765,"title":{},"body":{"2424889":{}}}],["apclistentr",{"_index":10835,"title":{},"body":{"2424869":{}}}],["apclisth",{"_index":10776,"title":{},"body":{"2424869":{}}}],["apcm",{"_index":10853,"title":{},"body":{"2424869":{}}}],["apcqueueabl",{"_index":10805,"title":{},"body":{"2424869":{}}}],["apcqueueable用于表示是否可以向线程的apc队列中挂入apc。当线程正在执行退出的代码时，会将这个值设置为0",{"_index":10820,"title":{},"body":{"2424869":{}}}],["apcqueueloç",{"_index":11026,"title":{},"body":{"1703937":{}}}],["apcstateindex",{"_index":10803,"title":{},"body":{"2424869":{}}}],["apcstateindex用来标识当前线程处于什么状态，正常状态下该值为0，挂靠状态下该值为1。那么我们将该成员结合apcstatepointer，就会发现一个设计细节的地方",{"_index":10818,"title":{},"body":{"2424869":{}}}],["apcstatepoin",{"_index":10799,"title":{},"body":{"1703937":{},"2424869":{}}}],["apcstatepointer[0",{"_index":10814,"title":{},"body":{"2424869":{}}}],["apcstatepointer[1",{"_index":10816,"title":{},"body":{"2424869":{}}}],["apc函数的执行与插入并不是同一个线程，在a线程中向b线程插入一个apc，插入的动作是在a线程中完成的，但什么时候执行则由b线程决定，所以称之为异步过程调用。内核apc函数与用户apc函数的执行时间和执行方式也有区别，我们本章节主要学习内核apc的执行过程",{"_index":10898,"title":{},"body":{"2424869":{}}}],["apc执行",{"_index":10791,"title":{},"body":{"2424869":{}}}],["apc挂入流程大致如下，如果是用户层的话会先通过queueuserapc→ntqueueapcthread，然后到内核层keinitializeapc→keinsertqueueapc→kiinsertqueueapç",{"_index":10858,"title":{},"body":{"2424869":{}}}],["apc挂入过程",{"_index":10822,"title":{},"body":{"2424869":{}}}],["apc机制",{"_index":6624,"title":{"2424869":{}},"body":{"1015827":{},"1015832":{}}}],["apc的本质",{"_index":10767,"title":{},"body":{"2424869":{}}}],["apc结构",{"_index":10789,"title":{},"body":{"2424869":{}}}],["apc鍑芥暟鐨勫弬鏁",{"_index":10847,"title":{},"body":{"2424869":{}}}],["apc鎵�灞炵殑绾跨",{"_index":10834,"title":{},"body":{"2424869":{}}}],["apc鎵�鎸傚叆鐨勯槦鍒楋紝瀛樻斁鐨勬槸鍙屽悜閾捐〃锛�2涓墠鍚庢垚鍛樼殑鍦板潃",{"_index":10836,"title":{},"body":{"2424869":{}}}],["apc鐨勭被鍨嬶細0x12",{"_index":10829,"title":{},"body":{"2424869":{}}}],["apc队列",{"_index":10772,"title":{},"body":{"2424869":{}}}],["aphkstart[nb_h",{"_index":3882,"title":{},"body":{"3440655":{}}}],["apientr",{"_index":7722,"title":{},"body":{"1015833":{}}}],["api中的宽字符",{"_index":7140,"title":{},"body":{"1015833":{}}}],["api中的弹框，其名称为messagebox，其实际上本质就是messageboxw和messagebox",{"_index":7175,"title":{},"body":{"1015833":{}}}],["api主要在c:\\windows\\system32\\目录下的所有dll里",{"_index":2408,"title":{},"body":{"1015846":{}}}],["api使用四种坐标空间",{"_index":654,"title":{},"body":{"1015822":{}}}],["api使用的地址为0x7ffe0300，它就属于_kuser_shared_data结构体的一部分，我们可以在windbg中查看该结构体找到0x300偏移的成员",{"_index":2459,"title":{},"body":{"1015846":{}}}],["api函数即应用程序接口（appl",{"_index":2406,"title":{},"body":{"1015846":{}}}],["api和mfc的cpaintdc类对比，很明显我们可以看出代码量变得非常少",{"_index":608,"title":{},"body":{"1015822":{}}}],["api和w",{"_index":10,"title":{},"body":{"1015822":{}}}],["api在3环的表现形式，所以我们可以自己不调用dll的情况下写一个自己的readprocessmemory函数",{"_index":2428,"title":{},"body":{"1015846":{}}}],["api就是windows操作系统提供给我们的函数（应用程序接口），其主要存放在c:\\windows\\system32（存储的dll是64位）、c:\\windows\\syswow64（存储的dll是32位）下面的所有dll文件（几千个",{"_index":7142,"title":{},"body":{"1015833":{}}}],["api弹框",{"_index":7173,"title":{},"body":{"1015833":{}}}],["api文档中弹窗api的格式如下",{"_index":7151,"title":{},"body":{"1015833":{}}}],["api是以函数名称的形式存在于反汇编里的，这就是符号文件起的作用",{"_index":5501,"title":{},"body":{"1015847":{}}}],["api是通过什么将模块查询出来的？其实api都是从这几个结构体（结构体属于3环应用层）中查询出来的",{"_index":8535,"title":{},"body":{"1015833":{}}}],["api本身的调用中是有两次call指令的，第一次call指令会将栈顶提升0x4，并且存入下一行指令地址，所以在最后一次的call调用时，我们要保证hprocess在esp+4的位置，而不是esp的位置，在最后的汇编指令中我们也要手动恢复到原来的栈顶位置",{"_index":2430,"title":{},"body":{"1015846":{}}}],["api的代码我们使用了双冒号这是因为使用::双冒号指的是从全局调用，如果在win32这种工程中加与不加影响倒是不大，但在mfc的工程中，默认mfc中的窗口类cwnd其成员函数有很多都是跟win32",{"_index":610,"title":{},"body":{"1015822":{}}}],["api的学习中，知道可以通过向窗口发送消息实现交互，但是我们始终没有从本质上了解什么是消息机制，从而也就无法回答如下这些问题",{"_index":3746,"title":{},"body":{"3440655":{}}}],["api的真正实现是在0环的，3环只是一个封装调用",{"_index":2425,"title":{},"body":{"1015846":{}}}],["api的话直接在代码中包含windows.h这个头文件即可",{"_index":7149,"title":{},"body":{"1015833":{}}}],["api进0环有两种方式，分别为普通调用和快速调用。普通调用通过api进0环后会从tss的esp0得到0环的堆栈；快速调用则是先从msr得到一个临时的0环栈来提供代码执行的环境，但是这段代码的执行实际上就是从tss的esp0得到0环的堆栈",{"_index":11241,"title":{},"body":{"1703937":{}}}],["api进入0环之前是需要将在3环时的寄存器值保存，这样在0环执行切换到新的寄存器执行完成后回到3环时才能恢复原先的寄存器还原现场，那么3环寄存器的值是保存在哪里的，就是本章我们需要学习的保存现场",{"_index":2497,"title":{},"body":{"1015846":{}}}],["api通过sysenter指令进入０环，cs、esp、eip由msr寄存器提供，ss由cs的值加0x8计算得出，进入0环之后执行的内核函数是nt!kifastcallentr",{"_index":2492,"title":{},"body":{"1015846":{}}}],["api通过中断门进入0环有一个固定的中断号即0x2e，cs、eip由中断门描述符提供，esp、ss由tss提供，进入0环之后执行的内核函数是nt!kisystemserv",{"_index":2491,"title":{},"body":{"1015846":{}}}],["api重名，比如：showwindow、getmessage、getwindowtext等等，所以这时候如果你在cwnd或其派生类中调用了showwindow之后，默认调用的就是cwnd的成员函数showwindow，如果你想要调用全局的，那么就必须使用双冒号前缀",{"_index":611,"title":{},"body":{"1015822":{}}}],["app(argç",{"_index":4119,"title":{},"body":{"1015820":{}}}],["app.exeç",{"_index":4127,"title":{},"body":{"1015820":{}}}],["application去创建项目",{"_index":82,"title":{},"body":{"1015822":{}}}],["application，下一步选择一个简单的win32的程序",{"_index":7703,"title":{},"body":{"1015833":{}}}],["appliç",{"_index":1341,"title":{},"body":{"1015833":{},"1015843":{}}}],["appwiz",{"_index":14,"title":{},"body":{"1015822":{}}}],["app提供访问网络底层的能力",{"_index":10102,"title":{},"body":{"1015818":{}}}],["ap：六字节长度的直接地址",{"_index":11979,"title":{},"body":{"1015817":{}}}],["ar",{"_index":2128,"title":{},"body":{"1015840":{},"1015843":{}}}],["aray",{"_index":7443,"title":{},"body":{"1015818":{},"1015833":{}}}],["area的首字母缩写），例如非客户区的鼠标左键相关的宏和函数",{"_index":957,"title":{},"body":{"1015822":{}}}],["argc",{"_index":2778,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015823":{},"1015833":{},"1015847":{},"1933378":{},"2424889":{},"2949166":{}}}],["argmenttable锛堝嚱鏁板弬鏁拌〃鍦板潃锛夛細80504ba8",{"_index":2575,"title":{},"body":{"1015846":{}}}],["argumentlength",{"_index":4003,"title":{},"body":{"3440655":{}}}],["argument銆�杈撳叆绫诲瀷锛岀嚎绋嬪弬鏁",{"_index":8397,"title":{},"body":{"1015833":{}}}],["argv",{"_index":2780,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015823":{},"1015833":{},"1015847":{},"1933378":{},"2424889":{},"2949166":{}}}],["argv[0",{"_index":7239,"title":{},"body":{"1015833":{}}}],["argv[1",{"_index":7240,"title":{},"body":{"1015833":{}}}],["argv[]就是命令行参数，要使用的话就是argv[0]则表示程序本身，其余往后则是参数，argv[1]、argv[2]...等",{"_index":7242,"title":{},"body":{"1015833":{}}}],["argı",{"_index":4002,"title":{},"body":{"1015833":{},"3440655":{}}}],["arr1[0",{"_index":2211,"title":{},"body":{"1015843":{}}}],["arr1[1",{"_index":2212,"title":{},"body":{"1015843":{}}}],["arr1[2",{"_index":2210,"title":{},"body":{"1015843":{}}}],["arr1[2*2",{"_index":1950,"title":{},"body":{"1015843":{}}}],["arr1[3",{"_index":1956,"title":{},"body":{"1015843":{}}}],["arr2[1][1",{"_index":1957,"title":{},"body":{"1015843":{}}}],["arr2[2",{"_index":2214,"title":{},"body":{"1015843":{}}}],["arr2[2][2",{"_index":1951,"title":{},"body":{"1015843":{}}}],["arr[",{"_index":2132,"title":{},"body":{"1015840":{},"1015843":{}}}],["arr[0",{"_index":2219,"title":{},"body":{"1015843":{}}}],["arr[0*12+4",{"_index":1971,"title":{},"body":{"1015843":{}}}],["arr[0].agı",{"_index":2057,"title":{},"body":{"1015843":{}}}],["arr[0].l",{"_index":2058,"title":{},"body":{"1015843":{}}}],["arr[0][4",{"_index":1968,"title":{},"body":{"1015843":{}}}],["arr[10",{"_index":1933,"title":{},"body":{"1015843":{}}}],["arr[1][2",{"_index":1969,"title":{},"body":{"1015843":{}}}],["arr[2",{"_index":2208,"title":{},"body":{"1015843":{}}}],["arr[2*2];等价于",{"_index":1962,"title":{},"body":{"1015843":{}}}],["arr[2][2",{"_index":1963,"title":{},"body":{"1015843":{}}}],["arr[3",{"_index":1955,"title":{},"body":{"1015843":{}}}],["arr[3][3",{"_index":2274,"title":{},"body":{"1015843":{}}}],["arr[4",{"_index":1948,"title":{},"body":{"1015843":{}}}],["arr[5",{"_index":2051,"title":{},"body":{"1015843":{}}}],["arr[5][12",{"_index":1965,"title":{},"body":{"1015843":{}}}],["arr[8",{"_index":1940,"title":{},"body":{"1015843":{}}}],["arr[9",{"_index":1941,"title":{},"body":{"1015843":{}}}],["arr[],",{"_index":2359,"title":{},"body":{"1015843":{}}}],["arr[k+1",{"_index":3629,"title":{},"body":{"1015840":{}}}],["array[100]就是一个容器，而int*类型的指针就可以作为迭代器，可以为这个容器编写一个排序算法",{"_index":11323,"title":{},"body":{"1015814":{}}}],["arr就是我们要学的数组指针，也就是",{"_index":2220,"title":{},"body":{"1015843":{}}}],["ascii瀛楃涓诧紙鑺傚悕锛夛紝鍙嚜瀹氫箟锛屽彧鎴彇8涓瓧鑺傦紝鍙互8涓瓧鑺傞兘鏄悕瀛",{"_index":6197,"title":{},"body":{"1015828":{}}}],["ascii码：ç",{"_index":7122,"title":{},"body":{"1015833":{}}}],["ascii编码和unicode编码在内存中的存储方式不一样，所以我们使用相关函数的时候也要注意，如下图所示，ascii编码使用左边的，而unicode则是右边的",{"_index":7130,"title":{},"body":{"1015833":{}}}],["ascii编码的拓展：gb2312或gb2312",{"_index":7065,"title":{},"body":{"1015833":{}}}],["asoç",{"_index":9805,"title":{},"body":{"1015818":{}}}],["associatedirp.systembuf",{"_index":5788,"title":{},"body":{"1015847":{}}}],["atl",{"_index":3085,"title":{},"body":{"1015823":{}}}],["atl_no_v",{"_index":3144,"title":{},"body":{"1015823":{}}}],["atlbase.h",{"_index":3259,"title":{},"body":{"1015823":{}}}],["atlconv.h",{"_index":2923,"title":{},"body":{"1015823":{}}}],["atl是活动(动态)模板库(activex",{"_index":3087,"title":{},"body":{"1015823":{}}}],["atrribu",{"_index":8915,"title":{},"body":{"1015831":{}}}],["attaç",{"_index":8478,"title":{},"body":{"1015833":{}}}],["attribu",{"_index":8116,"title":{},"body":{"1015831":{},"1015833":{}}}],["attrvalu",{"_index":5857,"title":{},"body":{"1015847":{}}}],["auth",{"_index":10167,"title":{},"body":{"1015818":{}}}],["aweallocation:1",{"_index":6926,"title":{},"body":{"2949228":{}}}],["awereferencecoun",{"_index":6919,"title":{},"body":{"2949228":{}}}],["ax",{"_index":5159,"title":{},"body":{"1015825":{},"1015831":{}}}],["ax,0x0008",{"_index":9086,"title":{},"body":{"1015831":{}}}],["ax,0x000b",{"_index":9087,"title":{},"body":{"1015831":{}}}],["ax,0x00b",{"_index":9090,"title":{},"body":{"1015831":{}}}],["ax,c",{"_index":8936,"title":{},"body":{"1015831":{}}}],["ax,f",{"_index":8945,"title":{},"body":{"1015831":{}}}],["ax鎸囧悜鐨勬鎻忚堪绗︾殑dpl",{"_index":9092,"title":{},"body":{"1015831":{}}}],["a位",{"_index":9447,"title":{},"body":{"1015831":{}}}],["a位表示当前是否被访问过，为1表示访问过，为0则表示没有访问过",{"_index":9448,"title":{},"body":{"1015831":{}}}],["a杩涚▼鐨�0x12345678鍐呭瓨",{"_index":11282,"title":{},"body":{"1703937":{}}}],["a类",{"_index":9646,"title":{},"body":{"1015818":{}}}],["b",{"_index":915,"title":{},"body":{"1015814":{},"1015822":{},"1015825":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"2949228":{},"3440655":{}}}],["b(1",{"_index":3516,"title":{},"body":{"1015840":{}}}],["b(3",{"_index":3693,"title":{},"body":{"1015840":{}}}],["b.cp",{"_index":8437,"title":{},"body":{"1015833":{}}}],["b.directorytablep",{"_index":11283,"title":{},"body":{"1703937":{}}}],["b0",{"_index":4947,"title":{},"body":{"3440657":{}}}],["b2",{"_index":6506,"title":{},"body":{"1015828":{}}}],["b83fd1c1",{"_index":10517,"title":{},"body":{"1015818":{}}}],["b:a",{"_index":3404,"title":{},"body":{"1015840":{}}}],["b:priv",{"_index":3434,"title":{},"body":{"1015840":{}}}],["b:publiç",{"_index":3437,"title":{},"body":{"1015840":{}}}],["b;则无法编译",{"_index":3649,"title":{},"body":{"1015840":{}}}],["b>a",{"_index":1765,"title":{},"body":{"1015843":{}}}],["b[10",{"_index":1920,"title":{},"body":{"1015843":{}}}],["ba6",{"_index":2670,"title":{},"body":{"1015823":{}}}],["backaddr",{"_index":5924,"title":{},"body":{"1015847":{}}}],["backlogu",{"_index":9794,"title":{},"body":{"1015818":{}}}],["back，返回队列尾部的引用，但不移除",{"_index":11560,"title":{},"body":{"1015814":{}}}],["badpagel",{"_index":6989,"title":{},"body":{"2949228":{}}}],["bas",{"_index":16,"title":{},"body":{"1015817":{},"1015822":{},"1015828":{},"1015831":{},"1015840":{}}}],["base(",{"_index":3510,"title":{},"body":{"1015840":{}}}],["base<",{"_index":3651,"title":{},"body":{"1015840":{}}}],["base_class_",{"_index":268,"title":{},"body":{"1015822":{}}}],["baseaddr",{"_index":8572,"title":{},"body":{"1015833":{}}}],["basecl",{"_index":380,"title":{},"body":{"1015822":{}}}],["baseclass::messagemap",{"_index":383,"title":{},"body":{"1015822":{}}}],["baseof",{"_index":6139,"title":{},"body":{"1015828":{}}}],["baseofç",{"_index":6137,"title":{},"body":{"1015828":{}}}],["basepri",{"_index":10960,"title":{},"body":{"1703937":{}}}],["baseruntimecl",{"_index":300,"title":{},"body":{"1015822":{}}}],["base描述eax，而12345678由modr/m字段决定，所以sib字段的描述方式为",{"_index":12061,"title":{},"body":{"1015817":{}}}],["basic都基于com以及activex控件",{"_index":2584,"title":{},"body":{"1015823":{}}}],["baudrate=11520",{"_index":8976,"title":{},"body":{"1015831":{}}}],["bec",{"_index":6244,"title":{},"body":{"1015828":{}}}],["bef",{"_index":136,"title":{},"body":{"1015822":{}}}],["beg",{"_index":8485,"title":{},"body":{"1015833":{}}}],["begin_com_map(cdbconneç",{"_index":3153,"title":{},"body":{"1015823":{}}}],["begin_message_map",{"_index":359,"title":{},"body":{"1015822":{}}}],["begin_message_map(thecl",{"_index":379,"title":{},"body":{"1015822":{}}}],["bfailifex",{"_index":8178,"title":{},"body":{"1015833":{}}}],["bh",{"_index":11883,"title":{},"body":{"1015817":{}}}],["bi",{"_index":3895,"title":{},"body":{"1015818":{},"1015828":{},"2949228":{},"3440655":{}}}],["bigi",{"_index":8775,"title":{},"body":{"1015850":{}}}],["bignu",{"_index":10462,"title":{},"body":{"1015818":{}}}],["bignum_",{"_index":10476,"title":{},"body":{"1015818":{}}}],["bignum结构体如下",{"_index":10475,"title":{},"body":{"1015818":{}}}],["bin",{"_index":6616,"title":{"1015827":{}},"body":{"1015818":{},"1015850":{}}}],["bind(csoç",{"_index":9871,"title":{},"body":{"1015818":{}}}],["bind(ssoç",{"_index":9790,"title":{},"body":{"1015818":{}}}],["binherithandl",{"_index":6806,"title":{},"body":{"1015833":{},"2949228":{}}}],["binherithandles，这个参数决定了是否允许创建的子进程继承句柄",{"_index":7327,"title":{},"body":{"1015833":{}}}],["binherithandle：指定句柄是否可以被子进程继承。如果为true，则允许继承；如果为false，则不允许继承",{"_index":6817,"title":{},"body":{"2949228":{}}}],["binitial",{"_index":7571,"title":{},"body":{"1015833":{},"2424889":{}}}],["binitialow",{"_index":7533,"title":{},"body":{"1015833":{},"2424889":{}}}],["bl",{"_index":11876,"title":{},"body":{"1015817":{}}}],["bli",{"_index":6908,"title":{},"body":{"1015833":{},"2949228":{}}}],["blo",{"_index":8481,"title":{},"body":{"1015833":{}}}],["bloc",{"_index":7225,"title":{},"body":{"1015833":{}}}],["block，线程环境块)，它存放线程的相关信息，每一个线程都有自己的teb信息，fs:[0]即是当前线程的tep",{"_index":8537,"title":{},"body":{"1015833":{}}}],["block，线程环境块），线程在3环的一个结构体，里面包含了线程的相关信息。我们在3环可以通过fs:[0]来找到tep",{"_index":11019,"title":{},"body":{"1703937":{}}}],["block，进程环境块)，它存放进程的相关信息，每个进程都有自己的peb信息，fs:[0x30]即当前进程的pep",{"_index":8539,"title":{},"body":{"1015833":{}}}],["block，进程环境块）：进程在3环的一个结构体，里面包含了进程的模块列表、是否处于调试状态等信息",{"_index":11004,"title":{},"body":{"1703937":{}}}],["blu",{"_index":3754,"title":{},"body":{"3440655":{}}}],["bl、bh",{"_index":5165,"title":{},"body":{"1015825":{}}}],["bmanualr",{"_index":7569,"title":{},"body":{"1015833":{},"2424889":{}}}],["bmanualreset参数决定了创建的事件对象类型，该值为true则表示当前为通知类型的对象，事件对象的_dispatcher_header.type值为0；该值为false则表示当前为事件同步类型的对象，事件对象的_dispatcher_header.type值为1。如下图所示，我们也可以成功得到这个结论",{"_index":10676,"title":{},"body":{"2424889":{}}}],["bn_bits2",{"_index":10478,"title":{},"body":{"1015818":{}}}],["bn_expa",{"_index":10483,"title":{},"body":{"1015818":{}}}],["bn_free(bignu",{"_index":10489,"title":{},"body":{"1015818":{}}}],["bn_free(pbn_",{"_index":10536,"title":{},"body":{"1015818":{}}}],["bn_hex2bn(&pbn_",{"_index":10528,"title":{},"body":{"1015818":{}}}],["bn_hex2bn(bignu",{"_index":10491,"title":{},"body":{"1015818":{}}}],["bn_new",{"_index":10526,"title":{},"body":{"1015818":{}}}],["bn_new(v",{"_index":10487,"title":{},"body":{"1015818":{}}}],["bn_ulongu",{"_index":10477,"title":{},"body":{"1015818":{}}}],["bn_xxxx是cbutton产生的消息，en_xxxx是cedit产生的消息，等",{"_index":452,"title":{},"body":{"1015822":{}}}],["bo",{"_index":10481,"title":{},"body":{"1015818":{}}}],["bol",{"_index":53,"title":{},"body":{"1015814":{},"1015820":{},"1015822":{},"1015823":{},"1015833":{},"1015840":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["bom中文为字节顺序标记，其就是用来插入到文本文件起始位置开头的，用于识别unicode文件的编码类型",{"_index":7118,"title":{},"body":{"1015833":{}}}],["bom（by",{"_index":7116,"title":{},"body":{"1015833":{}}}],["bool类型仅占用一个字节",{"_index":3610,"title":{},"body":{"1015840":{}}}],["bott",{"_index":11573,"title":{},"body":{"1015814":{}}}],["box",{"_index":7154,"title":{},"body":{"1015833":{}}}],["bp",{"_index":5167,"title":{},"body":{"1015825":{}}}],["bpf_u_int32",{"_index":10190,"title":{},"body":{"1015818":{}}}],["bre",{"_index":1797,"title":{},"body":{"1015818":{},"1015833":{},"1015843":{},"1015847":{},"1703937":{},"3440655":{},"3440657":{}}}],["breakpoint，这样就不会在进程一打开时就断下来",{"_index":4750,"title":{},"body":{"3440657":{}}}],["break非常重要，当执行到一个分支后，如果没有break就会继续向下执行，遇到break才会跳出switch语句",{"_index":1803,"title":{},"body":{"1015843":{}}}],["bret",{"_index":3980,"title":{},"body":{"1015833":{},"3440655":{},"3440657":{}}}],["brush",{"_index":782,"title":{},"body":{"1015822":{}}}],["brush(rgb(128",{"_index":882,"title":{},"body":{"1015822":{}}}],["brush.createstockobject(ltgray_brush",{"_index":784,"title":{},"body":{"1015822":{}}}],["brusha(rgb(245",{"_index":884,"title":{},"body":{"1015822":{}}}],["bstr",{"_index":2916,"title":{},"body":{"1015823":{}}}],["bstra",{"_index":2925,"title":{},"body":{"1015823":{}}}],["bstrb",{"_index":2928,"title":{},"body":{"1015823":{}}}],["bstrval",{"_index":2967,"title":{},"body":{"1015823":{}}}],["buf",{"_index":5565,"title":{},"body":{"1015818":{},"1015833":{},"1015847":{}}}],["buf[10",{"_index":9815,"title":{},"body":{"1015818":{}}}],["buf_siz",{"_index":7968,"title":{},"body":{"1015833":{}}}],["buff[6",{"_index":9214,"title":{},"body":{"1015831":{}}}],["buffer[0x10",{"_index":2348,"title":{},"body":{"1015843":{}}}],["buffer[0x20",{"_index":2065,"title":{},"body":{"1015843":{}}}],["buffer[20",{"_index":1683,"title":{},"body":{"1015843":{}}}],["buffer[6",{"_index":9014,"title":{},"body":{"1015831":{}}}],["buffer，转译查找缓冲区），它和寄存器一样快，但同样它的大小也不会太大",{"_index":9552,"title":{},"body":{"1015831":{}}}],["bufsiz",{"_index":6838,"title":{},"body":{"1015833":{},"2949228":{}}}],["buil",{"_index":7617,"title":{},"body":{"1015833":{}}}],["but",{"_index":1078,"title":{},"body":{"1015822":{}}}],["button、edit、static控件的属性和方法",{"_index":1071,"title":{},"body":{"1015822":{}}}],["button控件",{"_index":1094,"title":{},"body":{"1015822":{}}}],["bval",{"_index":2959,"title":{},"body":{"1015823":{}}}],["bwaital",{"_index":7447,"title":{},"body":{"1015833":{}}}],["bx",{"_index":5164,"title":{},"body":{"1015825":{}}}],["byref",{"_index":2989,"title":{},"body":{"1015823":{}}}],["byt",{"_index":1712,"title":{},"body":{"1015817":{},"1015818":{},"1015823":{},"1015825":{},"1015828":{},"1015833":{},"1015843":{}}}],["byte*)_t(\"db",{"_index":2733,"title":{},"body":{"1015823":{}}}],["byte*)dwfunaddr",{"_index":8669,"title":{},"body":{"1015833":{}}}],["byte*)szn",{"_index":2749,"title":{},"body":{"1015823":{}}}],["b明显是不行的，因为编译器根本不知道你在比较什么",{"_index":3612,"title":{},"body":{"1015840":{}}}],["b杩涚▼鐨�0x12345678鍐呭瓨",{"_index":11284,"title":{},"body":{"1703937":{}}}],["b类",{"_index":9649,"title":{},"body":{"1015818":{}}}],["b：字节",{"_index":12006,"title":{},"body":{"1015817":{}}}],["c",{"_index":6064,"title":{},"body":{"1015828":{},"1015831":{},"1015833":{}}}],["c++也提供了这种情况下的语法",{"_index":3545,"title":{},"body":{"1015840":{}}}],["c++在调用com接口指针时是很危险的，因为使用过程需要每一个使用都严格并且正确地调用addref与release方法。一旦出现问题，就会造成对象不能被正常释放或者对象被重复删除",{"_index":3242,"title":{},"body":{"1015823":{}}}],["c++客户重用c++对象",{"_index":2586,"title":{},"body":{"1015823":{}}}],["c++客户重用c++对象，这个方法很简单就是将c++类的接口文件(.h)和实现文件(.cpp)提供给客户即可",{"_index":2587,"title":{},"body":{"1015823":{}}}],["c++对象使用抽象基类",{"_index":2625,"title":{},"body":{"1015823":{}}}],["c++是一门面向对象的编程语言，所有的面向对象语言都有一个特征：封装、继承、多态；之前已经了解过封装、继承了，这里来了解一下多态",{"_index":3553,"title":{},"body":{"1015840":{}}}],["c++是对c的拓展，c原有的语法c++都支持，并在此基础上拓展了一些语法：封装、继承、多态、模板等等。c++拓展新的语法是为了让使用更加方便、高效，这样就需要编译器多做了很多事情，接下来我们就需要一一学习这些概念",{"_index":3292,"title":{},"body":{"1015840":{}}}],["c++标准中最新的也是极具革命性的一部分；该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法，为广大c++程序员们提供了一个可扩展的应用框架",{"_index":11314,"title":{},"body":{"1015814":{}}}],["c++设计引用类型是因为指针类型很难驾驭，一旦用不好就回出问题，所以取长补短设计了引用类型",{"_index":3506,"title":{},"body":{"1015840":{}}}],["c++语言",{"_index":3290,"title":{"1015840":{}},"body":{"1015827":{}}}],["c.contextflagı",{"_index":7474,"title":{},"body":{"1015833":{}}}],["c.directorytablep",{"_index":11285,"title":{},"body":{"1703937":{}}}],["c.eax",{"_index":7477,"title":{},"body":{"1015833":{}}}],["c.ecx",{"_index":7478,"title":{},"body":{"1015833":{}}}],["c0",{"_index":9459,"title":{},"body":{"1015831":{}}}],["c0.a8.08.0",{"_index":9673,"title":{},"body":{"1015818":{}}}],["c1",{"_index":7485,"title":{},"body":{"1015833":{}}}],["c1.contextflagı",{"_index":7486,"title":{},"body":{"1015833":{}}}],["c1.eax",{"_index":7487,"title":{},"body":{"1015833":{}}}],["c:\\\\doç",{"_index":8471,"title":{},"body":{"1015833":{}}}],["c:\\\\notepad.ex",{"_index":4629,"title":{},"body":{"3440657":{}}}],["c:\\\\users\\\\chen\\\\documents\\\\vis",{"_index":3110,"title":{},"body":{"1015823":{}}}],["c:a,b",{"_index":3411,"title":{},"body":{"1015840":{}}}],["c:b",{"_index":3406,"title":{},"body":{"1015840":{}}}],["c[10",{"_index":1922,"title":{},"body":{"1015843":{}}}],["c[2",{"_index":918,"title":{},"body":{"1015822":{}}}],["cachabl",{"_index":6310,"title":{},"body":{"1015828":{}}}],["cacheattribu",{"_index":6954,"title":{},"body":{"2949228":{}}}],["cah",{"_index":9628,"title":{},"body":{"1015831":{}}}],["cal",{"_index":430,"title":{},"body":{"1015817":{},"1015822":{},"1015825":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015846":{}}}],["calculator工具",{"_index":10454,"title":{},"body":{"1015818":{}}}],["callback(_exception_poin",{"_index":4506,"title":{},"body":{"2949166":{}}}],["callbaç",{"_index":497,"title":{},"body":{"1015818":{},"1015822":{},"1015833":{},"3440655":{}}}],["call指令",{"_index":5356,"title":{},"body":{"1015825":{}}}],["call指令执行会影响2个寄存器，一个是esp的值（压入地址到栈，栈顶提升），一个是eip的值（要跳转到某个地址继续执行",{"_index":9162,"title":{},"body":{"1015831":{}}}],["call指令的下一条指令地址入栈后，跳转到当前指令地址",{"_index":11976,"title":{},"body":{"1015817":{}}}],["call的操作，无论目标是一致代码段还是非一致代码段，cpl都不会发生改变。如果要提升cpl的权限，只能通过调用门或类似方法",{"_index":9124,"title":{},"body":{"1015831":{}}}],["call鎸囦护鐨勪笅涓�琛屽湴鍧",{"_index":9164,"title":{},"body":{"1015831":{}}}],["call）是一种用于异步执行用户模式代码的机制。在这种情况下，内核可以将用户模式函数作为一个apc请求提交给目标线程，并在目标线程处于用户模式执行时，将该函数插入到目标线程的执行流中",{"_index":4054,"title":{},"body":{"3440655":{}}}],["call，即异步过程调用",{"_index":10771,"title":{},"body":{"2424869":{}}}],["capl",{"_index":10191,"title":{},"body":{"1015818":{}}}],["capture)是windows平台下一个免费的、公共的库。开发winpcap这个项目的目的在于为win32",{"_index":10101,"title":{},"body":{"1015818":{}}}],["cas",{"_index":1794,"title":{},"body":{"1015818":{},"1015833":{},"1015843":{},"1015847":{},"3440655":{},"3440657":{}}}],["case后的值必须是常量",{"_index":1802,"title":{},"body":{"1015843":{}}}],["case后的常量值不能一样",{"_index":1801,"title":{},"body":{"1015843":{}}}],["cb",{"_index":7266,"title":{},"body":{"1015833":{}}}],["cbreserved2",{"_index":7279,"title":{},"body":{"1015833":{}}}],["cbrush",{"_index":777,"title":{},"body":{"1015822":{}}}],["cbut",{"_index":1079,"title":{},"body":{"1015822":{}}}],["ccbombobox",{"_index":1088,"title":{},"body":{"1015822":{}}}],["cclientdc：用于在窗口客户区画图，除了onpaint外的函数内",{"_index":604,"title":{},"body":{"1015822":{}}}],["cclientdç",{"_index":593,"title":{},"body":{"1015822":{}}}],["ccomcoclass<cdbconneç",{"_index":3148,"title":{},"body":{"1015823":{}}}],["ccomobjectrootex<ccomsinglethreadmodel",{"_index":3146,"title":{},"body":{"1015823":{}}}],["ccomptr<idbconneç",{"_index":3248,"title":{},"body":{"1015823":{}}}],["ccomptr<idualdbconneç",{"_index":3263,"title":{},"body":{"1015823":{}}}],["ccomptr<iunknow",{"_index":3261,"title":{},"body":{"1015823":{}}}],["ccomptrbase类封装了ccomptr和ccomqiptr中公共的大多数函数，从而实现代码的复用",{"_index":3245,"title":{},"body":{"1015823":{}}}],["ccomptr、ccomqiptr",{"_index":3241,"title":{},"body":{"1015823":{}}}],["ccomptr、ccomqiptr是atl为了解决com引用计数问题提供的一个类模版，因为它的使用和行为上类似与一个接口指针，所以有一个通俗易懂的名字：智能指针",{"_index":3243,"title":{},"body":{"1015823":{}}}],["ccomqiptr<idualdbconneç",{"_index":3271,"title":{},"body":{"1015823":{}}}],["ccomv",{"_index":3232,"title":{},"body":{"1015823":{}}}],["ccomvariant的数据结构定义可以自行去查看，由于代码过长这里不过多展示，从定义中我们可以看出，其提供了几乎所有数据类型的构造，这就意味着我们初始化ccomvaiant对象时可以简单的采用",{"_index":3233,"title":{},"body":{"1015823":{}}}],["ccreatecontex",{"_index":72,"title":{},"body":{"1015822":{}}}],["cdb",{"_index":2609,"title":{},"body":{"1015823":{}}}],["cdb(vo",{"_index":2617,"title":{},"body":{"1015823":{}}}],["cdb::addref",{"_index":2665,"title":{},"body":{"1015823":{}}}],["cdb::cdb(vo",{"_index":2660,"title":{},"body":{"1015823":{}}}],["cdb::queryinterface(ref",{"_index":2661,"title":{},"body":{"1015823":{}}}],["cdb::rel",{"_index":2619,"title":{},"body":{"1015823":{}}}],["cdb_clientdlg::onbnclickedbutton1",{"_index":3171,"title":{},"body":{"1015823":{}}}],["cdbconnect::checksql(bstr",{"_index":3160,"title":{},"body":{"1015823":{}}}],["cdbconnect::get_state(longu",{"_index":3130,"title":{},"body":{"1015823":{}}}],["cdbconnect::put_state(longu",{"_index":3134,"title":{},"body":{"1015823":{}}}],["cdbconneç",{"_index":3145,"title":{},"body":{"1015823":{}}}],["cdbsrvfact",{"_index":2596,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory(v",{"_index":2655,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory::addref",{"_index":2704,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory::cdbsrvfact",{"_index":2701,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory::createdb(cdp",{"_index":2608,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory::createinstance(iunknow",{"_index":2695,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory::lockserver(bol",{"_index":2700,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory::queryinterface(ref",{"_index":2702,"title":{},"body":{"1015823":{}}}],["cdbsrvfactory::rel",{"_index":2611,"title":{},"body":{"1015823":{}}}],["cdc类",{"_index":601,"title":{},"body":{"1015822":{}}}],["cdialog1",{"_index":1057,"title":{},"body":{"1015822":{}}}],["cdialog1::oncancel",{"_index":1065,"title":{},"body":{"1015822":{}}}],["cdialog::oncancel",{"_index":1069,"title":{},"body":{"1015822":{}}}],["cdlg",{"_index":1058,"title":{},"body":{"1015822":{}}}],["cdlg.create(idd_dialog1",{"_index":1059,"title":{},"body":{"1015822":{}}}],["cdlg.showwindow(sw_show",{"_index":1060,"title":{},"body":{"1015822":{}}}],["ced",{"_index":1085,"title":{},"body":{"1015822":{}}}],["centercoun",{"_index":3873,"title":{},"body":{"3440655":{}}}],["cexclusiveloç",{"_index":3911,"title":{},"body":{"3440655":{}}}],["cf",{"_index":1310,"title":{},"body":{"1015822":{},"1015828":{}}}],["cf.clos",{"_index":1314,"title":{},"body":{"1015822":{}}}],["cf.open(\"new.tx",{"_index":1311,"title":{},"body":{"1015822":{}}}],["cf.write(hmap",{"_index":1313,"title":{},"body":{"1015822":{}}}],["cfil",{"_index":1309,"title":{},"body":{"1015822":{}}}],["cfile::",{"_index":1266,"title":{},"body":{"1015822":{}}}],["cfile::modecr",{"_index":1262,"title":{},"body":{"1015822":{}}}],["cfile::modecreate|cfile::modewr",{"_index":1312,"title":{},"body":{"1015822":{}}}],["cfile::modenoinh",{"_index":1272,"title":{},"body":{"1015822":{}}}],["cfile::modenotrunç",{"_index":1264,"title":{},"body":{"1015822":{}}}],["cfile::modereadwr",{"_index":1270,"title":{},"body":{"1015822":{}}}],["cfile::modewr",{"_index":1268,"title":{},"body":{"1015822":{}}}],["cfile::sharecomp",{"_index":1282,"title":{},"body":{"1015822":{}}}],["cfile::sharedeny",{"_index":1274,"title":{},"body":{"1015822":{}}}],["cfile::sharedenyr",{"_index":1276,"title":{},"body":{"1015822":{}}}],["cfile::sharedenywr",{"_index":1278,"title":{},"body":{"1015822":{}}}],["cfile::shareexclus",{"_index":1280,"title":{},"body":{"1015822":{}}}],["cfile::typep",{"_index":1286,"title":{},"body":{"1015822":{}}}],["cfile::typetex",{"_index":1284,"title":{},"body":{"1015822":{}}}],["cfile类打开文件",{"_index":1249,"title":{},"body":{"1015822":{}}}],["cfile还有很多属性，就不一一去举例了，可以参考如下表格去使用",{"_index":1260,"title":{},"body":{"1015822":{}}}],["cfon",{"_index":858,"title":{},"body":{"1015822":{}}}],["cframewn",{"_index":43,"title":{},"body":{"1015822":{}}}],["cframewnd::messagemap",{"_index":399,"title":{},"body":{"1015822":{}}}],["cframewnd::onnchittest(poin",{"_index":969,"title":{},"body":{"1015822":{}}}],["cframewnd类提供了windows单文档界面（sdi）重叠或弹出框架窗口的功能，以及用于管理窗口的成员；要为应用程序创建有用的框架窗口，请从cframewnd派生类（子类）；向派生类（子类）添加成员变量以存储特定于您的应用程序的数据；在派生类（子类）中实现消息处理程序成员函数和消息映射，以指定在将消息定向到窗口时会发生什么",{"_index":44,"title":{},"body":{"1015822":{}}}],["cframwnd的层次结构",{"_index":171,"title":{},"body":{"1015822":{}}}],["cframwnd的成员函数create以及参数",{"_index":31,"title":{},"body":{"1015822":{}}}],["cgetc",{"_index":8483,"title":{},"body":{"1015833":{}}}],["ch",{"_index":11879,"title":{},"body":{"1015817":{}}}],["chang",{"_index":99,"title":{},"body":{"1015822":{},"1015850":{}}}],["changefunccmd(originç",{"_index":5965,"title":{},"body":{"1015847":{}}}],["changefunccmd(pushretç",{"_index":5951,"title":{},"body":{"1015847":{}}}],["changefunccmd(uç",{"_index":5938,"title":{},"body":{"1015847":{}}}],["changepageattr(0x0",{"_index":5880,"title":{},"body":{"1015847":{}}}],["changepageattr(0x2",{"_index":5878,"title":{},"body":{"1015847":{}}}],["changepageattr(ulongu",{"_index":5856,"title":{},"body":{"1015847":{}}}],["changetex",{"_index":4206,"title":{},"body":{"1015820":{}}}],["char",{"_index":296,"title":{},"body":{"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{},"1933378":{},"2424869":{},"2424889":{},"2949166":{},"3440655":{},"3440657":{}}}],["char(*px)[3",{"_index":2224,"title":{},"body":{"1015843":{}}}],["char(*px)[3][3][3",{"_index":2227,"title":{},"body":{"1015843":{}}}],["char(*px2)[3",{"_index":2236,"title":{},"body":{"1015843":{}}}],["char(*px4)[3][3][3",{"_index":2238,"title":{},"body":{"1015843":{}}}],["char(1",{"_index":2254,"title":{},"body":{"1015843":{}}}],["char*)\"c:\\\\doç",{"_index":8527,"title":{},"body":{"1015833":{}}}],["char*)malloc(nump",{"_index":10300,"title":{},"body":{"1015818":{}}}],["char*)p4",{"_index":2106,"title":{},"body":{"1015843":{}}}],["char*)virtualalloc(",{"_index":11129,"title":{},"body":{"1703937":{}}}],["char**)2",{"_index":2083,"title":{},"body":{"1015843":{}}}],["char/int/数组",{"_index":1984,"title":{},"body":{"1015843":{}}}],["char[m_nlength",{"_index":3682,"title":{},"body":{"1015840":{}}}],["charact",{"_index":6109,"title":{},"body":{"1015828":{}}}],["charaç",{"_index":7826,"title":{},"body":{"1015833":{},"1015850":{}}}],["chart即可获得mfc的层次结构图",{"_index":39,"title":{},"body":{"1015822":{}}}],["char鍗犵敤涓�涓瓧鑺傦紝闇�瑕�10涓瓧鑺傦紝浣嗘槸鍥犱负4瀛楄妭瀵归綈锛屾墍浠ュ垎閰嶇殑灏辨槸12涓瓧鑺",{"_index":1919,"title":{},"body":{"1015843":{}}}],["chec",{"_index":2711,"title":{},"body":{"1015823":{}}}],["checksql(l",{"_index":3173,"title":{},"body":{"1015823":{}}}],["checksu",{"_index":6060,"title":{},"body":{"1015828":{}}}],["chellocomboboxdlg::onbutton1",{"_index":1292,"title":{},"body":{"1015822":{}}}],["chellodialogdlg::onbutton1",{"_index":1056,"title":{},"body":{"1015822":{}}}],["chellodialogdlg::onstatic1",{"_index":1110,"title":{},"body":{"1015822":{}}}],["chi",{"_index":7133,"title":{},"body":{"1015833":{}}}],["chil",{"_index":7767,"title":{},"body":{"1015833":{}}}],["childprocess",{"_index":7245,"title":{},"body":{"1015833":{}}}],["childprocesscommandl",{"_index":7247,"title":{},"body":{"1015833":{}}}],["chun",{"_index":10479,"title":{},"body":{"1015818":{}}}],["ci",{"_index":11041,"title":{},"body":{"1703937":{}}}],["cint3",{"_index":4814,"title":{},"body":{"3440657":{}}}],["cl",{"_index":11873,"title":{},"body":{"1015817":{}}}],["clas",{"_index":118,"title":{},"body":{"1015814":{},"1015822":{},"1015823":{},"1015833":{},"1015840":{}}}],["class##class_",{"_index":260,"title":{},"body":{"1015822":{}}}],["class_e_classnotavail",{"_index":2715,"title":{},"body":{"1015823":{}}}],["class_e_noaggregi",{"_index":2696,"title":{},"body":{"1015823":{}}}],["class_n",{"_index":277,"title":{},"body":{"1015822":{}}}],["class_name::class##class_",{"_index":276,"title":{},"body":{"1015822":{}}}],["class_name::createobjeç",{"_index":341,"title":{},"body":{"1015822":{}}}],["class_name::getruntimecl",{"_index":280,"title":{},"body":{"1015822":{}}}],["classcmainwindow",{"_index":337,"title":{},"body":{"1015822":{}}}],["classcmywinap",{"_index":263,"title":{},"body":{"1015822":{}}}],["classes，微软基础类）是通过",{"_index":6,"title":{},"body":{"1015822":{}}}],["classn",{"_index":295,"title":{},"body":{"1015822":{},"1015833":{}}}],["classname);，这个函数就表示通过参数去动态创建对象",{"_index":352,"title":{},"body":{"1015822":{}}}],["cleanup",{"_index":1067,"title":{},"body":{"1015822":{}}}],["cli",{"_index":5888,"title":{},"body":{"1015847":{}}}],["clien",{"_index":956,"title":{},"body":{"1015818":{},"1015822":{},"1015847":{}}}],["client_flagı",{"_index":8883,"title":{},"body":{"1015850":{}}}],["clientrect.bot",{"_index":907,"title":{},"body":{"1015822":{}}}],["clientrect.r",{"_index":913,"title":{},"body":{"1015822":{}}}],["clientreç",{"_index":888,"title":{},"body":{"1015822":{}}}],["clientsoç",{"_index":10056,"title":{},"body":{"1015818":{}}}],["clientthreadinf",{"_index":3883,"title":{},"body":{"3440655":{}}}],["clistbox",{"_index":1082,"title":{},"body":{"1015822":{}}}],["clistbox::setcolumnwidth",{"_index":1139,"title":{},"body":{"1015822":{}}}],["clistbox常用风格",{"_index":1130,"title":{},"body":{"1015822":{}}}],["clistctrl常用风格",{"_index":1173,"title":{},"body":{"1015822":{}}}],["clos",{"_index":2615,"title":{},"body":{"1015818":{},"1015823":{}}}],["close\")==0",{"_index":9985,"title":{},"body":{"1015818":{}}}],["closedispatchfunc(pdevice_objeç",{"_index":5728,"title":{},"body":{"1015847":{}}}],["closedispatchfunç",{"_index":5725,"title":{},"body":{"1015847":{}}}],["closehandl",{"_index":5696,"title":{},"body":{"1015833":{},"1015847":{}}}],["closehandle(e_ev",{"_index":7593,"title":{},"body":{"1015833":{}}}],["closehandle(ev",{"_index":7639,"title":{},"body":{"1015833":{}}}],["closehandle(eventp",{"_index":7640,"title":{},"body":{"1015833":{}}}],["closehandle(g_hdev",{"_index":5765,"title":{},"body":{"1015847":{}}}],["closehandle(g_hmapfil",{"_index":7980,"title":{},"body":{"1015833":{}}}],["closehandle(h",{"_index":8465,"title":{},"body":{"1015833":{}}}],["closehandle(hfil",{"_index":8139,"title":{},"body":{"1015833":{}}}],["closehandle(hmapfil",{"_index":8253,"title":{},"body":{"1015833":{}}}],["closehandle(hmutex",{"_index":7622,"title":{},"body":{"1015833":{}}}],["closehandle(hprocesssnapsh",{"_index":8522,"title":{},"body":{"1015833":{}}}],["closehandle(hproç",{"_index":8415,"title":{},"body":{"1015833":{}}}],["closehandle(hthr",{"_index":7496,"title":{},"body":{"1015818":{},"1015833":{}}}],["closehandle(hthread[0",{"_index":7590,"title":{},"body":{"1015833":{}}}],["closehandle(hthread[1",{"_index":7591,"title":{},"body":{"1015833":{}}}],["closehandle(pi.hproç",{"_index":7256,"title":{},"body":{"1015833":{}}}],["closehandle(pi.hthr",{"_index":7257,"title":{},"body":{"1015833":{}}}],["closesocket(asoç",{"_index":9829,"title":{},"body":{"1015818":{}}}],["closesocket(csoç",{"_index":9886,"title":{},"body":{"1015818":{}}}],["closesocket(socketl",{"_index":10060,"title":{},"body":{"1015818":{}}}],["closesocket(ssoç",{"_index":9830,"title":{},"body":{"1015818":{}}}],["closesocket(tsoç",{"_index":10095,"title":{},"body":{"1015818":{}}}],["closesoç",{"_index":9828,"title":{},"body":{"1015818":{}}}],["clsctx_serv",{"_index":2791,"title":{},"body":{"1015823":{}}}],["clsid'",{"_index":2712,"title":{},"body":{"1015823":{}}}],["clsid_dbconneç",{"_index":3149,"title":{},"body":{"1015823":{}}}],["clsid_dbsampl",{"_index":2693,"title":{},"body":{"1015823":{}}}],["cl、ch",{"_index":5161,"title":{},"body":{"1015825":{}}}],["cm",{"_index":7538,"title":{},"body":{"1015833":{}}}],["cmainwindow",{"_index":124,"title":{},"body":{"1015822":{}}}],["cmainwindow::_messageentr",{"_index":401,"title":{},"body":{"1015822":{}}}],["cmainwindow::_messageentries[0",{"_index":400,"title":{},"body":{"1015822":{}}}],["cmainwindow::classcmainwindow",{"_index":344,"title":{},"body":{"1015822":{}}}],["cmainwindow::cmainwindow",{"_index":152,"title":{},"body":{"1015822":{}}}],["cmainwindow::createobjeç",{"_index":343,"title":{},"body":{"1015822":{}}}],["cmainwindow::getmessagemap",{"_index":397,"title":{},"body":{"1015822":{}}}],["cmainwindow::getruntimecl",{"_index":346,"title":{},"body":{"1015822":{}}}],["cmainwindow::messagemap",{"_index":398,"title":{},"body":{"1015822":{}}}],["cmainwindow::onlbuttondown(uin",{"_index":818,"title":{},"body":{"1015822":{}}}],["cmainwindow::onlbuttonup(uin",{"_index":979,"title":{},"body":{"1015822":{}}}],["cmainwindow::onnchittest(cpoin",{"_index":966,"title":{},"body":{"1015822":{}}}],["cmainwindow::onpain",{"_index":668,"title":{},"body":{"1015822":{}}}],["cmainwindow:publ",{"_index":123,"title":{},"body":{"1015822":{}}}],["cmdaddr",{"_index":5945,"title":{},"body":{"1015847":{}}}],["cmdbyt",{"_index":5941,"title":{},"body":{"1015847":{}}}],["cmdbyte[6",{"_index":5939,"title":{},"body":{"1015847":{}}}],["cmessagı",{"_index":3774,"title":{},"body":{"3440655":{}}}],["cmp",{"_index":1508,"title":{},"body":{"1015843":{}}}],["cmywinap",{"_index":140,"title":{},"body":{"1015822":{}}}],["cmywinapp::",{"_index":142,"title":{},"body":{"1015822":{}}}],["cmywinapp::classcmywinap",{"_index":282,"title":{},"body":{"1015822":{}}}],["cmywinapp::getruntimecl",{"_index":284,"title":{},"body":{"1015822":{}}}],["cmywinapp:publ",{"_index":119,"title":{},"body":{"1015822":{}}}],["cn/window",{"_index":5445,"title":{},"body":{"1015831":{},"1015847":{}}}],["cnt",{"_index":10175,"title":{},"body":{"1015818":{}}}],["co",{"_index":2787,"title":{},"body":{"1015823":{},"1015850":{}}}],["co_intcallwindowproç",{"_index":4065,"title":{},"body":{"3440655":{}}}],["cobject(",{"_index":3710,"title":{},"body":{"1015840":{}}}],["cobject(obj",{"_index":3671,"title":{},"body":{"1015840":{}}}],["cobjeç",{"_index":308,"title":{},"body":{"1015822":{},"1015840":{}}}],["cocreateguid(&gu",{"_index":2817,"title":{},"body":{"1015823":{}}}],["cod",{"_index":408,"title":{},"body":{"1015817":{},"1015818":{},"1015822":{},"1015828":{},"1015833":{},"1015847":{},"3440655":{}}}],["cofreealllibraries函数怎么知道满足了上面说的可以卸载的条件？需要组件导出一个dllcanunloadnow函数，如果dllcanunloadnow函数返回s_ok表示对象可以被卸载",{"_index":2905,"title":{},"body":{"1015823":{}}}],["cogetclassobject(clsid_dbsampl",{"_index":2790,"title":{},"body":{"1015823":{}}}],["coinitialize(n",{"_index":2783,"title":{},"body":{"1015823":{}}}],["col",{"_index":3755,"title":{},"body":{"1015833":{},"1015850":{},"3440655":{}}}],["color.blu",{"_index":3769,"title":{},"body":{"3440655":{}}}],["color.gr",{"_index":3768,"title":{},"body":{"3440655":{}}}],["color.r",{"_index":3767,"title":{},"body":{"3440655":{}}}],["colorref",{"_index":7675,"title":{},"body":{"1015833":{}}}],["com",{"_index":6248,"title":{},"body":{"1015828":{},"1015833":{},"2949228":{}}}],["com:pipe,port=\\\\.\\pipe\\com_1,baud=115200,pip",{"_index":8979,"title":{},"body":{"1015831":{}}}],["com_interface_entry(idbconnectç",{"_index":3155,"title":{},"body":{"1015823":{}}}],["com_interface_entry(idbconneç",{"_index":3154,"title":{},"body":{"1015823":{}}}],["combobox",{"_index":1087,"title":{},"body":{"1015822":{}}}],["combobox控件",{"_index":1124,"title":{},"body":{"1015822":{}}}],["combobox控件也就是组合框，跟其他控件没什么区别，唯一的区别在于它的设置中多了一个data的标签栏，如下图是使用方法",{"_index":1125,"title":{},"body":{"1015822":{}}}],["comm",{"_index":6239,"title":{},"body":{"1015828":{}}}],["comma",{"_index":7212,"title":{},"body":{"1015833":{}}}],["comment(lip",{"_index":8297,"title":{},"body":{"1015818":{},"1015833":{},"1015850":{}}}],["commitcharge：最大可提供物理页的数目",{"_index":6722,"title":{},"body":{"2949228":{}}}],["commitchargı",{"_index":10982,"title":{},"body":{"1703937":{}}}],["comp",{"_index":6117,"title":{},"body":{"1015828":{}}}],["comv",{"_index":3236,"title":{},"body":{"1015823":{}}}],["comvar(\"abç",{"_index":3234,"title":{},"body":{"1015823":{}}}],["comvar(123",{"_index":3239,"title":{},"body":{"1015823":{}}}],["com与注册表",{"_index":2875,"title":{},"body":{"1015823":{}}}],["com与组件分开理解，com是开发软件组件的一种方法，组件实际上是一些小的二进制可执行程序，它们可以给应用程序，操作系统以及其他组件提供服务",{"_index":2580,"title":{},"body":{"1015823":{}}}],["com中的cofreealllibraries函数可以检测当前进程中的所有组件程序，当发现某个组件满足上面两个条件时，就调用freelibrary函数把该组件从内存中释放，有两个问题",{"_index":2903,"title":{},"body":{"1015823":{}}}],["com基础知识",{"_index":2803,"title":{},"body":{"1015823":{}}}],["com客户",{"_index":2906,"title":{},"body":{"1015823":{}}}],["com客户从只知道clsid到获取到接口指针必须经过两步",{"_index":2907,"title":{},"body":{"1015823":{}}}],["com客户和com组件是相互独立的，com组件的重要性质之一是位置透明性；当客户程序调用com对象时不需要考虑com组件所处的位置，这就是位置无关性；com位置无关性的实现机制并不深奥，它主要依赖于注册表，这也就是为什么一定要在使用之前对com组件进行注册的原因；com库在接到客户程序的请求后，会根据给定的guid到注册表中检索com对象的注册条目，并以此来定位com对象",{"_index":2876,"title":{},"body":{"1015823":{}}}],["com对象",{"_index":2804,"title":{},"body":{"1015823":{}}}],["com对象其实就类似于c++中的对象，也就是说某个类的实例，包含了一组数据和操作",{"_index":2805,"title":{},"body":{"1015823":{}}}],["com对象的创建是通过类工厂来完成的，类工厂是com对象的生产基地，对应每一个com类，都有一个类工厂专门用于该com类的对象创建操作",{"_index":2883,"title":{},"body":{"1015823":{}}}],["com常见数据类型",{"_index":2912,"title":{},"body":{"1015823":{}}}],["com常见的数据类型如下所示，其中字体加粗部分是我们暂时不了解的",{"_index":2913,"title":{},"body":{"1015823":{}}}],["com库",{"_index":2831,"title":{},"body":{"1015823":{}}}],["com应用模型",{"_index":2827,"title":{},"body":{"1015823":{}}}],["com接口",{"_index":2819,"title":{},"body":{"1015823":{}}}],["com接口通常是一组函数的逻辑集合，其命名一般以\"i\"（大写的i）为前缀，并且继承iunknown接口；com对象可以提供多个com接口，每个接口提供不同的服务，因此com接口与com对象一样，都是用guid来标识的，客户通过guid来获取接口指针，再通过接口指针获取对应的服务；标识com接口的guid称为：",{"_index":2820,"title":{},"body":{"1015823":{}}}],["com数据类型",{"_index":2911,"title":{},"body":{"1015823":{}}}],["com最广泛的应用是activex控件，时至今日，能在很多网站上看到它，比如淘宝安全登录控件，网银控件，甚至大名鼎鼎的flash",{"_index":2582,"title":{},"body":{"1015823":{}}}],["com最早的设计意图是，跨语言实现程序组件的重用，比如说vc++开发一个控件，在vb中调用，或者在vb中开发一个组件库，给vc++调用",{"_index":2581,"title":{},"body":{"1015823":{}}}],["com组件",{"_index":2578,"title":{"1015823":{}},"body":{"1015823":{},"1015826":{},"1015827":{}}}],["com组件中，guid的结构定义如下",{"_index":2809,"title":{},"body":{"1015823":{}}}],["com组件对应二进制文件的存放路径",{"_index":2877,"title":{},"body":{"1015823":{}}}],["com组件概述",{"_index":2579,"title":{},"body":{"1015823":{}}}],["com组件路径命令可以进行反注册，实际进行反注册的操作是在组件的dllunregisterserver函数里完成的",{"_index":2898,"title":{},"body":{"1015823":{}}}],["com组件路径命令实际是regsvr32.exe调用组件的dllregisterserver函数，实际注册的操作是在组件的dllregisterserver函数里完成的，同样执行regsvr32",{"_index":2897,"title":{},"body":{"1015823":{}}}],["com要求所有的方法都会返回一个hresult类型的错误号，其就是一个类型定义",{"_index":2842,"title":{},"body":{"1015823":{}}}],["con",{"_index":62,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015828":{},"1015833":{},"1015850":{},"1703937":{},"3440657":{}}}],["connect(csoç",{"_index":9876,"title":{},"body":{"1015818":{}}}],["connect(pclosep",{"_index":4171,"title":{},"body":{"1015820":{}}}],["connect(pfullscrenp",{"_index":4175,"title":{},"body":{"1015820":{}}}],["connect鏂规硶",{"_index":4174,"title":{},"body":{"1015820":{}}}],["conneç",{"_index":9888,"title":{},"body":{"1015818":{}}}],["consol",{"_index":1340,"title":{},"body":{"1015833":{},"1015843":{}}}],["const_",{"_index":11361,"title":{},"body":{"1015814":{}}}],["const关键字的作用",{"_index":205,"title":{},"body":{"1015822":{}}}],["const关键词的作用",{"_index":215,"title":{},"body":{"1015822":{}}}],["const双关键词，我们还是按照static关键词的方法去使用，但是在初始化的时候需要加上const关键词",{"_index":220,"title":{},"body":{"1015822":{}}}],["consu",{"_index":7620,"title":{},"body":{"1015833":{}}}],["cont",{"_index":1869,"title":{},"body":{"1015818":{},"1015828":{},"1015843":{},"2949228":{}}}],["containing_record(cur",{"_index":8568,"title":{},"body":{"1015833":{}}}],["contex",{"_index":3863,"title":{},"body":{"1015833":{},"3440655":{},"3440657":{}}}],["context.contextflagı",{"_index":4840,"title":{},"body":{"3440657":{}}}],["context.dr0",{"_index":4937,"title":{},"body":{"3440657":{}}}],["context.dr6",{"_index":4946,"title":{},"body":{"3440657":{}}}],["context.dr7",{"_index":4939,"title":{},"body":{"3440657":{}}}],["context.eflagı",{"_index":4957,"title":{},"body":{"3440657":{}}}],["context.eip",{"_index":4845,"title":{},"body":{"3440657":{}}}],["context_debug_regi",{"_index":4842,"title":{},"body":{"3440657":{}}}],["context_f",{"_index":4841,"title":{},"body":{"3440657":{}}}],["context_integi",{"_index":7475,"title":{},"body":{"1015833":{}}}],["contextreç",{"_index":4319,"title":{},"body":{"2949166":{}}}],["contexts）：设备上下文对象（内存",{"_index":7656,"title":{},"body":{"1015833":{}}}],["continuedebugevent(debugevent.dwproç",{"_index":4668,"title":{},"body":{"3440657":{}}}],["control",{"_index":407,"title":{},"body":{"1015818":{},"1015822":{},"2949228":{}}}],["controlarea：控制区域",{"_index":6706,"title":{},"body":{"2949228":{}}}],["controller，高级可编程中断控制器",{"_index":9583,"title":{},"body":{"1015831":{}}}],["copy(v.begi",{"_index":11661,"title":{},"body":{"1015814":{}}}],["copyfil",{"_index":8173,"title":{},"body":{"1015833":{}}}],["copyfunc(vector<",{"_index":11658,"title":{},"body":{"1015814":{}}}],["copymemory(&dwtyp",{"_index":8497,"title":{},"body":{"1015833":{}}}],["copymemory(lpbuf",{"_index":8529,"title":{},"body":{"1015833":{}}}],["copy锛屽皢涓�涓鍣ㄤ腑鐨勬寚瀹氬尯闂寸殑鍊兼嫹璐濆埌鍙﹀涓�涓鍣紝鎷疯礉鐨勪綅缃氨璇寸涓変釜鍙傛暟锛屼粠绗笁涓弬鏁板紑濮嬫嫹璐濊繘鍘伙紝娉ㄦ剰鎷疯礉涓嶆槸娣诲姞鎻掑叆锛岃�屾槸鏇挎崲锛岃繖閲屼細鏇挎崲鍘熸湁鐨勫唴瀹",{"_index":11657,"title":{},"body":{"1015814":{}}}],["copy，元素复制",{"_index":11650,"title":{},"body":{"1015814":{}}}],["cor",{"_index":7686,"title":{},"body":{"1015833":{}}}],["cou",{"_index":2785,"title":{},"body":{"1015814":{},"1015823":{}}}],["coun",{"_index":3841,"title":{},"body":{"1015833":{},"3440655":{}}}],["count(%5",{"_index":11639,"title":{},"body":{"1015814":{}}}],["count(5",{"_index":11635,"title":{},"body":{"1015814":{}}}],["count(v.begi",{"_index":11634,"title":{},"body":{"1015814":{}}}],["count_if(v.begi",{"_index":11638,"title":{},"body":{"1015814":{}}}],["count_if锛屾牴鎹潯浠剁粺璁″厓绱犱釜鏁",{"_index":11636,"title":{},"body":{"1015814":{}}}],["count_if，条件统计",{"_index":11617,"title":{},"body":{"1015814":{}}}],["countfunc(vector<",{"_index":11633,"title":{},"body":{"1015814":{}}}],["countiffunc(vector<",{"_index":11637,"title":{},"body":{"1015814":{}}}],["countnump",{"_index":7491,"title":{},"body":{"1015833":{}}}],["count锛堢郴缁熸湇鍔¤〃璋冪敤娆℃暟锛夛細000000",{"_index":2573,"title":{},"body":{"1015846":{}}}],["count锛岀粺璁″埗瀹氬唴瀹圭殑鍏冪礌涓暟",{"_index":11632,"title":{},"body":{"1015814":{}}}],["count，统计等于某值的容器元素的个数",{"_index":11616,"title":{},"body":{"1015814":{}}}],["cpaintdc：用于在窗口客户区画图，仅限于onpaint函数内",{"_index":603,"title":{},"body":{"1015822":{}}}],["cpaintdç",{"_index":592,"title":{},"body":{"1015822":{}}}],["cpaintsr",{"_index":3840,"title":{},"body":{"3440655":{}}}],["cpen",{"_index":831,"title":{},"body":{"1015822":{}}}],["cpl",{"_index":9095,"title":{},"body":{"1015831":{}}}],["cpoin",{"_index":820,"title":{},"body":{"1015822":{}}}],["cpoint))&onlbuttondow",{"_index":392,"title":{},"body":{"1015822":{}}}],["cpp文件",{"_index":8334,"title":{},"body":{"1015833":{}}}],["cpu取值的流程如下图所示，根据tr寄存器（t",{"_index":9294,"title":{},"body":{"1015831":{}}}],["cpu在执行完一条指令之后进行自动设置，反映了算数、逻辑运算等指令执行完毕之后，运算结果的特征",{"_index":5404,"title":{},"body":{"1015825":{}}}],["cpu时间片到期",{"_index":11224,"title":{},"body":{"1703937":{}}}],["cpu检测调试寄存器（dr0",{"_index":4930,"title":{},"body":{"3440657":{}}}],["cpu的异常记录",{"_index":4230,"title":{},"body":{"2949166":{}}}],["cpu缓存",{"_index":9621,"title":{},"body":{"1015831":{}}}],["cpu缓存可以做的很大，我们听着它似乎与tlb有着某些相似之处，但实际上是由差异的：tlb缓存的是线性地址和物理地址的对应关系，cpu缓存的是物理地址和实际内容的对应关系",{"_index":9623,"title":{},"body":{"1015831":{}}}],["cpu访问或写入访问或写入被修改属性后的物理页，触发页异常",{"_index":4866,"title":{},"body":{"3440657":{}}}],["cr0",{"_index":5883,"title":{},"body":{"1015847":{}}}],["cr0寄存器",{"_index":9598,"title":{},"body":{"1015831":{}}}],["cr0寄存器，主要包括一些控制操作系统模式以及处理器状态的控制标志位",{"_index":9599,"title":{},"body":{"1015831":{}}}],["cr2寄存器",{"_index":9613,"title":{},"body":{"1015831":{}}}],["cr3",{"_index":7039,"title":{},"body":{"1703937":{},"2949228":{}}}],["cr3改了就会直接刷新tlb（也就是进程切换，因为在进程切换后tlb原先存储的线性地址和物理地址的对应关系就没有意义了）；由于操作系统中的高2g映射基本不变，所以为了不重复的建立高2g的tlb对应关系，在pde和pte中有个标志位g位，它表示其物理页是否为全局页，当该值为1时则不会刷新tlb（只有当pde的ps位为1时，即其物理页为大页，g位才有效）；当tlb表存满了之后，将根据统计（lru）信息（统计信息内存储了每个地址的读写情况）将不常用的地址废弃，最近常用的保留下来",{"_index":9556,"title":{},"body":{"1015831":{}}}],["cr3的修改",{"_index":11278,"title":{},"body":{"1703937":{}}}],["cr3锛屼笌椤电殑鐭ヨ瘑鏈夊叧锛屽繀椤昏璧嬪",{"_index":9321,"title":{},"body":{"1015831":{}}}],["cr4寄存器",{"_index":9615,"title":{},"body":{"1015831":{}}}],["crcol",{"_index":7676,"title":{},"body":{"1015833":{}}}],["cre",{"_index":50,"title":{},"body":{"1015818":{},"1015822":{},"1015823":{},"1015833":{},"1015850":{}}}],["creat",{"_index":4099,"title":{},"body":{"1015820":{},"1015833":{},"1703937":{}}}],["create(idd_dialog1",{"_index":1062,"title":{},"body":{"1015822":{}}}],["create(lpctstr",{"_index":54,"title":{},"body":{"1015822":{}}}],["create(n",{"_index":153,"title":{},"body":{"1015822":{}}}],["create_alway",{"_index":8123,"title":{},"body":{"1015833":{}}}],["create_process_debug_ev",{"_index":4654,"title":{},"body":{"3440657":{}}}],["create_process_debug_inf",{"_index":4685,"title":{},"body":{"3440657":{}}}],["create_thread_debug_ev",{"_index":4652,"title":{},"body":{"3440657":{}}}],["create_thread_debug_inf",{"_index":4683,"title":{},"body":{"3440657":{}}}],["createdb(cdp",{"_index":2599,"title":{},"body":{"1015823":{}}}],["createdirect",{"_index":8067,"title":{},"body":{"1015833":{}}}],["createdirectory(text(\"c:\\\\",{"_index":8073,"title":{},"body":{"1015833":{}}}],["createdispatchfunc(pdevice_objeç",{"_index":5726,"title":{},"body":{"1015847":{}}}],["createdispatchfunç",{"_index":5723,"title":{},"body":{"1015847":{}}}],["createevent(",{"_index":7584,"title":{},"body":{"1015833":{},"2424889":{}}}],["createfil",{"_index":5687,"title":{},"body":{"1015833":{},"1015847":{}}}],["createfile(\"\\\\\\\\.\\\\mytestdr",{"_index":5735,"title":{},"body":{"1015847":{}}}],["createfile(\"c:\\\\abc.tx",{"_index":6849,"title":{},"body":{"2949228":{}}}],["createfile(lpcfil",{"_index":8235,"title":{},"body":{"1015833":{}}}],["createfile(text(\"c:\\\\a.tx",{"_index":8121,"title":{},"body":{"1015833":{}}}],["createfile_p",{"_index":8620,"title":{},"body":{"1015833":{}}}],["createfile_param*)lp",{"_index":8627,"title":{},"body":{"1015833":{}}}],["createfilemap",{"_index":6788,"title":{},"body":{"1015833":{},"2949228":{}}}],["createfilemapping(hfil",{"_index":6856,"title":{},"body":{"1015833":{},"2949228":{}}}],["createfilemapping(invalid_handle_valu",{"_index":6837,"title":{},"body":{"1015833":{},"2949228":{}}}],["createfilemapping的作用是创建一个共享的物理页/文件",{"_index":6789,"title":{},"body":{"2949228":{}}}],["createfilethreadproc(lpv",{"_index":8625,"title":{},"body":{"1015833":{}}}],["createfile鍑芥暟鐨勫湴鍧",{"_index":8618,"title":{},"body":{"1015833":{}}}],["createinstance(iunknow",{"_index":2651,"title":{},"body":{"1015823":{}}}],["createinstance(n",{"_index":2798,"title":{},"body":{"1015823":{}}}],["createinstance函数是iclassfactory接口中最重要的函数，它用于创建相应的com对象，因为每个类厂只针对特定的com对象，所以createinstance成员函数知道该创建什么样的com对象",{"_index":2892,"title":{},"body":{"1015823":{}}}],["createmutex",{"_index":7531,"title":{},"body":{"1015833":{},"2424889":{}}}],["createmutex(",{"_index":7539,"title":{},"body":{"1015833":{}}}],["createmutex函数的返回值",{"_index":7553,"title":{},"body":{"1015833":{}}}],["createmutex到0环的会执行keinitianlizemutant函数，该函数的作用就是初始化互斥体，主要有以下几个内容",{"_index":10733,"title":{},"body":{"2424889":{}}}],["createobjeç",{"_index":322,"title":{},"body":{"1015822":{}}}],["createp",{"_index":7672,"title":{},"body":{"1015833":{}}}],["createpen(ps_sol",{"_index":7677,"title":{},"body":{"1015833":{}}}],["createprocess()函数创建进程，其有一个参数是startupinfo结构体，这个参数是进程启动的一些信息，我们一开始会将其zeromemory()函数处理，填充0，那么在运行的时候是否还都是0呢？或者说在载入调试工具的时候所有成员是否都是0呢",{"_index":7263,"title":{},"body":{"1015833":{}}}],["createprocessinf",{"_index":4686,"title":{},"body":{"3440657":{}}}],["createprocesssuç",{"_index":4635,"title":{},"body":{"3440657":{}}}],["createprocess函数的所有参数都需要了解一下，现在我们来看一下第六个参数dw",{"_index":7359,"title":{},"body":{"1015833":{}}}],["createproç",{"_index":4636,"title":{},"body":{"1015833":{},"3440657":{}}}],["createremotethr",{"_index":8392,"title":{},"body":{"1015833":{}}}],["createremotethread(hproç",{"_index":8467,"title":{},"body":{"1015833":{}}}],["createsemaph",{"_index":10693,"title":{},"body":{"2424889":{}}}],["createstruç",{"_index":489,"title":{},"body":{"1015822":{}}}],["createthr",{"_index":4684,"title":{},"body":{"1015833":{},"3440657":{}}}],["createthread(",{"_index":4487,"title":{},"body":{"1015818":{},"1015833":{},"2424889":{},"2949166":{}}}],["createthread函数是在当前进程中创建线程，而createremotethread函数是允许在其他进程中创建线程，所以远程线程就可以理解为是非本进程中的线程",{"_index":8400,"title":{},"body":{"1015833":{}}}],["createtoolhelp32snapshot(th32cs_snapproç",{"_index":8514,"title":{},"body":{"1015833":{}}}],["createv",{"_index":7567,"title":{},"body":{"1015833":{},"2424889":{}}}],["createwindow",{"_index":7751,"title":{},"body":{"1015833":{}}}],["createwindow(class",{"_index":7771,"title":{},"body":{"1015833":{}}}],["createwindowa/w",{"_index":3960,"title":{},"body":{"3440655":{}}}],["createwindowex",{"_index":3961,"title":{},"body":{"3440655":{}}}],["create鎴愬憳鍑芥暟鍒涘缓涓�涓鏋剁獥鍙",{"_index":165,"title":{},"body":{"1015822":{}}}],["create鎴愬憳鍑芥暟鍒涘缓涓�涓鏋剁獥鍙ｏ紝闇�瑕佹敞鎰忕殑鏄繖涓嚱鏁板墠涓や釜鎴愬憳闇�瑕佹垜浠畾涔夛紝浣嗘槸鍚庨潰鐨勫嚑涓垚鍛樺彉閲忛兘鏈夊叾榛樿鍙傛暟锛屾垜浠彲浠ラ�夋嫨涓嶅啓锛岀涓�涓弬鏁颁负null瀹冧細鍒涘缓涓�涓粯璁ょ獥鍙ｇ被",{"_index":155,"title":{},"body":{"1015822":{}}}],["creatfile缁撴瀯浣撳叏閮ㄥ弬鏁",{"_index":8630,"title":{},"body":{"1015833":{}}}],["creator中，你可以无需切换其他软件，直接查看相关的帮助信息（选中按f1",{"_index":4131,"title":{},"body":{"1015820":{}}}],["creator的qtdesigner来设计界面，这个跟mfc操作是差不多的，控件直接拖拽",{"_index":4181,"title":{},"body":{"1015820":{}}}],["creator的手册（选中按下快捷键f1",{"_index":4178,"title":{},"body":{"1015820":{}}}],["creator，这是一个ide，类似于vc6.0、vs等",{"_index":4082,"title":{},"body":{"1015820":{}}}],["creator，需要如下图一样进行配置（工具",{"_index":4104,"title":{},"body":{"1015820":{}}}],["crec",{"_index":670,"title":{},"body":{"1015822":{}}}],["critical_seç",{"_index":7515,"title":{},"body":{"1015833":{}}}],["cruntimecl",{"_index":203,"title":{},"body":{"1015822":{}}}],["cruntimeclass*)(&cframewnd::classcframewn",{"_index":345,"title":{},"body":{"1015822":{}}}],["cruntimeclass*)(&class_name::class##class_name))，其中两个#号则代表拼接符（一个#号则表示转为字符串），也就是说这一段代码可以转换为",{"_index":231,"title":{},"body":{"1015822":{}}}],["cruntimeclass*)(&cmainwindow::classcmainwindow",{"_index":347,"title":{},"body":{"1015822":{}}}],["cruntimeclass*)(&cmywinapp::classcmywinap",{"_index":285,"title":{},"body":{"1015822":{}}}],["cruntimeclass*)(&cwinapp::classcwinap",{"_index":232,"title":{},"body":{"1015822":{}}}],["cruntimeclass::createobject（动态创建函数",{"_index":317,"title":{},"body":{"1015822":{}}}],["cruntimeclass结构体",{"_index":236,"title":{},"body":{"1015822":{}}}],["cruntimeclass结构体，中文名称叫类型记录链表结构，我们可以使用f12跟进看一下定义",{"_index":237,"title":{},"body":{"1015822":{}}}],["cruntimeclass缁撴瀯浣擄紝鍒濆鍖栫被淇℃伅",{"_index":283,"title":{},"body":{"1015822":{}}}],["cs(硬编码：2e",{"_index":11799,"title":{},"body":{"1015817":{}}}],["cs:eip",{"_index":9172,"title":{},"body":{"1015831":{}}}],["cs:eip，其中cs是段选择子，包含了查找gdt表的是一个索引",{"_index":9264,"title":{},"body":{"1015831":{}}}],["cs:i",{"_index":11981,"title":{},"body":{"1015817":{}}}],["cscrollb",{"_index":1091,"title":{},"body":{"1015822":{}}}],["cshor",{"_index":5603,"title":{},"body":{"1015847":{}}}],["csoc",{"_index":9868,"title":{},"body":{"1015818":{}}}],["cstatic控件是一个静态文本，其是mfc中最简单的控件，创建方式跟按钮控件是一样的，所以我们这里为了方便直接使用mfc控件栏区创建即可",{"_index":1105,"title":{},"body":{"1015822":{}}}],["cstatiç",{"_index":1093,"title":{},"body":{"1015822":{}}}],["cs和ss的cpl要保持一致",{"_index":9181,"title":{},"body":{"1015831":{}}}],["cs是代码段，它的改变就意味着eip的改变，修改cs的同时就必须要修改eip，所以微软也没有直接提供以上所述的类似指令来修改cs段寄存器。那么我们想同时修改cs与eip，可以使用如下这些指令",{"_index":9102,"title":{},"body":{"1015831":{}}}],["cs的cpl，并且根据intel的规定",{"_index":9180,"title":{},"body":{"1015831":{}}}],["cs的权限一旦改变，ss的权限也要随着改变，cs与ss的等级必须一样",{"_index":9186,"title":{},"body":{"1015831":{}}}],["cs锛屽垏鍒�0鐜殑浠ｇ爜娈垫弿杩扮",{"_index":9326,"title":{},"body":{"1015831":{}}}],["cti",{"_index":3884,"title":{},"body":{"3440655":{}}}],["ctimersr",{"_index":3843,"title":{},"body":{"3440655":{}}}],["ctl_cod",{"_index":5748,"title":{},"body":{"1015847":{}}}],["ctl_code(file_device_unknow",{"_index":5768,"title":{},"body":{"1015847":{}}}],["ctreelist常用风格",{"_index":1220,"title":{},"body":{"1015822":{}}}],["cur",{"_index":8556,"title":{},"body":{"1015833":{}}}],["curr",{"_index":7228,"title":{},"body":{"1015833":{}}}],["currentthr",{"_index":11083,"title":{},"body":{"1703937":{}}}],["currentthreadindex",{"_index":11170,"title":{},"body":{"1703937":{}}}],["curs",{"_index":3870,"title":{},"body":{"3440655":{}}}],["cval",{"_index":2990,"title":{},"body":{"1015823":{}}}],["cviswindow",{"_index":3880,"title":{},"body":{"3440655":{}}}],["cwa_",{"_index":7836,"title":{},"body":{"1015833":{}}}],["cwa_button_0",{"_index":7837,"title":{},"body":{"1015833":{}}}],["cwa_button_1",{"_index":7839,"title":{},"body":{"1015833":{}}}],["cwinap",{"_index":41,"title":{},"body":{"1015822":{}}}],["cwinapp可以覆盖的虚函数",{"_index":28,"title":{},"body":{"1015822":{}}}],["cwinapp成员变量m_pmainw",{"_index":30,"title":{},"body":{"1015822":{}}}],["cwinapp的层次结构",{"_index":170,"title":{},"body":{"1015822":{}}}],["cwinapp类是windows应用程序对象基类（父类）的派生类（子类），应用程序对象提供了用于初始化应用程序和运行应用程序的成员函数；使用mfc的每个应用程序只能（也必须）包含一个cwinapp类的派生类（子类）的对象；当你从cwinapp派生应用程序类时，需要覆盖initinstance成员函数以创建应用程序的主窗口对象；它还有一个成员变量m_pmainwnd用来记录创建的主窗口的对象",{"_index":42,"title":{},"body":{"1015822":{}}}],["cwinapp类的二个可以覆盖的虚函数",{"_index":182,"title":{},"body":{"1015822":{}}}],["cwindow",{"_index":3879,"title":{},"body":{"3440655":{}}}],["cwindowdc：用于在窗口内任意地方画图，抱括非客户区",{"_index":605,"title":{},"body":{"1015822":{}}}],["cwindowdç",{"_index":594,"title":{},"body":{"1015822":{}}}],["cwinthr",{"_index":546,"title":{},"body":{"1015822":{}}}],["cwnd",{"_index":65,"title":{},"body":{"1015822":{}}}],["cwnd::*)(uin",{"_index":391,"title":{},"body":{"1015822":{}}}],["cx",{"_index":476,"title":{},"body":{"1015822":{},"1015825":{}}}],["cy",{"_index":474,"title":{},"body":{"1015822":{},"1015823":{}}}],["cyval",{"_index":2965,"title":{},"body":{"1015823":{}}}],["c杩涚▼鐨�0x12345678鍐呭瓨",{"_index":11286,"title":{},"body":{"1703937":{}}}],["c类",{"_index":9652,"title":{},"body":{"1015818":{}}}],["c语言",{"_index":1332,"title":{"1015843":{}},"body":{"1015827":{}}}],["c语言中的宽字符",{"_index":7120,"title":{},"body":{"1015833":{}}}],["c语言会自带很多函数提供我们使用，我们想要在控制台中输出一个字符，可以使用putchar这个函数",{"_index":1654,"title":{},"body":{"1015843":{}}}],["c语言的汇编表示&函数的定义与调用",{"_index":1336,"title":{},"body":{"1015843":{}}}],["c銆丆++鐨勬柟寮忓湪鍫嗕腑鐢宠銆侀噴鏀綜lass绫诲瀷鏁扮粍",{"_index":3475,"title":{},"body":{"1015840":{}}}],["c銆丆++鐨勬柟寮忓湪鍫嗕腑鐢宠銆侀噴鏀緄nt鏁扮粍",{"_index":3472,"title":{},"body":{"1015840":{}}}],["d",{"_index":2511,"title":{},"body":{"1015831":{},"1015846":{},"1015850":{},"2949228":{}}}],["d(%d",{"_index":10322,"title":{},"body":{"1015818":{}}}],["d.%d.%d.%d",{"_index":10354,"title":{},"body":{"1015818":{}}}],["d.%d.%d.%d\\n",{"_index":10346,"title":{},"body":{"1015818":{}}}],["d3",{"_index":6400,"title":{},"body":{"1015828":{}}}],["d4",{"_index":6399,"title":{},"body":{"1015828":{}}}],["d5",{"_index":6582,"title":{},"body":{"1015828":{}}}],["d\\n",{"_index":4640,"title":{},"body":{"1015818":{},"1015833":{},"3440657":{}}}],["d\\n\",sizeof(px1),sizeof(px2),sizeof(px3),sizeof(px4",{"_index":2239,"title":{},"body":{"1015843":{}}}],["d^d",{"_index":10450,"title":{},"body":{"1015818":{}}}],["dat",{"_index":2966,"title":{},"body":{"1015818":{},"1015823":{},"1015828":{},"1015831":{},"1015833":{},"1015850":{}}}],["data1",{"_index":2685,"title":{},"body":{"1015823":{}}}],["data2",{"_index":2686,"title":{},"body":{"1015823":{}}}],["data3",{"_index":2687,"title":{},"body":{"1015823":{}}}],["data4",{"_index":2688,"title":{},"body":{"1015823":{}}}],["datadirectory[image_numberof_directory_entr",{"_index":6181,"title":{},"body":{"1015828":{}}}],["datagr",{"_index":9933,"title":{},"body":{"1015818":{}}}],["datal",{"_index":10403,"title":{},"body":{"1015818":{}}}],["db",{"_index":2795,"title":{},"body":{"1015823":{},"1015831":{},"1015850":{}}}],["db.h",{"_index":2623,"title":{},"body":{"1015823":{}}}],["dbg",{"_index":3912,"title":{},"body":{"3440655":{}}}],["dbg_cont",{"_index":4670,"title":{},"body":{"3440657":{}}}],["dbg_continue锛氳〃绀鸿皟璇曞櫒宸插鐞嗚寮傚父",{"_index":4666,"title":{},"body":{"3440657":{}}}],["dbg_exception_not_handled锛氳〃绀鸿皟璇曞櫒娌℃湁澶勭悊璇ュ紓甯革紝杞洖鍒扮敤鎴锋�佷腑鎵ц锛屽鎵惧彲浠ュ鐞嗚寮傚父鐨勫紓甯稿鐞嗗櫒",{"_index":4667,"title":{},"body":{"3440657":{}}}],["dbgkm_apinump",{"_index":4593,"title":{},"body":{"3440657":{}}}],["dbgkmcreateprocessap",{"_index":4579,"title":{},"body":{"3440657":{}}}],["dbgkmcreatethreadap",{"_index":4577,"title":{},"body":{"3440657":{}}}],["dbgkmerrorreportap",{"_index":4589,"title":{},"body":{"3440657":{}}}],["dbgkmexceptionap",{"_index":4575,"title":{},"body":{"3440657":{}}}],["dbgkmexitprocessap",{"_index":4583,"title":{},"body":{"3440657":{}}}],["dbgkmexitthreadap",{"_index":4581,"title":{},"body":{"3440657":{}}}],["dbgkmloaddllap",{"_index":4585,"title":{},"body":{"3440657":{}}}],["dbgkmmaxapinump",{"_index":4591,"title":{},"body":{"3440657":{}}}],["dbgkmunloaddllap",{"_index":4587,"title":{},"body":{"3440657":{}}}],["dbgkpsendapimessage函数",{"_index":4609,"title":{},"body":{"3440657":{}}}],["dbgkpsendapimessage函数是整个调试事件采集的主要入口。如果在这个函数中设置了钩子，调试器将无法正常进行调试操作",{"_index":4617,"title":{},"body":{"3440657":{}}}],["dbgprint(\"%x",{"_index":5627,"title":{},"body":{"1015847":{}}}],["dbgprint(\"10",{"_index":5872,"title":{},"body":{"1015847":{}}}],["dbgprint(\"2",{"_index":5866,"title":{},"body":{"1015847":{}}}],["dbgprint(\"addr",{"_index":5824,"title":{},"body":{"1015847":{}}}],["dbgprint(\"backaddr",{"_index":5949,"title":{},"body":{"1015847":{}}}],["dbgprint(\"by",{"_index":5471,"title":{},"body":{"1015847":{}}}],["dbgprint(\"closedispatchfunç",{"_index":5729,"title":{},"body":{"1015847":{}}}],["dbgprint(\"cmdaddr",{"_index":5947,"title":{},"body":{"1015847":{}}}],["dbgprint(\"createdispatchfunç",{"_index":5727,"title":{},"body":{"1015847":{}}}],["dbgprint(\"devicedispatchfunç",{"_index":5770,"title":{},"body":{"1015847":{}}}],["dbgprint(\"funcaddr",{"_index":5943,"title":{},"body":{"1015847":{}}}],["dbgprint(\"h",{"_index":5848,"title":{},"body":{"1015847":{}}}],["dbgprint(\"hel",{"_index":5475,"title":{},"body":{"1015847":{}}}],["dbgprint(\"iocreatedev",{"_index":5661,"title":{},"body":{"1015847":{}}}],["dbgprint(\"pageprotectoff鎵ц澶辫触锛",{"_index":5890,"title":{},"body":{"1015847":{}}}],["dbgprint(\"pageprotecton鎵ц澶辫触锛",{"_index":5886,"title":{},"body":{"1015847":{}}}],["dbgprint(\"processhandl",{"_index":5918,"title":{},"body":{"1015847":{}}}],["dbgprint(\"siz",{"_index":5790,"title":{},"body":{"1015847":{}}}],["dbgprint(\"ur",{"_index":5793,"title":{},"body":{"1015847":{}}}],["dbgprocess",{"_index":4628,"title":{},"body":{"3440657":{}}}],["dbinterface.h",{"_index":2772,"title":{},"body":{"1015823":{}}}],["dblval",{"_index":2962,"title":{},"body":{"1015823":{}}}],["db位",{"_index":9047,"title":{},"body":{"1015831":{}}}],["db位是段描述符高位4字节中的第22位，db位的值有以下三种场景",{"_index":9048,"title":{},"body":{"1015831":{}}}],["dc",{"_index":7683,"title":{},"body":{"1015833":{}}}],["dc(thi",{"_index":669,"title":{},"body":{"1015822":{}}}],["dc.draw3drect(&reç",{"_index":795,"title":{},"body":{"1015822":{}}}],["dc.draw3drect(&righttablereç",{"_index":900,"title":{},"body":{"1015822":{}}}],["dc.draw3drect(&tablereç",{"_index":906,"title":{},"body":{"1015822":{}}}],["dc.drawtext(\"cl",{"_index":812,"title":{},"body":{"1015822":{}}}],["dc.ellipse(0,0,100,10",{"_index":680,"title":{},"body":{"1015822":{}}}],["dc.ellipse(10,10,20,20",{"_index":759,"title":{},"body":{"1015822":{}}}],["dc.fillrect(&reç",{"_index":794,"title":{},"body":{"1015822":{}}}],["dc.fillrect(reç",{"_index":787,"title":{},"body":{"1015822":{}}}],["dc.lineto(30,10",{"_index":725,"title":{},"body":{"1015822":{}}}],["dc.lineto(30,30",{"_index":727,"title":{},"body":{"1015822":{}}}],["dc.lineto(point.x",{"_index":982,"title":{},"body":{"1015822":{}}}],["dc.moveto(10,10",{"_index":722,"title":{},"body":{"1015822":{}}}],["dc.moveto(40",{"_index":745,"title":{},"body":{"1015822":{}}}],["dc.moveto(testpoint.x",{"_index":980,"title":{},"body":{"1015822":{}}}],["dc.polyline(p",{"_index":736,"title":{},"body":{"1015822":{}}}],["dc.polylineto(p",{"_index":747,"title":{},"body":{"1015822":{}}}],["dc.rectangle(&reç",{"_index":793,"title":{},"body":{"1015822":{}}}],["dc.rectangle(&righttablereç",{"_index":899,"title":{},"body":{"1015822":{}}}],["dc.rectangle(&tablereç",{"_index":905,"title":{},"body":{"1015822":{}}}],["dc.rectangle(10,10,20,20",{"_index":766,"title":{},"body":{"1015822":{}}}],["dc.rectangle(reç",{"_index":783,"title":{},"body":{"1015822":{}}}],["dc.selectobject(&brush",{"_index":887,"title":{},"body":{"1015822":{}}}],["dc.selectobject(&p",{"_index":846,"title":{},"body":{"1015822":{}}}],["dc.selectobject(oldbrush",{"_index":922,"title":{},"body":{"1015822":{}}}],["dc.selectobject(oldp",{"_index":847,"title":{},"body":{"1015822":{}}}],["dc.setbkmode(transp",{"_index":807,"title":{},"body":{"1015822":{}}}],["dc.setmapmode(mm_isotrop",{"_index":673,"title":{},"body":{"1015822":{}}}],["dc.settextalign(ta_ç",{"_index":850,"title":{},"body":{"1015822":{}}}],["dc.setviewportext(rect.width",{"_index":677,"title":{},"body":{"1015822":{}}}],["dc.setwindowext(100,10",{"_index":675,"title":{},"body":{"1015822":{}}}],["dc.textout(12",{"_index":920,"title":{},"body":{"1015822":{}}}],["dc.textout(75+(i*tabwidth",{"_index":911,"title":{},"body":{"1015822":{}}}],["dc.textout(rect.lef",{"_index":852,"title":{},"body":{"1015822":{}}}],["dc.textout(righttablerect.right/2",{"_index":901,"title":{},"body":{"1015822":{}}}],["dc设备描述表的一些属性",{"_index":618,"title":{},"body":{"1015822":{}}}],["dc设备描述表（设备上下文）：当window程序在屏幕、打印机或者其它输出设备上画图时，它并不将像素直接输出到设备上，而是将图绘制到设备描述表dc当中，表示逻辑意义上的显示平面，它是window中的一种数据结构，包含了gdi需要的所有关于显示平面情况的描述",{"_index":599,"title":{},"body":{"1015822":{}}}],["dc（deviç",{"_index":7655,"title":{},"body":{"1015833":{}}}],["debug_ev",{"_index":4643,"title":{},"body":{"3440657":{}}}],["debug_objeç",{"_index":4552,"title":{},"body":{"3440657":{}}}],["debug_only_this_process，表示创建一个调试进程，并限制只有当前调试器可以附加到该进程进行调试，确保调试过程的独占性和安全性），接着进入一个调试循环",{"_index":4625,"title":{},"body":{"3440657":{}}}],["debug_only_this_proç",{"_index":4638,"title":{},"body":{"3440657":{}}}],["debug_proç",{"_index":4637,"title":{},"body":{"3440657":{}}}],["debugactiveprocess(p",{"_index":4761,"title":{},"body":{"3440657":{}}}],["debugactiveprocess执行流程",{"_index":4528,"title":{},"body":{"3440657":{}}}],["debugaç",{"_index":11020,"title":{},"body":{"1703937":{}}}],["debugev",{"_index":4644,"title":{},"body":{"3440657":{}}}],["debugevent.dwdebugeventç",{"_index":4649,"title":{},"body":{"3440657":{}}}],["debugevent.dwthr",{"_index":4669,"title":{},"body":{"3440657":{}}}],["debugevent.u.exception.exceptionrecord.exceptionaddr",{"_index":4748,"title":{},"body":{"3440657":{}}}],["debugp",{"_index":10986,"title":{},"body":{"1703937":{}}}],["debugport=com1",{"_index":8975,"title":{},"body":{"1015831":{}}}],["debugport检查与置0：创建一个线程，不断检查当前进程的debugport值，一旦有值就退出程序或将其置0，中断调试对象与被调试进程之间的联系",{"_index":4556,"title":{},"body":{"3440657":{}}}],["debugstr",{"_index":4696,"title":{},"body":{"3440657":{}}}],["debugu",{"_index":2378,"title":{},"body":{"1015831":{},"1015843":{}}}],["debug启用调试程序进入系统",{"_index":8981,"title":{},"body":{"1015831":{}}}],["dec",{"_index":2997,"title":{},"body":{"1015817":{},"1015818":{},"1015823":{}}}],["decimal(m,",{"_index":8778,"title":{},"body":{"1015850":{}}}],["decl",{"_index":134,"title":{},"body":{"1015822":{}}}],["declare_dy",{"_index":199,"title":{},"body":{"1015822":{}}}],["declare_dynamic(class_",{"_index":258,"title":{},"body":{"1015822":{}}}],["declare_dyncr",{"_index":315,"title":{},"body":{"1015822":{}}}],["declare_dyncreate(class_",{"_index":334,"title":{},"body":{"1015822":{}}}],["declare_message_map",{"_index":358,"title":{},"body":{"1015822":{}}}],["def",{"_index":103,"title":{},"body":{"1015818":{},"1015822":{},"1015823":{},"1015828":{},"1015833":{},"1015843":{},"1015847":{},"1015850":{},"2949166":{},"2949228":{},"3440657":{}}}],["def_dll_p",{"_index":2598,"title":{},"body":{"1015823":{}}}],["default语句与位置无关，但是当default写在其他条件的前面时。如果没有break就会向下继续匹配执行",{"_index":1804,"title":{},"body":{"1015843":{}}}],["defined(afx_stdafx_h__a9db83db_a9fd_11d0_bfd1_444553540000__included_",{"_index":102,"title":{},"body":{"1015822":{}}}],["define之类的，我们都称之为预处理指令，如下是常用的",{"_index":2381,"title":{},"body":{"1015843":{}}}],["defwindowproc(hw",{"_index":4043,"title":{},"body":{"1015833":{},"3440655":{}}}],["def导出",{"_index":2757,"title":{},"body":{"1015823":{}}}],["def文件",{"_index":8335,"title":{},"body":{"1015833":{}}}],["del",{"_index":1068,"title":{},"body":{"1015822":{},"1015823":{},"1015840":{},"1015850":{}}}],["deletefil",{"_index":8180,"title":{},"body":{"1015833":{}}}],["deleteobject(hbrush",{"_index":3773,"title":{},"body":{"3440655":{}}}],["deleteobject(hp",{"_index":7690,"title":{},"body":{"1015833":{}}}],["deletestr",{"_index":1154,"title":{},"body":{"1015822":{}}}],["delete和delete[]是有区别的，如果使用new[]在堆中创建对象，使用delete去释放则只会释放第一个对象，其他的不会释放",{"_index":3483,"title":{},"body":{"1015840":{}}}],["delete然后就是_free_dbgi",{"_index":3469,"title":{},"body":{"1015840":{}}}],["demo.pr",{"_index":4184,"title":{},"body":{"1015820":{}}}],["dequ",{"_index":11384,"title":{},"body":{"1015814":{}}}],["deque容器",{"_index":11376,"title":{},"body":{"1015814":{}}}],["des",{"_index":2146,"title":{},"body":{"1015843":{}}}],["desc",{"_index":8822,"title":{},"body":{"1015850":{}}}],["descrip",{"_index":3102,"title":{},"body":{"1015818":{},"1015823":{}}}],["descript",{"_index":2562,"title":{},"body":{"1015831":{},"1015846":{}}}],["descriptor，虚拟地址描述符），这个成员记录当前进程线性地址空间的搜索二叉树（我们可以称之为vad树），其对应的地址是二叉树根节点的地址。（它里面的每一个节点都记录了一块被占用的线性地址空间",{"_index":6696,"title":{},"body":{"2949228":{}}}],["desiredaç",{"_index":5841,"title":{},"body":{"1015847":{}}}],["desktop",{"_index":3885,"title":{},"body":{"3440655":{}}}],["device_objeç",{"_index":5658,"title":{},"body":{"1015847":{}}}],["devicedispatchfunc(pdevice_objeç",{"_index":5769,"title":{},"body":{"1015847":{}}}],["devicedispatchfunç",{"_index":5799,"title":{},"body":{"1015847":{}}}],["deviceiocontrol",{"_index":5699,"title":{},"body":{"1015847":{}}}],["deviceobjeç",{"_index":5606,"title":{},"body":{"1015847":{}}}],["deviç",{"_index":597,"title":{},"body":{"1015822":{},"1015833":{},"1015847":{}}}],["df位为0，所以edi的值也就随循环每次递增4（dword为4字节所以是4）在这里实际上就是将哪一块缓冲区填充cc，此时堆栈图变成如下所示",{"_index":1443,"title":{},"body":{"1015843":{}}}],["dh",{"_index":11881,"title":{},"body":{"1015817":{}}}],["dict",{"_index":9483,"title":{},"body":{"1015831":{}}}],["direct",{"_index":7229,"title":{},"body":{"1015831":{},"1015833":{}}}],["directorytablep",{"_index":10946,"title":{},"body":{"1703937":{}}}],["disable，页缓存可编辑），该值为1时禁止写入缓存，直接写入内存；比如页表所在的页已经存储在tlb中了，并不需要再缓存了，所以该位就可以设为1",{"_index":9629,"title":{},"body":{"1015831":{}}}],["disc",{"_index":6307,"title":{},"body":{"1015828":{}}}],["disp32",{"_index":12055,"title":{},"body":{"1015817":{}}}],["disp32，这就表示需要sib来进行补充",{"_index":12069,"title":{},"body":{"1015817":{}}}],["disp8",{"_index":12054,"title":{},"body":{"1015817":{}}}],["dispatchercontex",{"_index":4396,"title":{},"body":{"2949166":{}}}],["dispatchmessage(&msgi",{"_index":3986,"title":{},"body":{"1015833":{},"3440655":{}}}],["dispatchmessage函数用于将消息转发到窗口过程函数，以触发相应的处理逻辑。但是在这里我们通过实验发现getmessage函数也会对消息进行处理",{"_index":3998,"title":{},"body":{"3440655":{}}}],["div",{"_index":6455,"title":{},"body":{"1015828":{}}}],["divbyf",{"_index":11631,"title":{},"body":{"1015814":{}}}],["divbyfive(",{"_index":11627,"title":{},"body":{"1015814":{}}}],["dl",{"_index":2713,"title":{},"body":{"1015817":{},"1015823":{},"1015833":{}}}],["dll_process_attaç",{"_index":8441,"title":{},"body":{"1015833":{}}}],["dllcanunloadnow",{"_index":2716,"title":{},"body":{"1015823":{}}}],["dllcharact",{"_index":6167,"title":{},"body":{"1015828":{}}}],["dlldemo.dl",{"_index":6488,"title":{},"body":{"1015828":{}}}],["dllgetclassfactoryobject(cdbsrvfact",{"_index":2606,"title":{},"body":{"1015823":{}}}],["dllgetclassobject(refcl",{"_index":2706,"title":{},"body":{"1015823":{}}}],["dllgetclassobjeç",{"_index":2762,"title":{},"body":{"1015823":{}}}],["dllma",{"_index":8380,"title":{},"body":{"1015833":{}}}],["dllmain函数",{"_index":8378,"title":{},"body":{"1015833":{}}}],["dllregisterserv",{"_index":2763,"title":{},"body":{"1015823":{}}}],["dllregisterserver(v",{"_index":2719,"title":{},"body":{"1015823":{}}}],["dllunregisterserv",{"_index":2764,"title":{},"body":{"1015823":{}}}],["dllunregisterserver(v",{"_index":2752,"title":{},"body":{"1015823":{}}}],["dll名.lib",{"_index":8362,"title":{},"body":{"1015833":{}}}],["dll名称",{"_index":2410,"title":{},"body":{"1015846":{}}}],["dll妯″潡鍙ユ焺",{"_index":6525,"title":{},"body":{"1015828":{}}}],["dll妯″潡鐨勫彞鏌勶紝褰撳墠dll琚姞杞藉埌浠�涔堜綅缃",{"_index":8382,"title":{},"body":{"1015833":{}}}],["dll文件，在dll文件入口函数判断并创建线程",{"_index":8436,"title":{},"body":{"1015833":{}}}],["dll琚皟鐢ㄧ殑鍘熷洜锛屾湁4绉嶆儏鍐碉細dll_process_attach锛堝綋鏌愪釜杩涚▼绗竴娆℃墽琛孡oadlibrary锛夈�丏ll_process_detach锛堝綋鏌愪釜杩涚▼閲婃斁浜咲ll锛夈�丏ll_thread_attach锛堝綋鏌愪釜杩涚▼鐨勫叾浠栫嚎绋嬪啀娆℃墽琛孡oadlibrary锛夈�丏ll_thread_detach锛堝綋鏌愪釜杩涚▼鐨勫叾浠栫嚎绋嬮噴鏀句簡dll锛",{"_index":8385,"title":{},"body":{"1015833":{}}}],["dll的优点",{"_index":8376,"title":{},"body":{"1015833":{}}}],["dll的优点如下图所示，dll只在内存中加载一份，修改的时候就是写拷贝原理，不会影响别的进程使用dll以及不会影响dll本身",{"_index":8377,"title":{},"body":{"1015833":{}}}],["dll鏂囦欢璺緞",{"_index":2769,"title":{},"body":{"1015823":{}}}],["dl、dh",{"_index":5163,"title":{},"body":{"1015825":{}}}],["dmax",{"_index":10484,"title":{},"body":{"1015818":{}}}],["dmp1",{"_index":10466,"title":{},"body":{"1015818":{}}}],["dmq1",{"_index":10467,"title":{},"body":{"1015818":{}}}],["dns是什么",{"_index":9702,"title":{},"body":{"1015818":{}}}],["dns服务器通过记录域名和ip的关联，当你想要去访问某个域名的时候，就需要给dns服务器发送请求，而后dns服务器接收到你的请求，将请求中想要查询的域名在dns服务器本身的记录中去搜索找到对应的ip，最后返回给你",{"_index":9704,"title":{},"body":{"1015818":{}}}],["do...whil",{"_index":1846,"title":{},"body":{"1015843":{}}}],["do_buffered_",{"_index":5670,"title":{},"body":{"1015847":{}}}],["dob",{"_index":8777,"title":{},"body":{"1015850":{}}}],["dodataexchange函数",{"_index":1037,"title":{},"body":{"1015822":{}}}],["domodal函数",{"_index":1049,"title":{},"body":{"1015822":{}}}],["dontus",{"_index":6957,"title":{},"body":{"2949228":{}}}],["dos块",{"_index":6081,"title":{},"body":{"1015828":{}}}],["dos块就是夹在",{"_index":6082,"title":{},"body":{"1015828":{}}}],["dos头",{"_index":6036,"title":{},"body":{"1015828":{}}}],["dos部分",{"_index":6007,"title":{},"body":{"1015828":{}}}],["doubl",{"_index":1572,"title":{},"body":{"1015823":{},"1015843":{}}}],["double；我们可以举例说明",{"_index":1709,"title":{},"body":{"1015843":{}}}],["downl",{"_index":8966,"title":{},"body":{"1015831":{}}}],["downloads），在我们安装wdk时候需要注意其版本应与sdk的版本一致。我们可以通过控制面板",{"_index":5448,"title":{},"body":{"1015847":{}}}],["dowr",{"_index":5193,"title":{},"body":{"1015825":{}}}],["dpl",{"_index":9078,"title":{},"body":{"1015831":{}}}],["dpl一般设置为3，方便3环应用程序访问，type域名是固定的0101，tss段选择子，指向位于gdt表中tss段描述符的位置",{"_index":9368,"title":{},"body":{"1015831":{}}}],["dpl（descript",{"_index":9079,"title":{},"body":{"1015831":{}}}],["dq",{"_index":8996,"title":{},"body":{"1015831":{}}}],["dq/dd指令会帮我们自动排好，便于对照着结构直接看，如果你想观察的仔细一些可以使用db指令",{"_index":9003,"title":{},"body":{"1015831":{}}}],["dr0",{"_index":4911,"title":{},"body":{"3440657":{}}}],["dr7是最重要的寄存器，它控制着断点的各类属性，有很多个位，每位的意思如下（0",{"_index":4914,"title":{},"body":{"3440657":{}}}],["dr7，如果当前线程正在被调试则该值就不是",{"_index":11023,"title":{},"body":{"1703937":{}}}],["draw3drect函数实现3d立体感",{"_index":789,"title":{},"body":{"1015822":{}}}],["draw3dreç",{"_index":718,"title":{},"body":{"1015822":{}}}],["driv",{"_index":5461,"title":{},"body":{"1015833":{},"1015847":{}}}],["drive_cdr",{"_index":8028,"title":{},"body":{"1015833":{}}}],["drive_fix",{"_index":8024,"title":{},"body":{"1015833":{}}}],["drive_no_root_",{"_index":8019,"title":{},"body":{"1015833":{}}}],["drive_r",{"_index":8026,"title":{},"body":{"1015833":{}}}],["drive_ramdı",{"_index":8031,"title":{},"body":{"1015833":{}}}],["drive_remov",{"_index":8022,"title":{},"body":{"1015833":{}}}],["drive_unknow",{"_index":8017,"title":{},"body":{"1015833":{}}}],["driver_objeç",{"_index":5624,"title":{},"body":{"1015847":{}}}],["driverentry(pdriver_objeç",{"_index":5473,"title":{},"body":{"1015847":{}}}],["driverex",{"_index":5613,"title":{},"body":{"1015847":{}}}],["driverobjeç",{"_index":5470,"title":{},"body":{"1015847":{}}}],["driverseç",{"_index":5610,"title":{},"body":{"1015847":{}}}],["driverst",{"_index":5607,"title":{},"body":{"1015847":{}}}],["drivers，创建emp",{"_index":5456,"title":{},"body":{"1015847":{}}}],["driverunl",{"_index":5477,"title":{},"body":{"1015847":{}}}],["driverunload(pdriver_objeç",{"_index":5469,"title":{},"body":{"1015847":{}}}],["driver项目",{"_index":5458,"title":{},"body":{"1015847":{}}}],["drop",{"_index":8769,"title":{},"body":{"1015850":{}}}],["ds(硬编码：3e",{"_index":11801,"title":{},"body":{"1015817":{}}}],["ds,ax",{"_index":8937,"title":{},"body":{"1015831":{}}}],["ds:[0",{"_index":8947,"title":{},"body":{"1015831":{}}}],["ds:[0x0000000",{"_index":5224,"title":{},"body":{"1015825":{}}}],["ds:[0x0012ffc4",{"_index":5228,"title":{},"body":{"1015825":{}}}],["ds:[0x00401234",{"_index":11304,"title":{},"body":{"1703937":{}}}],["ds:[0x123456",{"_index":8906,"title":{},"body":{"1015831":{}}}],["ds:[0x12345678",{"_index":6640,"title":{},"body":{"1015831":{},"1703937":{},"1933380":{}}}],["ds:[0x13ffc4",{"_index":5202,"title":{},"body":{"1015825":{}}}],["ds:[0x23456789",{"_index":6657,"title":{},"body":{"1933380":{}}}],["ds:[0x34567890",{"_index":6658,"title":{},"body":{"1933380":{}}}],["ds:[buf",{"_index":9016,"title":{},"body":{"1015831":{}}}],["ds:[eax",{"_index":12058,"title":{},"body":{"1015817":{}}}],["ds:[eax+eax*4",{"_index":5215,"title":{},"body":{"1015825":{}}}],["ds:[eax+eax*4+4",{"_index":5217,"title":{},"body":{"1015825":{}}}],["ds:[ecx",{"_index":5206,"title":{},"body":{"1015817":{},"1015825":{}}}],["ds:[ecx+4",{"_index":5211,"title":{},"body":{"1015825":{}}}],["ds:[edx",{"_index":5208,"title":{},"body":{"1015825":{}}}],["ds:[edx+0xc",{"_index":5212,"title":{},"body":{"1015825":{}}}],["ds:[es",{"_index":5291,"title":{},"body":{"1015825":{}}}],["ds:[esp",{"_index":5331,"title":{},"body":{"1015825":{}}}],["ds:[var",{"_index":8938,"title":{},"body":{"1015831":{}}}],["ds:[鍐呭瓨鍦板潃",{"_index":5194,"title":{},"body":{"1015825":{}}}],["dstgmthreadp",{"_index":11159,"title":{},"body":{"1703937":{}}}],["dstip[",{"_index":10352,"title":{},"body":{"1015818":{}}}],["dstip[0",{"_index":10355,"title":{},"body":{"1015818":{}}}],["dstip[1",{"_index":10356,"title":{},"body":{"1015818":{}}}],["dstip[2",{"_index":10357,"title":{},"body":{"1015818":{}}}],["dstip[3",{"_index":10358,"title":{},"body":{"1015818":{}}}],["dstip[4",{"_index":10351,"title":{},"body":{"1015818":{}}}],["dstmac[",{"_index":10233,"title":{},"body":{"1015818":{}}}],["dstmac[0",{"_index":10237,"title":{},"body":{"1015818":{}}}],["dstmac[1",{"_index":10238,"title":{},"body":{"1015818":{}}}],["dstmac[2",{"_index":10239,"title":{},"body":{"1015818":{}}}],["dstmac[3",{"_index":10240,"title":{},"body":{"1015818":{}}}],["dstmac[4",{"_index":10241,"title":{},"body":{"1015818":{}}}],["dstmac[5",{"_index":10242,"title":{},"body":{"1015818":{}}}],["dstmac[6",{"_index":10232,"title":{},"body":{"1015818":{}}}],["dstport[2",{"_index":10386,"title":{},"body":{"1015818":{}}}],["dstport[x",{"_index":10387,"title":{},"body":{"1015818":{}}}],["dt",{"_index":2501,"title":{},"body":{"1015846":{},"1015847":{},"2424869":{},"2424889":{},"2949166":{},"2949228":{}}}],["dt_center|dt_vcenter|dt_singlel",{"_index":813,"title":{},"body":{"1015822":{}}}],["dt_center锛氭枃鏈按骞冲眳涓樉绀",{"_index":815,"title":{},"body":{"1015822":{}}}],["dt_singleline锛氭枃鏈崟琛屾樉绀",{"_index":817,"title":{},"body":{"1015822":{}}}],["dt_vcenter锛氭枃鏈瀭鐩村眳涓樉绀",{"_index":816,"title":{},"body":{"1015822":{}}}],["dtdebug，右",{"_index":11785,"title":{},"body":{"1015817":{}}}],["dwaccessaddr",{"_index":4899,"title":{},"body":{"3440657":{}}}],["dwaccessflagı",{"_index":4898,"title":{},"body":{"3440657":{}}}],["dwaddr",{"_index":7725,"title":{},"body":{"1015833":{}}}],["dwarf",{"_index":4088,"title":{},"body":{"1015820":{}}}],["dwbyteswr",{"_index":6848,"title":{},"body":{"2949228":{}}}],["dwcompatflags2",{"_index":3848,"title":{},"body":{"3440655":{}}}],["dwcompatflagı",{"_index":3847,"title":{},"body":{"3440655":{}}}],["dwcreateapiaddr",{"_index":8617,"title":{},"body":{"1015833":{}}}],["dwcreationdisp",{"_index":8113,"title":{},"body":{"1015833":{}}}],["dwcreationflagı",{"_index":7221,"title":{},"body":{"1015833":{}}}],["dwctrlcod",{"_index":8523,"title":{},"body":{"1015833":{}}}],["dwdebugeventç",{"_index":4675,"title":{},"body":{"3440657":{}}}],["dwdebuginfofileof",{"_index":4716,"title":{},"body":{"3440657":{}}}],["dwdesiredaccess：与openfilemapping的参数意义一样",{"_index":6828,"title":{},"body":{"2949228":{}}}],["dwdesiredaccess：指定映射对象的文件数据的访问方式，要与createfilemapping中设置的flprotect参数相匹配",{"_index":6807,"title":{},"body":{"2949228":{}}}],["dwdesiredaç",{"_index":6805,"title":{},"body":{"1015833":{},"2949228":{}}}],["dwdisp",{"_index":2723,"title":{},"body":{"1015823":{}}}],["dwerr",{"_index":4741,"title":{},"body":{"3440657":{}}}],["dwexitç",{"_index":4723,"title":{},"body":{"3440657":{}}}],["dwexpwinv",{"_index":3846,"title":{},"body":{"3440655":{}}}],["dwexstyl",{"_index":70,"title":{},"body":{"1015822":{}}}],["dwfileoffseth",{"_index":6824,"title":{},"body":{"1015833":{},"2949228":{}}}],["dwfileoffsethigh和dwfileoffsetlow：指定要映射的文件的偏移量。这两个参数结合起来表示一个64位的偏移量。可以使用0表示从文件的开头进行映射",{"_index":6829,"title":{},"body":{"2949228":{}}}],["dwfileoffsetlow",{"_index":6825,"title":{},"body":{"1015833":{},"2949228":{}}}],["dwfilesystemflagı",{"_index":8058,"title":{},"body":{"1015833":{}}}],["dwfillattribu",{"_index":7276,"title":{},"body":{"1015833":{}}}],["dwfirstchanç",{"_index":4703,"title":{},"body":{"3440657":{}}}],["dwflag",{"_index":7277,"title":{},"body":{"1015833":{}}}],["dwflagsandattribu",{"_index":8115,"title":{},"body":{"1015833":{}}}],["dwfreetyp",{"_index":7937,"title":{},"body":{"1015833":{}}}],["dwfunaddr",{"_index":8639,"title":{},"body":{"1015833":{}}}],["dwi",{"_index":7271,"title":{},"body":{"1015833":{}}}],["dwinbuf",{"_index":5742,"title":{},"body":{"1015847":{}}}],["dwlength",{"_index":5745,"title":{},"body":{"1015833":{},"1015847":{}}}],["dwloadaddr",{"_index":8448,"title":{},"body":{"1015833":{}}}],["dwlow",{"_index":8136,"title":{},"body":{"1015833":{}}}],["dwmaximumcomponentlength",{"_index":8057,"title":{},"body":{"1015833":{}}}],["dwmaximumsizeh",{"_index":6794,"title":{},"body":{"1015833":{},"2949228":{}}}],["dwmaximumsizehigh和dwmaximumsizelow：两个参数合起来指定了文件映射对象的最大大小。这两个参数一起构成了一个64位的整数，表示以字节为单位的最大大小。dwmaximumsizelow通常可以设为bufsiz",{"_index":6801,"title":{},"body":{"2949228":{}}}],["dwmaximumsizelow",{"_index":6795,"title":{},"body":{"1015833":{},"2949228":{}}}],["dwmilliseco",{"_index":7434,"title":{},"body":{"1015833":{},"2424889":{}}}],["dwnumberofbytestoflush",{"_index":8263,"title":{},"body":{"1015833":{}}}],["dwnumberofbytestomap",{"_index":6826,"title":{},"body":{"1015833":{},"2949228":{}}}],["dwnumberofbytestomap：指定要映射的字节数。可以与createfilemapping要映射的大小对应，即映射全部",{"_index":6830,"title":{},"body":{"2949228":{}}}],["dwor",{"_index":59,"title":{},"body":{"1015818":{},"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015831":{},"1015833":{},"1015843":{},"1015846":{},"1015847":{},"1703937":{},"1933378":{},"1933380":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["dword)&myeexceptionhandl",{"_index":4409,"title":{},"body":{"2949166":{}}}],["dword)afxwndproç",{"_index":508,"title":{},"body":{"1015822":{}}}],["dword)createfilethreadproç",{"_index":8667,"title":{},"body":{"1015833":{}}}],["dword)getprocaddress(h",{"_index":8462,"title":{},"body":{"1015833":{}}}],["dword)h",{"_index":7726,"title":{},"body":{"1015833":{}}}],["dword)icr3",{"_index":9320,"title":{},"body":{"1015831":{}}}],["dword)paddr",{"_index":4938,"title":{},"body":{"3440657":{}}}],["dword)staç",{"_index":9313,"title":{},"body":{"1015831":{}}}],["dword*)&buff[0",{"_index":9215,"title":{},"body":{"1015831":{}}}],["dword*)(dwfunaddr",{"_index":8671,"title":{},"body":{"1015833":{}}}],["dworderlist[",{"_index":8528,"title":{},"body":{"1015833":{}}}],["dworderlist[10",{"_index":8525,"title":{},"body":{"1015833":{}}}],["dworiginalproteç",{"_index":4875,"title":{},"body":{"3440657":{}}}],["dwoutdirect",{"_index":8099,"title":{},"body":{"1015833":{}}}],["dwoutdirectory[20",{"_index":8097,"title":{},"body":{"1015833":{}}}],["dwproc",{"_index":4677,"title":{},"body":{"1015833":{},"3440657":{}}}],["dwprocessaddr",{"_index":8405,"title":{},"body":{"1015833":{}}}],["dwreadlength",{"_index":8191,"title":{},"body":{"1015833":{}}}],["dwshar",{"_index":8111,"title":{},"body":{"1015833":{}}}],["dwsiz",{"_index":4857,"title":{},"body":{"1015833":{},"2949228":{},"3440657":{}}}],["dwsize：想要申请的内存空间大小，如果lpaddress的值非null，那么lpaddress就是地址的起点，lpaddress+dw",{"_index":6744,"title":{},"body":{"2949228":{}}}],["dwstacksiz",{"_index":7398,"title":{},"body":{"1015833":{}}}],["dwstyl",{"_index":60,"title":{},"body":{"1015822":{},"1015833":{}}}],["dwtest1",{"_index":8246,"title":{},"body":{"1015833":{}}}],["dwthre",{"_index":4679,"title":{},"body":{"1015833":{},"3440657":{}}}],["dwthreadfu",{"_index":8634,"title":{},"body":{"1015833":{}}}],["dwtyp",{"_index":4742,"title":{},"body":{"1015833":{},"3440657":{}}}],["dwunus",{"_index":4900,"title":{},"body":{"3440657":{}}}],["dwval",{"_index":6634,"title":{},"body":{"1933380":{}}}],["dwvolumeserialnump",{"_index":8056,"title":{},"body":{"1015833":{}}}],["dwx",{"_index":7270,"title":{},"body":{"1015833":{}}}],["dwxcountç",{"_index":7274,"title":{},"body":{"1015833":{}}}],["dwxsiz",{"_index":7272,"title":{},"body":{"1015833":{}}}],["dwycountç",{"_index":7275,"title":{},"body":{"1015833":{}}}],["dwysiz",{"_index":7273,"title":{},"body":{"1015833":{}}}],["dx",{"_index":5162,"title":{},"body":{"1015825":{}}}],["d位",{"_index":9449,"title":{},"body":{"1015831":{}}}],["d位表示当前是否被写入过，为1表示写入过，为0则表示没有写入过",{"_index":9450,"title":{},"body":{"1015831":{}}}],["d类",{"_index":9655,"title":{},"body":{"1015818":{}}}],["e*",{"_index":10440,"title":{},"body":{"1015818":{}}}],["e1",{"_index":6914,"title":{},"body":{"2949228":{}}}],["e2",{"_index":6916,"title":{},"body":{"2949228":{}}}],["e7",{"_index":6505,"title":{},"body":{"1015828":{}}}],["e8",{"_index":6397,"title":{},"body":{"1015828":{}}}],["e883",{"_index":4250,"title":{},"body":{"2949166":{}}}],["e9",{"_index":6503,"title":{},"body":{"1015828":{}}}],["e_",{"_index":6056,"title":{},"body":{"1015828":{}}}],["e_c",{"_index":6063,"title":{},"body":{"1015828":{}}}],["e_cblp",{"_index":6044,"title":{},"body":{"1015828":{}}}],["e_cp",{"_index":6046,"title":{},"body":{"1015828":{}}}],["e_cparhdr",{"_index":6049,"title":{},"body":{"1015828":{}}}],["e_crlc",{"_index":6047,"title":{},"body":{"1015828":{}}}],["e_csu",{"_index":6059,"title":{},"body":{"1015828":{}}}],["e_ev",{"_index":7575,"title":{},"body":{"1015833":{}}}],["e_invalidargı",{"_index":2710,"title":{},"body":{"1015823":{}}}],["e_ip",{"_index":6061,"title":{},"body":{"1015828":{}}}],["e_lfanew",{"_index":6076,"title":{},"body":{"1015828":{}}}],["e_lfarlç",{"_index":6065,"title":{},"body":{"1015828":{}}}],["e_magı",{"_index":6042,"title":{},"body":{"1015828":{}}}],["e_maxalloç",{"_index":6054,"title":{},"body":{"1015828":{}}}],["e_minalloç",{"_index":6051,"title":{},"body":{"1015828":{}}}],["e_nointerfaç",{"_index":2664,"title":{},"body":{"1015823":{}}}],["e_notimpl",{"_index":2868,"title":{},"body":{"1015823":{}}}],["e_notinterfaç",{"_index":2870,"title":{},"body":{"1015823":{}}}],["e_o",{"_index":6071,"title":{},"body":{"1015828":{}}}],["e_oeminf",{"_index":6074,"title":{},"body":{"1015828":{}}}],["e_outofme",{"_index":2866,"title":{},"body":{"1015823":{}}}],["e_ov",{"_index":6067,"title":{},"body":{"1015828":{}}}],["e_res2[10",{"_index":6075,"title":{},"body":{"1015828":{}}}],["e_res[4",{"_index":6069,"title":{},"body":{"1015828":{}}}],["e_sp",{"_index":6058,"title":{},"body":{"1015828":{}}}],["e_unexpeç",{"_index":2730,"title":{},"body":{"1015823":{}}}],["easç",{"_index":1690,"title":{},"body":{"1015843":{}}}],["eax",{"_index":2441,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015833":{},"1015846":{},"1015847":{},"1703937":{},"1933380":{},"2949166":{}}}],["eax,0cccccccç",{"_index":1394,"title":{},"body":{"1015843":{}}}],["eax,0fffeffffh",{"_index":5889,"title":{},"body":{"1015847":{}}}],["eax,0x10",{"_index":4512,"title":{},"body":{"2949166":{}}}],["eax,by",{"_index":1721,"title":{},"body":{"1015843":{}}}],["eax,dw",{"_index":1400,"title":{},"body":{"1015843":{}}}],["eax,ecx",{"_index":1725,"title":{},"body":{"1015825":{},"1015843":{}}}],["eax,edx",{"_index":5371,"title":{},"body":{"1015825":{}}}],["eax地址对应的值给到edx（eax相当于当前对象的第一个成员",{"_index":3589,"title":{},"body":{"1015840":{}}}],["eax的值加1，此时eax的值就与[ecx]的值一致了，它的作用就是用于函数返回值",{"_index":6652,"title":{},"body":{"1933380":{}}}],["eax，举一反三，51就是push",{"_index":11827,"title":{},"body":{"1015817":{}}}],["eax，这就没有任何意义了，所以intel给其定义了一个新的指令叫nop，这个我们称之为无效指令，也就表示这个指令是没有任何意义的",{"_index":11905,"title":{},"body":{"1015817":{}}}],["eb",{"_index":11999,"title":{},"body":{"1015817":{}}}],["ebp",{"_index":1377,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015843":{},"1015847":{},"1703937":{}}}],["ebp+0ch",{"_index":1403,"title":{},"body":{"1015843":{}}}],["ebp+0x10",{"_index":2443,"title":{},"body":{"1015846":{}}}],["ebp+0x14",{"_index":2442,"title":{},"body":{"1015846":{}}}],["ebp+0x8",{"_index":2445,"title":{},"body":{"1015846":{}}}],["ebp+0xc",{"_index":2444,"title":{},"body":{"1015846":{}}}],["ebp+8",{"_index":1401,"title":{},"body":{"1015843":{}}}],["ebp+8地址对应的值给到eax（ebp+8",{"_index":3586,"title":{},"body":{"1015840":{}}}],["ebp+dis8",{"_index":12043,"title":{},"body":{"1015817":{}}}],["ebp,esp",{"_index":1379,"title":{},"body":{"1015843":{}}}],["ebp寻址",{"_index":5396,"title":{},"body":{"1015825":{}}}],["ebp（堆栈遵循先入后出），而后就是恢复堆栈到函数执行之前的样子，将esp下降到ebp的位置，而后再pop",{"_index":1447,"title":{},"body":{"1015843":{}}}],["ebp，还原栈底，最后ret也就是将当前栈顶的值赋给eip，然后让栈顶加4（注：这里之前使用过的数据都不会清空，如果程序运行时敏感数据存储在堆栈内则会被黑客恶意利用），但此时结束了吗？并没有，我们f10继续跟进",{"_index":1448,"title":{},"body":{"1015843":{}}}],["ebp，这个ebp的宽度是32位的，这里的宽度之所以是32位是因为当前cpu的模式是32位的，想要知道当前cpu模式就需要涉及段寄存器的知识，这里我们简单了解下（后续课程深入了解），在段寄存器cs中有一个属性位称之为db位，当db位为1的时候当前cpu处于32位模式，为0的时候就表示当前cpu处于16位模式，所以在这里是32位的模式操作数也就是32为宽度",{"_index":11810,"title":{},"body":{"1015817":{}}}],["ebp，这句指令没有出现esp却修改了esp的值，所以我们就可就称这种指令为隐式栈访问指令",{"_index":9058,"title":{},"body":{"1015831":{}}}],["ebx",{"_index":1383,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015843":{},"1703937":{}}}],["ecx",{"_index":4364,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015833":{},"1703937":{},"2949166":{}}}],["ecx!=0",{"_index":11964,"title":{},"body":{"1015817":{}}}],["ecx*2",{"_index":12048,"title":{},"body":{"1015817":{}}}],["ecx,10h",{"_index":1392,"title":{},"body":{"1015843":{}}}],["ecx,ecx",{"_index":4511,"title":{},"body":{"2949166":{}}}],["ecx,fw",{"_index":9015,"title":{},"body":{"1015831":{}}}],["ecx,w",{"_index":1723,"title":{},"body":{"1015843":{}}}],["ecx...，图中的rax表示着这里可以是64位的rax（64位模式下才有）、32位的eax、16位的ax，而eax则表示这里可以是32位的eax、16位的ax（默认取决于你的cpu运行模式",{"_index":11828,"title":{},"body":{"1015817":{}}}],["ecx/edx",{"_index":2301,"title":{},"body":{"1015843":{}}}],["ecx这个指令长度就是2），二是通过exceptioninfo.contextrecord.ecx来修改除数，修复异常的代码",{"_index":4348,"title":{},"body":{"2949166":{}}}],["ed",{"_index":1084,"title":{},"body":{"1015817":{},"1015822":{},"1015825":{},"1015831":{},"1015843":{},"1015847":{},"1703937":{}}}],["edi,[ebp",{"_index":1389,"title":{},"body":{"1015843":{}}}],["edit",{"_index":6115,"title":{},"body":{"1015828":{}}}],["editor在文件末尾插入字节（这样也就不会打乱其他结构的偏移",{"_index":6374,"title":{},"body":{"1015828":{}}}],["editor打开文件",{"_index":6006,"title":{},"body":{"1015828":{}}}],["editor这种编辑器，单行都是16字节",{"_index":6010,"title":{},"body":{"1015828":{}}}],["editor），然后找到一个pe文件，用该工具打开pe文件，在文件的开始位置有一个0x5a4d(十进制：mz)，接着在0x003c位置向后有一个0x100，接着我们再去寻找0x100位置就会出现一个0x4550(十进制：pe)，那么当你用这个方法可以顺利的走通整个流程找到pe，就表示这是一个pe文件，同样这也是一个pe指纹",{"_index":5985,"title":{},"body":{"1015828":{}}}],["edit控件",{"_index":1115,"title":{},"body":{"1015822":{}}}],["edit控件就是一个编辑框，与其他控件一样你可以通过properties去修改样式",{"_index":1116,"title":{},"body":{"1015822":{}}}],["edi所在那行的地址下断点，那么我们可以直接跳过这行调用调用下一行，实际上这段汇编的核心在于我标记的部分，准确一点的说就是call指令哪一行，我们可以右键follo跟进",{"_index":2327,"title":{},"body":{"1015843":{}}}],["edi鎸囧畾鐨勫唴瀛樺湴鍧",{"_index":5306,"title":{},"body":{"1015825":{}}}],["edi鎸囧畾鐨勫唴瀛樺湴鍧�锛孍si鎸囧畾鐨勫唴瀛樺湴鍧",{"_index":5288,"title":{},"body":{"1015825":{}}}],["edx",{"_index":2450,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015846":{},"1703937":{},"2949166":{}}}],["edx,edx",{"_index":4510,"title":{},"body":{"2949166":{}}}],["ef",{"_index":12053,"title":{},"body":{"1015817":{}}}],["eflagı",{"_index":5430,"title":{},"body":{"1015825":{},"1015831":{}}}],["eip",{"_index":4362,"title":{},"body":{"1015831":{},"2949166":{}}}],["eip也是寄存器，但它不叫通用寄存器，它里面存放的值是cpu下次要执行的指令地址；当我们想去修改它的值就不能使用修改通用寄存器那些指令了，修改eip有其特有的指令，接下来让我们来了解一下吧",{"_index":5350,"title":{},"body":{"1015825":{}}}],["eip出栈",{"_index":11985,"title":{},"body":{"1015817":{}}}],["eip出栈后，进行",{"_index":11989,"title":{},"body":{"1015817":{}}}],["eip锛屼笅涓�娆℃墽琛屼唬鐮佺殑浣嶇疆锛屽繀椤昏璧嬪",{"_index":9323,"title":{},"body":{"1015831":{}}}],["eip锛屼笅涓�娆℃墽琛屼唬鐮佺殑浣嶇疆锛屽繀椤昏璧嬪�硷紝鍦ㄤ唬鐮佷腑灏辨槸getvalue鍑芥暟鐨勫湴鍧",{"_index":9349,"title":{},"body":{"1015831":{}}}],["ellip",{"_index":712,"title":{},"body":{"1015822":{}}}],["ellipse函数用来画圆，之前也使用到过但是没有仔细讲解其细节，首先我们看下它可以接受的传参",{"_index":751,"title":{},"body":{"1015822":{}}}],["ellipse函数画圆",{"_index":750,"title":{},"body":{"1015822":{}}}],["en",{"_index":7687,"title":{},"body":{"1015814":{},"1015833":{}}}],["enable）标志。pe为1时为保护模式，pe为0时为实地址模式，这个标志仅开启段级保护，而并没有启用分页机制保护。若要启用分页机制保护，那么pe和pg标志都要设值",{"_index":9602,"title":{},"body":{"1015831":{}}}],["end_com_map",{"_index":3156,"title":{},"body":{"1015823":{}}}],["end_message_map",{"_index":360,"title":{},"body":{"1015822":{}}}],["end_message_map鏄鎷兼帴鍦ㄤ竴鍧楃殑",{"_index":394,"title":{},"body":{"1015822":{}}}],["endif",{"_index":109,"title":{},"body":{"1015818":{},"1015822":{},"1015843":{},"1015847":{},"3440655":{}}}],["endingvpn：当前节点对应的内存的线程地址结束位置（以页为单位，即4kb），因此本例中实际上对应的结束位置为0x19f0",{"_index":6701,"title":{},"body":{"2949228":{}}}],["endl",{"_index":2788,"title":{},"body":{"1015814":{},"1015823":{}}}],["entercriticalsection(&ç",{"_index":7510,"title":{},"body":{"1015833":{}}}],["entirefr",{"_index":6922,"title":{},"body":{"2949228":{}}}],["entr",{"_index":415,"title":{},"body":{"1015822":{},"1015828":{},"1015831":{},"1015833":{}}}],["entrypoint，也就是原始入口点，没有加壳以及其他修改的情况下，addressofentrypoint就是oep，但是如果存在修改/加壳的情况，addressofentrypoint只能称为是ep，因为不是原始入口点，你需要自己去寻找了）这里修改也按照之前得出的指令地址去除imagebase的值进行修改",{"_index":6403,"title":{},"body":{"1015828":{}}}],["entry，页目录指针表项，同样是8字节",{"_index":9520,"title":{},"body":{"1015831":{}}}],["enu",{"_index":424,"title":{},"body":{"1015822":{},"3440657":{}}}],["envir",{"_index":7224,"title":{},"body":{"1015833":{},"1703937":{},"2424869":{}}}],["eprocess（进程结构体）中的0xc4偏移位成员objecttable（_handle_table）中的0x0偏移位成员tablecode就是句柄表",{"_index":8690,"title":{},"body":{"1933378":{}}}],["eq",{"_index":9132,"title":{},"body":{"1015831":{}}}],["erase(",{"_index":11370,"title":{},"body":{"1015814":{}}}],["err",{"_index":2786,"title":{},"body":{"1015818":{},"1015823":{},"1015833":{},"1015847":{},"3440655":{},"3440657":{}}}],["errbuf",{"_index":10123,"title":{},"body":{"1015818":{}}}],["errbuf[pcap_errbuf_",{"_index":10129,"title":{},"body":{"1015818":{}}}],["errc",{"_index":5739,"title":{},"body":{"1015847":{}}}],["erref/596a1078",{"_index":4249,"title":{},"body":{"2949166":{}}}],["error!\\",{"_index":10534,"title":{},"body":{"1015818":{}}}],["error:%d\\",{"_index":4763,"title":{},"body":{"3440657":{}}}],["error_already_ex",{"_index":7558,"title":{},"body":{"1015833":{}}}],["error_suç",{"_index":2729,"title":{},"body":{"1015823":{}}}],["erx",{"_index":11886,"title":{},"body":{"1015817":{}}}],["es",{"_index":1385,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015843":{},"1703937":{}}}],["es(硬编码：26",{"_index":11802,"title":{},"body":{"1015817":{}}}],["es:[",{"_index":5290,"title":{},"body":{"1015825":{},"1015847":{}}}],["es_multil",{"_index":7850,"title":{},"body":{"1015833":{}}}],["esp",{"_index":2447,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015846":{},"1703937":{}}}],["esp+0x10",{"_index":9242,"title":{},"body":{"1015831":{}}}],["esp+0xc",{"_index":9241,"title":{},"body":{"1015831":{}}}],["esp+8",{"_index":9240,"title":{},"body":{"1015831":{}}}],["esp,40h",{"_index":1381,"title":{},"body":{"1015843":{}}}],["esp,44h",{"_index":1506,"title":{},"body":{"1015843":{}}}],["esp,ebp",{"_index":1409,"title":{},"body":{"1015843":{}}}],["esp0",{"_index":9314,"title":{},"body":{"1015831":{}}}],["esp1",{"_index":9316,"title":{},"body":{"1015831":{}}}],["esp2",{"_index":9318,"title":{},"body":{"1015831":{}}}],["esp寻址",{"_index":5390,"title":{},"body":{"1015825":{}}}],["esp寻址弊端：当函数比较复杂时，使用的时候要使用很多寄存器，需要把寄存器的值保存在堆栈中备份，寻址计算会复杂一些",{"_index":5395,"title":{},"body":{"1015825":{}}}],["esp锛屼换鍔″垏鎹㈡椂涔熼渶瑕佸垏鎹㈠爢鏍堬紝鎵�浠ュ湪浠ｇ爜涓垜浠彲浠ュ０鏄庝竴涓暟缁勶紝灏嗗叾鍦板潃浣滀负涓�鍧楀爢鏍",{"_index":9379,"title":{},"body":{"1015831":{}}}],["esp锛屼换鍔″垏鎹㈡椂涔熼渶瑕佸垏鎹㈡爤锛屾墍浠ュ湪浠ｇ爜涓垜浠彲浠ュ０鏄庝竴涓暟缁勶紝灏嗗叾鍦板潃浣滀负涓�鍧楁爤",{"_index":9324,"title":{},"body":{"1015831":{}}}],["establisherfr",{"_index":4392,"title":{},"body":{"2949166":{}}}],["ev",{"_index":12001,"title":{},"body":{"1015817":{}}}],["eve",{"_index":3862,"title":{},"body":{"1015833":{},"2949228":{},"3440655":{}}}],["eventl",{"_index":4551,"title":{},"body":{"3440657":{}}}],["eventp",{"_index":7628,"title":{},"body":{"1015833":{}}}],["eventspr",{"_index":4548,"title":{},"body":{"3440657":{}}}],["ex",{"_index":2657,"title":{},"body":{"1015823":{},"1015828":{},"1015833":{},"1015847":{},"1703937":{},"3440655":{}}}],["exallocatepol",{"_index":5548,"title":{},"body":{"1015847":{}}}],["exallocatepoolwithtag(nonpagedpol",{"_index":3938,"title":{},"body":{"3440655":{}}}],["excep",{"_index":4403,"title":{},"body":{"1015828":{},"2949166":{},"3440657":{}}}],["exceptf",{"_index":10026,"title":{},"body":{"1015818":{}}}],["exception.handl",{"_index":4408,"title":{},"body":{"2949166":{}}}],["exception.nex",{"_index":4407,"title":{},"body":{"2949166":{}}}],["exception_continue_exeç",{"_index":4324,"title":{},"body":{"1015847":{},"2949166":{}}}],["exception_continue_searç",{"_index":4322,"title":{},"body":{"1015847":{},"2949166":{}}}],["exception_debug_ev",{"_index":4650,"title":{},"body":{"3440657":{}}}],["exception_debug_inf",{"_index":4682,"title":{},"body":{"3440657":{}}}],["exception_disp",{"_index":4389,"title":{},"body":{"2949166":{}}}],["exception_execute_handl",{"_index":4417,"title":{},"body":{"1015847":{},"2949166":{}}}],["exception_reç",{"_index":4245,"title":{},"body":{"2949166":{},"3440657":{}}}],["exceptionaddr",{"_index":4239,"title":{},"body":{"2949166":{},"3440657":{}}}],["exceptioncode成员表示异常的类型，类型有很多种，如下图所示，status_access_violation（0xc0000005，表示访问违例）这就是内存断点引发的异常类型",{"_index":4885,"title":{},"body":{"3440657":{}}}],["exceptioncontinueexeç",{"_index":4399,"title":{},"body":{"2949166":{}}}],["exceptioncontinuesearç",{"_index":4400,"title":{},"body":{"2949166":{}}}],["exceptionflagı",{"_index":4235,"title":{},"body":{"2949166":{},"3440657":{}}}],["exceptionfr",{"_index":4273,"title":{},"body":{"2949166":{}}}],["exceptioninf",{"_index":4315,"title":{},"body":{"2949166":{}}}],["exceptioninformation[exception_maximum_p",{"_index":4243,"title":{},"body":{"2949166":{},"3440657":{}}}],["exceptionl",{"_index":11055,"title":{},"body":{"1703937":{}}}],["exceptionlist，接着再将当前的exceptionlist设为",{"_index":2534,"title":{},"body":{"1015846":{}}}],["exceptionp",{"_index":10987,"title":{},"body":{"1703937":{}}}],["exceptionrecord.exceptionaddr",{"_index":4835,"title":{},"body":{"3440657":{}}}],["exceptionrecord.exceptioninformation[0",{"_index":4902,"title":{},"body":{"3440657":{}}}],["exceptionrecord.exceptioninformation[1",{"_index":4903,"title":{},"body":{"3440657":{}}}],["exceptionrecord.exceptionç",{"_index":4888,"title":{},"body":{"3440657":{}}}],["exceptionreç",{"_index":4237,"title":{},"body":{"2949166":{},"3440657":{}}}],["exceptionç",{"_index":4233,"title":{},"body":{"2949166":{},"3440657":{}}}],["exclu",{"_index":111,"title":{},"body":{"1015822":{}}}],["excp",{"_index":4507,"title":{},"body":{"2949166":{}}}],["execsql",{"_index":2614,"title":{},"body":{"1015823":{}}}],["exection。它的设计是因为大多数漏洞产生的原因是因为数据被当成指令去执行了，为了防范这一问题，intel做了硬件保护，做了一个不可执行位。当xd位为1时，你的软件存在溢出漏洞也没关系，因为即使你的eip跳到了危险的\"数据区\"，也是不可执行的",{"_index":9544,"title":{},"body":{"1015831":{}}}],["execu",{"_index":6319,"title":{},"body":{"1015828":{},"1015833":{}}}],["executable）文件结构；linux平台下的可执行文件格式，我们称之为elf（exeç",{"_index":5973,"title":{},"body":{"1015828":{}}}],["executable，其中文意思就是便携的可执行，而elf的全称exeç",{"_index":5976,"title":{},"body":{"1015828":{}}}],["execute=op",{"_index":8973,"title":{},"body":{"1015831":{}}}],["exfreepol",{"_index":5554,"title":{},"body":{"1015847":{}}}],["exis",{"_index":8175,"title":{},"body":{"1015833":{}}}],["exit",{"_index":10967,"title":{},"body":{"1703937":{}}}],["exit(0",{"_index":5740,"title":{},"body":{"1015847":{}}}],["exit_process_debug_ev",{"_index":4658,"title":{},"body":{"3440657":{}}}],["exit_process_debug_inf",{"_index":4689,"title":{},"body":{"3440657":{}}}],["exit_thread_debug_ev",{"_index":4656,"title":{},"body":{"3440657":{}}}],["exit_thread_debug_inf",{"_index":4687,"title":{},"body":{"3440657":{}}}],["exitproç",{"_index":4690,"title":{},"body":{"3440657":{}}}],["exitthr",{"_index":4688,"title":{},"body":{"3440657":{}}}],["exitç",{"_index":3838,"title":{},"body":{"1015833":{},"3440655":{}}}],["exp",{"_index":2759,"title":{},"body":{"1015818":{},"1015823":{},"1015828":{},"1015833":{}}}],["ext",{"_index":6304,"title":{},"body":{"1015828":{}}}],["extern的方式",{"_index":8316,"title":{},"body":{"1015833":{}}}],["extr",{"_index":1066,"title":{},"body":{"1015822":{},"1015828":{}}}],["e类",{"_index":9658,"title":{},"body":{"1015818":{}}}],["e：寄存器/内存",{"_index":12005,"title":{},"body":{"1015817":{}}}],["f",{"_index":1666,"title":{},"body":{"1015818":{},"1015825":{},"1015831":{},"1015843":{}}}],["f(p,q",{"_index":10436,"title":{},"body":{"1015818":{}}}],["f5",{"_index":1418,"title":{},"body":{"1015828":{},"1015843":{}}}],["f7c",{"_index":9431,"title":{},"body":{"1015831":{}}}],["f8",{"_index":6398,"title":{},"body":{"1015828":{}}}],["facility_",{"_index":2854,"title":{},"body":{"1015823":{}}}],["facility_control",{"_index":2853,"title":{},"body":{"1015823":{}}}],["facility_dispatç",{"_index":2856,"title":{},"body":{"1015823":{}}}],["facility_itf",{"_index":2855,"title":{},"body":{"1015823":{}}}],["facility_rpç",{"_index":2850,"title":{},"body":{"1015823":{}}}],["facility_ssp",{"_index":2851,"title":{},"body":{"1015823":{}}}],["facility_storagı",{"_index":2849,"title":{},"body":{"1015823":{}}}],["facility_win32",{"_index":2852,"title":{},"body":{"1015823":{}}}],["facility_window",{"_index":2848,"title":{},"body":{"1015823":{}}}],["facility_ç",{"_index":2857,"title":{},"body":{"1015823":{}}}],["fact",{"_index":2794,"title":{},"body":{"1015818":{},"1015823":{}}}],["fail",{"_index":8239,"title":{},"body":{"1015833":{}}}],["failed(hr",{"_index":2784,"title":{},"body":{"1015823":{}}}],["failed(pdp",{"_index":2698,"title":{},"body":{"1015823":{}}}],["failed(pfact",{"_index":2709,"title":{},"body":{"1015823":{}}}],["fal",{"_index":2341,"title":{},"body":{"1015823":{},"1015833":{},"1015843":{},"1015847":{},"2424889":{},"2949228":{},"3440655":{},"3440657":{}}}],["false鍒欏鍒朵綅缃殑鏂囦欢宸茬粡瀛樺湪灏辫鐩栵紝true鍙嶄箣",{"_index":8179,"title":{},"body":{"1015833":{}}}],["far",{"_index":4037,"title":{},"body":{"1015817":{},"1015818":{},"1015831":{},"3440655":{}}}],["far/jmp",{"_index":9307,"title":{},"body":{"1015831":{}}}],["farproç",{"_index":6523,"title":{},"body":{"1015828":{}}}],["far只能跳转到同级非一致代码段，但cal",{"_index":9187,"title":{},"body":{"1015831":{}}}],["far可以通过调用门提权，提升cpl的权限，这样就可以调用非同级段",{"_index":9188,"title":{},"body":{"1015831":{}}}],["far指令修改tr寄存器",{"_index":9308,"title":{},"body":{"1015831":{}}}],["far指令实现段间的跳转，如果要实现跨段的调用就必须要学习cal",{"_index":9154,"title":{},"body":{"1015831":{}}}],["far指令是如何执行的",{"_index":9106,"title":{},"body":{"1015831":{}}}],["far指令格式",{"_index":9109,"title":{},"body":{"1015831":{}}}],["far指令的执行流程了，我们可以来实际实验一下",{"_index":9126,"title":{},"body":{"1015831":{}}}],["far指令，也就是长调用。cal",{"_index":9155,"title":{},"body":{"1015831":{}}}],["far指令，你可以称之为长跳转，如下就是jmp",{"_index":9108,"title":{},"body":{"1015831":{}}}],["far指令，指令格式如下",{"_index":9171,"title":{},"body":{"1015831":{}}}],["far指令，首先是段选择子部分，我们要让cpu根据段选择子的index位找到8003f048这个地址的段描述符，又知道cpu根据index位的值乘以8再加上gdt的基地址，以及满足权限检查要求cpl==dpl&&rpl<=dpl，因此段选择子为：00",{"_index":9136,"title":{},"body":{"1015831":{}}}],["far比jmp",{"_index":9156,"title":{},"body":{"1015831":{}}}],["far要复杂，jmp并不影响栈，但call会影响",{"_index":9157,"title":{},"body":{"1015831":{}}}],["fast_mutex",{"_index":4549,"title":{},"body":{"3440657":{}}}],["fastcal",{"_index":3932,"title":{},"body":{"2424869":{},"3440655":{}}}],["fastdeteç",{"_index":8974,"title":{},"body":{"1015831":{}}}],["fastiodispatç",{"_index":5617,"title":{},"body":{"1015847":{}}}],["fath",{"_index":3401,"title":{},"body":{"1015840":{}}}],["fd_array[fd_",{"_index":10044,"title":{},"body":{"1015818":{}}}],["fd_clr",{"_index":10057,"title":{},"body":{"1015818":{}}}],["fd_clr(socketl",{"_index":10059,"title":{},"body":{"1015818":{}}}],["fd_clr(tsoc",{"_index":10093,"title":{},"body":{"1015818":{}}}],["fd_coun",{"_index":10042,"title":{},"body":{"1015818":{}}}],["fd_is",{"_index":10061,"title":{},"body":{"1015818":{}}}],["fd_isset(socketl",{"_index":10063,"title":{},"body":{"1015818":{}}}],["fd_set",{"_index":10021,"title":{},"body":{"1015818":{}}}],["fd_set(asoç",{"_index":10082,"title":{},"body":{"1015818":{}}}],["fd_set(socketl",{"_index":10055,"title":{},"body":{"1015818":{}}}],["fd_set(ssoç",{"_index":10067,"title":{},"body":{"1015818":{}}}],["fd_setsiz",{"_index":10040,"title":{},"body":{"1015818":{}}}],["fd_set是用来装socket的结构体，默认情况下，它可以装64个soç",{"_index":10039,"title":{},"body":{"1015818":{}}}],["fd_set结构体",{"_index":10038,"title":{},"body":{"1015818":{}}}],["fd_zer",{"_index":10051,"title":{},"body":{"1015818":{}}}],["fd_zero(&clientsoç",{"_index":10053,"title":{},"body":{"1015818":{}}}],["fd_zero(&fdsoç",{"_index":10066,"title":{},"body":{"1015818":{}}}],["fdsoc",{"_index":10065,"title":{},"body":{"1015818":{}}}],["fdwre",{"_index":8383,"title":{},"body":{"1015833":{}}}],["ff8",{"_index":9407,"title":{},"body":{"1015831":{}}}],["ffc093df`f0000001",{"_index":2531,"title":{},"body":{"1015846":{}}}],["fffffff",{"_index":1665,"title":{},"body":{"1015843":{}}}],["fil",{"_index":93,"title":{},"body":{"1015822":{},"1015828":{},"1015833":{},"1015843":{}}}],["file_any_aç",{"_index":5756,"title":{},"body":{"1015847":{}}}],["file_attribute_h",{"_index":8124,"title":{},"body":{"1015833":{}}}],["file_attribute_n",{"_index":5738,"title":{},"body":{"1015833":{},"1015847":{},"2949228":{}}}],["file_begi",{"_index":8190,"title":{},"body":{"1015833":{}}}],["file_device_secure_op",{"_index":5652,"title":{},"body":{"1015847":{}}}],["file_device_unknow",{"_index":5650,"title":{},"body":{"1015847":{}}}],["file_map_all_aç",{"_index":6808,"title":{},"body":{"1015833":{},"2949228":{}}}],["file_map_cop",{"_index":6810,"title":{},"body":{"1015833":{},"2949228":{}}}],["file_map_execu",{"_index":6812,"title":{},"body":{"2949228":{}}}],["file_map_r",{"_index":6814,"title":{},"body":{"2949228":{}}}],["file_map_wr",{"_index":6816,"title":{},"body":{"2949228":{}}}],["file_share_r",{"_index":6852,"title":{},"body":{"2949228":{}}}],["fileal",{"_index":6145,"title":{},"body":{"1015828":{}}}],["fileh",{"_index":6088,"title":{},"body":{"1015828":{}}}],["files\\microsof",{"_index":7805,"title":{},"body":{"1015833":{}}}],["fillrect(lpcreç",{"_index":775,"title":{},"body":{"1015822":{}}}],["fillrect函数指定画刷填充矩形",{"_index":772,"title":{},"body":{"1015822":{}}}],["fillrect函数的语法格式如下所示",{"_index":774,"title":{},"body":{"1015822":{}}}],["fillreç",{"_index":716,"title":{},"body":{"1015822":{}}}],["filter_valu",{"_index":5538,"title":{},"body":{"1015847":{}}}],["fin",{"_index":11480,"title":{},"body":{"1015814":{}}}],["find(v.begi",{"_index":11623,"title":{},"body":{"1015814":{}}}],["find_if(v.begi",{"_index":11630,"title":{},"body":{"1015814":{}}}],["find_if锛屾牴鎹潯浠跺鎵惧厓绱",{"_index":11626,"title":{},"body":{"1015814":{}}}],["find_if，条件查找容器元素",{"_index":11615,"title":{},"body":{"1015814":{}}}],["findfirstfil",{"_index":8197,"title":{},"body":{"1015833":{}}}],["findfirstfile(text(\"c:\\\\*.tx",{"_index":8211,"title":{},"body":{"1015833":{}}}],["findfunc(vector<",{"_index":11621,"title":{},"body":{"1015814":{}}}],["findiffunc(vector<",{"_index":11629,"title":{},"body":{"1015814":{}}}],["findnextfil",{"_index":8202,"title":{},"body":{"1015833":{}}}],["findnextfile(hfil",{"_index":8218,"title":{},"body":{"1015833":{}}}],["findresource(n",{"_index":1297,"title":{},"body":{"1015822":{}}}],["findstr",{"_index":1170,"title":{},"body":{"1015822":{}}}],["findwindow(",{"_index":8692,"title":{},"body":{"1933378":{}}}],["find锛屾寚瀹氱殑鍐呭瀵绘壘鍏冪礌",{"_index":11620,"title":{},"body":{"1015814":{}}}],["find，查找容器元素",{"_index":11614,"title":{},"body":{"1015814":{}}}],["finfol",{"_index":8149,"title":{},"body":{"1015833":{}}}],["fir",{"_index":7736,"title":{},"body":{"1015814":{},"1015833":{}}}],["first,",{"_index":11373,"title":{},"body":{"1015814":{}}}],["first/af",{"_index":8838,"title":{},"body":{"1015850":{}}}],["firstchanç",{"_index":4281,"title":{},"body":{"2949166":{}}}],["firstfil",{"_index":8208,"title":{},"body":{"1015833":{}}}],["firstfile.cfil",{"_index":8214,"title":{},"body":{"1015833":{}}}],["firstfile.nfilesizelow",{"_index":8215,"title":{},"body":{"1015833":{}}}],["firsthandl",{"_index":4328,"title":{},"body":{"2949166":{}}}],["firstth",{"_index":6546,"title":{},"body":{"1015828":{}}}],["fix",{"_index":3881,"title":{},"body":{"3440655":{}}}],["flag",{"_index":3897,"title":{},"body":{"1015818":{},"1015833":{},"1015847":{},"1703937":{},"3440655":{},"3440657":{}}}],["flags）指令：用于将ah寄存器送入标志寄存器",{"_index":5427,"title":{},"body":{"1015825":{}}}],["flags）指令：用于将标志寄存器的低八位送入ah，即将标志寄存器flags中的sf、zf、af、pf、cf五个标志位分别传送到ah的对应位（八位中有三位是无效的",{"_index":5425,"title":{},"body":{"1015825":{}}}],["flags）指令：用于将标志寄存器送入栈",{"_index":5429,"title":{},"body":{"1015825":{}}}],["flags）指令：用于将标志寄存器送出栈",{"_index":5432,"title":{},"body":{"1015825":{}}}],["flallocationtyp",{"_index":6740,"title":{},"body":{"1015833":{},"2949228":{}}}],["flallocationtype：分配的类型，有两种类型",{"_index":6746,"title":{},"body":{"2949228":{}}}],["flen",{"_index":10495,"title":{},"body":{"1015818":{}}}],["fli",{"_index":6900,"title":{},"body":{"1015833":{},"2949228":{}}}],["flnewproteç",{"_index":4859,"title":{},"body":{"3440657":{}}}],["flo",{"_index":1571,"title":{},"body":{"1015818":{},"1015823":{},"1015843":{},"1015850":{}}}],["float和double在存储的方式上都遵从ieee编码规范",{"_index":1580,"title":{},"body":{"1015843":{}}}],["float和double的精度是由尾数的位数来决定的",{"_index":1635,"title":{},"body":{"1015843":{}}}],["float类型",{"_index":8776,"title":{},"body":{"1015850":{}}}],["floc",{"_index":2654,"title":{},"body":{"1015823":{}}}],["flong",{"_index":3818,"title":{},"body":{"3440655":{}}}],["flprotect：保护属性，例如page_readwrite、page_readonl",{"_index":6749,"title":{},"body":{"2949228":{}}}],["flprotect：指定保护属性，确定其他进程对共享内存的访问权限，常见的属性有page_readonly、page_readwrite等",{"_index":6800,"title":{},"body":{"2949228":{}}}],["flproteç",{"_index":6741,"title":{},"body":{"1015833":{},"2949228":{}}}],["fltval",{"_index":2961,"title":{},"body":{"1015823":{}}}],["flushviewoffil",{"_index":8260,"title":{},"body":{"1015833":{}}}],["flushviewoffile(((lpdword)lpaddr",{"_index":8265,"title":{},"body":{"1015833":{}}}],["fnaddvectoredexceptionhandl",{"_index":4353,"title":{},"body":{"2949166":{}}}],["fnaddvectoredexceptionhandler)(ulongu",{"_index":4352,"title":{},"body":{"2949166":{}}}],["fnaddvectoredexceptionhandler)::getprocaddress(hmodule,\"addvectoredexceptionhandl",{"_index":4370,"title":{},"body":{"2949166":{}}}],["fnpenstyl",{"_index":7673,"title":{},"body":{"1015833":{}}}],["fon",{"_index":859,"title":{},"body":{"1015822":{}}}],["font.createpointfont(20",{"_index":860,"title":{},"body":{"1015822":{}}}],["font.createpointfontindirect(&lf",{"_index":879,"title":{},"body":{"1015822":{}}}],["for(",{"_index":2356,"title":{},"body":{"1015818":{},"1015833":{},"1015843":{}}}],["for(;0",{"_index":1892,"title":{},"body":{"1015843":{}}}],["for(i=0,j=0,z=0;i<10;i++,j++,z",{"_index":1895,"title":{},"body":{"1015843":{}}}],["for(t1();t2();t3",{"_index":1888,"title":{},"body":{"1015843":{}}}],["for(琛ㄨ揪寮�1;琛ㄨ揪寮�2;琛ㄨ揪寮�3",{"_index":1874,"title":{},"body":{"1015843":{}}}],["for_each(l.begi",{"_index":11663,"title":{},"body":{"1015814":{}}}],["for_each(s.begi",{"_index":11779,"title":{},"body":{"1015814":{}}}],["for_each(s4.begi",{"_index":11450,"title":{},"body":{"1015814":{}}}],["for_each(v.begi",{"_index":11674,"title":{},"body":{"1015814":{}}}],["format就是可执行可链接格式，那么两者之间的差距就出现了，windows平台下的pe文件结构是便携的，也就表示其在windows下是通用兼容的，例如你在windows7下的可执行文件也可以在windows8、10系统下运行，而linux则不一样，不同内核编译的可执行文件在不同内核的环境下是无法使用的",{"_index":5977,"title":{},"body":{"1015828":{}}}],["format）文件结构",{"_index":5974,"title":{},"body":{"1015828":{}}}],["forwarderstr",{"_index":6569,"title":{},"body":{"1015828":{}}}],["forwarderç",{"_index":6544,"title":{},"body":{"1015828":{}}}],["for循环语句的执行顺序是1243",{"_index":1876,"title":{},"body":{"1015843":{}}}],["foun",{"_index":5,"title":{},"body":{"1015822":{}}}],["fre",{"_index":5553,"title":{},"body":{"1015847":{}}}],["free(p",{"_index":3474,"title":{},"body":{"1015840":{}}}],["free(pszbuf",{"_index":8194,"title":{},"body":{"1015833":{}}}],["freelibrary(h",{"_index":8354,"title":{},"body":{"1015833":{}}}],["freelibraryandexitthread((hmodule)g_h",{"_index":8502,"title":{},"body":{"1015833":{}}}],["freepagel",{"_index":6985,"title":{},"body":{"2949228":{}}}],["frequ",{"_index":98,"title":{},"body":{"1015822":{}}}],["frien",{"_index":3709,"title":{},"body":{"1015840":{}}}],["froml",{"_index":9953,"title":{},"body":{"1015818":{}}}],["front，返回队列头部的引用，但不移除",{"_index":11559,"title":{},"body":{"1015814":{}}}],["fs(硬编码：64",{"_index":11803,"title":{},"body":{"1015817":{}}}],["fs:[0",{"_index":4404,"title":{},"body":{"2949166":{}}}],["fs:[0x30",{"_index":8561,"title":{},"body":{"1015833":{}}}],["fschangebitsremov",{"_index":3876,"title":{},"body":{"3440655":{}}}],["fsho",{"_index":3852,"title":{},"body":{"3440655":{}}}],["fs寄存器中存储的就是当前正在使用的线程的teb结构体的地址",{"_index":8546,"title":{},"body":{"1015833":{}}}],["fs锛屽垏鍒�0鐜氨鏄�0x30锛�3鐜氨鏄�0x3b",{"_index":9329,"title":{},"body":{"1015831":{}}}],["fti",{"_index":10407,"title":{},"body":{"1015818":{}}}],["fu",{"_index":1937,"title":{},"body":{"1015833":{},"1015843":{}}}],["fun(cobjeç",{"_index":3711,"title":{},"body":{"1015840":{}}}],["func",{"_index":3734,"title":{},"body":{"1015840":{},"1703937":{}}}],["func(gmthreadp",{"_index":11187,"title":{},"body":{"1703937":{}}}],["funcaddr",{"_index":5893,"title":{},"body":{"1015847":{}}}],["funct",{"_index":3221,"title":{},"body":{"1015814":{},"1015823":{},"1015828":{},"1015833":{}}}],["funiç",{"_index":4719,"title":{},"body":{"3440657":{}}}],["fw_bol",{"_index":873,"title":{},"body":{"1015822":{}}}],["fwor",{"_index":9220,"title":{},"body":{"1015831":{}}}],["g",{"_index":8930,"title":{},"body":{"1015818":{},"1015831":{}}}],["g_dwrefcoun",{"_index":2658,"title":{},"body":{"1015823":{}}}],["g_gdb",{"_index":2776,"title":{},"body":{"1015823":{}}}],["g_hdeviç",{"_index":5733,"title":{},"body":{"1015847":{}}}],["g_hmapfil",{"_index":7969,"title":{},"body":{"1015833":{}}}],["g_hmod",{"_index":8494,"title":{},"body":{"1015833":{}}}],["g_lpbuf",{"_index":7970,"title":{},"body":{"1015833":{}}}],["gb",{"_index":12000,"title":{},"body":{"1015817":{}}}],["gb2312或gb2312",{"_index":1695,"title":{},"body":{"1015843":{}}}],["gbk",{"_index":8766,"title":{},"body":{"1015850":{}}}],["gbk_bi",{"_index":8767,"title":{},"body":{"1015850":{}}}],["gcre",{"_index":8626,"title":{},"body":{"1015833":{}}}],["gcreatefil",{"_index":8635,"title":{},"body":{"1015833":{}}}],["gcreatefile.dwcreateapiaddr",{"_index":8662,"title":{},"body":{"1015833":{}}}],["gcreatefile.dwcreationdisp",{"_index":8657,"title":{},"body":{"1015833":{}}}],["gcreatefile.dwdesiredaç",{"_index":8654,"title":{},"body":{"1015833":{}}}],["gcreatefile.dwflagsandattribu",{"_index":8658,"title":{},"body":{"1015833":{}}}],["gcreatefile.dwsh",{"_index":8655,"title":{},"body":{"1015833":{}}}],["gcreatefile.htemplatefil",{"_index":8659,"title":{},"body":{"1015833":{}}}],["gcreatefile.lpfil",{"_index":8664,"title":{},"body":{"1015833":{}}}],["gcreatefile.lpsecurityattrip",{"_index":8656,"title":{},"body":{"1015833":{}}}],["gdi",{"_index":621,"title":{},"body":{"1015822":{},"1015833":{}}}],["gdi32.dl",{"_index":2415,"title":{},"body":{"1015846":{}}}],["gdi32.dll：全称是graph",{"_index":7146,"title":{},"body":{"1015833":{}}}],["gdi图形设备接口：window中负责图形输出的是graph",{"_index":596,"title":{},"body":{"1015822":{}}}],["gdi基础概念和mfc的cdc类",{"_index":589,"title":{},"body":{"1015822":{}}}],["gdi是graph",{"_index":7650,"title":{},"body":{"1015833":{}}}],["gdi的坐标空间",{"_index":652,"title":{},"body":{"1015822":{}}}],["gdi的文本和图形输出函数使用逻辑坐标，而在客户区移动或按下鼠标的鼠标位置是采用设备坐标；在我们没有修改映射模式的时候则逻辑坐标与设备坐标等同",{"_index":684,"title":{},"body":{"1015822":{}}}],["gdi的映射模式",{"_index":628,"title":{},"body":{"1015822":{}}}],["gdi绘图",{"_index":700,"title":{},"body":{"1015822":{}}}],["gdt",{"_index":11071,"title":{},"body":{"1703937":{}}}],["gdtl",{"_index":8988,"title":{},"body":{"1015831":{}}}],["gdtr",{"_index":8986,"title":{},"body":{"1015831":{}}}],["gdtr瀵勫瓨鍣ㄧ殑鍊",{"_index":8992,"title":{},"body":{"1015831":{}}}],["gdtr銆乬dtl涔熼兘绉颁箣涓哄瘎瀛樺櫒",{"_index":8990,"title":{},"body":{"1015831":{}}}],["gdt表信息",{"_index":8984,"title":{},"body":{"1015831":{}}}],["gen",{"_index":85,"title":{},"body":{"1015822":{},"1015823":{}}}],["generic_r",{"_index":6850,"title":{},"body":{"1015833":{},"2949228":{}}}],["generic_read|generic_wr",{"_index":8122,"title":{},"body":{"1015833":{}}}],["generic_wr",{"_index":6851,"title":{},"body":{"1015833":{},"2949228":{}}}],["generic_write|generic_r",{"_index":5736,"title":{},"body":{"1015847":{}}}],["get'last()寰楀埌鐨勫氨鏄繖涓",{"_index":5716,"title":{},"body":{"1015847":{}}}],["get_fileex_info_l",{"_index":8148,"title":{},"body":{"1015833":{}}}],["getc",{"_index":3787,"title":{},"body":{"1015828":{},"1015831":{},"1015833":{},"1933378":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["getcaptur",{"_index":988,"title":{},"body":{"1015822":{}}}],["getclientrect(&clientreç",{"_index":889,"title":{},"body":{"1015822":{}}}],["getclientrect(&reç",{"_index":671,"title":{},"body":{"1015822":{}}}],["getcoun",{"_index":1160,"title":{},"body":{"1015822":{}}}],["getcurrentdirect",{"_index":8093,"title":{},"body":{"1015833":{}}}],["getcurrentdirectory(10",{"_index":7373,"title":{},"body":{"1015833":{}}}],["getcurrentdirectory(20",{"_index":8098,"title":{},"body":{"1015833":{}}}],["getcurrentthr",{"_index":7615,"title":{},"body":{"1015833":{}}}],["getcursel",{"_index":1156,"title":{},"body":{"1015822":{}}}],["getdc",{"_index":7669,"title":{},"body":{"1015833":{}}}],["getdc(hwn",{"_index":7670,"title":{},"body":{"1015833":{}}}],["getdesktopwindow",{"_index":3785,"title":{},"body":{"3440655":{}}}],["getdlgitem(idc_button2",{"_index":1100,"title":{},"body":{"1015822":{}}}],["getdlgitem(idc_static_1",{"_index":1113,"title":{},"body":{"1015822":{}}}],["getdlgitemtext(hw",{"_index":7882,"title":{},"body":{"1015833":{}}}],["getdrivetyp",{"_index":8010,"title":{},"body":{"1015833":{}}}],["getdrivetype(text(\"ç",{"_index":8016,"title":{},"body":{"1015833":{}}}],["getexitcodethr",{"_index":7457,"title":{},"body":{"1015833":{}}}],["getexitcodethread(hthr",{"_index":7462,"title":{},"body":{"1015833":{}}}],["getexitcodethread函数",{"_index":7455,"title":{},"body":{"1015833":{}}}],["getfil",{"_index":8131,"title":{},"body":{"1015833":{}}}],["getfileattribu",{"_index":8142,"title":{},"body":{"1015833":{}}}],["getfileattributesex",{"_index":8145,"title":{},"body":{"1015833":{}}}],["getfileattributesex(text(\"c:\\\\a.tx",{"_index":8155,"title":{},"body":{"1015833":{}}}],["getfileexinfostandı",{"_index":8156,"title":{},"body":{"1015833":{}}}],["getfilesize(hfil",{"_index":8137,"title":{},"body":{"1015833":{}}}],["getfiltercode(pexception_poin",{"_index":4422,"title":{},"body":{"2949166":{}}}],["getidsofn",{"_index":3185,"title":{},"body":{"1015823":{}}}],["getit",{"_index":1164,"title":{},"body":{"1015822":{}}}],["getlasterr",{"_index":3982,"title":{},"body":{"1015833":{},"1015847":{},"3440655":{},"3440657":{}}}],["getlogicaldr",{"_index":7995,"title":{},"body":{"1015833":{}}}],["getlogicaldrives(v",{"_index":7988,"title":{},"body":{"1015833":{}}}],["getlogicaldrivestr",{"_index":7999,"title":{},"body":{"1015833":{}}}],["getlogicaldrivestrings(nbufferlength",{"_index":8006,"title":{},"body":{"1015833":{}}}],["getmessagemap",{"_index":377,"title":{},"body":{"1015822":{}}}],["getmessage函数有4个参数，其后3个参数是过滤条件，第一个条件是用于指定接收消息的窗口。而第一个参数则是从消息队列中获取的消息",{"_index":3994,"title":{},"body":{"3440655":{}}}],["getmessage函数调用的是win32k.sys中的ntusergetmessage函数，在该函数内部有如下的大致逻辑",{"_index":3999,"title":{},"body":{"3440655":{}}}],["getmessage函数通过循环判断是否存在该窗口的消息，如果有，将消息存储到msg结构体中，并从原始消息队列中删除该消息。然后，将消息传递给translatemessage和dispatchmessage函数进行处理",{"_index":3995,"title":{},"body":{"3440655":{}}}],["getmessage表面上的意思是获取消息，但实际功能不仅限于此，我们首先来看下该函数的语法",{"_index":3987,"title":{},"body":{"3440655":{}}}],["getmessagı",{"_index":3977,"title":{},"body":{"1015833":{},"3440655":{}}}],["getmodulefilename(h",{"_index":2745,"title":{},"body":{"1015823":{}}}],["getmodulefilename(null,str",{"_index":7369,"title":{},"body":{"1015833":{}}}],["getmodulehandle(\"kernel32.dl",{"_index":4369,"title":{},"body":{"1015833":{},"2949166":{}}}],["getmodulehandle(_t(\"db_dll.dl",{"_index":2741,"title":{},"body":{"1015823":{}}}],["getmodulehandle(szmodu",{"_index":8554,"title":{},"body":{"1015833":{}}}],["getp",{"_index":9239,"title":{},"body":{"1015831":{}}}],["getpid(ç",{"_index":8510,"title":{},"body":{"1015833":{}}}],["getprocaddr",{"_index":6524,"title":{},"body":{"1015828":{}}}],["getprocaddress(h",{"_index":6529,"title":{},"body":{"1015828":{}}}],["getregi",{"_index":9213,"title":{},"body":{"1015831":{}}}],["getruntimecl",{"_index":261,"title":{},"body":{"1015822":{}}}],["gets(sendbuf",{"_index":9979,"title":{},"body":{"1015818":{}}}],["getstartupinfo(&",{"_index":7286,"title":{},"body":{"1015833":{}}}],["getstartupinfo(&startupinf",{"_index":4634,"title":{},"body":{"3440657":{}}}],["getthreadcontex",{"_index":7469,"title":{},"body":{"1015833":{}}}],["getthreadcontext(hdebugeethr",{"_index":4843,"title":{},"body":{"3440657":{}}}],["getthreadcontext(hthr",{"_index":7476,"title":{},"body":{"1015833":{}}}],["getthreadcontext函数",{"_index":7467,"title":{},"body":{"1015833":{}}}],["getthreadcontext函数是个设置修改线程上下文，其语法格式如下",{"_index":7480,"title":{},"body":{"1015833":{}}}],["getthreadcontext函数用于获取线程上下文，其语法格式如下",{"_index":7468,"title":{},"body":{"1015833":{}}}],["gettickcoun",{"_index":11160,"title":{},"body":{"1703937":{}}}],["gettopindex",{"_index":1168,"title":{},"body":{"1015822":{}}}],["gettypeinf",{"_index":3183,"title":{},"body":{"1015823":{}}}],["gettypeinfocoun",{"_index":3181,"title":{},"body":{"1015823":{}}}],["getvalu",{"_index":9341,"title":{},"body":{"1015831":{}}}],["getvolumeinf",{"_index":8035,"title":{},"body":{"1015833":{}}}],["getvolumeinformation(\"ç",{"_index":8060,"title":{},"body":{"1015833":{}}}],["getwindowdc(hw",{"_index":3786,"title":{},"body":{"3440655":{}}}],["getwindowlong(m_list.m_hw",{"_index":1187,"title":{},"body":{"1015822":{}}}],["getwindowthreadprocessid(hw",{"_index":8694,"title":{},"body":{"1933378":{}}}],["ghinstanç",{"_index":7842,"title":{},"body":{"1015833":{}}}],["gld",{"_index":7994,"title":{},"body":{"1015833":{}}}],["gmthread_",{"_index":11113,"title":{},"body":{"1703937":{}}}],["gmthread_cr",{"_index":11127,"title":{},"body":{"1703937":{}}}],["gmthread_ex",{"_index":11188,"title":{},"body":{"1703937":{}}}],["gmthread_r",{"_index":11153,"title":{},"body":{"1703937":{}}}],["gmthread_slep",{"_index":11166,"title":{},"body":{"1703937":{}}}],["gmthread_t.kernelstaç",{"_index":11180,"title":{},"body":{"1703937":{}}}],["gmthreadl",{"_index":11171,"title":{},"body":{"1703937":{}}}],["gmthreadlist[",{"_index":11168,"title":{},"body":{"1703937":{}}}],["gmthreadlist[0",{"_index":11162,"title":{},"body":{"1703937":{}}}],["gmthreadlist[currentthreadindex",{"_index":11161,"title":{},"body":{"1703937":{}}}],["gmthreadlist[i].",{"_index":11163,"title":{},"body":{"1703937":{}}}],["gmthreadlist[i].flagı",{"_index":11165,"title":{},"body":{"1703937":{}}}],["gmthreadlist[i].sleepmillsecondu",{"_index":11167,"title":{},"body":{"1703937":{}}}],["gmthreadlist[maxgmthr",{"_index":11115,"title":{},"body":{"1703937":{}}}],["gmthreadp",{"_index":11123,"title":{},"body":{"1703937":{}}}],["gmthreadstartup(gmthread_",{"_index":11186,"title":{},"body":{"1703937":{}}}],["gmthreadstaç",{"_index":11130,"title":{},"body":{"1703937":{}}}],["got",{"_index":1836,"title":{},"body":{"1015843":{}}}],["gp",{"_index":6259,"title":{},"body":{"1015828":{}}}],["gre",{"_index":3753,"title":{},"body":{"3440655":{}}}],["greater<",{"_index":11435,"title":{},"body":{"1015814":{}}}],["grp",{"_index":12025,"title":{},"body":{"1015817":{}}}],["grp的时候就需要带入modr/m字节的3、4、5位去看tabl",{"_index":12031,"title":{},"body":{"1015817":{}}}],["gs(硬编码：65",{"_index":11804,"title":{},"body":{"1015817":{}}}],["gs,ax",{"_index":8946,"title":{},"body":{"1015831":{}}}],["gs:[0",{"_index":8948,"title":{},"body":{"1015831":{}}}],["gs:[0x100",{"_index":8953,"title":{},"body":{"1015831":{}}}],["gs锛學indows娌℃湁浣跨敤杩欎釜娈靛瘎瀛樺櫒鎵�浠ユ案杩滄槸0",{"_index":9330,"title":{},"body":{"1015831":{}}}],["gu",{"_index":2672,"title":{},"body":{"1015823":{}}}],["guid函数",{"_index":2834,"title":{},"body":{"1015823":{}}}],["guid是一个128位的标识符，基本保证了com对象的唯一性，另外com接口也是用guid来标识的",{"_index":2807,"title":{},"body":{"1015823":{}}}],["guid，又称之为全局唯一标识符，有16个字节，共128位二进制数，可以保证全球范围内不会重复，标识com对象的guid称为：cl",{"_index":2808,"title":{},"body":{"1015823":{}}}],["gv",{"_index":12002,"title":{},"body":{"1015817":{}}}],["gwl_styl",{"_index":1188,"title":{},"body":{"1015822":{}}}],["gwl_wndproc",{"_index":507,"title":{},"body":{"1015822":{}}}],["g位",{"_index":9024,"title":{},"body":{"1015831":{}}}],["g：通用寄存器",{"_index":12004,"title":{},"body":{"1015817":{}}}],["h:%m:%",{"_index":10229,"title":{},"body":{"1015818":{}}}],["handl",{"_index":1112,"title":{},"body":{"1015818":{},"1015822":{},"1015828":{},"1015833":{},"1015847":{},"1933378":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["handle(winap",{"_index":8622,"title":{},"body":{"1015833":{}}}],["handle_flag_protect_from_cl",{"_index":8713,"title":{},"body":{"1933378":{}}}],["handler)(pexception_reç",{"_index":4432,"title":{},"body":{"2949166":{}}}],["har",{"_index":3892,"title":{},"body":{"3440655":{}}}],["hardw",{"_index":5615,"title":{},"body":{"1015847":{}}}],["hardware/drivers/",{"_index":5510,"title":{},"body":{"1015847":{}}}],["hardware/drivers/debugger/debugu",{"_index":8965,"title":{},"body":{"1015831":{}}}],["hardware/drivers/oth",{"_index":5446,"title":{},"body":{"1015847":{}}}],["hardwaremessageslisthead：接到鼠标、键盘的消息",{"_index":3976,"title":{},"body":{"3440655":{}}}],["have_r",{"_index":10198,"title":{},"body":{"1015818":{}}}],["hbrush",{"_index":3762,"title":{},"body":{"3440655":{}}}],["hbrush)color_backgroun",{"_index":7739,"title":{},"body":{"1015833":{}}}],["hbrush)getstockobject(dc_brush",{"_index":3763,"title":{},"body":{"3440655":{}}}],["hdc",{"_index":3761,"title":{},"body":{"1015833":{},"3440655":{}}}],["hdes",{"_index":3839,"title":{},"body":{"3440655":{}}}],["he",{"_index":115,"title":{},"body":{"1015822":{},"1015828":{},"1015833":{},"1703937":{},"2424889":{}}}],["headerl",{"_index":10316,"title":{},"body":{"1015818":{}}}],["heapalloc是一个在堆中分配内存的函数，但它并不直接申请内存，因为heapalloc函数并没有进入到r",{"_index":6766,"title":{},"body":{"2949228":{}}}],["heapalloç",{"_index":3466,"title":{},"body":{"1015840":{},"2949228":{}}}],["heigi",{"_index":3758,"title":{},"body":{"1015833":{},"3440655":{}}}],["hel",{"_index":1684,"title":{},"body":{"1015818":{},"1015833":{},"1015843":{},"1015847":{}}}],["her",{"_index":129,"title":{},"body":{"1015822":{},"1015823":{},"1015833":{}}}],["hev",{"_index":10589,"title":{},"body":{"2424889":{}}}],["hevent[0",{"_index":10564,"title":{},"body":{"2424889":{}}}],["hevent[1",{"_index":10590,"title":{},"body":{"2424889":{}}}],["hevent[2",{"_index":10561,"title":{},"body":{"2424889":{}}}],["heventqueuecl",{"_index":3860,"title":{},"body":{"3440655":{}}}],["hex",{"_index":9403,"title":{},"body":{"1015831":{}}}],["hfil",{"_index":4714,"title":{},"body":{"1015833":{},"2949228":{},"3440657":{}}}],["hfilemappingobject：指定要映射的映射对象句柄，createfilemapping或openfilemapping函数返回的映射对象句柄",{"_index":6827,"title":{},"body":{"2949228":{}}}],["hfilemappingobjeç",{"_index":6823,"title":{},"body":{"1015833":{},"2949228":{}}}],["hfile：指定要映射的文件句柄（共享文件）或者是invalid_handle_value（共享物理页",{"_index":6798,"title":{},"body":{"2949228":{}}}],["hfindfil",{"_index":8203,"title":{},"body":{"1015833":{}}}],["hgdiobj",{"_index":7681,"title":{},"body":{"1015833":{}}}],["hglobal",{"_index":1305,"title":{},"body":{"1015822":{}}}],["hh:mm:",{"_index":8789,"title":{},"body":{"1015850":{}}}],["hhandl",{"_index":7433,"title":{},"body":{"1015833":{},"2424889":{}}}],["hidemodule(\"kernel32.dl",{"_index":8581,"title":{},"body":{"1015833":{}}}],["hidemodule(ç",{"_index":8551,"title":{},"body":{"1015833":{}}}],["high",{"_index":7954,"title":{},"body":{"1015833":{}}}],["hin",{"_index":6586,"title":{},"body":{"1015828":{}}}],["hinstance，这是一个句柄，在win32中h开头的通常都是句柄，这里的hinstance是指向模块的句柄，实际上这个值就是模块在进程空间内的内存地址",{"_index":7710,"title":{},"body":{"1015833":{}}}],["hinstanç",{"_index":467,"title":{},"body":{"1015822":{},"1015833":{}}}],["hinstdl",{"_index":8381,"title":{},"body":{"1015833":{}}}],["hkey",{"_index":2720,"title":{},"body":{"1015823":{}}}],["hkey_classes_root\\clsid\\com缁勪欢鐨凜lsid\\inprocserver32",{"_index":2878,"title":{},"body":{"1015823":{}}}],["hkey_classes_root\\wow6432node\\clsid\\com缁勪欢鐨凜lsid\\inprocserver32",{"_index":2880,"title":{},"body":{"1015823":{}}}],["hkey_local_machine\\software\\classes\\clsid\\com缁勪欢鐨凜lsid\\inprocserver32",{"_index":2879,"title":{},"body":{"1015823":{}}}],["hkey_local_machine\\software\\classes\\wow6432node\\clsid\\com缁勪欢鐨凜lsid\\inprocserver32",{"_index":2881,"title":{},"body":{"1015823":{}}}],["hkeycl",{"_index":2721,"title":{},"body":{"1015823":{}}}],["hkeyinproc32",{"_index":2722,"title":{},"body":{"1015823":{}}}],["hmap",{"_index":1306,"title":{},"body":{"1015822":{},"2949228":{}}}],["hmapfil",{"_index":8233,"title":{},"body":{"1015833":{}}}],["hmenu",{"_index":469,"title":{},"body":{"1015822":{},"1015833":{}}}],["hmenu)cwa_",{"_index":7856,"title":{},"body":{"1015833":{}}}],["hmenu)cwa_button_0",{"_index":7866,"title":{},"body":{"1015833":{}}}],["hmenu)cwa_button_1",{"_index":7869,"title":{},"body":{"1015833":{}}}],["hmod",{"_index":2740,"title":{},"body":{"1015823":{},"1015828":{},"1015833":{},"2949166":{}}}],["hmutex",{"_index":7610,"title":{},"body":{"1015833":{}}}],["ho",{"_index":4558,"title":{},"body":{"1015847":{},"3440657":{}}}],["hobjeç",{"_index":8127,"title":{},"body":{"1015833":{}}}],["hookfuncaddr((ulong)myntopenproç",{"_index":5894,"title":{},"body":{"1015847":{}}}],["hookfuncaddr((ulong)oldfuncaddr",{"_index":5898,"title":{},"body":{"1015847":{}}}],["hookfuncaddr(ulongu",{"_index":5892,"title":{},"body":{"1015847":{}}}],["hook可以在3环、0环下使用，它的原理就是改变程序的执行流程，例如你可以在某个函数的第一行位置开始替换为jmp指令，跳转到自己的函数地址。除了使用jmp指令改变执行流程，我们还可以使用call指令以及push、ret指令的组合。jmp、call指令至少占用5个字节，push、ret指令的组合则需要6个字节",{"_index":5903,"title":{},"body":{"1015847":{}}}],["hook就是根据ssdt（即keservicedescriptortable、keservicedescriptortableshadow）找到系统服务表，并且修改系统服务表的函数地址表的某个函数地址，来达到hook指定函数的目的。（关于ssdt的内容我们已经在系统调用的学习中了解了",{"_index":5802,"title":{},"body":{"1015847":{}}}],["hook技术",{"_index":5801,"title":{},"body":{"1015847":{}}}],["hook技术时，如果你的系统环境是多核时就可能会出现一些情况导致系统蓝屏，如果要了解这个原因，我们就需要了解多核同步",{"_index":6628,"title":{},"body":{"1933380":{}}}],["hook时需要注意避免替换全局变量相关的硬编码，并且需要先将通用寄存器压栈保存，然后将被替换的指令加入到自己的指令中以保证程序可以完整执行，最终再jmp回被替换指令所在行的下一行地址",{"_index":5905,"title":{},"body":{"1015847":{}}}],["hook的代码来找到要hook函数的地址，例如此处我想hook函数ntopenprocess来监控它的参数，我们不再需要声明函数指针然后写自定义函数，直接写一个自定的函数即可，但也因此我们需要通过其他的方式来获取参数值，我们可以来看一下该函数的实现，似乎并没有用到寄存器，也就表示在这里不是通过寄存器传参，而是通过栈传参，那我们就可以使用ebp寻址来获取参数",{"_index":5907,"title":{},"body":{"1015847":{}}}],["hook的方式是基于系统服务表的，这种方式很容易被发现并且我们只能取hook系统服务表内的函数，因此我们可以使用inl",{"_index":5901,"title":{},"body":{"1015847":{}}}],["hook的方式来弥补这些缺陷。inl",{"_index":5902,"title":{},"body":{"1015847":{}}}],["horizo",{"_index":7758,"title":{},"body":{"1015833":{}}}],["hos",{"_index":8872,"title":{},"body":{"1015818":{},"1015850":{}}}],["hpen",{"_index":7662,"title":{},"body":{"1015833":{}}}],["hprev",{"_index":542,"title":{},"body":{"1015822":{},"1015833":{}}}],["hprevinstance，该参数永远为空null，无需理解",{"_index":7711,"title":{},"body":{"1015833":{}}}],["hproc",{"_index":2432,"title":{},"body":{"1015833":{},"1015846":{},"1933378":{},"3440657":{}}}],["hprocesssnapsh",{"_index":8511,"title":{},"body":{"1015833":{}}}],["hre",{"_index":2782,"title":{},"body":{"1015823":{}}}],["hres",{"_index":2597,"title":{},"body":{"1015823":{}}}],["hresult)(hr",{"_index":2874,"title":{},"body":{"1015823":{}}}],["hresult类型的返回值反映了函数中的一些情况，其类型定义规范如下",{"_index":2843,"title":{},"body":{"1015823":{}}}],["hresult返回值",{"_index":2841,"title":{},"body":{"1015823":{}}}],["hrsrc",{"_index":1296,"title":{},"body":{"1015822":{}}}],["hsemaph",{"_index":10705,"title":{},"body":{"2424889":{}}}],["hstderr",{"_index":7284,"title":{},"body":{"1015833":{}}}],["hstdinpu",{"_index":7282,"title":{},"body":{"1015833":{}}}],["hstdoutpu",{"_index":7283,"title":{},"body":{"1015833":{}}}],["htcapt",{"_index":972,"title":{},"body":{"1015822":{}}}],["htclien",{"_index":971,"title":{},"body":{"1015822":{}}}],["htemplatefil",{"_index":8118,"title":{},"body":{"1015833":{}}}],["hthre",{"_index":4707,"title":{},"body":{"1015818":{},"1015833":{},"3440657":{}}}],["hthread1",{"_index":7495,"title":{},"body":{"1015833":{}}}],["hthread[0",{"_index":7452,"title":{},"body":{"1015833":{}}}],["hthread[1",{"_index":7453,"title":{},"body":{"1015833":{}}}],["hthread[2",{"_index":7451,"title":{},"body":{"1015833":{}}}],["htons(2118",{"_index":9785,"title":{},"body":{"1015818":{}}}],["htons(2119",{"_index":9870,"title":{},"body":{"1015818":{}}}],["hwnd",{"_index":471,"title":{},"body":{"1015822":{},"1015833":{},"1933378":{},"3440655":{}}}],["hwnd)nul",{"_index":7666,"title":{},"body":{"1015833":{}}}],["hwndpar",{"_index":472,"title":{},"body":{"1015822":{},"1015833":{}}}],["i",{"_index":6073,"title":{},"body":{"1015828":{},"1015833":{}}}],["i<",{"_index":1752,"title":{},"body":{"1015843":{}}}],["i<=",{"_index":1754,"title":{},"body":{"1015843":{}}}],["i<alength",{"_index":2131,"title":{},"body":{"1015843":{}}}],["i=0",{"_index":2130,"title":{},"body":{"1015843":{}}}],["i=0;i<(y);",{"_index":2364,"title":{},"body":{"1015843":{}}}],["i=0;i<length;",{"_index":2357,"title":{},"body":{"1015843":{}}}],["ia32_sysenter_eip",{"_index":2487,"title":{},"body":{"1015846":{}}}],["ia32_sysenter_esp",{"_index":2485,"title":{},"body":{"1015846":{}}}],["ia32_sysenter_ç",{"_index":2483,"title":{},"body":{"1015846":{}}}],["ib",{"_index":11870,"title":{},"body":{"1015817":{}}}],["ib(自己控制步长",{"_index":11973,"title":{},"body":{"1015817":{}}}],["ib，再带入最后的两个字节（这也是最开始我们了解硬编码结构中的最后2部分）替换dis8和ib变成：a",{"_index":12044,"title":{},"body":{"1015817":{}}}],["iclassfact",{"_index":2650,"title":{},"body":{"1015823":{}}}],["icmp",{"_index":10339,"title":{},"body":{"1015818":{}}}],["icr3",{"_index":9346,"title":{},"body":{"1015831":{}}}],["icursorl",{"_index":3869,"title":{},"body":{"3440655":{}}}],["id",{"_index":412,"title":{},"body":{"1015814":{},"1015817":{},"1015822":{},"1703937":{},"3440655":{}}}],["id'",{"_index":417,"title":{},"body":{"1015822":{}}}],["ida），我们可以看见用红色方框，标记的部分就是硬编码，其右边是汇编指令，但实际上你所看见的这些汇编指令都是这些软件的反汇编引擎帮你从硬编码转换而来的（可执行文件并不会有这些东西，都是0和1",{"_index":11786,"title":{},"body":{"1015817":{}}}],["idb",{"_index":2639,"title":{},"body":{"1015823":{}}}],["idbconnectç",{"_index":3152,"title":{},"body":{"1015823":{}}}],["idbconneç",{"_index":3151,"title":{},"body":{"1015823":{}}}],["ide安装的sdk版本，如下所示，我的系统上sdk的版本是17763",{"_index":5450,"title":{},"body":{"1015847":{}}}],["ide（这里自己选择版本），其次因为我们需要开发驱动程序所以需要安装wdk（wdk下载地址：https://docs.microsoft.com/zh",{"_index":5444,"title":{},"body":{"1015847":{}}}],["idispatch接口要实现四个函数",{"_index":3180,"title":{},"body":{"1015823":{}}}],["idispatch（自动化）接口",{"_index":3179,"title":{},"body":{"1015823":{}}}],["idispatç",{"_index":2969,"title":{},"body":{"1015823":{}}}],["idiv",{"_index":4376,"title":{},"body":{"2949166":{}}}],["idl",{"_index":3834,"title":{},"body":{"3440655":{}}}],["idlethr",{"_index":11087,"title":{},"body":{"1703937":{}}}],["idtl",{"_index":9259,"title":{},"body":{"1015831":{}}}],["idtr",{"_index":9258,"title":{},"body":{"1015831":{}}}],["idt表）中断号",{"_index":11205,"title":{},"body":{"1703937":{}}}],["id与句柄",{"_index":7330,"title":{},"body":{"1015833":{}}}],["id，向下跳的范围是0x0",{"_index":11943,"title":{},"body":{"1015817":{}}}],["ieee缂栫爜锛堟诞鐐癸級",{"_index":1646,"title":{},"body":{"1015843":{}}}],["if(!terminateprocess(hproç",{"_index":7356,"title":{},"body":{"1015833":{}}}],["if(arr[",{"_index":3628,"title":{},"body":{"1015840":{}}}],["if(binitialowner==tru",{"_index":10740,"title":{},"body":{"2424889":{}}}],["if(createprocess(childprocess",{"_index":7254,"title":{},"body":{"1015833":{}}}],["if(hfil",{"_index":8237,"title":{},"body":{"1015833":{}}}],["if(hm",{"_index":8571,"title":{},"body":{"1015833":{}}}],["if(hmapfil",{"_index":8242,"title":{},"body":{"1015833":{}}}],["if(hproç",{"_index":8408,"title":{},"body":{"1015833":{}}}],["if(hthr",{"_index":8413,"title":{},"body":{"1015833":{}}}],["if(i%2==0",{"_index":1858,"title":{},"body":{"1015843":{}}}],["if(i<=x",{"_index":1835,"title":{},"body":{"1015843":{}}}],["if(j=",{"_index":1862,"title":{},"body":{"1015843":{}}}],["if(绗竴娆℃墽琛",{"_index":10636,"title":{},"body":{"2424889":{}}}],["if(绗﹀悎婵�娲绘潯浠",{"_index":10630,"title":{},"body":{"2424889":{}}}],["ifdef",{"_index":2392,"title":{},"body":{"1015843":{},"1015847":{},"3440655":{}}}],["ifndef",{"_index":2394,"title":{},"body":{"1015818":{},"1015843":{},"3440655":{}}}],["if标志",{"_index":9282,"title":{},"body":{"1015831":{}}}],["if标志是用于控制处理器对可屏蔽中断请求的响应",{"_index":9279,"title":{},"body":{"1015831":{}}}],["igmp",{"_index":10340,"title":{},"body":{"1015818":{}}}],["iid_iclassfact",{"_index":2703,"title":{},"body":{"1015823":{}}}],["iid_idp",{"_index":2663,"title":{},"body":{"1015823":{}}}],["iid_idualdbconnect,0x8d7c23e2,0xede3,0x4e10,0x96,0x6f,0x2d,0x56,0x2c,0x93,0xd1,0xf",{"_index":3275,"title":{},"body":{"1015823":{}}}],["iid_idualdbconneç",{"_index":3277,"title":{},"body":{"1015823":{}}}],["iid_is][",{"_index":2888,"title":{},"body":{"1015823":{}}}],["iid_iunknow",{"_index":2662,"title":{},"body":{"1015823":{}}}],["iidi",{"_index":2825,"title":{},"body":{"1015823":{}}}],["ilt+0(person::p",{"_index":3458,"title":{},"body":{"1015840":{}}}],["im",{"_index":5239,"title":{},"body":{"1015825":{}}}],["image2021",{"_index":7342,"title":{},"body":{"1015833":{}}}],["image_base_reloç",{"_index":6604,"title":{},"body":{"1015828":{}}}],["image_data_direct",{"_index":6180,"title":{},"body":{"1015828":{}}}],["image_dos_h",{"_index":5996,"title":{},"body":{"1015828":{}}}],["image_export_direct",{"_index":6482,"title":{},"body":{"1015828":{}}}],["image_file_h",{"_index":5998,"title":{},"body":{"1015828":{}}}],["image_import_by_",{"_index":6588,"title":{},"body":{"1015828":{}}}],["image_import_descript",{"_index":6547,"title":{},"body":{"1015828":{}}}],["image_nt_headers32",{"_index":6092,"title":{},"body":{"1015828":{}}}],["image_numberof_directory_entr",{"_index":6019,"title":{},"body":{"1015828":{}}}],["image_optional_header32",{"_index":5999,"title":{},"body":{"1015828":{}}}],["image_scn_align_1024by",{"_index":6292,"title":{},"body":{"1015828":{}}}],["image_scn_align_128by",{"_index":6286,"title":{},"body":{"1015828":{}}}],["image_scn_align_16by",{"_index":6278,"title":{},"body":{"1015828":{}}}],["image_scn_align_1by",{"_index":6270,"title":{},"body":{"1015828":{}}}],["image_scn_align_2048by",{"_index":6294,"title":{},"body":{"1015828":{}}}],["image_scn_align_256by",{"_index":6288,"title":{},"body":{"1015828":{}}}],["image_scn_align_2by",{"_index":6272,"title":{},"body":{"1015828":{}}}],["image_scn_align_32by",{"_index":6282,"title":{},"body":{"1015828":{}}}],["image_scn_align_4096by",{"_index":6296,"title":{},"body":{"1015828":{}}}],["image_scn_align_4by",{"_index":6274,"title":{},"body":{"1015828":{}}}],["image_scn_align_512by",{"_index":6290,"title":{},"body":{"1015828":{}}}],["image_scn_align_64by",{"_index":6284,"title":{},"body":{"1015828":{}}}],["image_scn_align_8192by",{"_index":6298,"title":{},"body":{"1015828":{}}}],["image_scn_align_8by",{"_index":6276,"title":{},"body":{"1015828":{}}}],["image_scn_cnt_initialized_",{"_index":6232,"title":{},"body":{"1015828":{}}}],["image_scn_cnt_uninitialized_",{"_index":6234,"title":{},"body":{"1015828":{}}}],["image_scn_cnt_ç",{"_index":6230,"title":{},"body":{"1015828":{}}}],["image_scn_gprel",{"_index":6256,"title":{},"body":{"1015828":{}}}],["image_scn_lnk_co",{"_index":6246,"title":{},"body":{"1015828":{}}}],["image_scn_lnk_inf",{"_index":6238,"title":{},"body":{"1015828":{}}}],["image_scn_lnk_nreloc_ovfl",{"_index":6302,"title":{},"body":{"1015828":{}}}],["image_scn_lnk_oth",{"_index":6236,"title":{},"body":{"1015828":{}}}],["image_scn_lnk_remov",{"_index":6242,"title":{},"body":{"1015828":{}}}],["image_scn_mem_16p",{"_index":6265,"title":{},"body":{"1015828":{}}}],["image_scn_mem_disç",{"_index":6305,"title":{},"body":{"1015828":{}}}],["image_scn_mem_execu",{"_index":6317,"title":{},"body":{"1015828":{}}}],["image_scn_mem_f",{"_index":6260,"title":{},"body":{"1015828":{}}}],["image_scn_mem_loç",{"_index":6266,"title":{},"body":{"1015828":{}}}],["image_scn_mem_not_caç",{"_index":6308,"title":{},"body":{"1015828":{}}}],["image_scn_mem_not_pagı",{"_index":6311,"title":{},"body":{"1015828":{}}}],["image_scn_mem_prel",{"_index":6268,"title":{},"body":{"1015828":{}}}],["image_scn_mem_proteç",{"_index":6250,"title":{},"body":{"1015828":{}}}],["image_scn_mem_purgu",{"_index":6263,"title":{},"body":{"1015828":{}}}],["image_scn_mem_r",{"_index":6320,"title":{},"body":{"1015828":{}}}],["image_scn_mem_sh",{"_index":6314,"title":{},"body":{"1015828":{}}}],["image_scn_mem_sysheap",{"_index":6261,"title":{},"body":{"1015828":{}}}],["image_scn_mem_wr",{"_index":6323,"title":{},"body":{"1015828":{}}}],["image_scn_no_defer_spec_exç",{"_index":6253,"title":{},"body":{"1015828":{}}}],["image_scn_type_cop",{"_index":6228,"title":{},"body":{"1015828":{}}}],["image_scn_type_dseç",{"_index":6220,"title":{},"body":{"1015828":{}}}],["image_scn_type_group",{"_index":6224,"title":{},"body":{"1015828":{}}}],["image_scn_type_no_p",{"_index":6226,"title":{},"body":{"1015828":{}}}],["image_scn_type_nol",{"_index":6222,"title":{},"body":{"1015828":{}}}],["image_scn_type_ov",{"_index":6240,"title":{},"body":{"1015828":{}}}],["image_scn_type_regi",{"_index":6219,"title":{},"body":{"1015828":{}}}],["image_section_h",{"_index":6001,"title":{},"body":{"1015828":{}}}],["image_sizeof_short_",{"_index":6194,"title":{},"body":{"1015828":{}}}],["image_thunk_data32",{"_index":6576,"title":{},"body":{"1015828":{}}}],["imagefil",{"_index":10995,"title":{},"body":{"1703937":{}}}],["imagemap：表示当前是否映射了镜像文件（通常是可执行文件），值为1，则说明映射了，为0，则不是",{"_index":6723,"title":{},"body":{"2949228":{}}}],["imagep",{"_index":6141,"title":{},"body":{"1015828":{}}}],["imagı",{"_index":6245,"title":{},"body":{"1015828":{}}}],["imm",{"_index":135,"title":{},"body":{"1015822":{}}}],["imm16",{"_index":5259,"title":{},"body":{"1015825":{}}}],["imm32",{"_index":5261,"title":{},"body":{"1015825":{}}}],["imm8",{"_index":5245,"title":{},"body":{"1015825":{}}}],["imm8/imm16/imm32",{"_index":5344,"title":{},"body":{"1015825":{}}}],["imp",{"_index":3109,"title":{},"body":{"1015818":{},"1015823":{}}}],["implement_dy",{"_index":200,"title":{},"body":{"1015822":{}}}],["implement_dynamic(class_",{"_index":267,"title":{},"body":{"1015822":{}}}],["implement_dyncr",{"_index":316,"title":{},"body":{"1015822":{}}}],["implement_dyncreate(class_",{"_index":340,"title":{},"body":{"1015822":{}}}],["implement_runtimeclass(class_",{"_index":269,"title":{},"body":{"1015822":{}}}],["in",{"_index":29,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{},"1933378":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["in_addr",{"_index":9749,"title":{},"body":{"1015818":{}}}],["inc",{"_index":6639,"title":{},"body":{"1015817":{},"1933380":{}}}],["inc/deç",{"_index":11857,"title":{},"body":{"1015817":{}}}],["inclu",{"_index":92,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1933378":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["inc：加1；dec：减1",{"_index":11858,"title":{},"body":{"1015817":{}}}],["index",{"_index":9114,"title":{},"body":{"1015817":{},"1015818":{},"1015831":{}}}],["index锛岄〉琛ㄧ储寮",{"_index":9486,"title":{},"body":{"1015831":{}}}],["index锛岄〉鐩綍绱㈠紩",{"_index":9484,"title":{},"body":{"1015831":{}}}],["index，页目录指针表索引），也就有了一张新的表叫pdpt（pagı",{"_index":9518,"title":{},"body":{"1015831":{}}}],["inet_addr(\"127.0.0.1",{"_index":9958,"title":{},"body":{"1015818":{}}}],["inet_addr(\"172.16.176.12",{"_index":9869,"title":{},"body":{"1015818":{}}}],["inet_addr(\"172.16.176.5",{"_index":9848,"title":{},"body":{"1015818":{}}}],["inet_addr(\"192.168.1.1",{"_index":9779,"title":{},"body":{"1015818":{}}}],["inet_ntoa(ipaddr",{"_index":10143,"title":{},"body":{"1015818":{}}}],["inet_ntoa(s.sin_addr",{"_index":10085,"title":{},"body":{"1015818":{}}}],["inet_ntoa鑾峰彇ip",{"_index":10083,"title":{},"body":{"1015818":{}}}],["inf",{"_index":3900,"title":{},"body":{"1015828":{},"1015833":{},"3440655":{},"3440657":{}}}],["information，缩写：rtti），能够使用基类（父类）的指针或引用来检查这些指针或引用所指的对象的实际派生类（子类），简单的意思就是它可以帮助我们在程序运行的过程中了解到某个对象所属类",{"_index":196,"title":{},"body":{"1015822":{}}}],["infrequ",{"_index":100,"title":{},"body":{"1015822":{}}}],["inh",{"_index":3383,"title":{},"body":{"1015833":{},"1015840":{}}}],["ininitializationordermodulelist.bl",{"_index":8576,"title":{},"body":{"1015833":{}}}],["ininitializationordermodulelist.fl",{"_index":8577,"title":{},"body":{"1015833":{}}}],["init(",{"_index":3327,"title":{},"body":{"1015840":{}}}],["initappl",{"_index":558,"title":{},"body":{"1015822":{}}}],["initgmthread(gmthread_",{"_index":11122,"title":{},"body":{"1703937":{}}}],["initializecriticalsection(&ç",{"_index":7521,"title":{},"body":{"1015833":{}}}],["initialstaç",{"_index":11013,"title":{},"body":{"1703937":{}}}],["initinputimpl(v",{"_index":3933,"title":{},"body":{"3440655":{}}}],["initinstance函数就是我们的核心，在该函数内创建窗口，它是一个虚函数，因为我们在cmywinapp类继承并重写了该函数，现在我们进入的就是我们重写的",{"_index":569,"title":{},"body":{"1015822":{}}}],["inl",{"_index":5900,"title":{},"body":{"1015847":{}}}],["inloadordermodulel",{"_index":8566,"title":{},"body":{"1015833":{}}}],["inloadordermodulelist.bl",{"_index":8574,"title":{},"body":{"1015833":{}}}],["inloadordermodulelist.fl",{"_index":8575,"title":{},"body":{"1015833":{}}}],["inmemoryordermodulelist.bl",{"_index":8578,"title":{},"body":{"1015833":{}}}],["inmemoryordermodulelist.fl",{"_index":8579,"title":{},"body":{"1015833":{}}}],["inpageerror:1",{"_index":6924,"title":{},"body":{"2949228":{}}}],["inpu",{"_index":3224,"title":{},"body":{"1015823":{}}}],["input",{"_index":4212,"title":{},"body":{"1015820":{}}}],["inputthreadsru",{"_index":3950,"title":{},"body":{"3440655":{}}}],["ins",{"_index":133,"title":{},"body":{"1015822":{},"1015850":{},"2424869":{},"2424889":{}}}],["insert(",{"_index":11354,"title":{},"body":{"1015814":{}}}],["insertitem函数最终返回的结果是一个int类型，其表示当前数据的序号，我们可以根据这个返回值使用setitemtext函数去修改对应的数据",{"_index":1208,"title":{},"body":{"1015822":{}}}],["insertstr",{"_index":1166,"title":{},"body":{"1015822":{}}}],["instanç",{"_index":7708,"title":{},"body":{"1015833":{}}}],["int",{"_index":2995,"title":{},"body":{"1015823":{}}}],["int(*)[2][2])",{"_index":2288,"title":{},"body":{"1015843":{}}}],["int(*p)[5]有什么区别？我们可以来看看宽度",{"_index":2232,"title":{},"body":{"1015843":{}}}],["int(*px)[10",{"_index":2261,"title":{},"body":{"1015843":{}}}],["int(*px)[2][2",{"_index":2225,"title":{},"body":{"1015843":{}}}],["int(*px)[3",{"_index":2281,"title":{},"body":{"1015843":{}}}],["int(*px)[5",{"_index":2222,"title":{},"body":{"1015843":{}}}],["int(*px1)p[5",{"_index":2235,"title":{},"body":{"1015843":{}}}],["int(*px3)[2][2",{"_index":2237,"title":{},"body":{"1015843":{}}}],["int(4",{"_index":2252,"title":{},"body":{"1015843":{}}}],["int)&fu",{"_index":1942,"title":{},"body":{"1015843":{}}}],["int)0",{"_index":11150,"title":{},"body":{"1703937":{}}}],["int)1",{"_index":11149,"title":{},"body":{"1703937":{}}}],["int)2",{"_index":11148,"title":{},"body":{"1703937":{}}}],["int)3",{"_index":11147,"title":{},"body":{"1703937":{}}}],["int)5",{"_index":11144,"title":{},"body":{"1703937":{}}}],["int)6",{"_index":11146,"title":{},"body":{"1703937":{}}}],["int)7",{"_index":11145,"title":{},"body":{"1703937":{}}}],["int)9",{"_index":11139,"title":{},"body":{"1703937":{}}}],["int)cwa_",{"_index":7877,"title":{},"body":{"1015833":{}}}],["int)gmthreadp",{"_index":11137,"title":{},"body":{"1703937":{}}}],["int)gmthreadstartup",{"_index":11141,"title":{},"body":{"1703937":{}}}],["int)pe32.th32proç",{"_index":8520,"title":{},"body":{"1015833":{}}}],["int*)0",{"_index":4471,"title":{},"body":{"1015831":{},"2949166":{}}}],["int*)1",{"_index":2113,"title":{},"body":{"1015843":{}}}],["int*)gmthreadp",{"_index":11134,"title":{},"body":{"1703937":{}}}],["int*)lpp",{"_index":7519,"title":{},"body":{"1015833":{}}}],["int*)malloc(sizeof(int)*10",{"_index":3473,"title":{},"body":{"1015840":{}}}],["int*)malloc(sizeof(int)*128",{"_index":6774,"title":{},"body":{"1015833":{},"2949228":{}}}],["int**)1",{"_index":2082,"title":{},"body":{"1015843":{}}}],["int***)1",{"_index":2172,"title":{},"body":{"1015843":{}}}],["int******)1",{"_index":3492,"title":{},"body":{"1015840":{}}}],["int******)2",{"_index":3493,"title":{},"body":{"1015840":{}}}],["int,int))10",{"_index":2318,"title":{},"body":{"1015843":{}}}],["int,int,int,int,int))0x77d5057",{"_index":2330,"title":{},"body":{"1015843":{}}}],["int2b",{"_index":10828,"title":{},"body":{"2424869":{}}}],["int3exceptionproc(exception_debug_inf",{"_index":4831,"title":{},"body":{"3440657":{}}}],["int3exceptionproc(pexceptioninf",{"_index":4891,"title":{},"body":{"3440657":{}}}],["int4b",{"_index":10650,"title":{},"body":{"2424889":{}}}],["int[10",{"_index":2263,"title":{},"body":{"1015840":{},"1015843":{}}}],["int[10]鏁扮粍",{"_index":2269,"title":{},"body":{"1015843":{}}}],["intdispatchmessagı",{"_index":4064,"title":{},"body":{"3440655":{}}}],["integi",{"_index":10453,"title":{},"body":{"1015818":{}}}],["intel的设计思想就是当你要去创建一个新的任务（线程）时应该有一个新的环境，而不是基于老的环境去做，这也就需要换掉你的所有寄存器，因此你可以从tss中把各值拉过来给到寄存器，并且将原先的寄存器的值再放入tss中，这样可以直接恢复原先的环境",{"_index":9290,"title":{},"body":{"1015831":{}}}],["intel认为一张页的大小为4kb是比较合理的，先确定了页的大小为4kb（4096个字节，也就是2的12次方），此时10",{"_index":9504,"title":{},"body":{"1015831":{}}}],["intel设计tss的目的是为了任务切换（线程切换），但是windows和linux都没有使用，而是采用堆栈来保护线程的各种寄存器",{"_index":11244,"title":{},"body":{"1703937":{}}}],["interface(图形设备接口)，它为应用程序提供了可调用的多种服务，这些服务一起构成了强大和通用的图形编程语言",{"_index":598,"title":{},"body":{"1015822":{}}}],["interface的缩写，其中文为图形设备接口",{"_index":7651,"title":{},"body":{"1015833":{}}}],["interface（图形设备接口），包含用于画图和显示文本的函数",{"_index":7147,"title":{},"body":{"1015833":{}}}],["interface），window",{"_index":2407,"title":{},"body":{"1015846":{}}}],["interrup",{"_index":9565,"title":{},"body":{"1015831":{}}}],["interv",{"_index":7435,"title":{},"body":{"1015833":{}}}],["int类型",{"_index":8770,"title":{},"body":{"1015850":{}}}],["int里有很多个这种结构体，它与倒入表一样，当你遇见与该结构体相同宽度的一段0x00填充的数据则该表就结束了。同样，你在这张表中发现结构体的数量，就表示你依赖该模块的函数数量",{"_index":6577,"title":{},"body":{"1015828":{}}}],["int鍗犵敤4涓瓧鑺傦紝闇�瑕�40涓瓧鑺傦紝40涓瓧鑺傛濂界鍚�4瀛楄妭瀵归綈锛屾墍浠ュ垎閰嶇殑灏辨槸40涓瓧鑺",{"_index":1923,"title":{},"body":{"1015843":{}}}],["inv",{"_index":3187,"title":{},"body":{"1015823":{}}}],["invalid_handle_valu",{"_index":8216,"title":{},"body":{"1015833":{}}}],["invalid_soç",{"_index":9855,"title":{},"body":{"1015818":{}}}],["io_map锛學indows2000浠ュ悗涓嶇敤浜",{"_index":9333,"title":{},"body":{"1015831":{}}}],["io_map锛學indows2000浠ュ悗涓嶇敤浜嗭紝榛樿鍊",{"_index":9350,"title":{},"body":{"1015831":{}}}],["io_no_incr",{"_index":3953,"title":{},"body":{"1015847":{},"3440655":{}}}],["iocompleterequest(pirp",{"_index":5719,"title":{},"body":{"1015847":{}}}],["iocreatedev",{"_index":5648,"title":{},"body":{"1015847":{}}}],["iocreatedevr",{"_index":5647,"title":{},"body":{"1015847":{}}}],["iocreatesymboliclink(&symboliclink",{"_index":5678,"title":{},"body":{"1015847":{}}}],["iogetcurrentirpstacklocation(pirp",{"_index":5777,"title":{},"body":{"1015847":{}}}],["iostatus.inf",{"_index":5717,"title":{},"body":{"1015847":{}}}],["iostatus.stat",{"_index":5715,"title":{},"body":{"1015847":{}}}],["iostr",{"_index":2773,"title":{},"body":{"1015814":{},"1015823":{}}}],["ip",{"_index":6062,"title":{},"body":{"1015818":{},"1015828":{}}}],["ip.src==172.16.176.5)，172.16.176.5地址为服务器端的ip地址，172.16.176.12地址为客户端的ip地址",{"_index":9909,"title":{},"body":{"1015818":{}}}],["ipaddr",{"_index":10140,"title":{},"body":{"1015818":{}}}],["ipv4",{"_index":10320,"title":{},"body":{"1015818":{}}}],["ip地址",{"_index":9664,"title":{},"body":{"1015818":{}}}],["ip地址以\".\"符号分割，一共有四组，例如：120.120.120.120，每一组都是的区间都是0到255，ip地址的组成是网络号加上主机号，而具体的界定我们可以查看下文",{"_index":9641,"title":{},"body":{"1015818":{}}}],["ip地址分为5类，其分别如下所示",{"_index":9642,"title":{},"body":{"1015818":{}}}],["ip地址：192.168.8.117，子网掩码：255.255.255.0，将这两个转为二进制则为",{"_index":9668,"title":{},"body":{"1015818":{}}}],["ip帧结构",{"_index":10268,"title":{},"body":{"1015818":{}}}],["ip帧结构与ip包的解析",{"_index":10264,"title":{},"body":{"1015818":{}}}],["ip鍦板潃",{"_index":9751,"title":{},"body":{"1015818":{}}}],["iqmp",{"_index":10468,"title":{},"body":{"1015818":{}}}],["ir",{"_index":9104,"title":{},"body":{"1015818":{},"1015831":{}}}],["irecordinf",{"_index":3007,"title":{},"body":{"1015823":{}}}],["irecv",{"_index":10087,"title":{},"body":{"1015818":{}}}],["iretd返回",{"_index":9373,"title":{},"body":{"1015831":{}}}],["irp_mj_c",{"_index":5686,"title":{},"body":{"1015847":{}}}],["irp_mj_cl",{"_index":5695,"title":{},"body":{"1015847":{}}}],["irp_mj_device_control",{"_index":5698,"title":{},"body":{"1015847":{}}}],["irp_mj_pow",{"_index":5701,"title":{},"body":{"1015847":{}}}],["irp_mj_r",{"_index":5689,"title":{},"body":{"1015847":{}}}],["irp_mj_shutdow",{"_index":5703,"title":{},"body":{"1015847":{}}}],["irp_mj_wr",{"_index":5692,"title":{},"body":{"1015847":{}}}],["irp类型",{"_index":5683,"title":{},"body":{"1015847":{}}}],["irq0",{"_index":11208,"title":{},"body":{"1703937":{}}}],["irq号",{"_index":11206,"title":{},"body":{"1703937":{}}}],["isderivedfrom(ç",{"_index":251,"title":{},"body":{"1015822":{}}}],["issystemint3(pexceptioninf",{"_index":4834,"title":{},"body":{"3440657":{}}}],["it",{"_index":11469,"title":{},"body":{"1015814":{}}}],["itb",{"_index":11471,"title":{},"body":{"1015814":{}}}],["iter",{"_index":11717,"title":{},"body":{"1015814":{}}}],["iunknow",{"_index":2640,"title":{},"body":{"1015823":{}}}],["iunknown接口是com的核心，因为所有其他的com接口都必须从iunknown继承；它包含三个接口函数：queryinterface、addref和release，其中queryinterface用于接口查询，从com对象的一个接口获得另一个接口，一个对象可能实现了多个接口，这样就可以通过queryinterface在对象多个接口之间跳转从而获得多个接口提供的服务；addref与release则用于管理com对象的生命周期，当com对象不再使用时需要释放，因此com使用了引用计数的方法来对对象进行管理，当有一个用户获得接口指针后调用addref将引用计数加1，相反，当一个用户用完接口指针后就调用release来使引用计数减1，这样当引用计数为0时，com对象就可以从内存中释放；由于iunknown提供了接口查询与生命周期控制两个功能，因此com的每个接口都应该继承于它",{"_index":2822,"title":{},"body":{"1015823":{}}}],["ival",{"_index":2960,"title":{},"body":{"1015823":{}}}],["iw",{"_index":11987,"title":{},"body":{"1015817":{}}}],["j",{"_index":11928,"title":{},"body":{"1015817":{}}}],["javascript调用",{"_index":3214,"title":{},"body":{"1015823":{}}}],["jb",{"_index":11959,"title":{},"body":{"1015817":{}}}],["jb/jnae/jç",{"_index":11917,"title":{},"body":{"1015817":{}}}],["jbe/",{"_index":11925,"title":{},"body":{"1015817":{}}}],["jc",{"_index":5437,"title":{},"body":{"1015825":{}}}],["jcc指令",{"_index":5422,"title":{},"body":{"1015825":{}}}],["jcc指令与标志寄存器是挂钩的，有太多了，不需要去背诵",{"_index":5438,"title":{},"body":{"1015825":{}}}],["jd",{"_index":11974,"title":{},"body":{"1015817":{}}}],["jl/jnge",{"_index":11936,"title":{},"body":{"1015817":{}}}],["jle/jng",{"_index":11939,"title":{},"body":{"1015817":{}}}],["jmp",{"_index":5353,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015847":{}}}],["jmp指令",{"_index":5351,"title":{},"body":{"1015825":{}}}],["jn",{"_index":11930,"title":{},"body":{"1015817":{}}}],["jnb/jae/jnç",{"_index":11919,"title":{},"body":{"1015817":{}}}],["jnbe/j",{"_index":11927,"title":{},"body":{"1015817":{}}}],["jnl/jge",{"_index":11937,"title":{},"body":{"1015817":{}}}],["jnle/jg",{"_index":11940,"title":{},"body":{"1015817":{}}}],["jno",{"_index":11915,"title":{},"body":{"1015817":{}}}],["jnp/jpo",{"_index":11934,"title":{},"body":{"1015817":{}}}],["jnz/jne",{"_index":11923,"title":{},"body":{"1015817":{}}}],["jp/jpe",{"_index":11932,"title":{},"body":{"1015817":{}}}],["jrcxz",{"_index":11971,"title":{},"body":{"1015817":{}}}],["jz/je",{"_index":11921,"title":{},"body":{"1015817":{}}}],["k",{"_index":3627,"title":{},"body":{"1015831":{},"1015840":{}}}],["k/",{"_index":10416,"title":{},"body":{"1015818":{}}}],["kapc_env",{"_index":10866,"title":{},"body":{"2424869":{}}}],["kapc结构体",{"_index":10824,"title":{},"body":{"2424869":{}}}],["kapc缁撴瀯浣撴寚閽",{"_index":10863,"title":{},"body":{"2424869":{}}}],["kapc鎸囬拡锛堟寚鍚戜竴涓凡缁忓垵濮嬪寲瀹屾垚鐨凙pc锛",{"_index":10885,"title":{},"body":{"2424869":{}}}],["kd",{"_index":4291,"title":{},"body":{"2424869":{},"2424889":{},"2949166":{},"2949228":{}}}],["keinitializeapc函数的使用格式如下，我们可以看见传递的每个参数都是用来给kapc结构体成员赋值用的，也就表示keinitializeapc函数就是用于创建并初始化一个apc的",{"_index":10861,"title":{},"body":{"2424869":{}}}],["keinitializeapc本身的功能很简单，但是对kapc.apcstateindex的赋值，我们需要了解一下，虽然它与kthread.apcstateindex同名，但含义不完全一样，因为当前该成员有4个值：0、1、2、3，它们的含义如下",{"_index":10875,"title":{},"body":{"2424869":{}}}],["keinitializeapç",{"_index":10860,"title":{},"body":{"2424869":{}}}],["keinitializeevent(&inputthreadsst",{"_index":3935,"title":{},"body":{"3440655":{}}}],["keinitializetimer(",{"_index":3941,"title":{},"body":{"3440655":{}}}],["kenumberprocess",{"_index":2512,"title":{},"body":{"1015846":{}}}],["kep",{"_index":10482,"title":{},"body":{"1015818":{}}}],["kereleasemutant函数正常调用时就会将signalstate自增1，如果出现互斥体所属线程突然死亡的情况（即abandon成员值为1），该函数会将signalstate直接设置为1，并且将互斥体所属线程设置为null，同时把自己从死亡线程的互斥体链表中移除，这样互斥体便可再为其它线程所使用，从而解决了等待对象被遗弃问题",{"_index":10756,"title":{},"body":{"2424889":{}}}],["kernel32.dl",{"_index":2411,"title":{},"body":{"1015828":{},"1015846":{}}}],["kernel32.dll：最核心的功能模块，例如内存管理、进程线程相关的函数等",{"_index":7144,"title":{},"body":{"1015833":{}}}],["kernelapcinprogr",{"_index":10780,"title":{},"body":{"2424869":{}}}],["kernelapcp",{"_index":10783,"title":{},"body":{"2424869":{}}}],["kernelr",{"_index":10837,"title":{},"body":{"2424869":{}}}],["kernelstaç",{"_index":11015,"title":{},"body":{"1703937":{}}}],["kernelt",{"_index":10951,"title":{},"body":{"1703937":{}}}],["keservicedescript",{"_index":5822,"title":{},"body":{"1015847":{}}}],["kesetevent(&inputthreadsst",{"_index":3952,"title":{},"body":{"3440655":{}}}],["keusermodecallback(user32_callback_windowproç",{"_index":4001,"title":{},"body":{"3440655":{}}}],["keusermodecallback函数的语法格式如下",{"_index":4067,"title":{},"body":{"3440655":{}}}],["keusermodecallback）也知道它会去调用keusermodecallback函数",{"_index":4066,"title":{},"body":{"3440655":{}}}],["keusermodecallbaç",{"_index":4062,"title":{},"body":{"3440655":{}}}],["kev",{"_index":4547,"title":{},"body":{"3440657":{}}}],["kewaitforsingleobject函数",{"_index":10610,"title":{},"body":{"2424889":{}}}],["kewaitforsingleobject函数可以分为两部分，首先做的是要在线程结构体中加入等待块，微软在设计线程结构体时实际上已经预留了一个空间用于存储等待块，即_kthread的0x70偏移位成员waitblock，该成员预留了4个等待块的空间，即0x4",{"_index":10612,"title":{},"body":{"2424889":{}}}],["key",{"_index":7817,"title":{},"body":{"1015833":{}}}],["key_all_aç",{"_index":2728,"title":{},"body":{"1015823":{}}}],["keyboardlay",{"_index":3809,"title":{},"body":{"3440655":{}}}],["keyboardthreadid,keyboardthreadmain,",{"_index":3946,"title":{},"body":{"3440655":{}}}],["keyc",{"_index":7820,"title":{},"body":{"1015833":{}}}],["kideliverapc函数",{"_index":10907,"title":{},"body":{"2424869":{}}}],["kidispatchexcep",{"_index":4270,"title":{},"body":{"2949166":{}}}],["kifastcallentry，使得执行该函数时它所去寻找的系统服务表是我们山寨的那一份，这样我们才可以使用重载后的内核",{"_index":6684,"title":{},"body":{"1933380":{}}}],["kifastcallentry，该函数是需要根据系统调用号在系统服务表中找到函数地址，因此我们想要能够真正的使用重载后的内存，也需要自己去山寨一份系统服务表，将里面的函数地址指向我们新的内核对应地址",{"_index":6682,"title":{},"body":{"1933380":{}}}],["kifastsystemcal",{"_index":2477,"title":{},"body":{"1015846":{}}}],["kifindreadythread就是根据调度链表去查询的线程，它的查询优先级就是根据调度链表的级别（32个调度链表），按线程级别大小从高到低查找：31、30、29、28...，如果在线程级别31的链表中找到了线程，那么查找就结束了",{"_index":11260,"title":{},"body":{"1703937":{}}}],["kiinitializeuserapc函数",{"_index":10924,"title":{},"body":{"2424869":{}}}],["kiinsertqueueapç",{"_index":10882,"title":{},"body":{"2424869":{}}}],["kiintsystemcal",{"_index":2468,"title":{},"body":{"1015846":{}}}],["kiprocessorbloç",{"_index":2514,"title":{},"body":{"1015846":{}}}],["kiserviceexit函数是系统调用、异常或中断返回用户空间的必经之路，因此当线程调用api、程序出现异常或中断时就会调用kiserviceexit函数，该函数会检查当前kthread.kapc_state.userapcpending是否为0，即表示是否有用户空间的apc请求，如果有的话就会向下继续走，最后kideliverapc函数专门用于处理apc。（只判断用户空间的apc请求是因为在kideliverapc函数中会优先处理内核空间的apc然后处理用户空间的apc，因此我们不需要再多余进行判断",{"_index":10792,"title":{},"body":{"2424869":{}}}],["kisystemservice保存现场",{"_index":2518,"title":{},"body":{"1015846":{}}}],["kiuserapcdispatcher函数",{"_index":10932,"title":{},"body":{"2424869":{}}}],["kiuserapcdispatcher函数是在ntdll.dll模块中，我们可以通过ida来分析一下它是干啥用的。这个函数很简单，首先就是取normalroutine，然后调用对应的函数，接着再取_context结构体，给到zwcontinue用于顺利返回0环",{"_index":10933,"title":{},"body":{"2424869":{}}}],["kiuserexceptiondispatcher函数存在与ntdll.dll模块中，我们可以通过ida找到并分析，该函数的作用很简单，首先调用rtldispatchexception函数（该函数主要用于查找并执行异常处理函数）：如果rtldispatchexception返回真则表示异常处理成功，那么原代码就需要从新的地方或原来的地方开始执行，因此需要调用zwcontinue函数再次进入0环，将修正后的_context结构体给到trap_frame，这样就可以在线程再次返回3环时，从修正后的位置开始执行；如果rtldispatchexception返回假则表示异常没有被处理或没有异常处理函数，则调用zwraiseexception函数进行二次异常分发",{"_index":4309,"title":{},"body":{"2949166":{}}}],["kprior",{"_index":10886,"title":{},"body":{"2424869":{}}}],["kprocessor_",{"_index":4278,"title":{},"body":{"2424869":{},"2949166":{}}}],["krnlfunctabl",{"_index":5815,"title":{},"body":{"1015847":{}}}],["krnlfunctable.servicetablebase[0x7",{"_index":5834,"title":{},"body":{"1015847":{}}}],["krnlfunctable.servicetablep",{"_index":5825,"title":{},"body":{"1015847":{}}}],["kservice_table_descript",{"_index":5819,"title":{},"body":{"1015847":{}}}],["ksystem_service_",{"_index":5811,"title":{},"body":{"1015847":{}}}],["l\"\\\\??\\\\mytestdriv",{"_index":5677,"title":{},"body":{"1015847":{}}}],["l\"\\\\device\\\\mydev",{"_index":5643,"title":{},"body":{"1015847":{}}}],["l\"chi",{"_index":7136,"title":{},"body":{"1015833":{}}}],["l\"hel",{"_index":7183,"title":{},"body":{"1015833":{}}}],["l\"titl",{"_index":7182,"title":{},"body":{"1015833":{}}}],["l\"中国",{"_index":7127,"title":{},"body":{"1015833":{}}}],["l\"涓浗",{"_index":7164,"title":{},"body":{"1015833":{}}}],["l(10",{"_index":11660,"title":{},"body":{"1015814":{}}}],["l.beg",{"_index":11662,"title":{},"body":{"1015814":{}}}],["l.en",{"_index":11664,"title":{},"body":{"1015814":{}}}],["l0/g0",{"_index":4917,"title":{},"body":{"3440657":{}}}],["l3/g3：控制dr0",{"_index":4918,"title":{},"body":{"3440657":{}}}],["l40",{"_index":8997,"title":{},"body":{"1015831":{}}}],["lahf（l",{"_index":5424,"title":{},"body":{"1015825":{}}}],["language，中文为接口描述语言；idl的主要作用是用来以一种与语言无关的方法来定义一个组件的接口（它的方法和参数），使组件的接口描述在任何语言环境中都认识；idl是一个文本文件，它的语言语法比较简单，很像c语言；在atl中idl文件由midl编译，编译后生成tlb文件，类型库以tlb文件形式单独存在，同时也保存在目标文件的资源中，因此我们在引入类型库的时候，即可以指定tlb文件，也可以指定目标文件",{"_index":3103,"title":{},"body":{"1015823":{}}}],["las",{"_index":3830,"title":{},"body":{"1015814":{},"1015818":{},"1015828":{},"1015833":{},"3440655":{}}}],["lbs_disablenoscrol",{"_index":1147,"title":{},"body":{"1015822":{}}}],["lbs_extendedsel",{"_index":1134,"title":{},"body":{"1015822":{}}}],["lbs_multicol",{"_index":1136,"title":{},"body":{"1015822":{}}}],["lbs_multiplesel",{"_index":1141,"title":{},"body":{"1015822":{}}}],["lbs_noredraw",{"_index":1149,"title":{},"body":{"1015822":{}}}],["lbs_notif",{"_index":1143,"title":{},"body":{"1015822":{}}}],["lbs_usetabstop",{"_index":1145,"title":{},"body":{"1015822":{}}}],["ldmod",{"_index":8560,"title":{},"body":{"1015833":{}}}],["ldr",{"_index":8558,"title":{},"body":{"1015833":{}}}],["ldr_mod",{"_index":8569,"title":{},"body":{"1015833":{}}}],["ldt锛屽～0",{"_index":9331,"title":{},"body":{"1015831":{}}}],["le",{"_index":1388,"title":{},"body":{"1015840":{},"1015843":{},"1015846":{},"1015847":{},"2949166":{}}}],["lear",{"_index":6617,"title":{"1015827":{}},"body":{}}],["leavecriticalsection(&ç",{"_index":7512,"title":{},"body":{"1015833":{}}}],["leftchild：左子树地址",{"_index":6703,"title":{},"body":{"2949228":{}}}],["len",{"_index":9812,"title":{},"body":{"1015818":{}}}],["length",{"_index":2360,"title":{},"body":{"1015833":{},"1015843":{},"1015847":{}}}],["length_is((length",{"_index":5570,"title":{},"body":{"1015847":{}}}],["length_is(length",{"_index":5562,"title":{},"body":{"1015847":{}}}],["less<",{"_index":11433,"title":{},"body":{"1015814":{}}}],["level):person(agı",{"_index":3546,"title":{},"body":{"1015840":{}}}],["level，当前特权级）来判断程序的权限等级，这里的cpl实际上就是cs和ss中存储的段选择子的最后2位（该位与其他段寄存器段选择子的rpl位是同一位置",{"_index":9072,"title":{},"body":{"1015831":{}}}],["level，描述符特权级别）存储在段描述符中，其规定了访问该段所需要的特权级别是什么",{"_index":9080,"title":{},"body":{"1015831":{}}}],["level，请求特权级别）是针对段选择子而言的，每个段的选择子都有自己的rpl",{"_index":9084,"title":{},"body":{"1015831":{}}}],["lf",{"_index":865,"title":{},"body":{"1015822":{}}}],["lf.lfheigi",{"_index":872,"title":{},"body":{"1015822":{}}}],["lf.lfital",{"_index":875,"title":{},"body":{"1015822":{}}}],["lf.lfweigi",{"_index":869,"title":{},"body":{"1015822":{}}}],["li",{"_index":138,"title":{},"body":{"1015822":{},"1015828":{},"1015831":{},"1015833":{},"2424889":{}}}],["libeay32.lip",{"_index":10511,"title":{},"body":{"1015818":{}}}],["libmysql.lip",{"_index":8861,"title":{},"body":{"1015850":{}}}],["libr",{"_index":88,"title":{},"body":{"1015814":{},"1015822":{},"1015833":{}}}],["library)的缩写，它是一套c++模版；atl的基本目标：使com开发尽可能自动化，这个基本目标决定了atl只面向com开发提供支持",{"_index":3089,"title":{},"body":{"1015823":{}}}],["library中搜索closehandle这个函数，它是用来关闭句柄的，暂时先不用管其原理，我们只要知道它所支持关闭就都是内核对象",{"_index":7304,"title":{},"body":{"1015833":{}}}],["library中搜索hierarç",{"_index":38,"title":{},"body":{"1015822":{}}}],["library中明确说明了这个返回值表示的结果",{"_index":7991,"title":{},"body":{"1015833":{}}}],["library中查询",{"_index":7660,"title":{},"body":{"1015833":{}}}],["library即可",{"_index":1236,"title":{},"body":{"1015822":{}}}],["library对该函数的介绍",{"_index":7597,"title":{},"body":{"1015833":{}}}],["library我们可以知道该函数的参数分别是线程句柄，而另一个则是out类型参数，这种类型则可以理解为getexitcodethread函数的返回结果",{"_index":7461,"title":{},"body":{"1015833":{}}}],["library查看系统定义的",{"_index":7930,"title":{},"body":{"1015833":{}}}],["library的createwindow函数下面找到",{"_index":7886,"title":{},"body":{"1015833":{}}}],["library的介绍是这样的：如果函数成功，返回值是一个指向mutex对象的句柄；如果命名的mutex对象在函数调用前已经存在，函数返回现有对象的句柄，getlasterror返回error_already_exists（表示互斥体以及存在）；否则，调用者创建该mutex对象；如果函数失败，返回值为null，要获得扩展的错误信息，请调用getlasterror获取",{"_index":7554,"title":{},"body":{"1015833":{}}}],["library的说明，该数组第一个成员用于表示异常的原因（值为0表示有线程试图读取，值为1表示有线程试图写入）。该数组第二个成员用于标识导致异常的虚拟地址。由于内存断点是针对整个物理页设置的，因此触发异常的位置可能不是我们设置断点的实际位置。因此，在此处通过第二个成员对地址进行检查，以确定是否为我们设置断点的位置。如果不是，则直接继续执行，如果是，则进行相应处理",{"_index":4896,"title":{},"body":{"3440657":{}}}],["library，在这里我们很清楚的可以看见终止进程失败了，这个错误编号的意思就是句柄无效，那么就论证了句柄是私有的，其他进程无法根据这个句柄来终止进程，但是我们想要真正的关闭这个进程，那就需要借助pid来获取句柄了，具体细节如下",{"_index":7346,"title":{},"body":{"1015833":{}}}],["library，缩写为dll），是微软公司在微软windows操作系统中对共享函数库概念的一种实现方式，这些库函数的文件扩展名称为：.dll、.ocx（包含activex控制的库",{"_index":8314,"title":{},"body":{"1015833":{}}}],["lineto(hdç",{"_index":3771,"title":{},"body":{"1015833":{},"3440655":{}}}],["lineto函数画线",{"_index":720,"title":{},"body":{"1015822":{}}}],["linitialcoun",{"_index":10695,"title":{},"body":{"2424889":{}}}],["linux操作系统就采用了一种类似的机制，通过单独的进程专门负责接收消息，并将消息发送给不同的进程进行处理。但这种方法需要进行频繁的跨进程通信，可能导致效率下降",{"_index":3795,"title":{},"body":{"3440655":{}}}],["lis",{"_index":3889,"title":{},"body":{"1015814":{},"1015818":{},"3440655":{}}}],["list<",{"_index":11659,"title":{},"body":{"1015814":{}}}],["list<int>:",{"_index":11411,"title":{},"body":{"1015814":{}}}],["list_entr",{"_index":3827,"title":{},"body":{"3440655":{},"3440657":{}}}],["list_h",{"_index":6984,"title":{},"body":{"2949228":{}}}],["listbox",{"_index":1081,"title":{},"body":{"1015822":{}}}],["listbox控件",{"_index":1127,"title":{},"body":{"1015822":{}}}],["listbox控件就是列表框，如下表是其的常用风格",{"_index":1131,"title":{},"body":{"1015822":{}}}],["listctrl控件",{"_index":1172,"title":{},"body":{"1015822":{}}}],["listctrl控件是列表视图控件，其常用风格如下表",{"_index":1174,"title":{},"body":{"1015822":{}}}],["listen(ssoç",{"_index":9796,"title":{},"body":{"1015818":{}}}],["list容器",{"_index":11392,"title":{},"body":{"1015814":{}}}],["list容器具有所有顺序容器都有的函数，这里也不赘述那些函数了，但是有一个地方需要注意，就是list容器也没办法使用类似v1.begin()+3这种用法，如果你要使用的时候建议单独写一个函数",{"_index":11410,"title":{},"body":{"1015814":{}}}],["llval",{"_index":2957,"title":{},"body":{"1015823":{}}}],["lmaximumcoun",{"_index":10697,"title":{},"body":{"2424889":{}}}],["lo",{"_index":9551,"title":{},"body":{"1015831":{}}}],["load_dll_debug_ev",{"_index":4660,"title":{},"body":{"3440657":{}}}],["load_dll_debug_inf",{"_index":4691,"title":{},"body":{"3440657":{}}}],["loaddl",{"_index":4692,"title":{},"body":{"3440657":{}}}],["loaddll(384",{"_index":8470,"title":{},"body":{"1015833":{}}}],["loaddll(dw",{"_index":8446,"title":{},"body":{"1015833":{}}}],["loaddll(getpid(\"test.ex",{"_index":8526,"title":{},"body":{"1015833":{}}}],["loaddll闇�瑕佷袱涓弬鏁颁竴涓弬鏁版槸杩涚▼id锛屼竴涓槸dll鏂囦欢鐨勮矾寰",{"_index":8445,"title":{},"body":{"1015833":{}}}],["loaderflagı",{"_index":6177,"title":{},"body":{"1015828":{}}}],["loadlibr",{"_index":8432,"title":{},"body":{"1015833":{}}}],["loadlibrary",{"_index":8463,"title":{},"body":{"1015833":{}}}],["loadlibrary(\"b.dl",{"_index":8348,"title":{},"body":{"1015833":{}}}],["loadlibrary杩欎釜鍑芥暟鏄湪kernel32.dll杩欎釜妯″潡涓殑锛屾墍浠ラ渶瑕佸厛鑾峰彇kernel32.dll杩欎釜妯″潡鐨勫彞鏌",{"_index":8459,"title":{},"body":{"1015833":{}}}],["loadlibrary鍑芥暟浼氬厛浠庡綋鍓嶇洰褰曞鎵撅紝鐒跺悗鍦ㄧ郴缁熺洰褰曞鎵",{"_index":8347,"title":{},"body":{"1015833":{}}}],["loadresource(n",{"_index":1307,"title":{},"body":{"1015822":{}}}],["loc",{"_index":6643,"title":{},"body":{"1933380":{}}}],["local",{"_index":2885,"title":{},"body":{"1015823":{}}}],["local_tv_seç",{"_index":10222,"title":{},"body":{"1015818":{}}}],["localtime(&local_tv_seç",{"_index":10225,"title":{},"body":{"1015818":{}}}],["lock(硬编码：f0)：lock是用来锁地址总线，例如01002891这个地址开头是lock指令，当前地址在多核情况下，只能有一个核cpu去读这个地址，其他核cpu是可以不读取的",{"_index":11794,"title":{},"body":{"1015817":{}}}],["lockchargı",{"_index":6956,"title":{},"body":{"2949228":{}}}],["lockserv",{"_index":2890,"title":{},"body":{"1015823":{}}}],["lockserver(bol",{"_index":2653,"title":{},"body":{"1015823":{}}}],["lockserver用于控制组件的生存周期，用于在多客户调用com时，锁定com，以免一个客户退出时销毁了com，那么其他客户的调用将发生错误",{"_index":2893,"title":{},"body":{"1015823":{}}}],["lock和repeat前缀指令",{"_index":11793,"title":{},"body":{"1015817":{}}}],["logfo",{"_index":864,"title":{},"body":{"1015822":{}}}],["logiç",{"_index":9776,"title":{},"body":{"1015818":{}}}],["long",{"_index":481,"title":{},"body":{"1015822":{},"1015823":{},"1015828":{},"1015843":{},"1015847":{},"1015850":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{}}}],["longflagı",{"_index":6717,"title":{},"body":{"2949228":{}}}],["longlongu",{"_index":2956,"title":{},"body":{"1015823":{}}}],["longtex",{"_index":8812,"title":{},"body":{"1015850":{}}}],["loope/loopz",{"_index":11967,"title":{},"body":{"1015817":{}}}],["loopne/loopnz",{"_index":11958,"title":{},"body":{"1015817":{}}}],["lop",{"_index":11969,"title":{},"body":{"1015817":{}}}],["low",{"_index":7956,"title":{},"body":{"1015833":{}}}],["loword(wp",{"_index":7873,"title":{},"body":{"1015833":{}}}],["lpad",{"_index":8344,"title":{},"body":{"1015833":{}}}],["lpadd)(int,",{"_index":8342,"title":{},"body":{"1015833":{}}}],["lpadd)getprocaddress(h",{"_index":8350,"title":{},"body":{"1015833":{}}}],["lpaddr",{"_index":4855,"title":{},"body":{"1015833":{},"2949228":{},"3440657":{}}}],["lpaddress：想要申请的起始内存地址，需要结合第二个参数dwsize。如果申请的内存被占用，则无法申请。如果我们手动去填写该值还需要去遍历vad树才知道什么地址区间可以申请，过程比较麻烦，所以我们可以将这个值填为null，系统就会自动去分配一块没被占用的内存空间",{"_index":6743,"title":{},"body":{"2949228":{}}}],["lpallocaddr",{"_index":8449,"title":{},"body":{"1015833":{}}}],["lpallocaddr浼犵粰绾跨▼鍑芥暟鐨勫弬鏁�.鍥犱负dll鍚嶅瓧鍒嗛厤鍦ㄥ唴瀛樹腑",{"_index":8682,"title":{},"body":{"1015833":{}}}],["lpapplication",{"_index":7208,"title":{},"body":{"1015833":{}}}],["lpar",{"_index":500,"title":{},"body":{"1015822":{},"1015833":{},"3440655":{}}}],["lparamhkcur",{"_index":3855,"title":{},"body":{"3440655":{}}}],["lpattribu",{"_index":6793,"title":{},"body":{"1015833":{},"2949228":{}}}],["lpattributes：指定安全属性，通常设为",{"_index":6799,"title":{},"body":{"2949228":{}}}],["lpbaseaddr",{"_index":2434,"title":{},"body":{"1015833":{},"1015846":{}}}],["lpbaseofdl",{"_index":4730,"title":{},"body":{"3440657":{}}}],["lpbaseofimagı",{"_index":4715,"title":{},"body":{"3440657":{}}}],["lpbuf",{"_index":2435,"title":{},"body":{"1015833":{},"1015846":{},"2949228":{}}}],["lpbyt",{"_index":7280,"title":{},"body":{"1015833":{}}}],["lpcapt",{"_index":7155,"title":{},"body":{"1015833":{}}}],["lpcfil",{"_index":8232,"title":{},"body":{"1015833":{}}}],["lpclassn",{"_index":7752,"title":{},"body":{"1015833":{}}}],["lpcmdli",{"_index":544,"title":{},"body":{"1015822":{},"1015833":{}}}],["lpcmdline、",{"_index":7713,"title":{},"body":{"1015833":{}}}],["lpcommandl",{"_index":7211,"title":{},"body":{"1015833":{}}}],["lpcommandline、lpstartupinf",{"_index":7715,"title":{},"body":{"1015833":{}}}],["lpcontex",{"_index":7470,"title":{},"body":{"1015833":{}}}],["lpcreate_process_debug_inf",{"_index":4720,"title":{},"body":{"3440657":{}}}],["lpcreate_thread_debug_inf",{"_index":4711,"title":{},"body":{"3440657":{}}}],["lpcreatep",{"_index":465,"title":{},"body":{"1015822":{}}}],["lpcreatestruç",{"_index":490,"title":{},"body":{"1015822":{}}}],["lpcstr",{"_index":240,"title":{},"body":{"1015822":{},"1015828":{},"2949228":{}}}],["lpctstr",{"_index":57,"title":{},"body":{"1015822":{},"1015833":{},"2424889":{},"2949228":{}}}],["lpctstr)lpfilepath",{"_index":8665,"title":{},"body":{"1015833":{}}}],["lpcurrentdirect",{"_index":7227,"title":{},"body":{"1015833":{}}}],["lpcvo",{"_index":2433,"title":{},"body":{"1015833":{},"1015846":{}}}],["lpdebug_ev",{"_index":4699,"title":{},"body":{"3440657":{}}}],["lpdebugstr",{"_index":4737,"title":{},"body":{"3440657":{}}}],["lpdesktop",{"_index":7268,"title":{},"body":{"1015833":{}}}],["lpdwor",{"_index":7404,"title":{},"body":{"1015833":{}}}],["lpdword)lpaddr",{"_index":8247,"title":{},"body":{"1015833":{}}}],["lpenv",{"_index":7223,"title":{},"body":{"1015833":{}}}],["lpeventattribu",{"_index":7568,"title":{},"body":{"1015833":{},"2424889":{}}}],["lpexception_debug_inf",{"_index":4704,"title":{},"body":{"3440657":{}}}],["lpexistingfil",{"_index":8083,"title":{},"body":{"1015833":{}}}],["lpexit_process_debug_inf",{"_index":4727,"title":{},"body":{"3440657":{}}}],["lpexit_thread_debug_inf",{"_index":4724,"title":{},"body":{"3440657":{}}}],["lpexitç",{"_index":7458,"title":{},"body":{"1015833":{}}}],["lpfil",{"_index":8109,"title":{},"body":{"1015833":{}}}],["lpfileinf",{"_index":8151,"title":{},"body":{"1015833":{}}}],["lpfileparamaddr",{"_index":8638,"title":{},"body":{"1015833":{}}}],["lpfilepath",{"_index":8636,"title":{},"body":{"1015833":{}}}],["lpfilesizeh",{"_index":8133,"title":{},"body":{"1015833":{}}}],["lpfilesystemflagı",{"_index":8047,"title":{},"body":{"1015833":{}}}],["lpfilesystemnamebuf",{"_index":8049,"title":{},"body":{"1015833":{}}}],["lpfindfil",{"_index":8200,"title":{},"body":{"1015833":{}}}],["lpfloldproteç",{"_index":4862,"title":{},"body":{"3440657":{}}}],["lpfnfil",{"_index":4443,"title":{},"body":{"2949166":{}}}],["lpfnhandl",{"_index":4445,"title":{},"body":{"2949166":{}}}],["lphandl",{"_index":7445,"title":{},"body":{"1015833":{}}}],["lpimagı",{"_index":4718,"title":{},"body":{"3440657":{}}}],["lpload_dll_debug_inf",{"_index":4731,"title":{},"body":{"3440657":{}}}],["lplong",{"_index":10709,"title":{},"body":{"2424889":{}}}],["lpmaximumcomponentlength",{"_index":8045,"title":{},"body":{"1015833":{}}}],["lpmsg",{"_index":3988,"title":{},"body":{"1015833":{},"3440655":{}}}],["lpmutexattrip",{"_index":7532,"title":{},"body":{"1015833":{},"2424889":{}}}],["lpnam",{"_index":6796,"title":{},"body":{"1015833":{},"2424889":{},"2949228":{}}}],["lpname：指定已存在的映射对象的名称",{"_index":6818,"title":{},"body":{"2949228":{}}}],["lpname：指定映射对象的名称。没有名称，可以设置为",{"_index":6802,"title":{},"body":{"2949228":{}}}],["lpnewfil",{"_index":8085,"title":{},"body":{"1015833":{}}}],["lpnumberofbytesr",{"_index":2438,"title":{},"body":{"1015833":{},"1015846":{}}}],["lpnumberofbyteswr",{"_index":8171,"title":{},"body":{"1015833":{}}}],["lpoutput_debug_string_inf",{"_index":4739,"title":{},"body":{"3440657":{}}}],["lpoutputstr",{"_index":7720,"title":{},"body":{"1015833":{}}}],["lpoverlap",{"_index":8165,"title":{},"body":{"1015833":{}}}],["lppar",{"_index":4486,"title":{},"body":{"1015818":{},"1015833":{},"1703937":{},"2424889":{},"2949166":{}}}],["lppathn",{"_index":8068,"title":{},"body":{"1015833":{}}}],["lppreviouscoun",{"_index":10710,"title":{},"body":{"2424889":{}}}],["lpprocess_inf",{"_index":7234,"title":{},"body":{"1015833":{}}}],["lpprocessattrip",{"_index":7214,"title":{},"body":{"1015833":{}}}],["lpprocessinf",{"_index":7235,"title":{},"body":{"1015833":{}}}],["lpprocessinformation，这个结构体会有进程和线程的id、句柄信息，那么什么是id？什么是句柄",{"_index":7299,"title":{},"body":{"1015833":{}}}],["lpprocn",{"_index":6526,"title":{},"body":{"1015828":{}}}],["lprec",{"_index":776,"title":{},"body":{"1015822":{}}}],["lpremotthreadaddr",{"_index":8637,"title":{},"body":{"1015833":{}}}],["lpreserv",{"_index":7267,"title":{},"body":{"1015833":{}}}],["lpreserved2",{"_index":7281,"title":{},"body":{"1015833":{}}}],["lprip_inf",{"_index":4743,"title":{},"body":{"3440657":{}}}],["lpriv",{"_index":4033,"title":{},"body":{"3440655":{}}}],["lprootpath",{"_index":8011,"title":{},"body":{"1015833":{}}}],["lpsecurity_attrip",{"_index":6792,"title":{},"body":{"1015833":{},"2424889":{},"2949228":{}}}],["lpsecurityattrip",{"_index":8070,"title":{},"body":{"1015833":{}}}],["lpsemaphoreattrip",{"_index":10694,"title":{},"body":{"2424889":{}}}],["lpstartaddr",{"_index":4710,"title":{},"body":{"1015833":{},"3440657":{}}}],["lpstartupinf",{"_index":7231,"title":{},"body":{"1015833":{}}}],["lpstartupinfo参数传递的",{"_index":7716,"title":{},"body":{"1015833":{}}}],["lpstr",{"_index":4736,"title":{},"body":{"1015833":{},"3440657":{}}}],["lpstr)malloc(fil",{"_index":8185,"title":{},"body":{"1015833":{}}}],["lpszclas",{"_index":486,"title":{},"body":{"1015822":{}}}],["lpszclassn",{"_index":55,"title":{},"body":{"1015822":{}}}],["lpszmen",{"_index":69,"title":{},"body":{"1015822":{}}}],["lpsznam",{"_index":484,"title":{},"body":{"1015822":{}}}],["lpszwindown",{"_index":58,"title":{},"body":{"1015822":{}}}],["lptex",{"_index":7153,"title":{},"body":{"1015833":{}}}],["lpthre",{"_index":7405,"title":{},"body":{"1015833":{}}}],["lpthread_start_r",{"_index":4709,"title":{},"body":{"1015833":{},"3440657":{}}}],["lpthread_start_routine)dwloadaddr",{"_index":8468,"title":{},"body":{"1015833":{}}}],["lpthread_start_routine)dwprocessaddr",{"_index":8411,"title":{},"body":{"1015833":{}}}],["lpthread_start_routine)lpremotthreadaddr",{"_index":8681,"title":{},"body":{"1015833":{}}}],["lpthread_start_routine)threadproç",{"_index":8503,"title":{},"body":{"1015833":{},"2424889":{}}}],["lpthreadattribu",{"_index":7217,"title":{},"body":{"1015833":{}}}],["lpthreadattributes，通过这个参数我们可以判断函数是否创建的是内核对象",{"_index":7319,"title":{},"body":{"1015833":{}}}],["lpthreadlocalp",{"_index":4708,"title":{},"body":{"3440657":{}}}],["lptitl",{"_index":7269,"title":{},"body":{"1015833":{}}}],["lptstr",{"_index":543,"title":{},"body":{"1015822":{},"1015833":{},"2949228":{}}}],["lptstr)mapviewoffile(g_hmapfil",{"_index":7974,"title":{},"body":{"1015833":{}}}],["lptstr)mapviewoffile(hmap",{"_index":6839,"title":{},"body":{"2949228":{}}}],["lpunload_dll_debug_inf",{"_index":4734,"title":{},"body":{"3440657":{}}}],["lpvo",{"_index":464,"title":{},"body":{"1015822":{},"1015833":{},"1015846":{},"2949228":{},"3440657":{}}}],["lpvoid)&",{"_index":7523,"title":{},"body":{"1015833":{}}}],["lpvoid)&p",{"_index":7524,"title":{},"body":{"1015833":{}}}],["lpvoid)asoç",{"_index":10002,"title":{},"body":{"1015818":{}}}],["lpvoid)dwfunaddr",{"_index":8678,"title":{},"body":{"1015833":{}}}],["lpvolumenamebuf",{"_index":8037,"title":{},"body":{"1015833":{}}}],["lpvolumeserialnump",{"_index":8042,"title":{},"body":{"1015833":{}}}],["lpvreserv",{"_index":8386,"title":{},"body":{"1015833":{}}}],["lpwin32_find_",{"_index":8199,"title":{},"body":{"1015833":{}}}],["lpwindown",{"_index":7755,"title":{},"body":{"1015833":{}}}],["lpwsad",{"_index":9836,"title":{},"body":{"1015818":{}}}],["lre",{"_index":9851,"title":{},"body":{"1015818":{}}}],["lreleasecoun",{"_index":10707,"title":{},"body":{"2424889":{}}}],["lres",{"_index":496,"title":{},"body":{"1015822":{},"1015833":{},"3440655":{}}}],["lstyl",{"_index":1186,"title":{},"body":{"1015822":{}}}],["lti",{"_index":10219,"title":{},"body":{"1015818":{}}}],["ltr指令可以将tss段描述符加载到tr寄存器中，但只能改变tr寄存器的值（96位），并不会改变tss；ltr指令只能在系统层使用；加载后tss段描述符的状态位（高4字节的第9位，或可以理解为type域从0x9/1001变成了0xb/1011）会发生改变",{"_index":9300,"title":{},"body":{"1015831":{}}}],["luodu",{"_index":2343,"title":{},"body":{"1015843":{}}}],["lval",{"_index":2958,"title":{},"body":{"1015823":{}}}],["lvar",{"_index":3068,"title":{},"body":{"1015823":{}}}],["lvs_ex_checkbox",{"_index":1200,"title":{},"body":{"1015822":{}}}],["lvs_ex_fullrowseleç",{"_index":1196,"title":{},"body":{"1015822":{}}}],["lvs_ex_gridl",{"_index":1198,"title":{},"body":{"1015822":{}}}],["lvs_ic",{"_index":1175,"title":{},"body":{"1015822":{}}}],["lvs_lis",{"_index":1179,"title":{},"body":{"1015822":{}}}],["lvs_rep",{"_index":1181,"title":{},"body":{"1015822":{}}}],["lvs_smalliç",{"_index":1177,"title":{},"body":{"1015822":{}}}],["lvs_typem",{"_index":1190,"title":{},"body":{"1015822":{}}}],["l涓嶅尯鍒嗗ぇ灏忓啓锛�40鍦ㄨ繖閲岃〃绀哄崄鍏繘鍒�0x40锛屽綋鍓嶆寚浠ょ殑鎰忔�濇槸灞曠ず0x40缁勶紙dq",{"_index":8998,"title":{},"body":{"1015831":{}}}],["m",{"_index":8786,"title":{},"body":{"1015850":{}}}],["m+2",{"_index":8779,"title":{},"body":{"1015850":{}}}],["m1",{"_index":11497,"title":{},"body":{"1015814":{}}}],["m1.beg",{"_index":11522,"title":{},"body":{"1015814":{}}}],["m1.count(1",{"_index":11531,"title":{},"body":{"1015814":{}}}],["m1.en",{"_index":11517,"title":{},"body":{"1015814":{}}}],["m1.erase(",{"_index":11523,"title":{},"body":{"1015814":{}}}],["m1.erase(5",{"_index":11519,"title":{},"body":{"1015814":{}}}],["m1.erase(m1.begi",{"_index":11520,"title":{},"body":{"1015814":{}}}],["m1.find(2",{"_index":11528,"title":{},"body":{"1015814":{}}}],["m1.insert(map<",{"_index":11514,"title":{},"body":{"1015814":{}}}],["m16/m32",{"_index":5343,"title":{},"body":{"1015825":{}}}],["m1[1",{"_index":11513,"title":{},"body":{"1015814":{}}}],["m1[2",{"_index":11525,"title":{},"body":{"1015814":{}}}],["m2",{"_index":11499,"title":{},"body":{"1015814":{}}}],["m2.insert(m1.begi",{"_index":11516,"title":{},"body":{"1015814":{}}}],["m3",{"_index":11501,"title":{},"body":{"1015814":{}}}],["m3.en",{"_index":11503,"title":{},"body":{"1015814":{}}}],["m4(m3.beg",{"_index":11502,"title":{},"body":{"1015814":{}}}],["m5(m4",{"_index":11504,"title":{},"body":{"1015814":{}}}],["m8",{"_index":5243,"title":{},"body":{"1015825":{}}}],["m^e",{"_index":10448,"title":{},"body":{"1015818":{}}}],["m_dwrefcoun",{"_index":2649,"title":{},"body":{"1015823":{}}}],["m_is",{"_index":3133,"title":{},"body":{"1015823":{}}}],["m_list.getextendedstyl",{"_index":1194,"title":{},"body":{"1015822":{}}}],["m_list.setextendedstyle(dwstyl",{"_index":1202,"title":{},"body":{"1015822":{}}}],["m_lpszclassn",{"_index":241,"title":{},"body":{"1015822":{}}}],["m_nam",{"_index":6835,"title":{},"body":{"2949228":{}}}],["m_nlength",{"_index":3679,"title":{},"body":{"1015840":{}}}],["m_nobjeç",{"_index":243,"title":{},"body":{"1015822":{}}}],["m_nstat",{"_index":2616,"title":{},"body":{"1015823":{}}}],["m_pbasecl",{"_index":248,"title":{},"body":{"1015822":{}}}],["m_pdb.createinstance(l\"testdbconnect.ado.1",{"_index":3116,"title":{},"body":{"1015823":{}}}],["m_pdb.queryinterface(iid_idbconnectç",{"_index":3168,"title":{},"body":{"1015823":{}}}],["m_pdbchk",{"_index":3169,"title":{},"body":{"1015823":{}}}],["m_pfncreateobjeç",{"_index":320,"title":{},"body":{"1015822":{}}}],["m_pmainw",{"_index":143,"title":{},"body":{"1015822":{}}}],["m_pnextcl",{"_index":253,"title":{},"body":{"1015822":{}}}],["m_strbuf",{"_index":3681,"title":{},"body":{"1015840":{}}}],["m_wschem",{"_index":246,"title":{},"body":{"1015822":{}}}],["mac",{"_index":10235,"title":{},"body":{"1015818":{}}}],["mach",{"_index":6098,"title":{},"body":{"1015828":{}}}],["mac层是数据链路层的两个子层之一，如上图中的这2个字节则表示当前数据包属于哪一种网络层协议的类型（例如：ip、arp",{"_index":10260,"title":{},"body":{"1015818":{}}}],["mac帧结构",{"_index":10258,"title":{},"body":{"1015818":{}}}],["mac帧结构与mac包的解析",{"_index":10257,"title":{},"body":{"1015818":{}}}],["magiç",{"_index":6043,"title":{},"body":{"1015828":{}}}],["mai",{"_index":1347,"title":{},"body":{"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["main(",{"_index":4118,"title":{},"body":{"1015818":{},"1015820":{},"1015833":{},"1015847":{},"1933378":{},"2424889":{},"2949166":{}}}],["main+20h",{"_index":1717,"title":{},"body":{"1015843":{}}}],["main.cp",{"_index":4188,"title":{},"body":{"1015820":{}}}],["majorfunction[irp_mj_cl",{"_index":5724,"title":{},"body":{"1015847":{}}}],["majorfunction[irp_mj_cr",{"_index":5722,"title":{},"body":{"1015847":{}}}],["majorfunction[irp_mj_device_control",{"_index":5798,"title":{},"body":{"1015847":{}}}],["majorfunction[irp_mj_maximum_funç",{"_index":5623,"title":{},"body":{"1015847":{}}}],["majorfunction[irp绫诲瀷",{"_index":5707,"title":{},"body":{"1015847":{}}}],["majorimagev",{"_index":6151,"title":{},"body":{"1015828":{}}}],["majorlinkerv",{"_index":6126,"title":{},"body":{"1015828":{}}}],["majoroperatingsystemv",{"_index":6147,"title":{},"body":{"1015828":{}}}],["majorsubsystemv",{"_index":6154,"title":{},"body":{"1015828":{}}}],["majorv",{"_index":6468,"title":{},"body":{"1015828":{}}}],["make_heap(v.begi",{"_index":11697,"title":{},"body":{"1015814":{}}}],["make_heap锛岀敤浜庢妸涓�涓彲杩唬瀹瑰櫒鍙樻垚涓�涓爢锛岄粯璁ゆ槸澶ч《鍫嗭紝",{"_index":11694,"title":{},"body":{"1015814":{}}}],["make_heap，将一个区间转换成堆",{"_index":11689,"title":{},"body":{"1015814":{}}}],["makeheapfunc(vector<",{"_index":11696,"title":{},"body":{"1015814":{}}}],["makeintresource(idr_txt1",{"_index":1298,"title":{},"body":{"1015822":{}}}],["makeword(2",{"_index":9841,"title":{},"body":{"1015818":{}}}],["malloc不会调用构造函数",{"_index":3479,"title":{},"body":{"1015840":{}}}],["malloc和new[]的区别",{"_index":3478,"title":{},"body":{"1015840":{}}}],["malloç",{"_index":3461,"title":{},"body":{"1015840":{},"1015847":{},"2949228":{}}}],["map",{"_index":6781,"title":{},"body":{"1015814":{},"1015833":{},"2949228":{}}}],["map/multimap",{"_index":11747,"title":{},"body":{"1015814":{}}}],["map/multimap容器",{"_index":11487,"title":{},"body":{"1015814":{}}}],["map<",{"_index":11496,"title":{},"body":{"1015814":{}}}],["mapfil",{"_index":7966,"title":{},"body":{"1015833":{}}}],["mappedmemory",{"_index":6836,"title":{},"body":{"2949228":{}}}],["mappingfile(lpstr",{"_index":8231,"title":{},"body":{"1015833":{}}}],["mappingfile(text(\"c:\\\\a.tx",{"_index":8255,"title":{},"body":{"1015833":{}}}],["mappingi",{"_index":8270,"title":{},"body":{"1015833":{}}}],["mapping瀵硅薄鐨勫彞鏌",{"_index":7960,"title":{},"body":{"1015833":{}}}],["maps」，向下拉就可以看到一张表，这张表是1个字节的opcode的对应表，但实际上其他字节的opcode就是通过这张表进行扩展的，所以这张表就是主表，也是所有x86硬编码中最重要的一张表（这张图中的表是不完整的，向下拉还有一张表，两张表拼在一块才是完整的",{"_index":11825,"title":{},"body":{"1015817":{}}}],["mapviewoffil",{"_index":6819,"title":{},"body":{"1015833":{},"2949228":{}}}],["mapviewoffile(hmapfil",{"_index":8245,"title":{},"body":{"1015833":{}}}],["mapviewoffile的作用是",{"_index":6820,"title":{},"body":{"2949228":{}}}],["map容器也不允许出现重复的键值（可以使用multimap容器来使用重复的键值），并且默认会自动排序",{"_index":11518,"title":{},"body":{"1015814":{}}}],["mar",{"_index":7117,"title":{},"body":{"1015833":{}}}],["mast",{"_index":3937,"title":{},"body":{"3440655":{}}}],["max",{"_index":3644,"title":{},"body":{"1015840":{}}}],["max(0x780",{"_index":6427,"title":{},"body":{"1015828":{}}}],["max(a,b)((a)>(b)?(a):(p",{"_index":2352,"title":{},"body":{"1015843":{}}}],["max(nump",{"_index":3604,"title":{},"body":{"1015840":{}}}],["max(x,",{"_index":2353,"title":{},"body":{"1015843":{}}}],["maximu",{"_index":6055,"title":{},"body":{"1015828":{},"1015833":{}}}],["maximumlength",{"_index":5559,"title":{},"body":{"1015847":{}}}],["mb_ok",{"_index":3120,"title":{},"body":{"1015823":{},"1015833":{},"2949166":{}}}],["mediu",{"_index":8774,"title":{},"body":{"1015850":{}}}],["mediumtex",{"_index":8810,"title":{},"body":{"1015850":{}}}],["mem",{"_index":5549,"title":{},"body":{"1015847":{},"2949228":{}}}],["mem_c",{"_index":6755,"title":{},"body":{"1015833":{},"1703937":{},"2949228":{}}}],["mem_commit：创建节点并分配物理页",{"_index":6747,"title":{},"body":{"2949228":{}}}],["mem_commit：可以有物理页，但不是立即有或者一直有",{"_index":7035,"title":{},"body":{"2949228":{}}}],["mem_rel",{"_index":7941,"title":{},"body":{"1015833":{}}}],["mem_reserve：只创建节点，不分配物理页",{"_index":6748,"title":{},"body":{"2949228":{}}}],["mem_reserve：申请内存时，仅保留线性地址，不分配物理页",{"_index":7034,"title":{},"body":{"2949228":{}}}],["memb",{"_index":11756,"title":{},"body":{"1015814":{}}}],["member(ç",{"_index":11757,"title":{},"body":{"1015814":{}}}],["memcp",{"_index":5551,"title":{},"body":{"1015847":{}}}],["memcpy(&ur",{"_index":5792,"title":{},"body":{"1015847":{}}}],["memcpy(piobuf",{"_index":5796,"title":{},"body":{"1015847":{}}}],["memfunct",{"_index":11768,"title":{},"body":{"1015814":{}}}],["memset(&lf",{"_index":866,"title":{},"body":{"1015822":{}}}],["memset(buf",{"_index":9860,"title":{},"body":{"1015818":{}}}],["memset(m_strbuf",{"_index":3683,"title":{},"body":{"1015840":{}}}],["memset(recvbuf",{"_index":9946,"title":{},"body":{"1015818":{}}}],["menu",{"_index":7766,"title":{},"body":{"1015833":{}}}],["menu菜单的添加",{"_index":1129,"title":{},"body":{"1015822":{}}}],["merge锛氬悎骞朵袱涓摼琛紝骞舵竻绌鸿鍚堝苟鐨勯偅涓�(list鍗曠嫭瀹炵幇",{"_index":11402,"title":{},"body":{"1015814":{}}}],["messagebox",{"_index":7152,"title":{},"body":{"1015833":{}}}],["messagebox(",{"_index":3117,"title":{},"body":{"1015823":{},"1015833":{},"2949166":{}}}],["messagebox(0",{"_index":7186,"title":{},"body":{"1015833":{}}}],["messagebox(0,0,0,0",{"_index":2331,"title":{},"body":{"1015843":{}}}],["messagebox(null,\"veh寮傚父澶勭悊鍑芥暟鎵ц浜�...\",\"veh寮傚父\",mb_",{"_index":4358,"title":{},"body":{"2949166":{}}}],["messageboxa(0",{"_index":7181,"title":{},"body":{"1015833":{}}}],["messageboxa(0,0,0,0",{"_index":6346,"title":{},"body":{"1015828":{}}}],["messageboxa只接受ascii编码的参数，而messageboxw则只接受unicode编码的参数",{"_index":7176,"title":{},"body":{"1015833":{}}}],["messageboxw(0",{"_index":7184,"title":{},"body":{"1015833":{}}}],["messagebox寮规杈撳嚭缂栬緫妗嗗唴瀹",{"_index":7880,"title":{},"body":{"1015833":{}}}],["messagemap",{"_index":376,"title":{},"body":{"1015822":{}}}],["messagemapfunç",{"_index":363,"title":{},"body":{"1015822":{}}}],["messagequ",{"_index":3807,"title":{},"body":{"3440655":{}}}],["messagı",{"_index":404,"title":{},"body":{"1015822":{},"1015833":{},"3440655":{}}}],["meth",{"_index":2347,"title":{},"body":{"1015820":{},"1015843":{}}}],["method(",{"_index":2306,"title":{},"body":{"1015843":{}}}],["method(1,2",{"_index":2308,"title":{},"body":{"1015843":{}}}],["method(arr,10",{"_index":2361,"title":{},"body":{"1015843":{}}}],["method_buf",{"_index":5754,"title":{},"body":{"1015847":{}}}],["method」、「a.2.2",{"_index":11832,"title":{},"body":{"1015817":{}}}],["mfc",{"_index":0,"title":{"1015822":{}},"body":{"1015822":{},"1015826":{},"1015827":{}}}],["mfc三大类消息",{"_index":444,"title":{},"body":{"1015822":{}}}],["mfc与win32",{"_index":21,"title":{},"body":{"1015822":{}}}],["mfc为什么要自己去构建rti",{"_index":197,"title":{},"body":{"1015822":{}}}],["mfc介绍",{"_index":3,"title":{},"body":{"1015822":{}}}],["mfc多页面设计",{"_index":1316,"title":{},"body":{"1015822":{}}}],["mfc对应的类",{"_index":1076,"title":{},"body":{"1015822":{}}}],["mfc所封装的三个主要设备描述表",{"_index":591,"title":{},"body":{"1015822":{}}}],["mfc控件",{"_index":1070,"title":{},"body":{"1015822":{}}}],["mfc文件和资源操作",{"_index":1246,"title":{},"body":{"1015822":{}}}],["mfc是如何使用应用程序对象",{"_index":181,"title":{},"body":{"1015822":{}}}],["mfc有一个永久保存机制，就是将内存中的东西写入到文件中，写入的数据可能是对象中的成员，所以我们需要根据文件中记载的信息去创建对象，才能将写入的数据读取保存",{"_index":312,"title":{},"body":{"1015822":{}}}],["mfc源码分析",{"_index":531,"title":{},"body":{"1015822":{}}}],["mfc的cdc类将dc和hdc（dc的句柄）的gdi函数就近封装到了一起，派生了四个不同场景下的dc类，以下是常用的三个",{"_index":602,"title":{},"body":{"1015822":{}}}],["mfc的winmain分析",{"_index":538,"title":{},"body":{"1015822":{}}}],["mfc的入口函数是afxwinmain，其有四个参数都保存在保存在theapp的成员内（如下代码为删减版本",{"_index":539,"title":{},"body":{"1015822":{}}}],["mfc的初始化过程（一",{"_index":166,"title":{},"body":{"1015822":{}}}],["mfc的初始化过程（二",{"_index":180,"title":{},"body":{"1015822":{}}}],["mfc的动态创建基本和c++的new运算符创建没有区别，但是他弥补了c++语言中不让如下语句执行的缺点",{"_index":306,"title":{},"body":{"1015822":{}}}],["mfc的层次结构图",{"_index":36,"title":{},"body":{"1015822":{}}}],["mfc的本质",{"_index":1,"title":{},"body":{"1015822":{}}}],["mfc的本质就是win32的封装，那么使用mfc实际上会更加方便、效率更高",{"_index":22,"title":{},"body":{"1015822":{}}}],["mfc的本质就是对win32的封装",{"_index":2,"title":{},"body":{"1015822":{}}}],["mfc的资源就是我们之前所说的存储一些图片、图标、信息的...我们可以去查找资源、获取资源的大小、加载资源",{"_index":1289,"title":{},"body":{"1015822":{}}}],["mfc调用com组件",{"_index":3107,"title":{},"body":{"1015823":{}}}],["mfc运行时类型识别（rti",{"_index":192,"title":{},"body":{"1015822":{}}}],["mfc运行时类型识别（英文：runt",{"_index":194,"title":{},"body":{"1015822":{}}}],["mfc（microsof",{"_index":4,"title":{},"body":{"1015822":{}}}],["mi",{"_index":11760,"title":{},"body":{"1015814":{}}}],["microsof",{"_index":131,"title":{},"body":{"1015822":{}}}],["midl_define_guid(",{"_index":3274,"title":{},"body":{"1015823":{}}}],["midl_p",{"_index":5560,"title":{},"body":{"1015847":{}}}],["mingw482",{"_index":4094,"title":{},"body":{"1015820":{}}}],["mingw，这是一个编译器，下载地址：https://download.qt.io/development_releases/prebuilt/mingw_32/i686",{"_index":4085,"title":{},"body":{"1015820":{}}}],["minimu",{"_index":6052,"title":{},"body":{"1015828":{}}}],["minorimagev",{"_index":6153,"title":{},"body":{"1015828":{}}}],["minorlinkerv",{"_index":6128,"title":{},"body":{"1015828":{}}}],["minoroperatingsystemv",{"_index":6149,"title":{},"body":{"1015828":{}}}],["minorsubsystemv",{"_index":6156,"title":{},"body":{"1015828":{}}}],["minorv",{"_index":6469,"title":{},"body":{"1015828":{}}}],["misc",{"_index":6202,"title":{},"body":{"1015828":{}}}],["misc锛屽弻瀛楋紝鏄鑺傚湪娌℃湁瀵归綈鍓嶇殑鐪熷疄灏哄锛岃鍊煎彲浠ヤ笉鍑嗙",{"_index":6198,"title":{},"body":{"1015828":{}}}],["mk_shif",{"_index":950,"title":{},"body":{"1015822":{}}}],["mlpos",{"_index":3875,"title":{},"body":{"3440655":{}}}],["mm_anisotrop",{"_index":650,"title":{},"body":{"1015822":{}}}],["mm_anisotropic这个映射模式其x、y独立缩放，在这个模式下画的圆就会填满整个窗口，x、y也都各自按照各自的来缩放",{"_index":683,"title":{},"body":{"1015822":{}}}],["mm_hienglish",{"_index":643,"title":{},"body":{"1015822":{}}}],["mm_himetr",{"_index":639,"title":{},"body":{"1015822":{}}}],["mm_isotrop",{"_index":647,"title":{},"body":{"1015822":{}}}],["mm_isotropic这个映射模式其x、y同等缩放，示例代码",{"_index":667,"title":{},"body":{"1015822":{}}}],["mm_loenglish",{"_index":641,"title":{},"body":{"1015822":{}}}],["mm_lometr",{"_index":637,"title":{},"body":{"1015822":{}}}],["mm_tex",{"_index":634,"title":{},"body":{"1015822":{}}}],["mm_twip",{"_index":645,"title":{},"body":{"1015822":{}}}],["mmbadpagelisth",{"_index":6978,"title":{},"body":{"2949228":{}}}],["mmfreepagelisth",{"_index":6965,"title":{},"body":{"2949228":{}}}],["mmmodifiednowritepagelisth",{"_index":6975,"title":{},"body":{"2949228":{}}}],["mmmodifiedpagelisth",{"_index":6972,"title":{},"body":{"2949228":{}}}],["mmnumberofphysicalpages，这个值是物理页总个数，我们只要乘以4kb即可算出物理内存的kb大小",{"_index":6878,"title":{},"body":{"2949228":{}}}],["mmpfndat",{"_index":6883,"title":{},"body":{"2949228":{}}}],["mmpfnentr",{"_index":6913,"title":{},"body":{"2949228":{}}}],["mmpfnlis",{"_index":6982,"title":{},"body":{"2949228":{}}}],["mmpte",{"_index":6917,"title":{},"body":{"2949228":{}}}],["mmrompagelisth",{"_index":6990,"title":{},"body":{"2949228":{}}}],["mmstandbypagelisth",{"_index":6968,"title":{},"body":{"2949228":{}}}],["mmvad_flagı",{"_index":6718,"title":{},"body":{"2949228":{}}}],["mmzeroedpagelisth",{"_index":6962,"title":{},"body":{"2949228":{}}}],["mod",{"_index":7209,"title":{},"body":{"1015833":{}}}],["mod(第6、7位，共2个位)和r/m(第0、1、2位，共3个位)共同描述指令中的e部分，即寄存器/内存",{"_index":12011,"title":{},"body":{"1015817":{}}}],["modif",{"_index":6945,"title":{},"body":{"1015850":{},"2949228":{}}}],["modifiednowritepagel",{"_index":6988,"title":{},"body":{"2949228":{}}}],["modifiedpagel",{"_index":6987,"title":{},"body":{"2949228":{}}}],["modr/",{"_index":11995,"title":{},"body":{"1015817":{}}}],["modr/m转为二进制：10",{"_index":12066,"title":{},"body":{"1015817":{}}}],["modr/m这个字节的8个位被拆分成了3个部分",{"_index":12009,"title":{},"body":{"1015817":{}}}],["modul",{"_index":10463,"title":{},"body":{"1015818":{}}}],["mod与r/m字段查tabl",{"_index":12040,"title":{},"body":{"1015817":{}}}],["mousethreadid,mousethreadmain,",{"_index":3949,"title":{},"body":{"3440655":{}}}],["mov",{"_index":706,"title":{},"body":{"1015817":{},"1015822":{},"1015825":{},"1015831":{},"1015833":{},"1015843":{},"1015846":{},"1015847":{},"1703937":{},"1933380":{},"2949166":{}}}],["movefil",{"_index":8082,"title":{},"body":{"1015833":{}}}],["movefile(text(\"c:\\\\",{"_index":8089,"title":{},"body":{"1015833":{}}}],["moveiterator(list<int>:",{"_index":11412,"title":{},"body":{"1015814":{}}}],["movetoex(hdç",{"_index":3770,"title":{},"body":{"3440655":{}}}],["movsb",{"_index":5315,"title":{},"body":{"1015825":{}}}],["movsw",{"_index":5316,"title":{},"body":{"1015825":{}}}],["movsx",{"_index":1720,"title":{},"body":{"1015843":{}}}],["movs指令",{"_index":5286,"title":{},"body":{"1015825":{}}}],["movs指令举例说明",{"_index":5295,"title":{},"body":{"1015825":{}}}],["movs鎸囦护/stos鎸囦护",{"_index":5313,"title":{},"body":{"1015825":{}}}],["mov指令",{"_index":5248,"title":{},"body":{"1015825":{}}}],["mov：数据传送",{"_index":11871,"title":{},"body":{"1015817":{}}}],["msg",{"_index":3979,"title":{},"body":{"1015833":{},"3440655":{}}}],["msr",{"_index":2481,"title":{},"body":{"1015846":{}}}],["mstrnam",{"_index":11759,"title":{},"body":{"1015814":{}}}],["mul",{"_index":6457,"title":{},"body":{"1015828":{}}}],["multi(0)disk(0)rdisk(0)partition(1)\\windows=\"xp",{"_index":8972,"title":{},"body":{"1015831":{}}}],["multipl",{"_index":3412,"title":{},"body":{"1015840":{}}}],["mustbecached:1",{"_index":6928,"title":{},"body":{"2949228":{}}}],["mutant.abandoned=0",{"_index":10738,"title":{},"body":{"2424889":{}}}],["mutant.apcdisable=0",{"_index":10739,"title":{},"body":{"2424889":{}}}],["mutant.header.signalstate=binitialow",{"_index":10735,"title":{},"body":{"2424889":{}}}],["mutant.header.type=2",{"_index":10734,"title":{},"body":{"2424889":{}}}],["mutant.ownerthread=binitialow",{"_index":10736,"title":{},"body":{"2424889":{}}}],["mutantlistentr",{"_index":10720,"title":{},"body":{"2424889":{}}}],["mutantlisth",{"_index":10743,"title":{},"body":{"2424889":{}}}],["mutex",{"_index":4550,"title":{},"body":{"3440657":{}}}],["myad",{"_index":8345,"title":{},"body":{"1015833":{}}}],["myadd(10,2",{"_index":8352,"title":{},"body":{"1015833":{}}}],["myaddvectoredexceptionhandl",{"_index":4354,"title":{},"body":{"2949166":{}}}],["myaddvectoredexceptionhandler(0",{"_index":4372,"title":{},"body":{"2949166":{}}}],["mycl",{"_index":307,"title":{},"body":{"1015822":{}}}],["mycom",{"_index":3218,"title":{},"body":{"1015823":{}}}],["mycom.op",{"_index":3223,"title":{},"body":{"1015823":{}}}],["mycreateremotethread(dw",{"_index":8404,"title":{},"body":{"1015833":{}}}],["mydispatchfunction(pdevice_objeç",{"_index":5710,"title":{},"body":{"1015847":{}}}],["myeexceptionhandl",{"_index":4391,"title":{},"body":{"2949166":{}}}],["myntopenprocess(phandl",{"_index":5846,"title":{},"body":{"1015847":{}}}],["myntopenproç",{"_index":5910,"title":{},"body":{"1015847":{}}}],["myobject(ç",{"_index":3677,"title":{},"body":{"1015840":{}}}],["myobjeç",{"_index":3678,"title":{},"body":{"1015840":{}}}],["mypcap_handl",{"_index":10216,"title":{},"body":{"1015818":{}}}],["mypcap_handler(u_ç",{"_index":10201,"title":{},"body":{"1015818":{}}}],["myprint(",{"_index":1833,"title":{},"body":{"1015843":{}}}],["myprint(1",{"_index":1837,"title":{},"body":{"1015843":{}}}],["myprint(10",{"_index":1842,"title":{},"body":{"1015843":{}}}],["myprint(arr,10",{"_index":2366,"title":{},"body":{"1015843":{}}}],["myprint(x,",{"_index":2363,"title":{},"body":{"1015843":{}}}],["myprintfu",{"_index":11451,"title":{},"body":{"1015814":{}}}],["myprintfun(",{"_index":11449,"title":{},"body":{"1015814":{}}}],["myprintfun(map<",{"_index":11506,"title":{},"body":{"1015814":{}}}],["myprintfunc(",{"_index":11656,"title":{},"body":{"1015814":{}}}],["myprintfunc(memp",{"_index":11775,"title":{},"body":{"1015814":{}}}],["myprintfunç",{"_index":11665,"title":{},"body":{"1015814":{}}}],["myreadprocessmemory(handl",{"_index":2431,"title":{},"body":{"1015846":{}}}],["myrsaencrypt(ç",{"_index":10519,"title":{},"body":{"1015818":{}}}],["mysql",{"_index":8749,"title":{},"body":{"1015850":{}}}],["mysql.h",{"_index":8860,"title":{},"body":{"1015850":{}}}],["mysql_clo",{"_index":8896,"title":{},"body":{"1015850":{}}}],["mysql_free_r",{"_index":8899,"title":{},"body":{"1015850":{}}}],["mysql_i",{"_index":8866,"title":{},"body":{"1015850":{}}}],["mysql_qu",{"_index":8889,"title":{},"body":{"1015850":{}}}],["mysql_r",{"_index":8893,"title":{},"body":{"1015850":{}}}],["mysql_real_conneç",{"_index":8870,"title":{},"body":{"1015850":{}}}],["mysql_select_dp",{"_index":8886,"title":{},"body":{"1015850":{}}}],["mysql_store_r",{"_index":8894,"title":{},"body":{"1015850":{}}}],["mysql下载链接https://dev.mysql.com/downloads/mysql",{"_index":8745,"title":{},"body":{"1015850":{}}}],["mysql数据库的层次是这样的：数据库",{"_index":8751,"title":{},"body":{"1015850":{}}}],["mysql鍙ユ焺",{"_index":8871,"title":{},"body":{"1015850":{}}}],["mystrcpy(ch",{"_index":10296,"title":{},"body":{"1015818":{}}}],["mywidget.cp",{"_index":4190,"title":{},"body":{"1015820":{}}}],["mywidget.h",{"_index":4186,"title":{},"body":{"1015820":{}}}],["mywidget.u",{"_index":4192,"title":{},"body":{"1015820":{}}}],["mywidget::changetex",{"_index":4208,"title":{},"body":{"1015820":{}}}],["mywidget::mywidget(qwidgi",{"_index":4215,"title":{},"body":{"1015820":{}}}],["mz文件头",{"_index":6039,"title":{},"body":{"1015828":{}}}],["mz文件头image_dos_header结构，这个结构占64字节，文件前四行就是了（类似010",{"_index":6009,"title":{},"body":{"1015828":{}}}],["mz文件头和dos块，那么我们来了解一些dos部分的结构和其相关意义",{"_index":6038,"title":{},"body":{"1015828":{}}}],["mz文件头和pe文件头之间的内容，这里面的内容可以根据自己的需要随意的修改和添加，并不会影响文件的正常运行",{"_index":6083,"title":{},"body":{"1015828":{}}}],["mz文件头就是一个结构体image_dos_header，其定义如下所示",{"_index":6040,"title":{},"body":{"1015828":{}}}],["n\",(*px)[0],px[0][0",{"_index":2270,"title":{},"body":{"1015843":{}}}],["n\",(x)[i",{"_index":2365,"title":{},"body":{"1015843":{}}}],["n\",arr[",{"_index":2358,"title":{},"body":{"1015843":{}}}],["n\",arr[0",{"_index":3496,"title":{},"body":{"1015840":{}}}],["n\",i",{"_index":1859,"title":{},"body":{"1015843":{}}}],["n\",i,j,z",{"_index":1896,"title":{},"body":{"1015843":{}}}],["n\",j",{"_index":1863,"title":{},"body":{"1015843":{}}}],["n\",p",{"_index":2197,"title":{},"body":{"1015843":{}}}],["n\",p.x",{"_index":3490,"title":{},"body":{"1015840":{}}}],["n\",p[0],*p",{"_index":2168,"title":{},"body":{"1015843":{}}}],["n\",p[0][0],**p",{"_index":2170,"title":{},"body":{"1015843":{}}}],["n\",p[1][2],*(*(p+1)+2",{"_index":2171,"title":{},"body":{"1015843":{}}}],["n\",p[1][2][3],*(*(*(p+1)+2)+3",{"_index":2173,"title":{},"body":{"1015843":{}}}],["n\",px1,px2,px3,px4",{"_index":2257,"title":{},"body":{"1015843":{}}}],["n\",ref",{"_index":3487,"title":{},"body":{"1015840":{}}}],["n\",x",{"_index":3494,"title":{},"body":{"1015840":{}}}],["n,con",{"_index":11357,"title":{},"body":{"1015814":{}}}],["n.i",{"_index":3606,"title":{},"body":{"1015840":{}}}],["n.x",{"_index":3605,"title":{},"body":{"1015840":{}}}],["n================\\n\\n",{"_index":10204,"title":{},"body":{"1015818":{}}}],["n_",{"_index":9340,"title":{},"body":{"1015831":{}}}],["n_c",{"_index":9339,"title":{},"body":{"1015831":{}}}],["n_esp",{"_index":9338,"title":{},"body":{"1015831":{}}}],["nam",{"_index":2342,"title":{},"body":{"1015814":{},"1015818":{},"1015828":{},"1015833":{},"1015843":{},"1703937":{}}}],["name[0x20",{"_index":2062,"title":{},"body":{"1015843":{}}}],["name[1",{"_index":6587,"title":{},"body":{"1015828":{}}}],["name[image_sizeof_short_",{"_index":6196,"title":{},"body":{"1015828":{}}}],["namel",{"_index":9740,"title":{},"body":{"1015818":{}}}],["namespaç",{"_index":2774,"title":{},"body":{"1015814":{},"1015823":{},"1015840":{}}}],["name锛欴8",{"_index":6581,"title":{},"body":{"1015828":{}}}],["naray",{"_index":11438,"title":{},"body":{"1015814":{}}}],["narray+6",{"_index":11457,"title":{},"body":{"1015814":{}}}],["nbufferlength",{"_index":8000,"title":{},"body":{"1015833":{}}}],["nchar",{"_index":997,"title":{},"body":{"1015822":{}}}],["ncmdshow",{"_index":545,"title":{},"body":{"1015822":{},"1015833":{}}}],["ncmdshow）是由createprocess的lptstr",{"_index":7714,"title":{},"body":{"1015833":{}}}],["ncntsqbits[qsidcoun",{"_index":3901,"title":{},"body":{"3440655":{}}}],["ncod",{"_index":406,"title":{},"body":{"1015822":{}}}],["ncoun",{"_index":7442,"title":{},"body":{"1015833":{}}}],["ndebuginf",{"_index":4717,"title":{},"body":{"3440657":{}}}],["ndebugstringlength",{"_index":4738,"title":{},"body":{"3440657":{}}}],["ndesc",{"_index":10203,"title":{},"body":{"1015818":{}}}],["ne",{"_index":6053,"title":{},"body":{"1015828":{}}}],["near",{"_index":4035,"title":{},"body":{"3440655":{}}}],["neg",{"_index":10485,"title":{},"body":{"1015818":{}}}],["netw",{"_index":9770,"title":{},"body":{"1015818":{}}}],["new",{"_index":144,"title":{},"body":{"1015820":{},"1015822":{},"1015823":{},"1015828":{},"1015833":{},"1015840":{},"2949228":{},"3440655":{}}}],["new[]会调用构造函数，创建一次则调用一次，例如new",{"_index":3480,"title":{},"body":{"1015840":{}}}],["nex",{"_index":4295,"title":{},"body":{"1015818":{},"2949166":{}}}],["nextfil",{"_index":8209,"title":{},"body":{"1015833":{}}}],["nextfile.cfil",{"_index":8220,"title":{},"body":{"1015833":{}}}],["nextfile.nfilesizelow",{"_index":8221,"title":{},"body":{"1015833":{}}}],["nextstackpf",{"_index":6904,"title":{},"body":{"2949228":{}}}],["nextthr",{"_index":11085,"title":{},"body":{"1703937":{}}}],["nextwaitbloç",{"_index":10575,"title":{},"body":{"2424889":{}}}],["nfd",{"_index":10019,"title":{},"body":{"1015818":{}}}],["nfilesystemn",{"_index":8051,"title":{},"body":{"1015833":{}}}],["nflag",{"_index":819,"title":{},"body":{"1015822":{}}}],["nheigi",{"_index":7763,"title":{},"body":{"1015833":{}}}],["ni",{"_index":411,"title":{},"body":{"1015822":{}}}],["nlas",{"_index":414,"title":{},"body":{"1015822":{}}}],["nlen",{"_index":11413,"title":{},"body":{"1015814":{}}}],["nlength",{"_index":3626,"title":{},"body":{"1015840":{}}}],["nmessage参数为wm_lbuttondown，这是一个标准消息，除了标准消息在mfc还有其他两类消息",{"_index":443,"title":{},"body":{"1015822":{}}}],["nmessagı",{"_index":403,"title":{},"body":{"1015822":{}}}],["nnumberofbytest",{"_index":8162,"title":{},"body":{"1015833":{}}}],["nnumberofbytestowr",{"_index":8169,"title":{},"body":{"1015833":{}}}],["no_err",{"_index":2610,"title":{},"body":{"1015823":{}}}],["no_namespaç",{"_index":3113,"title":{},"body":{"1015823":{}}}],["noerr",{"_index":2751,"title":{},"body":{"1015823":{}}}],["non",{"_index":6456,"title":{},"body":{"1015828":{},"1015833":{}}}],["nop",{"_index":11898,"title":{},"body":{"1015817":{}}}],["normalcontex",{"_index":10843,"title":{},"body":{"2424869":{}}}],["normalr",{"_index":10840,"title":{},"body":{"2424869":{}}}],["notif",{"_index":1111,"title":{},"body":{"1015822":{}}}],["notificationev",{"_index":3936,"title":{},"body":{"3440655":{}}}],["notusedtabl",{"_index":5817,"title":{},"body":{"1015847":{}}}],["notusedtablep",{"_index":5818,"title":{},"body":{"1015847":{}}}],["not指令",{"_index":5282,"title":{},"body":{"1015825":{}}}],["npmsg",{"_index":4036,"title":{},"body":{"3440655":{}}}],["nrepcn",{"_index":998,"title":{},"body":{"1015822":{}}}],["nsig",{"_index":419,"title":{},"body":{"1015822":{}}}],["nsig为消息的动作标识",{"_index":436,"title":{},"body":{"1015822":{}}}],["nsig来进行函数的调用",{"_index":441,"title":{},"body":{"1015822":{}}}],["nsiz",{"_index":2437,"title":{},"body":{"1015846":{}}}],["nt!_dispatcher_h",{"_index":10644,"title":{},"body":{"2424889":{}}}],["nt!_exception_registration_reç",{"_index":4293,"title":{},"body":{"2949166":{}}}],["nt!_kapc",{"_index":10827,"title":{},"body":{"2424869":{}}}],["nt!_kapc_",{"_index":10775,"title":{},"body":{"2424869":{}}}],["nt!_kmu",{"_index":10719,"title":{},"body":{"2424889":{}}}],["nt!_ksemaph",{"_index":10701,"title":{},"body":{"2424889":{}}}],["nt!_kthre",{"_index":10614,"title":{},"body":{"2424869":{},"2424889":{}}}],["nt!_kwait_bloç",{"_index":10568,"title":{},"body":{"2424889":{}}}],["nt!_mmpfn",{"_index":6887,"title":{},"body":{"2949228":{}}}],["nt!_mmpfnentr",{"_index":6944,"title":{},"body":{"2949228":{}}}],["ntap",{"_index":4068,"title":{},"body":{"2949166":{},"3440655":{}}}],["ntcreatedebugobject：自行分配内存给_debug_object结构体，并为其成员赋值，绕过原有的h",{"_index":4563,"title":{},"body":{"3440657":{}}}],["ntcreatedebugobject：阻止ntcreatedebugobject函数创建调试对象，从而防止调试器的附加",{"_index":4559,"title":{},"body":{"3440657":{}}}],["ntddk.h",{"_index":5466,"title":{},"body":{"1015847":{}}}],["ntdll.dl",{"_index":2417,"title":{},"body":{"1015846":{}}}],["ntohs(*((u_short*)al",{"_index":10335,"title":{},"body":{"1015818":{}}}],["ntohs(*(u_short*)dstp",{"_index":10389,"title":{},"body":{"1015818":{}}}],["ntohs(*(u_short*)srcp",{"_index":10385,"title":{},"body":{"1015818":{}}}],["ntopenprocess)oldfuncaddr)(processhandl",{"_index":5850,"title":{},"body":{"1015847":{}}}],["ntoskrnl.exe；而我们要学习的图形化界面的接口，它就来源于user32.dll、gdi32.dl",{"_index":7645,"title":{},"body":{"1015833":{}}}],["ntreadvirtualme",{"_index":2446,"title":{},"body":{"1015846":{}}}],["ntreadvirtualmemory函数分析",{"_index":11288,"title":{},"body":{"1703937":{}}}],["ntstatu",{"_index":3931,"title":{},"body":{"1015847":{},"2424889":{},"2949228":{},"3440655":{}}}],["ntstatus(*ntopenproç",{"_index":5837,"title":{},"body":{"1015847":{}}}],["ntwaitforsingleobject函数格式如下，该函数做了两件事情",{"_index":10602,"title":{},"body":{"2424889":{}}}],["ntwaitforsingleobjeç",{"_index":10605,"title":{},"body":{"2424889":{}}}],["nul",{"_index":67,"title":{},"body":{"1015814":{},"1015818":{},"1015822":{},"1015823":{},"1015833":{},"1015847":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["null，因为它前面没有元素；同样，尾部元素的后向指针也总为",{"_index":11408,"title":{},"body":{"1015814":{}}}],["numb",{"_index":3602,"title":{},"body":{"1015818":{},"1015828":{},"1015833":{},"1015840":{},"1703937":{}}}],["number(",{"_index":3603,"title":{},"body":{"1015840":{}}}],["numberoffunç",{"_index":6472,"title":{},"body":{"1015828":{}}}],["numberoflinenump",{"_index":6212,"title":{},"body":{"1015828":{}}}],["numberofn",{"_index":6474,"title":{},"body":{"1015828":{}}}],["numberofreloç",{"_index":6211,"title":{},"body":{"1015828":{}}}],["numberofrva",{"_index":6178,"title":{},"body":{"1015828":{}}}],["numberofserv",{"_index":5809,"title":{},"body":{"1015847":{}}}],["numberofseç",{"_index":6100,"title":{},"body":{"1015828":{}}}],["numberofsymbol",{"_index":6106,"title":{},"body":{"1015828":{}}}],["numberp",{"_index":4241,"title":{},"body":{"2949166":{},"3440657":{}}}],["nvol",{"_index":8040,"title":{},"body":{"1015833":{}}}],["nwidth",{"_index":7674,"title":{},"body":{"1015833":{}}}],["nxen",{"_index":7685,"title":{},"body":{"1015833":{}}}],["nyen",{"_index":7688,"title":{},"body":{"1015833":{}}}],["n之间所有的偶数",{"_index":1856,"title":{},"body":{"1015843":{}}}],["n宸ヤ綔鐩綍锛�%",{"_index":7377,"title":{},"body":{"1015833":{}}}],["n指令",{"_index":9270,"title":{},"body":{"1015831":{},"1703937":{}}}],["n指令虽然被称之为软件中断，但其本质是异常，elfag的if位对该指令是无效的",{"_index":9589,"title":{},"body":{"1015831":{}}}],["n指令，n为0x20（我们写入的任务门描述符在idt表中过的索引值），完整代码如下",{"_index":9377,"title":{},"body":{"1015831":{}}}],["n的值，这里可以先使用goto语句",{"_index":1831,"title":{},"body":{"1015843":{}}}],["n，其中n是idt表的一个索引",{"_index":9266,"title":{},"body":{"1015831":{}}}],["o_eax",{"_index":9238,"title":{},"body":{"1015831":{}}}],["oaidl.h",{"_index":2920,"title":{},"body":{"1015823":{}}}],["ob",{"_index":2793,"title":{},"body":{"1015823":{}}}],["obj",{"_index":309,"title":{},"body":{"1015822":{},"1015840":{}}}],["obj.m_nlength",{"_index":3680,"title":{},"body":{"1015840":{}}}],["obj.m_strbuf",{"_index":3685,"title":{},"body":{"1015840":{}}}],["objectattrip",{"_index":5843,"title":{},"body":{"1015847":{}}}],["objeç",{"_index":2796,"title":{},"body":{"1015823":{},"1015833":{},"1703937":{},"2424889":{}}}],["obsol",{"_index":6251,"title":{},"body":{"1015828":{}}}],["od",{"_index":11679,"title":{},"body":{"1015814":{}}}],["odd(",{"_index":11675,"title":{},"body":{"1015814":{}}}],["oem",{"_index":6072,"title":{},"body":{"1015828":{}}}],["oem扫描码",{"_index":1003,"title":{},"body":{"1015822":{}}}],["of",{"_index":7962,"title":{},"body":{"1015818":{},"1015831":{},"1015833":{}}}],["offsetandreserv",{"_index":10390,"title":{},"body":{"1015818":{}}}],["offset的值写入到eip，然后执行cs:eip处的代码，段间跳转即结束",{"_index":9122,"title":{},"body":{"1015831":{}}}],["ol",{"_index":9755,"title":{},"body":{"1015818":{}}}],["oldbrush",{"_index":886,"title":{},"body":{"1015822":{}}}],["oldfuncaddr",{"_index":5832,"title":{},"body":{"1015847":{}}}],["oldp",{"_index":844,"title":{},"body":{"1015822":{}}}],["oldwndproç",{"_index":505,"title":{},"body":{"1015822":{}}}],["ole2.h",{"_index":2690,"title":{},"body":{"1015823":{}}}],["oleç",{"_index":2938,"title":{},"body":{"1015823":{}}}],["on",{"_index":2207,"title":{},"body":{"1015817":{},"1015818":{},"1015843":{}}}],["on_wm_lbuttondow",{"_index":386,"title":{},"body":{"1015822":{}}}],["onc",{"_index":108,"title":{},"body":{"1015822":{}}}],["onclick=\"op",{"_index":3227,"title":{},"body":{"1015823":{}}}],["onidle函数是一个虚函数，是cwinapp的成员方法，所以我们可以重写该函数以便让我们的程序在空闲状态下做一些操作",{"_index":577,"title":{},"body":{"1015822":{}}}],["onlbuttondown函数",{"_index":685,"title":{},"body":{"1015822":{}}}],["on娑堟伅鍚�(uin",{"_index":996,"title":{},"body":{"1015822":{}}}],["op",{"_index":2613,"title":{},"body":{"1015823":{}}}],["opaque鏄娇鐢ㄥ綋鍓嶈儗鏅殑鐢诲埛鐨勯鑹茶緭鍑烘樉绀烘枃瀛楃殑鑳屾櫙",{"_index":810,"title":{},"body":{"1015822":{}}}],["opc",{"_index":11824,"title":{},"body":{"1015817":{}}}],["opcode、modr/m、sib之间的关系是这样的：opcode决定有没有modr/m，modr/m决定有没有sip",{"_index":11817,"title":{},"body":{"1015817":{}}}],["opcode最少1个字节，最多3个字节；如下图我们可以看见硬编码排列是不整齐的，有的一行是1个字节，有的则是2个、5个字节，opcode、modr/m、sib这三个组合在一块就可以决定一行指令的宽度（抛开前缀指令），后面的displacement、immediate就是配角，当前面的三个确定了，这两个也就确定了",{"_index":11816,"title":{},"body":{"1015817":{}}}],["ope",{"_index":3222,"title":{},"body":{"1015823":{}}}],["open_alway",{"_index":6853,"title":{},"body":{"1015833":{},"2949228":{}}}],["open_ex",{"_index":5737,"title":{},"body":{"1015833":{},"1015847":{}}}],["openfilemap",{"_index":6803,"title":{},"body":{"1015833":{},"2949228":{}}}],["openfilemapping(file_map_all_aç",{"_index":6843,"title":{},"body":{"1015833":{},"2949228":{}}}],["openfilemapping的作用是打开一个已存在的文件映射对象，并返回对应的句柄，语法格式",{"_index":6804,"title":{},"body":{"2949228":{}}}],["openprocess(process_all_aç",{"_index":7354,"title":{},"body":{"1015833":{},"1933378":{}}}],["openprocess函数",{"_index":7347,"title":{},"body":{"1015833":{}}}],["openproç",{"_index":7349,"title":{},"body":{"1015833":{}}}],["opensourç",{"_index":4092,"title":{},"body":{"1015820":{}}}],["openssl/rsa.h",{"_index":10510,"title":{},"body":{"1015818":{}}}],["oper",{"_index":3455,"title":{},"body":{"1015833":{},"1015840":{},"1015847":{}}}],["opera",{"_index":11833,"title":{},"body":{"1015817":{}}}],["operator()(ç",{"_index":11770,"title":{},"body":{"1015814":{}}}],["operator*(nump",{"_index":3619,"title":{},"body":{"1015840":{}}}],["operator+(nump",{"_index":3618,"title":{},"body":{"1015840":{}}}],["operator/(nump",{"_index":3620,"title":{},"body":{"1015840":{}}}],["operator<(nump",{"_index":3621,"title":{},"body":{"1015840":{}}}],["operator==(nump",{"_index":3622,"title":{},"body":{"1015840":{}}}],["operator>(nump",{"_index":3614,"title":{},"body":{"1015840":{}}}],["opt",{"_index":7219,"title":{},"body":{"1015833":{},"2424869":{}}}],["optionalh",{"_index":6090,"title":{},"body":{"1015828":{}}}],["options，填入两个文件夹所在路径",{"_index":10114,"title":{},"body":{"1015818":{}}}],["or",{"_index":6570,"title":{},"body":{"1015828":{},"1015833":{}}}],["originalfirstth",{"_index":6541,"title":{},"body":{"1015828":{}}}],["originalfirstthunk锛欱0",{"_index":6579,"title":{},"body":{"1015828":{}}}],["originalp",{"_index":6896,"title":{},"body":{"2949228":{}}}],["originalç",{"_index":4818,"title":{},"body":{"3440657":{}}}],["origincmd[6",{"_index":5956,"title":{},"body":{"1015847":{}}}],["or指令",{"_index":5276,"title":{},"body":{"1015825":{}}}],["ospf",{"_index":10342,"title":{},"body":{"1015818":{}}}],["ostr",{"_index":10297,"title":{},"body":{"1015818":{}}}],["oth",{"_index":6281,"title":{},"body":{"1015828":{}}}],["out",{"_index":4070,"title":{},"body":{"1015833":{},"3440655":{}}}],["output_debug_string_inf",{"_index":4695,"title":{},"body":{"3440657":{}}}],["outputdebugstr",{"_index":7719,"title":{},"body":{"1015833":{}}}],["outputdebugstring(\"createremotethr",{"_index":8414,"title":{},"body":{"1015833":{}}}],["outputdebugstring(\"getmodulehandl",{"_index":8460,"title":{},"body":{"1015833":{}}}],["outputdebugstring(\"getprocaddr",{"_index":8464,"title":{},"body":{"1015833":{}}}],["outputdebugstring(\"openprocesserr",{"_index":8641,"title":{},"body":{"1015833":{}}}],["outputdebugstring(\"openproç",{"_index":8409,"title":{},"body":{"1015833":{}}}],["outputdebugstring(\"virtualallocex",{"_index":8454,"title":{},"body":{"1015833":{}}}],["outputdebugstring(\"writeprocessme",{"_index":8457,"title":{},"body":{"1015833":{}}}],["outputdebugstring(szoutbuf",{"_index":299,"title":{},"body":{"1015822":{},"1015833":{},"3440655":{}}}],["out绫诲瀷鍙傛暟锛岃繖鏄竴涓寚閽",{"_index":7780,"title":{},"body":{"1015833":{}}}],["overlap",{"_index":8166,"title":{},"body":{"1015833":{}}}],["overlay",{"_index":6068,"title":{},"body":{"1015828":{}}}],["ow",{"_index":3865,"title":{},"body":{"1015833":{},"3440655":{}}}],["ownerthr",{"_index":10722,"title":{},"body":{"2424889":{}}}],["p",{"_index":2095,"title":{},"body":{"1015814":{},"1015818":{},"1015831":{},"1015840":{},"1015843":{},"2949228":{}}}],["p!=p1",{"_index":11731,"title":{},"body":{"1015814":{}}}],["p(1,3",{"_index":3560,"title":{},"body":{"1015840":{}}}],["p)[3",{"_index":3495,"title":{},"body":{"1015840":{}}}],["p+0",{"_index":2169,"title":{},"body":{"1015843":{}}}],["p+=i",{"_index":11736,"title":{},"body":{"1015814":{}}}],["p+i",{"_index":2177,"title":{},"body":{"1015814":{},"1015843":{}}}],["p+i)+",{"_index":2179,"title":{},"body":{"1015843":{}}}],["p+i)+k)+",{"_index":2181,"title":{},"body":{"1015843":{}}}],["p+i)+k)+m)+w)+",{"_index":2183,"title":{},"body":{"1015843":{}}}],["p.prin",{"_index":3557,"title":{},"body":{"1015814":{},"1015840":{}}}],["p.x=10",{"_index":2192,"title":{},"body":{"1015843":{}}}],["p.y=20",{"_index":2193,"title":{},"body":{"1015843":{}}}],["p1",{"_index":2102,"title":{},"body":{"1015843":{}}}],["p2",{"_index":2103,"title":{},"body":{"1015843":{}}}],["p3",{"_index":2104,"title":{},"body":{"1015843":{}}}],["p4",{"_index":2105,"title":{},"body":{"1015843":{}}}],["p7",{"_index":2174,"title":{},"body":{"1015843":{}}}],["p7+0)+0)+0)+0)+0)+0",{"_index":2175,"title":{},"body":{"1015843":{}}}],["p7[0][0][0][0][0][0][0",{"_index":2176,"title":{},"body":{"1015843":{}}}],["p<=p1",{"_index":11738,"title":{},"body":{"1015814":{}}}],["p<p1",{"_index":11737,"title":{},"body":{"1015814":{}}}],["p>=p1",{"_index":11740,"title":{},"body":{"1015814":{}}}],["p>p1",{"_index":11739,"title":{},"body":{"1015814":{}}}],["p[0",{"_index":2165,"title":{},"body":{"1015840":{},"1015843":{}}}],["p[5",{"_index":2231,"title":{},"body":{"1015843":{}}}],["p[i",{"_index":2178,"title":{},"body":{"1015814":{},"1015843":{}}}],["p[i][",{"_index":2180,"title":{},"body":{"1015843":{}}}],["p[i][k][",{"_index":2182,"title":{},"body":{"1015843":{}}}],["p[i][k][m][w][",{"_index":2184,"title":{},"body":{"1015843":{}}}],["pac",{"_index":2030,"title":{},"body":{"1015818":{},"1015843":{}}}],["pack(1",{"_index":2029,"title":{},"body":{"1015843":{}}}],["pack(1)来改变结构体成员的对齐方式，但是无法影响结构体本身",{"_index":2032,"title":{},"body":{"1015843":{}}}],["pack(2",{"_index":2035,"title":{},"body":{"1015843":{}}}],["pack(n)中的n用来设定变量以n字节对齐方式，可以设定的值包含：1、2、4、8，vc6编译器默认是8；所以我们可以使用如上这种方式来取消强制对齐",{"_index":2033,"title":{},"body":{"1015843":{}}}],["package，输入或输出请求包",{"_index":5636,"title":{},"body":{"1015847":{}}}],["pad",{"_index":10499,"title":{},"body":{"1015818":{}}}],["paddr",{"_index":4813,"title":{},"body":{"3440657":{}}}],["pae位为1时，是pae（2",{"_index":9616,"title":{},"body":{"1015831":{}}}],["pag",{"_index":6045,"title":{},"body":{"1015828":{},"1015831":{}}}],["page_execute_r",{"_index":4881,"title":{},"body":{"2949228":{},"3440657":{}}}],["page_execute_readwr",{"_index":6813,"title":{},"body":{"2949228":{}}}],["page_noaç",{"_index":4879,"title":{},"body":{"3440657":{}}}],["page_readonl",{"_index":6815,"title":{},"body":{"2949228":{}}}],["page_readwr",{"_index":6756,"title":{},"body":{"1015833":{},"1703937":{},"2949228":{}}}],["page_writecop",{"_index":6811,"title":{},"body":{"2949228":{}}}],["pageabl",{"_index":6313,"title":{},"body":{"1015828":{}}}],["pagecol",{"_index":6950,"title":{},"body":{"2949228":{}}}],["pageloç",{"_index":6952,"title":{},"body":{"2949228":{}}}],["pageprotect",{"_index":5882,"title":{},"body":{"1015847":{}}}],["pageprotectof",{"_index":5887,"title":{},"body":{"1015847":{}}}],["pain",{"_index":3842,"title":{},"body":{"3440655":{}}}],["paintwindow(hdç",{"_index":3760,"title":{},"body":{"3440655":{}}}],["pap",{"_index":550,"title":{},"body":{"1015822":{}}}],["par",{"_index":4216,"title":{},"body":{"1015820":{},"1015828":{},"1015833":{}}}],["paragraph",{"_index":6050,"title":{},"body":{"1015828":{}}}],["parameters.deviceiocontrol.inputbufferlength",{"_index":5783,"title":{},"body":{"1015847":{}}}],["parameters.deviceiocontrol.iocontrolç",{"_index":5780,"title":{},"body":{"1015847":{}}}],["parameters.deviceiocontrol.outputbufferlength",{"_index":5785,"title":{},"body":{"1015847":{}}}],["paramtablep",{"_index":5810,"title":{},"body":{"1015847":{}}}],["paray",{"_index":2972,"title":{},"body":{"1015823":{}}}],["parent：父节点地址，本例中为根节点，没有父节点，所以为空",{"_index":6702,"title":{},"body":{"2949228":{}}}],["parityerr",{"_index":6951,"title":{},"body":{"2949228":{}}}],["pascal",{"_index":319,"title":{},"body":{"1015822":{}}}],["passw",{"_index":8876,"title":{},"body":{"1015850":{}}}],["pb",{"_index":3513,"title":{},"body":{"1015840":{}}}],["pbasecl",{"_index":252,"title":{},"body":{"1015822":{}}}],["pbn_e",{"_index":10525,"title":{},"body":{"1015818":{}}}],["pbn_n",{"_index":10527,"title":{},"body":{"1015818":{}}}],["pbol",{"_index":2979,"title":{},"body":{"1015823":{}}}],["pbrush",{"_index":778,"title":{},"body":{"1015822":{}}}],["pbstrval",{"_index":2983,"title":{},"body":{"1015823":{}}}],["pbval",{"_index":2973,"title":{},"body":{"1015823":{}}}],["pbyt",{"_index":6568,"title":{},"body":{"1015828":{}}}],["pcap",{"_index":10206,"title":{},"body":{"1015818":{}}}],["pcap.h",{"_index":10116,"title":{},"body":{"1015818":{}}}],["pcap_",{"_index":10157,"title":{},"body":{"1015818":{}}}],["pcap_addr",{"_index":10137,"title":{},"body":{"1015818":{}}}],["pcap_dispatç",{"_index":10183,"title":{},"body":{"1015818":{}}}],["pcap_findalldev",{"_index":10119,"title":{},"body":{"1015818":{}}}],["pcap_findalldevs(&alldevsp",{"_index":10131,"title":{},"body":{"1015818":{}}}],["pcap_freealldevs(alldevsp",{"_index":10146,"title":{},"body":{"1015818":{}}}],["pcap_handl",{"_index":10172,"title":{},"body":{"1015818":{}}}],["pcap_handler)(u_ç",{"_index":10178,"title":{},"body":{"1015818":{}}}],["pcap_if_",{"_index":10120,"title":{},"body":{"1015818":{}}}],["pcap_loop(pcap",{"_index":10215,"title":{},"body":{"1015818":{}}}],["pcap_loop函数语法",{"_index":10169,"title":{},"body":{"1015818":{}}}],["pcap_lop",{"_index":10170,"title":{},"body":{"1015818":{}}}],["pcap_op",{"_index":10158,"title":{},"body":{"1015818":{}}}],["pcap_open(\"\\\\device\\\\npf_{c7c05f",{"_index":10207,"title":{},"body":{"1015818":{}}}],["pcap_open函数语法",{"_index":10156,"title":{},"body":{"1015818":{}}}],["pcap_open杩斿洖鐨勬寚閽",{"_index":10171,"title":{},"body":{"1015818":{}}}],["pcap_pkthdr",{"_index":10179,"title":{},"body":{"1015818":{}}}],["pcap_rmtauth",{"_index":10166,"title":{},"body":{"1015818":{}}}],["pcd（pag",{"_index":9627,"title":{},"body":{"1015831":{}}}],["pchar",{"_index":5564,"title":{},"body":{"1015847":{}}}],["pclient_",{"_index":5844,"title":{},"body":{"1015847":{}}}],["pclientinf",{"_index":3817,"title":{},"body":{"3440655":{}}}],["pclosep",{"_index":4161,"title":{},"body":{"1015820":{}}}],["pcontex",{"_index":73,"title":{},"body":{"1015822":{},"2949166":{}}}],["pcti",{"_index":3811,"title":{},"body":{"3440655":{}}}],["pcval",{"_index":2999,"title":{},"body":{"1015823":{}}}],["pcyval",{"_index":2981,"title":{},"body":{"1015823":{}}}],["pdat",{"_index":2982,"title":{},"body":{"1015823":{}}}],["pdb",{"_index":2697,"title":{},"body":{"1015823":{}}}],["pdbconn就是一个指针",{"_index":3250,"title":{},"body":{"1015823":{}}}],["pdbfact",{"_index":2781,"title":{},"body":{"1015823":{}}}],["pdblval",{"_index":2978,"title":{},"body":{"1015823":{}}}],["pdb文件",{"_index":5499,"title":{},"body":{"1015847":{}}}],["pdb文件也就是符号文件，我们在编译程序时候，只要不取消调试信息的输出，默认情况下是可以在编译输出的目录中找到所编译程序的pdb文件的，例如我们上文中编译的驱动程序的输出目录下就有对应的pdb文件",{"_index":5502,"title":{},"body":{"1015847":{}}}],["pdebug_objeç",{"_index":4553,"title":{},"body":{"3440657":{}}}],["pdec",{"_index":2998,"title":{},"body":{"1015823":{}}}],["pdeskinf",{"_index":3815,"title":{},"body":{"3440655":{}}}],["pdevice_objeç",{"_index":5605,"title":{},"body":{"1015847":{}}}],["pdeviceobj",{"_index":5645,"title":{},"body":{"1015847":{}}}],["pdevobj",{"_index":5711,"title":{},"body":{"1015847":{}}}],["pde与p",{"_index":9413,"title":{},"body":{"1015831":{}}}],["pde的结构与10",{"_index":9534,"title":{},"body":{"1015831":{}}}],["pde结构",{"_index":9533,"title":{},"body":{"1015831":{}}}],["pdi",{"_index":9491,"title":{},"body":{"1015831":{}}}],["pdi(10)锛歅agı",{"_index":9482,"title":{},"body":{"1015831":{}}}],["pdisp",{"_index":2970,"title":{},"body":{"1015823":{}}}],["pdpte结构",{"_index":9527,"title":{},"body":{"1015831":{}}}],["pdriver_",{"_index":5618,"title":{},"body":{"1015847":{}}}],["pdriver_dispatç",{"_index":5622,"title":{},"body":{"1015847":{}}}],["pdriver_ex",{"_index":5612,"title":{},"body":{"1015847":{}}}],["pdriver_objeç",{"_index":5625,"title":{},"body":{"1015847":{}}}],["pdriver_st",{"_index":5619,"title":{},"body":{"1015847":{}}}],["pdriver_unl",{"_index":5620,"title":{},"body":{"1015847":{}}}],["pdwor",{"_index":4861,"title":{},"body":{"1015828":{},"3440657":{}}}],["pdword)g_lpbuf",{"_index":7976,"title":{},"body":{"1015833":{}}}],["pdword)lpaddr",{"_index":7037,"title":{},"body":{"2949228":{}}}],["pdword)lpbuf",{"_index":6840,"title":{},"body":{"2949228":{}}}],["pdwrd",{"_index":4442,"title":{},"body":{"2949166":{}}}],["pe32",{"_index":8513,"title":{},"body":{"1015833":{}}}],["pe32+锛�20b",{"_index":6125,"title":{},"body":{"1015828":{}}}],["pe32.dwsiz",{"_index":8515,"title":{},"body":{"1015833":{}}}],["pe32.szexefil",{"_index":8519,"title":{},"body":{"1015833":{}}}],["pe32锛�10b",{"_index":6124,"title":{},"body":{"1015828":{}}}],["peakvirtual",{"_index":10983,"title":{},"body":{"1703937":{}}}],["peb",{"_index":11001,"title":{},"body":{"1703937":{}}}],["peb(proç",{"_index":8538,"title":{},"body":{"1015833":{}}}],["peb的00c偏移是一个结构体，这个结构体包括模块链表，api函数遍历模块就是查看这个链表",{"_index":8542,"title":{},"body":{"1015833":{}}}],["peb结构体同理，我们只需要找到fs寄存器中存储地址的0x30偏移然后跟进即可",{"_index":8547,"title":{},"body":{"1015833":{}}}],["peb（proç",{"_index":11003,"title":{},"body":{"1703937":{}}}],["pen",{"_index":837,"title":{},"body":{"1015822":{},"1015833":{},"3440655":{}}}],["pen(ps_dash",{"_index":832,"title":{},"body":{"1015822":{}}}],["pen.createpen(ps_dash",{"_index":838,"title":{},"body":{"1015822":{}}}],["pencryptbuf",{"_index":10521,"title":{},"body":{"1015818":{}}}],["per",{"_index":3375,"title":{},"body":{"1015840":{}}}],["person&)x",{"_index":3519,"title":{},"body":{"1015840":{}}}],["person(",{"_index":3542,"title":{},"body":{"1015840":{}}}],["person(agı",{"_index":3549,"title":{},"body":{"1015840":{}}}],["person*)malloc(sizeof(person)*10",{"_index":3476,"title":{},"body":{"1015840":{}}}],["person.agı",{"_index":3392,"title":{},"body":{"1015840":{}}}],["person.sex",{"_index":3394,"title":{},"body":{"1015840":{}}}],["person::pr",{"_index":3567,"title":{},"body":{"1015840":{}}}],["person::print();是先调用父类的函数，但是在这里就可以打印了吗？实则不然",{"_index":3568,"title":{},"body":{"1015840":{}}}],["person[10",{"_index":3477,"title":{},"body":{"1015840":{}}}],["person[10]则调用10次",{"_index":3481,"title":{},"body":{"1015840":{}}}],["peventqueueserv",{"_index":3867,"title":{},"body":{"3440655":{}}}],["pexcepinf",{"_index":4357,"title":{},"body":{"2949166":{}}}],["pexception_poin",{"_index":4314,"title":{},"body":{"2949166":{}}}],["pexception_registr",{"_index":4433,"title":{},"body":{"2949166":{}}}],["pexception_reç",{"_index":4246,"title":{},"body":{"2949166":{}}}],["pexceptioninf",{"_index":4832,"title":{},"body":{"3440657":{}}}],["pe基础",{"_index":4979,"title":{"1015828":{}},"body":{"1015826":{},"1015827":{}}}],["pe头",{"_index":6084,"title":{},"body":{"1015828":{}}}],["pe头整体就是如下这个结构体",{"_index":6085,"title":{},"body":{"1015828":{}}}],["pe文件在运行前（静态，存储在磁盘上）和运行时（动态，运行在内存中）的格式是有差异的，这种差异对于我们理解pe文件是如何执行的来说很重要",{"_index":6030,"title":{},"body":{"1015828":{}}}],["pe文件头",{"_index":6013,"title":{},"body":{"1015828":{}}}],["pe文件所依赖的模块以及涉及到依赖模块中的具体函数都存储在导入表中，我们可以在pe格式图的扩展pe头最后一个成员结构体数组中的第二个结构体找到导出表相关的信息，它有2个成员，一个表示导入表的地址，一个表示导入表的大小",{"_index":6538,"title":{},"body":{"1015828":{}}}],["pe文件整体结构解析",{"_index":6034,"title":{},"body":{"1015828":{}}}],["pe文件的两种状态",{"_index":5991,"title":{},"body":{"1015828":{}}}],["pe文件的整体结构",{"_index":5987,"title":{},"body":{"1015828":{}}}],["pe文件结构",{"_index":5968,"title":{},"body":{"1015828":{}}}],["pe格式图.pdf（看上去很多，但不需要害怕，一步一步学下去还是非常容易理解的",{"_index":5990,"title":{},"body":{"1015828":{}}}],["pe空白区添加代码",{"_index":6343,"title":{},"body":{"1015828":{}}}],["pe节表",{"_index":6192,"title":{},"body":{"1015828":{}}}],["pe鏂囦欢鑷韩鐨勭増鏈彿",{"_index":6152,"title":{},"body":{"1015828":{}}}],["pe鏍囪瘑",{"_index":6087,"title":{},"body":{"1015828":{}}}],["pe：cr0下标为0的位是启用保护（proteç",{"_index":9601,"title":{},"body":{"1015831":{}}}],["pfact",{"_index":2708,"title":{},"body":{"1015823":{}}}],["pfast_io_dispatç",{"_index":5616,"title":{},"body":{"1015847":{}}}],["pfltval",{"_index":2977,"title":{},"body":{"1015823":{}}}],["pfn",{"_index":428,"title":{},"body":{"1015822":{}}}],["pfn_createfil",{"_index":8623,"title":{},"body":{"1015833":{}}}],["pfn_createfile)gcr",{"_index":8629,"title":{},"body":{"1015833":{}}}],["pfn_numb",{"_index":6899,"title":{},"body":{"2949228":{}}}],["pfncreatefil",{"_index":8628,"title":{},"body":{"1015833":{}}}],["pfnnew",{"_index":273,"title":{},"body":{"1015822":{}}}],["pfnveh",{"_index":4337,"title":{},"body":{"2949166":{}}}],["pfn为响应消息时执行的函数，这里也就是onlbuttondown函数的地址，uin",{"_index":435,"title":{},"body":{"1015822":{}}}],["pfn（响应消息时执行的函数）的返回值和参数的格式",{"_index":439,"title":{},"body":{"1015822":{}}}],["pfu",{"_index":2317,"title":{},"body":{"1015843":{}}}],["pfullscrenp",{"_index":4164,"title":{},"body":{"1015820":{}}}],["pfun(0,0,0,0,0",{"_index":2332,"title":{},"body":{"1015843":{}}}],["pfun(1,2",{"_index":2320,"title":{},"body":{"1015843":{}}}],["pfun)(int,",{"_index":2313,"title":{},"body":{"1015843":{}}}],["pfun)(int,int,int,int,",{"_index":2329,"title":{},"body":{"1015843":{}}}],["pg=0且pe=0：处理器工作在实地址模式下",{"_index":9604,"title":{},"body":{"1015831":{}}}],["pg=0且pe=1：处理器工作在没有开启分页机制的保护模式下（不存在这样的操作系统",{"_index":9605,"title":{},"body":{"1015831":{}}}],["pg=1且pe=0：在pe没有开启的情况下无法开启pg，所以这种情况是不存在的",{"_index":9606,"title":{},"body":{"1015831":{}}}],["pg=1且pe=1：处理器工作在开启了分页机制的保护模式下",{"_index":9607,"title":{},"body":{"1015831":{}}}],["pg：当该位开启时即开启了分页机制保护，在开启这个标志之前必须已经或者同时开启pe标志",{"_index":9603,"title":{},"body":{"1015831":{}}}],["phandl",{"_index":5838,"title":{},"body":{"1015847":{}}}],["physicaladdr",{"_index":6199,"title":{},"body":{"1015828":{}}}],["pi",{"_index":2974,"title":{},"body":{"1015814":{},"1015823":{},"1015833":{},"1933378":{},"3440655":{},"3440657":{}}}],["pid我们就可以理解为是全局句柄表中的一个索引，那么pid和句柄的区别就很容易看出来来了，pid是全局的，在任何进程中都有意义，都可以使用，而句柄则是局部的、私有的；pid是唯一的，绝对不可能出现重复的存在，但是当进程消失，那么这个pid就有可能会分给另外一个进程。（pid不是句柄，但是可以通过pid获得到全局句柄表中其对应的句柄",{"_index":7334,"title":{},"body":{"1015833":{}}}],["pimage_base_reloç",{"_index":6606,"title":{},"body":{"1015828":{}}}],["pimage_dos_h",{"_index":6077,"title":{},"body":{"1015828":{}}}],["pimage_export_direct",{"_index":6483,"title":{},"body":{"1015828":{}}}],["pimage_file_h",{"_index":6111,"title":{},"body":{"1015828":{}}}],["pimage_import_by_",{"_index":6572,"title":{},"body":{"1015828":{}}}],["pimage_nt_headers32",{"_index":6093,"title":{},"body":{"1015828":{}}}],["pimage_optional_header32",{"_index":6183,"title":{},"body":{"1015828":{}}}],["pimage_section_h",{"_index":6214,"title":{},"body":{"1015828":{}}}],["ping",{"_index":7248,"title":{},"body":{"1015833":{}}}],["pint",{"_index":3003,"title":{},"body":{"1015823":{}}}],["pio_stack_loç",{"_index":5775,"title":{},"body":{"1015847":{}}}],["piobuf",{"_index":5787,"title":{},"body":{"1015847":{}}}],["pirp",{"_index":5712,"title":{},"body":{"1015847":{}}}],["pirpstaç",{"_index":5776,"title":{},"body":{"1015847":{}}}],["pkapc",{"_index":10884,"title":{},"body":{"2424869":{}}}],["pkev",{"_index":3866,"title":{},"body":{"2949228":{},"3440655":{}}}],["pkexception_fr",{"_index":4272,"title":{},"body":{"2949166":{}}}],["pkkernel_r",{"_index":10868,"title":{},"body":{"2424869":{}}}],["pknormal_r",{"_index":10871,"title":{},"body":{"2424869":{}}}],["pkrundown_r",{"_index":10870,"title":{},"body":{"2424869":{}}}],["pksystem_service_",{"_index":5812,"title":{},"body":{"1015847":{}}}],["pksystem_service_descript",{"_index":5820,"title":{},"body":{"1015847":{}}}],["pkt_dat",{"_index":10181,"title":{},"body":{"1015818":{}}}],["pkt_data+14",{"_index":10313,"title":{},"body":{"1015818":{}}}],["pkt_data+14+9",{"_index":10337,"title":{},"body":{"1015818":{}}}],["pkt_data+14+realheaderlen+12",{"_index":10391,"title":{},"body":{"1015818":{}}}],["pkt_data+14+realheaderlen+x",{"_index":10383,"title":{},"body":{"1015818":{}}}],["pkt_data+i+0",{"_index":10234,"title":{},"body":{"1015818":{}}}],["pkt_data+i+12",{"_index":10306,"title":{},"body":{"1015818":{}}}],["pkt_data+i+14+12",{"_index":10345,"title":{},"body":{"1015818":{}}}],["pkt_data+i+14+16",{"_index":10353,"title":{},"body":{"1015818":{}}}],["pkt_data+i+14+2",{"_index":10325,"title":{},"body":{"1015818":{}}}],["pkt_data+i+6",{"_index":10245,"title":{},"body":{"1015818":{}}}],["pkt_data[",{"_index":10255,"title":{},"body":{"1015818":{}}}],["pkt_he",{"_index":10180,"title":{},"body":{"1015818":{}}}],["pkthre",{"_index":10864,"title":{},"body":{"2424869":{}}}],["pktrap_fr",{"_index":4275,"title":{},"body":{"2949166":{}}}],["plac",{"_index":7724,"title":{},"body":{"1015833":{}}}],["plarge_integi",{"_index":10608,"title":{},"body":{"2424889":{}}}],["player控件等，整个visu",{"_index":2583,"title":{},"body":{"1015823":{}}}],["pldr_mod",{"_index":8559,"title":{},"body":{"1015833":{}}}],["plist_entr",{"_index":8555,"title":{},"body":{"1015833":{}}}],["pllval",{"_index":2976,"title":{},"body":{"1015823":{}}}],["plu",{"_index":1473,"title":{},"body":{"1015840":{},"1015843":{}}}],["plus(",{"_index":1360,"title":{},"body":{"1015840":{},"1015843":{}}}],["plus(&",{"_index":3305,"title":{},"body":{"1015840":{}}}],["plus(1,2",{"_index":1362,"title":{},"body":{"1015843":{}}}],["plus(1,2,3",{"_index":1502,"title":{},"body":{"1015843":{}}}],["plus(stu",{"_index":3295,"title":{},"body":{"1015840":{}}}],["plus(x",{"_index":2123,"title":{},"body":{"1015843":{}}}],["plus1(",{"_index":1498,"title":{},"body":{"1015843":{}}}],["plus1(x,",{"_index":1500,"title":{},"body":{"1015843":{}}}],["plval",{"_index":2975,"title":{},"body":{"1015823":{}}}],["pm",{"_index":7932,"title":{},"body":{"1015833":{}}}],["pmenus",{"_index":3845,"title":{},"body":{"3440655":{}}}],["pmm_rmap_entr",{"_index":6920,"title":{},"body":{"2949228":{}}}],["pmmpte",{"_index":6906,"title":{},"body":{"2949228":{}}}],["pmsg",{"_index":4034,"title":{},"body":{"1015833":{},"3440655":{}}}],["po",{"_index":6946,"title":{},"body":{"2949228":{}}}],["pobject_attrip",{"_index":5842,"title":{},"body":{"1015847":{}}}],["poin",{"_index":422,"title":{},"body":{"1015818":{},"1015822":{},"1015831":{},"1015833":{},"1015843":{},"3440655":{}}}],["point*)",{"_index":2203,"title":{},"body":{"1015843":{}}}],["point.",{"_index":983,"title":{},"body":{"1015822":{},"1015843":{}}}],["point.x",{"_index":2001,"title":{},"body":{"1015843":{}}}],["point1,point2,point3",{"_index":2004,"title":{},"body":{"1015843":{}}}],["point1.",{"_index":2006,"title":{},"body":{"1015843":{}}}],["point1.x",{"_index":2005,"title":{},"body":{"1015843":{}}}],["point2",{"_index":2013,"title":{},"body":{"1015843":{}}}],["point2.",{"_index":2008,"title":{},"body":{"1015843":{}}}],["point2.x",{"_index":2007,"title":{},"body":{"1015843":{}}}],["point3.",{"_index":2010,"title":{},"body":{"1015843":{}}}],["point3.x",{"_index":2009,"title":{},"body":{"1015843":{}}}],["pointertolinenump",{"_index":6210,"title":{},"body":{"1015828":{}}}],["pointertoraw",{"_index":6207,"title":{},"body":{"1015828":{}}}],["pointertoreloç",{"_index":6209,"title":{},"body":{"1015828":{}}}],["pointertosymbol",{"_index":6104,"title":{},"body":{"1015828":{}}}],["point，第二个参数我们已经使用过了，其就是一个设备坐标（视口），第一个参数表示控制键状态，其可以表示：ctrl键按下、鼠标左键按下、鼠标中键按下、鼠标右键按下、shift键按下",{"_index":947,"title":{},"body":{"1015822":{}}}],["polyl",{"_index":709,"title":{},"body":{"1015822":{}}}],["polylineto函数和polyline函数没有本质区别，唯一的区别其在使用上需要指定一个起始位置，并且不需要5组x",{"_index":743,"title":{},"body":{"1015822":{}}}],["polylineto函数线段连接",{"_index":742,"title":{},"body":{"1015822":{}}}],["polyline函数就是将一系列点用线段连接起来，其参数就是一个lppoint的指针（直接使用数组名就表示是数组首地址，所以我们可以直接使用point来定义一个数组传入进去）和一个int类型的参数（这个表示有多少个点，每个点都是基于x",{"_index":730,"title":{},"body":{"1015822":{}}}],["polyline函数线段连接",{"_index":729,"title":{},"body":{"1015822":{}}}],["pop",{"_index":1405,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015843":{},"1015847":{},"1703937":{}}}],["pop_baç",{"_index":11366,"title":{},"body":{"1015814":{}}}],["pop_fro",{"_index":11389,"title":{},"body":{"1015814":{}}}],["pop_front锛氬垹闄ら閮ㄧ殑鍏冪礌",{"_index":11398,"title":{},"body":{"1015814":{}}}],["popf",{"_index":5920,"title":{},"body":{"1015847":{}}}],["popf（pop",{"_index":5431,"title":{},"body":{"1015825":{}}}],["popup",{"_index":68,"title":{},"body":{"1015822":{}}}],["pop指令",{"_index":5345,"title":{},"body":{"1015825":{}}}],["pop，从栈中移除栈顶元素，但不返回",{"_index":11538,"title":{},"body":{"1015814":{}}}],["pop，从队列头部移除元素但不返回",{"_index":11561,"title":{},"body":{"1015814":{}}}],["pop，删除队列头部（最大）的元素，但不返回",{"_index":11583,"title":{},"body":{"1015814":{}}}],["por",{"_index":8879,"title":{},"body":{"1015818":{},"1015850":{}}}],["porg",{"_index":10520,"title":{},"body":{"1015818":{}}}],["pos",{"_index":3871,"title":{},"body":{"1015833":{},"3440655":{}}}],["posix",{"_index":4087,"title":{},"body":{"1015820":{}}}],["possibl",{"_index":3981,"title":{},"body":{"1015833":{},"3440655":{}}}],["postedmessageslisth",{"_index":3874,"title":{},"body":{"3440655":{}}}],["postedmessageslisthead：接到postmessage发来的消息",{"_index":3975,"title":{},"body":{"3440655":{}}}],["postquitmessage(0",{"_index":7813,"title":{},"body":{"1015833":{}}}],["pparay",{"_index":2986,"title":{},"body":{"1015823":{}}}],["pparentw",{"_index":66,"title":{},"body":{"1015822":{}}}],["ppdisp",{"_index":2985,"title":{},"body":{"1015823":{}}}],["ppeb_ldr_",{"_index":8557,"title":{},"body":{"1015833":{}}}],["ppi(12)锛歅hy",{"_index":9487,"title":{},"body":{"1015831":{}}}],["ppobjeç",{"_index":2600,"title":{},"body":{"1015823":{}}}],["pprocessinf",{"_index":3805,"title":{},"body":{"3440655":{}}}],["ppun",{"_index":2984,"title":{},"body":{"1015823":{}}}],["ppv",{"_index":2826,"title":{},"body":{"1015823":{}}}],["ppvobjeç",{"_index":2889,"title":{},"body":{"1015823":{}}}],["pqattaç",{"_index":3849,"title":{},"body":{"3440655":{}}}],["prag",{"_index":107,"title":{},"body":{"1015818":{},"1015822":{},"1015833":{},"1015843":{},"1015850":{}}}],["prcb",{"_index":11065,"title":{},"body":{"1703937":{}}}],["prcbdat",{"_index":11080,"title":{},"body":{"1703937":{}}}],["precinf",{"_index":3008,"title":{},"body":{"1015823":{}}}],["prev",{"_index":137,"title":{},"body":{"1015822":{},"1015831":{},"1015833":{},"2949166":{}}}],["previousm",{"_index":4279,"title":{},"body":{"1703937":{},"2949166":{}}}],["previoustryl",{"_index":4440,"title":{},"body":{"2949166":{}}}],["pri",{"_index":10465,"title":{},"body":{"1015818":{}}}],["prin",{"_index":3333,"title":{},"body":{"1015814":{},"1015840":{}}}],["print1",{"_index":3419,"title":{},"body":{"1015840":{}}}],["printarray(",{"_index":2127,"title":{},"body":{"1015843":{}}}],["printbyref(p",{"_index":3511,"title":{},"body":{"1015840":{}}}],["printcruntimecl",{"_index":294,"title":{},"body":{"1015822":{}}}],["printcruntimeclass(baseruntimecl",{"_index":301,"title":{},"body":{"1015822":{}}}],["printcruntimeclass(thisruntimecl",{"_index":303,"title":{},"body":{"1015822":{}}}],["printf",{"_index":2376,"title":{},"body":{"1015833":{},"1015843":{}}}],["printf(\"",{"_index":1811,"title":{},"body":{"1015814":{},"1015818":{},"1015831":{},"1015833":{},"1015843":{}}}],["printf(\"%",{"_index":1662,"title":{},"body":{"1015814":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{}}}],["printf(\"%6.2f\\n\",f",{"_index":1668,"title":{},"body":{"1015843":{}}}],["printf(\"%d\\n\",",{"_index":1834,"title":{},"body":{"1015843":{}}}],["printf(\"%d\\n\",p",{"_index":2200,"title":{},"body":{"1015843":{}}}],["printf(\"%s\\n\",buf",{"_index":1686,"title":{},"body":{"1015843":{}}}],["printf(\"%x",{"_index":2096,"title":{},"body":{"1015818":{},"1015833":{},"1015843":{},"1015847":{}}}],["printf(\"**********g",{"_index":8484,"title":{},"body":{"1015833":{}}}],["printf(\"**********鍔犺",{"_index":8482,"title":{},"body":{"1015833":{}}}],["printf(\"**********鎵撳潗",{"_index":8480,"title":{},"body":{"1015833":{}}}],["printf(\"**********鏀诲嚮",{"_index":8479,"title":{},"body":{"1015833":{}}}],["printf(\"0",{"_index":9426,"title":{},"body":{"1015831":{}}}],["printf(\"012",{"_index":4459,"title":{},"body":{"2949166":{}}}],["printf(\"123",{"_index":4456,"title":{},"body":{"2949166":{}}}],["printf(\"456",{"_index":4457,"title":{},"body":{"2949166":{}}}],["printf(\"789",{"_index":4458,"title":{},"body":{"2949166":{}}}],["printf(\"===================================\\n\\",{"_index":10144,"title":{},"body":{"1015818":{}}}],["printf(\"================mac================\\",{"_index":10303,"title":{},"body":{"1015818":{}}}],["printf(\"================tcp================\\",{"_index":10380,"title":{},"body":{"1015818":{}}}],["printf(\"\\",{"_index":10256,"title":{},"body":{"1015818":{}}}],["printf(\"\\n================ip================\\",{"_index":10311,"title":{},"body":{"1015818":{}}}],["printf(\"\\n================ip================\\n\\",{"_index":10359,"title":{},"body":{"1015818":{}}}],["printf(\"\\ndata:\\",{"_index":10254,"title":{},"body":{"1015818":{}}}],["printf(\"accp",{"_index":10084,"title":{},"body":{"1015818":{}}}],["printf(\"addr",{"_index":6328,"title":{},"body":{"1015828":{}}}],["printf(\"al",{"_index":10336,"title":{},"body":{"1015818":{}}}],["printf(\"arp\\",{"_index":10361,"title":{},"body":{"1015818":{}}}],["printf(\"attachproç",{"_index":4762,"title":{},"body":{"3440657":{}}}],["printf(\"b",{"_index":1812,"title":{},"body":{"1015843":{}}}],["printf(\"c",{"_index":1813,"title":{},"body":{"1015843":{}}}],["printf(\"coun",{"_index":7494,"title":{},"body":{"1015833":{}}}],["printf(\"createfil",{"_index":8238,"title":{},"body":{"1015833":{}}}],["printf(\"createfilemap",{"_index":8243,"title":{},"body":{"1015833":{}}}],["printf(\"createmutex",{"_index":7560,"title":{},"body":{"1015833":{}}}],["printf(\"createproç",{"_index":4639,"title":{},"body":{"1015833":{},"3440657":{}}}],["printf(\"def",{"_index":1814,"title":{},"body":{"1015843":{}}}],["printf(\"dl",{"_index":8438,"title":{},"body":{"1015833":{}}}],["printf(\"dwtest1",{"_index":8249,"title":{},"body":{"1015833":{}}}],["printf(\"err",{"_index":4780,"title":{},"body":{"1015847":{},"3440657":{}}}],["printf(\"esp",{"_index":9353,"title":{},"body":{"1015831":{}}}],["printf(\"ex",{"_index":7463,"title":{},"body":{"1015833":{}}}],["printf(\"excep",{"_index":4475,"title":{},"body":{"2949166":{},"3440657":{}}}],["printf(\"f",{"_index":11479,"title":{},"body":{"1015814":{}}}],["printf(\"finally1",{"_index":4474,"title":{},"body":{"2949166":{}}}],["printf(\"finally2",{"_index":4473,"title":{},"body":{"2949166":{}}}],["printf(\"fu",{"_index":8402,"title":{},"body":{"1015833":{}}}],["printf(\"funç",{"_index":3420,"title":{},"body":{"1015840":{}}}],["printf(\"getlogicaldr",{"_index":7996,"title":{},"body":{"1015833":{}}}],["printf(\"glop",{"_index":6775,"title":{},"body":{"2949228":{}}}],["printf(\"headerl",{"_index":10321,"title":{},"body":{"1015818":{}}}],["printf(\"heap",{"_index":6777,"title":{},"body":{"2949228":{}}}],["printf(\"hel",{"_index":1660,"title":{},"body":{"1015843":{}}}],["printf(\"inpu",{"_index":9347,"title":{},"body":{"1015818":{},"1015831":{}}}],["printf(\"int3鏂偣鍦板潃",{"_index":4837,"title":{},"body":{"3440657":{}}}],["printf(\"ip",{"_index":10142,"title":{},"body":{"1015818":{}}}],["printf(\"ipv4\\",{"_index":10310,"title":{},"body":{"1015818":{}}}],["printf(\"l",{"_index":3344,"title":{},"body":{"1015840":{}}}],["printf(\"lpaddr",{"_index":6757,"title":{},"body":{"2949228":{}}}],["printf(\"mapviewoffil",{"_index":8508,"title":{},"body":{"1015833":{}}}],["printf(\"n",{"_index":10135,"title":{},"body":{"1015818":{}}}],["printf(\"of",{"_index":10392,"title":{},"body":{"1015818":{}}}],["printf(\"openfilemap",{"_index":8495,"title":{},"body":{"1015833":{}}}],["printf(\"pcap_findalldev",{"_index":10145,"title":{},"body":{"1015818":{}}}],["printf(\"pcap_op",{"_index":10212,"title":{},"body":{"1015818":{}}}],["printf(\"person:w",{"_index":3525,"title":{},"body":{"1015840":{}}}],["printf(\"protocol",{"_index":10338,"title":{},"body":{"1015818":{}}}],["printf(\"proç",{"_index":4427,"title":{},"body":{"1015833":{},"2949166":{},"2949228":{}}}],["printf(\"recv",{"_index":9817,"title":{},"body":{"1015818":{}}}],["printf(\"rsa_public_encryp",{"_index":10533,"title":{},"body":{"1015818":{}}}],["printf(\"ru",{"_index":4377,"title":{},"body":{"2949166":{}}}],["printf(\"sel",{"_index":7492,"title":{},"body":{"1015833":{}}}],["printf(\"sp",{"_index":10415,"title":{},"body":{"1015818":{}}}],["printf(\"src",{"_index":10246,"title":{},"body":{"1015818":{}}}],["printf(\"st",{"_index":6751,"title":{},"body":{"2949228":{}}}],["printf(\"staç",{"_index":6776,"title":{},"body":{"2949228":{}}}],["printf(\"t",{"_index":10230,"title":{},"body":{"1015818":{}}}],["printf(\"t1",{"_index":1881,"title":{},"body":{"1015843":{}}}],["printf(\"t2",{"_index":1883,"title":{},"body":{"1015843":{}}}],["printf(\"t3",{"_index":1885,"title":{},"body":{"1015843":{}}}],["printf(\"t4",{"_index":1887,"title":{},"body":{"1015843":{}}}],["printf(\"thr",{"_index":7518,"title":{},"body":{"1015833":{}}}],["printf(\"threadprocp",{"_index":7580,"title":{},"body":{"1015833":{}}}],["printf(\"threadproc鍑芥暟鎵ц...\\",{"_index":10563,"title":{},"body":{"2424889":{}}}],["printf(\"threadproç",{"_index":7578,"title":{},"body":{"1015833":{}}}],["printf(\"typ",{"_index":10307,"title":{},"body":{"1015818":{}}}],["printf(\"v",{"_index":10319,"title":{},"body":{"1015818":{}}}],["printf(\"valu",{"_index":6330,"title":{},"body":{"1015828":{}}}],["printf(\"virtualalloç",{"_index":6752,"title":{},"body":{"2949228":{}}}],["printf(\"waitfordebugev",{"_index":4647,"title":{},"body":{"3440657":{}}}],["printf(\"why?\\",{"_index":1939,"title":{},"body":{"1015843":{}}}],["printf(\"妯″潡鐩綍锛�%",{"_index":7376,"title":{},"body":{"1015833":{}}}],["printf(\"榛樿鎴愮珛\\",{"_index":1890,"title":{},"body":{"1015843":{}}}],["printf(\"涓嶆垚绔媆",{"_index":1893,"title":{},"body":{"1015843":{}}}],["printf(\"涓嶆槸0灏辨垚绔媆",{"_index":1891,"title":{},"body":{"1015843":{}}}],["printf(\"涓庢湇鍔″櫒杩炴帴澶辫触!\\",{"_index":9879,"title":{},"body":{"1015818":{}}}],["printf(\"涓庢湇鍔″櫒杩炴帴鎴愬姛!\\",{"_index":9880,"title":{},"body":{"1015818":{}}}],["printf(\"濂楁帴瀛楅棷鍒涘缓澶辫触!\\",{"_index":9846,"title":{},"body":{"1015818":{}}}],["printf(\"濂楁帴瀛楅棷鍒涘缓鎴愬姛!\\",{"_index":9847,"title":{},"body":{"1015818":{}}}],["printf(\"璇ョ▼搴忓凡缁忓紑鍚簡锛岃鍕垮啀娆″紑鍚紒",{"_index":7559,"title":{},"body":{"1015833":{}}}],["printf(\"璇ラ┍鍔ㄥ櫒鏄竴涓狢",{"_index":8029,"title":{},"body":{"1015833":{}}}],["printf(\"璇ラ┍鍔ㄥ櫒鏄竴涓猂am纾佺洏",{"_index":8032,"title":{},"body":{"1015833":{}}}],["printf(\"璇ラ┍鍔ㄥ櫒鏄竴涓繙绋嬶紙缃戠粶锛夐┍鍔ㄥ櫒",{"_index":8027,"title":{},"body":{"1015833":{}}}],["printf(\"纭欢鏂偣",{"_index":4950,"title":{},"body":{"3440657":{}}}],["printf(\"纾佺洏涓嶈兘浠庨┍鍔ㄥ櫒涓彇鍑",{"_index":8025,"title":{},"body":{"1015833":{}}}],["printf(\"纾佺洏鍙互浠庨┍鍔ㄥ櫒涓彇鍑",{"_index":8023,"title":{},"body":{"1015833":{}}}],["printf(\"绗竴涓枃浠跺悕",{"_index":8212,"title":{},"body":{"1015833":{}}}],["printf(\"缁堟杩涚▼澶辫触锛�%",{"_index":7357,"title":{},"body":{"1015833":{}}}],["printf(\"缁戝畾澶辫触!\\",{"_index":9849,"title":{},"body":{"1015818":{}}}],["printf(\"缁戝畾鎴愬姛!\\",{"_index":9850,"title":{},"body":{"1015818":{}}}],["printf(\"鍐呭瓨鏂偣",{"_index":4904,"title":{},"body":{"3440657":{}}}],["printf(\"鍒涘缓杩涚▼璋冭瘯浜嬩欢\\",{"_index":4655,"title":{},"body":{"3440657":{}}}],["printf(\"鍒涘缓绾跨▼璋冭瘯浜嬩欢\\",{"_index":4653,"title":{},"body":{"3440657":{}}}],["printf(\"鍔犺浇dll璋冭瘯浜嬩欢\\",{"_index":4661,"title":{},"body":{"3440657":{}}}],["printf(\"鍗曟寮傚父",{"_index":4955,"title":{},"body":{"3440657":{}}}],["printf(\"鍗歌浇dll璋冭瘯浜嬩欢\\",{"_index":4663,"title":{},"body":{"3440657":{}}}],["printf(\"鍙ユ焺锛�%x\\",{"_index":8695,"title":{},"body":{"1933378":{}}}],["printf(\"鍙戠敓寮傚父璋冭瘯浜嬩欢",{"_index":4746,"title":{},"body":{"3440657":{}}}],["printf(\"鍙戠敓寮傚父璋冭瘯浜嬩欢\\",{"_index":4651,"title":{},"body":{"3440657":{}}}],["printf(\"鏂囦欢鍚",{"_index":8219,"title":{},"body":{"1015833":{}}}],["printf(\"鏃犳硶纭畾椹卞姩鍣ㄧ殑绫诲瀷",{"_index":8018,"title":{},"body":{"1015833":{}}}],["printf(\"鏈嶅姟绔瓑寰呰繛鎺ュけ璐�!\\",{"_index":9856,"title":{},"body":{"1015818":{}}}],["printf(\"鏈嶅姟绔瓑寰呰繛鎺ユ垚鍔�!\\",{"_index":9857,"title":{},"body":{"1015818":{}}}],["printf(\"鏍硅矾寰勬槸鏃犳晥鐨勶紝渚嬪",{"_index":8020,"title":{},"body":{"1015833":{}}}],["printf(\"鐩戝惉澶辫触!\\",{"_index":9852,"title":{},"body":{"1015818":{}}}],["printf(\"鐩戝惉鎴愬姛!\\",{"_index":9853,"title":{},"body":{"1015818":{}}}],["printf(\"閫�鍑虹嚎绋嬭皟璇曚簨浠禱",{"_index":4657,"title":{},"body":{"3440657":{}}}],["printf(\"閫�鍑鸿繘绋嬭皟璇曚簨浠禱",{"_index":4659,"title":{},"body":{"3440657":{}}}],["printf(1",{"_index":1785,"title":{},"body":{"1015843":{}}}],["printf(123",{"_index":4449,"title":{},"body":{"2949166":{}}}],["printf(2",{"_index":1786,"title":{},"body":{"1015843":{}}}],["printf(3",{"_index":1787,"title":{},"body":{"1015843":{}}}],["printf(456",{"_index":4450,"title":{},"body":{"2949166":{}}}],["printf(789",{"_index":4451,"title":{},"body":{"2949166":{}}}],["printperson(p",{"_index":3556,"title":{},"body":{"1015840":{}}}],["prior",{"_index":11578,"title":{},"body":{"1015814":{}}}],["priority:3",{"_index":6927,"title":{},"body":{"2949228":{}}}],["priority_qu",{"_index":11749,"title":{},"body":{"1015814":{}}}],["priority_queue<",{"_index":11585,"title":{},"body":{"1015814":{}}}],["priorityp",{"_index":10887,"title":{},"body":{"2424869":{}}}],["priv",{"_index":292,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015831":{},"1015840":{},"2949228":{}}}],["privatememory：表示当前是否是private类型内存，值为1，则说明是，为0，则说明是mapped类型",{"_index":6734,"title":{},"body":{"2949228":{}}}],["private、public可以修饰函数或者变量",{"_index":3427,"title":{},"body":{"1015840":{}}}],["private（私有）、public（公有）的使用总结",{"_index":3423,"title":{},"body":{"1015840":{}}}],["prkapc",{"_index":10862,"title":{},"body":{"2424869":{}}}],["proc",{"_index":3864,"title":{},"body":{"1015833":{},"2424869":{},"3440655":{}}}],["proce",{"_index":4053,"title":{},"body":{"2424869":{},"3440655":{}}}],["process32first(hprocesssnapsh",{"_index":8517,"title":{},"body":{"1015833":{}}}],["process32next(hprocesssnapsh",{"_index":8521,"title":{},"body":{"1015833":{}}}],["process_inf",{"_index":4632,"title":{},"body":{"1015833":{},"3440657":{}}}],["processentry32",{"_index":8512,"title":{},"body":{"1015833":{}}}],["processhandl",{"_index":5839,"title":{},"body":{"1015847":{}}}],["processinf",{"_index":4633,"title":{},"body":{"3440657":{}}}],["proctect）标志，当设置该标志时，处理器会禁止超级用户程序（例如特权级0的程序）向用户级只读页面执行写操作",{"_index":9610,"title":{},"body":{"1015831":{}}}],["prog",{"_index":3220,"title":{},"body":{"1015823":{}}}],["progid是什么：progid等价于cl",{"_index":3096,"title":{},"body":{"1015823":{}}}],["progr",{"_index":127,"title":{},"body":{"1015822":{},"1015831":{},"1015846":{}}}],["projeç",{"_index":96,"title":{},"body":{"1015822":{}}}],["protection：表示当前对应内存块的属性，取值如下",{"_index":6725,"title":{},"body":{"2949228":{}}}],["proteç",{"_index":374,"title":{},"body":{"1015822":{},"1015833":{}}}],["protocol",{"_index":9730,"title":{},"body":{"1015818":{}}}],["protocol的首字母简写，翻译过来就是标识用户数据报协议。udp也是属于传输层的协议，从名字上来看，tcp是传输控制，而udp是用户数据报，其实也就说明了udp协议并不会去控制传输",{"_index":9934,"title":{},"body":{"1015818":{}}}],["protocol，中文为传输控制协议，在我们之前所说的五层还是七层模型中，tcp都属于传输层",{"_index":9708,"title":{},"body":{"1015818":{}}}],["prototypep",{"_index":6949,"title":{},"body":{"2949228":{}}}],["prov",{"_index":2714,"title":{},"body":{"1015823":{}}}],["prsa",{"_index":10522,"title":{},"body":{"1015818":{}}}],["psbtrac",{"_index":3858,"title":{},"body":{"3440655":{}}}],["pscod",{"_index":2980,"title":{},"body":{"1015823":{}}}],["pscreatesystemthread(&keyboardthreadhandle,thread_all_access,null,",{"_index":3945,"title":{},"body":{"3440655":{}}}],["pscreatesystemthread(&mousethreadhandle,thread_all_access,null,",{"_index":3948,"title":{},"body":{"3440655":{}}}],["pscreatesystemthread(&rawinputthreadhandle,thread_all_access,null,",{"_index":3942,"title":{},"body":{"3440655":{}}}],["pslookupprocessbyproç",{"_index":8727,"title":{},"body":{"1933378":{}}}],["pslookupprocessthreadbyç",{"_index":8726,"title":{},"body":{"1933378":{}}}],["pslookupthreadbythr",{"_index":8728,"title":{},"body":{"1933378":{}}}],["psmsreceivel",{"_index":3829,"title":{},"body":{"3440655":{}}}],["pstr",{"_index":7168,"title":{},"body":{"1015833":{}}}],["pstrappn",{"_index":3821,"title":{},"body":{"3440655":{}}}],["pszbuf",{"_index":8184,"title":{},"body":{"1015833":{}}}],["ps位",{"_index":9444,"title":{},"body":{"1015831":{}}}],["ps位（pag",{"_index":9445,"title":{},"body":{"1015831":{}}}],["pt",{"_index":4030,"title":{},"body":{"1015833":{},"3440655":{}}}],["pt[5",{"_index":733,"title":{},"body":{"1015822":{}}}],["pteaddr",{"_index":6889,"title":{},"body":{"2949228":{}}}],["pteframe:25",{"_index":6923,"title":{},"body":{"2949228":{}}}],["pte有这几个特征：pte可以没有物理页；一个pte只能对应一个物理页；多个pte可以对应同一个物理页",{"_index":9421,"title":{},"body":{"1015831":{}}}],["pte的结构很简单，第12",{"_index":9540,"title":{},"body":{"1015831":{}}}],["pte结构",{"_index":9539,"title":{},"body":{"1015831":{}}}],["pte，也就表示当前并没有物理页与线性地址进行关联",{"_index":7041,"title":{},"body":{"2949228":{}}}],["pthre",{"_index":547,"title":{},"body":{"1015822":{}}}],["pthreadinf",{"_index":3850,"title":{},"body":{"3440655":{}}}],["pti",{"_index":9495,"title":{},"body":{"1015831":{}}}],["pti(10)锛歅agı",{"_index":9485,"title":{},"body":{"1015831":{}}}],["ptil",{"_index":3868,"title":{},"body":{"3440655":{}}}],["ptisibl",{"_index":3851,"title":{},"body":{"3440655":{}}}],["ptl",{"_index":3804,"title":{},"body":{"3440655":{}}}],["ptlas",{"_index":3872,"title":{},"body":{"3440655":{}}}],["ptr",{"_index":1398,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015843":{},"1015846":{},"1015847":{},"1703937":{},"1933380":{}}}],["ptr32",{"_index":4296,"title":{},"body":{"1703937":{},"2424869":{},"2424889":{},"2949166":{},"2949228":{}}}],["ptr[buf",{"_index":9221,"title":{},"body":{"1015831":{}}}],["ptstr",{"_index":7171,"title":{},"body":{"1015833":{}}}],["pu",{"_index":3000,"title":{},"body":{"1015823":{},"1015847":{}}}],["publiç",{"_index":121,"title":{},"body":{"1015814":{},"1015818":{},"1015822":{},"1015823":{},"1015840":{}}}],["puch",{"_index":5518,"title":{},"body":{"1015847":{}}}],["puint",{"_index":3004,"title":{},"body":{"1015823":{}}}],["pul",{"_index":3001,"title":{},"body":{"1015823":{}}}],["pull",{"_index":3002,"title":{},"body":{"1015823":{}}}],["pulongu",{"_index":4071,"title":{},"body":{"1015847":{},"3440655":{}}}],["pun",{"_index":2968,"title":{},"body":{"1015823":{}}}],["punicode_str",{"_index":3820,"title":{},"body":{"1015847":{},"3440655":{}}}],["punk",{"_index":2652,"title":{},"body":{"1015823":{}}}],["push",{"_index":1364,"title":{},"body":{"1015817":{},"1015825":{},"1015831":{},"1015843":{},"1015846":{},"1015847":{},"1703937":{}}}],["push/pop",{"_index":11840,"title":{},"body":{"1015817":{}}}],["push_back(ç",{"_index":11349,"title":{},"body":{"1015814":{}}}],["push_front(ç",{"_index":11386,"title":{},"body":{"1015814":{}}}],["push_front锛氬皢鍏冪礌鎻掑叆鍒伴閮",{"_index":11397,"title":{},"body":{"1015814":{}}}],["pushf",{"_index":5913,"title":{},"body":{"1015847":{}}}],["pushf（push",{"_index":5428,"title":{},"body":{"1015825":{}}}],["pushretcmd[0",{"_index":5930,"title":{},"body":{"1015847":{}}}],["pushretcmd[5",{"_index":5934,"title":{},"body":{"1015847":{}}}],["pushretcmd[6",{"_index":5927,"title":{},"body":{"1015847":{}}}],["pushstack(&stackdwordp",{"_index":11136,"title":{},"body":{"1703937":{}}}],["push指令",{"_index":5338,"title":{},"body":{"1015825":{}}}],["push，将元素压入栈",{"_index":11536,"title":{},"body":{"1015814":{}}}],["push，将元素添加到队列的尾部",{"_index":11558,"title":{},"body":{"1015814":{}}}],["push，根据元素的优先级将元素置入队列",{"_index":11581,"title":{},"body":{"1015814":{}}}],["push：压入栈；pop：推出堆",{"_index":11841,"title":{},"body":{"1015817":{}}}],["pusm",{"_index":3823,"title":{},"body":{"3440655":{}}}],["pusmcur",{"_index":3824,"title":{},"body":{"3440655":{}}}],["putchar('",{"_index":1656,"title":{},"body":{"1015843":{}}}],["putchar(65",{"_index":1655,"title":{},"body":{"1015843":{}}}],["pval",{"_index":3131,"title":{},"body":{"1015823":{}}}],["pvar",{"_index":2987,"title":{},"body":{"1015823":{}}}],["pvarg",{"_index":3075,"title":{},"body":{"1015823":{}}}],["pvarsrc",{"_index":3078,"title":{},"body":{"1015823":{}}}],["pvectored_exception_handl",{"_index":4330,"title":{},"body":{"2949166":{}}}],["pveh_registr",{"_index":4340,"title":{},"body":{"2949166":{}}}],["pvo",{"_index":2988,"title":{},"body":{"1015823":{},"1015847":{},"2424869":{},"2949166":{},"3440655":{},"3440657":{}}}],["pvoid(ntap",{"_index":4351,"title":{},"body":{"2949166":{}}}],["pvoid)dwaccessaddr",{"_index":4906,"title":{},"body":{"3440657":{}}}],["pvrec",{"_index":3006,"title":{},"body":{"1015823":{}}}],["pwch",{"_index":5571,"title":{},"body":{"1015847":{}}}],["pwidg",{"_index":4121,"title":{},"body":{"1015820":{}}}],["pwstr",{"_index":7170,"title":{},"body":{"1015833":{}}}],["pwt/pcd",{"_index":9624,"title":{},"body":{"1015831":{}}}],["pwt与pcd位",{"_index":9619,"title":{},"body":{"1015831":{}}}],["pwt（pag",{"_index":9625,"title":{},"body":{"1015831":{}}}],["px",{"_index":2187,"title":{},"body":{"1015840":{},"1015843":{}}}],["px)[0]灏辫闂暣涓暟缁勫湴鍧�鍚庣殑鍦板潃鍐呯殑鏁版嵁",{"_index":2272,"title":{},"body":{"1015843":{}}}],["px1",{"_index":2240,"title":{},"body":{"1015843":{}}}],["px2",{"_index":2242,"title":{},"body":{"1015843":{}}}],["px3",{"_index":2244,"title":{},"body":{"1015843":{}}}],["px4",{"_index":2246,"title":{},"body":{"1015843":{}}}],["px[0",{"_index":2265,"title":{},"body":{"1015843":{}}}],["px就是我们随便定义的名字，本质上就是指针，那么也就有着指针的特性，无论是长度还是加减法",{"_index":2229,"title":{},"body":{"1015843":{}}}],["px鎸囬拡",{"_index":2278,"title":{},"body":{"1015843":{}}}],["p位",{"_index":9020,"title":{},"body":{"1015831":{}}}],["p位是段描述符高位4字节的第15位，它的值决定了段描述符是否是有效的",{"_index":9021,"title":{},"body":{"1015831":{}}}],["p位表示当前物理页的有效性，为1表示有效，为0则表示无效，由于物理页的属性是pde和pte属性进行与运算的来的所以需要pde和pte属性的p位均为1，才能表示物理页是有效的",{"_index":9439,"title":{},"body":{"1015831":{}}}],["p銆丏pl銆丼",{"_index":9202,"title":{},"body":{"1015831":{}}}],["q",{"_index":8890,"title":{},"body":{"1015814":{},"1015818":{},"1015850":{}}}],["q.emp",{"_index":11594,"title":{},"body":{"1015814":{}}}],["q.pop",{"_index":11597,"title":{},"body":{"1015814":{}}}],["q.push(10",{"_index":11590,"title":{},"body":{"1015814":{}}}],["q.push(20",{"_index":11591,"title":{},"body":{"1015814":{}}}],["q.push(30",{"_index":11592,"title":{},"body":{"1015814":{}}}],["q.siz",{"_index":11593,"title":{},"body":{"1015814":{}}}],["q.top",{"_index":11595,"title":{},"body":{"1015814":{}}}],["q1",{"_index":11564,"title":{},"body":{"1015814":{}}}],["q1.bac",{"_index":11571,"title":{},"body":{"1015814":{}}}],["q1.emp",{"_index":11577,"title":{},"body":{"1015814":{}}}],["q1.fron",{"_index":11569,"title":{},"body":{"1015814":{}}}],["q1.pop",{"_index":11574,"title":{},"body":{"1015814":{}}}],["q1.push(1",{"_index":11565,"title":{},"body":{"1015814":{}}}],["q1.push(2",{"_index":11566,"title":{},"body":{"1015814":{}}}],["q1.push(3",{"_index":11567,"title":{},"body":{"1015814":{}}}],["q1.siz",{"_index":11568,"title":{},"body":{"1015814":{}}}],["q1.swap(queue<",{"_index":11576,"title":{},"body":{"1015814":{}}}],["q2",{"_index":11588,"title":{},"body":{"1015814":{}}}],["qappliç",{"_index":4114,"title":{},"body":{"1015820":{}}}],["qobject::conneç",{"_index":4147,"title":{},"body":{"1015820":{}}}],["qobjeç",{"_index":4148,"title":{},"body":{"1015820":{}}}],["qpushbut",{"_index":4160,"title":{},"body":{"1015820":{}}}],["qpushbutton(pwidgi",{"_index":4162,"title":{},"body":{"1015820":{}}}],["qs_hotkey",{"_index":3906,"title":{},"body":{"3440655":{}}}],["qs_key",{"_index":3902,"title":{},"body":{"3440655":{}}}],["qs_mousemov",{"_index":3903,"title":{},"body":{"3440655":{}}}],["qs_mousep",{"_index":3904,"title":{},"body":{"3440655":{}}}],["qs_mouse|qs_key",{"_index":3893,"title":{},"body":{"3440655":{}}}],["qs_pain",{"_index":3899,"title":{},"body":{"3440655":{}}}],["qs_postmessage|qs_hotkey|qs_paint|qs_timer|qs_key",{"_index":3891,"title":{},"body":{"3440655":{}}}],["qs_postmessagı",{"_index":3905,"title":{},"body":{"3440655":{}}}],["qs_sendmessagı",{"_index":3890,"title":{},"body":{"3440655":{}}}],["qs_ti",{"_index":3898,"title":{},"body":{"3440655":{}}}],["qt::autoconneç",{"_index":4156,"title":{},"body":{"1015820":{}}}],["qt::connectiontyp",{"_index":4155,"title":{},"body":{"1015820":{}}}],["qtcreator，ide，要安装其需要去这个网址：https://login.qt.io/register注册账号，下载地址：https://download.qt.io/development_releases/qtcreator/3.6/3.6.0",{"_index":4097,"title":{},"body":{"1015820":{}}}],["qtopensource，qt的源代码，下载地址：https://download.qt.io/archive/qt/4.8/4.8.6/q",{"_index":4091,"title":{},"body":{"1015820":{}}}],["qt基础",{"_index":4078,"title":{"1015820":{}},"body":{"1015826":{},"1015827":{}}}],["qt应用的入口文件",{"_index":4189,"title":{},"body":{"1015820":{}}}],["qt开发环境的配置",{"_index":4083,"title":{},"body":{"1015820":{}}}],["qt是用c++实现的一套库，也就表示其就是一堆代码，它不是ide；qt与mfc一样，它们都是c++语言实现的库，在库里提供了很多接口，使得开发的时候可以更加方便；qt与mfc的实现原理不一样；qt可以跨平台，但效率较低",{"_index":4080,"title":{},"body":{"1015820":{}}}],["qt概述",{"_index":4079,"title":{},"body":{"1015820":{}}}],["qu",{"_index":3837,"title":{},"body":{"3440655":{}}}],["que",{"_index":3825,"title":{},"body":{"1015814":{},"3440655":{}}}],["queryinterface(&spdbç",{"_index":3267,"title":{},"body":{"1015823":{}}}],["queryinterface(r",{"_index":2699,"title":{},"body":{"1015823":{}}}],["queryinterface(ref",{"_index":2646,"title":{},"body":{"1015823":{}}}],["queryinterface(ç",{"_index":2824,"title":{},"body":{"1015823":{}}}],["queue<",{"_index":11563,"title":{},"body":{"1015814":{}}}],["queue容器",{"_index":11555,"title":{},"body":{"1015814":{}}}],["queue容器又称之为优先队列容器，该容器以某种排序规则（默认是less）管理队列中的元素；其有这几种操作方法",{"_index":11580,"title":{},"body":{"1015814":{}}}],["queue的缩写，是在首尾两端增删元素具有较佳性能的容器",{"_index":11379,"title":{},"body":{"1015814":{}}}],["quitp",{"_index":3836,"title":{},"body":{"3440655":{}}}],["quotap",{"_index":10977,"title":{},"body":{"1703937":{}}}],["quotausagı",{"_index":10976,"title":{},"body":{"1703937":{}}}],["qwidg",{"_index":4116,"title":{},"body":{"1015820":{}}}],["qwidget(p",{"_index":4217,"title":{},"body":{"1015820":{}}}],["q，它的二进制位就是密钥长度",{"_index":10434,"title":{},"body":{"1015818":{}}}],["r",{"_index":1499,"title":{},"body":{"1015825":{},"1015831":{},"1015833":{},"1015843":{}}}],["r+z",{"_index":1501,"title":{},"body":{"1015843":{}}}],["r/m",{"_index":12020,"title":{},"body":{"1015817":{}}}],["r/m16",{"_index":5268,"title":{},"body":{"1015825":{}}}],["r/m16,imm16",{"_index":5266,"title":{},"body":{"1015825":{}}}],["r/m16,r16",{"_index":5253,"title":{},"body":{"1015825":{}}}],["r/m32",{"_index":5269,"title":{},"body":{"1015825":{}}}],["r/m32,imm32",{"_index":5267,"title":{},"body":{"1015825":{}}}],["r/m32,r32",{"_index":5254,"title":{},"body":{"1015825":{}}}],["r/m8",{"_index":5265,"title":{},"body":{"1015825":{}}}],["r/m8,r8",{"_index":5252,"title":{},"body":{"1015825":{}}}],["r/w位",{"_index":9440,"title":{},"body":{"1015831":{}}}],["r/w位表示物理页的读写权限，为1表示可读可写，为0则表示只读。例如我们之前所学习的常量，它就是一个只读的内容，对应的物理页属性的r/w位值为0，我们可以通过windbg修改这个值来达到写入的目的",{"_index":9441,"title":{},"body":{"1015831":{}}}],["r16",{"_index":5258,"title":{},"body":{"1015825":{}}}],["r16,r/m16",{"_index":5256,"title":{},"body":{"1015825":{}}}],["r16/r32",{"_index":5342,"title":{},"body":{"1015825":{}}}],["r32",{"_index":5260,"title":{},"body":{"1015825":{}}}],["r32,r/m32",{"_index":5257,"title":{},"body":{"1015825":{}}}],["r8",{"_index":5241,"title":{},"body":{"1015825":{}}}],["r8,r/m",{"_index":5255,"title":{},"body":{"1015825":{}}}],["raiseexception函数之后的流程是这样的：rtlraiseexception→ntraiseexception→kiraiseexception，在最后执行到kiraiseexception函数时，会将exceptioncode的最高位清0，便于区分cpu/软件模拟异常",{"_index":4264,"title":{},"body":{"2949166":{}}}],["rang",{"_index":416,"title":{},"body":{"1015822":{},"1015833":{}}}],["rar",{"_index":112,"title":{},"body":{"1015822":{}}}],["rawinputthreadid,rawinputthreadmain,",{"_index":3943,"title":{},"body":{"3440655":{}}}],["rb",{"_index":11869,"title":{},"body":{"1015817":{}}}],["rc1.ex",{"_index":4101,"title":{},"body":{"1015820":{}}}],["rc1/qt",{"_index":4098,"title":{},"body":{"1015820":{}}}],["rclsi",{"_index":2707,"title":{},"body":{"1015823":{}}}],["rcr4",{"_index":5858,"title":{},"body":{"1015847":{}}}],["re",{"_index":2000,"title":{},"body":{"1015828":{},"1015833":{},"1015840":{},"1015843":{},"2949228":{}}}],["read_t",{"_index":10164,"title":{},"body":{"1015818":{}}}],["readabl",{"_index":6322,"title":{},"body":{"1015828":{}}}],["readf",{"_index":10022,"title":{},"body":{"1015818":{}}}],["readfds.fd_array[",{"_index":10080,"title":{},"body":{"1015818":{}}}],["readfds.fd_coun",{"_index":10078,"title":{},"body":{"1015818":{}}}],["readfil",{"_index":5690,"title":{},"body":{"1015833":{},"1015847":{}}}],["readfile(hfil",{"_index":8192,"title":{},"body":{"1015833":{}}}],["readinprogr",{"_index":6947,"title":{},"body":{"2949228":{}}}],["readprocessme",{"_index":2440,"title":{},"body":{"1015846":{}}}],["readprocessmemory(hdebugeeproç",{"_index":4817,"title":{},"body":{"3440657":{}}}],["readstatu",{"_index":6903,"title":{},"body":{"2949228":{}}}],["realheaderl",{"_index":10318,"title":{},"body":{"1015818":{}}}],["reas",{"_index":8384,"title":{},"body":{"1015833":{}}}],["reaç",{"_index":3886,"title":{},"body":{"3440655":{}}}],["rec",{"_index":63,"title":{},"body":{"1015822":{}}}],["receiv",{"_index":4152,"title":{},"body":{"1015820":{}}}],["rect(10,10,100,50",{"_index":801,"title":{},"body":{"1015822":{}}}],["rect(10,10,20,20",{"_index":781,"title":{},"body":{"1015822":{}}}],["rect(10,10,200,20",{"_index":792,"title":{},"body":{"1015822":{}}}],["rect.h",{"_index":678,"title":{},"body":{"1015822":{}}}],["rect.lef",{"_index":803,"title":{},"body":{"1015822":{}}}],["rect.ptinrect(poin",{"_index":822,"title":{},"body":{"1015822":{}}}],["rect.top",{"_index":802,"title":{},"body":{"1015822":{}}}],["rectangl",{"_index":714,"title":{},"body":{"1015822":{}}}],["rectangle(hdç",{"_index":3772,"title":{},"body":{"3440655":{}}}],["rectangle函数画直角矩形",{"_index":763,"title":{},"body":{"1015822":{}}}],["rectangle函数画直角矩形，其参数与ellipse函数是一样的",{"_index":764,"title":{},"body":{"1015822":{}}}],["rectdef",{"_index":64,"title":{},"body":{"1015822":{}}}],["recv",{"_index":9809,"title":{},"body":{"1015818":{}}}],["recv(asoç",{"_index":9816,"title":{},"body":{"1015818":{}}}],["recv(csoç",{"_index":9884,"title":{},"body":{"1015818":{}}}],["recv(readfds.fd_array[",{"_index":10088,"title":{},"body":{"1015818":{}}}],["recvbuf",{"_index":9944,"title":{},"body":{"1015818":{}}}],["recvbuf[10",{"_index":9942,"title":{},"body":{"1015818":{}}}],["recvfr",{"_index":9948,"title":{},"body":{"1015818":{}}}],["recvfrom(csoç",{"_index":9982,"title":{},"body":{"1015818":{}}}],["recvfrom(ssoç",{"_index":9943,"title":{},"body":{"1015818":{}}}],["red",{"_index":3752,"title":{},"body":{"3440655":{}}}],["redux启动",{"_index":5496,"title":{},"body":{"1015847":{}}}],["redux）程序来简化整个步骤",{"_index":5486,"title":{},"body":{"1015847":{}}}],["ref",{"_index":125,"title":{},"body":{"1015822":{},"1015823":{},"1015840":{}}}],["ref.x",{"_index":3489,"title":{},"body":{"1015840":{}}}],["refb",{"_index":3512,"title":{},"body":{"1015840":{}}}],["refb.",{"_index":3515,"title":{},"body":{"1015840":{}}}],["refb.x",{"_index":3514,"title":{},"body":{"1015840":{}}}],["referencecoun",{"_index":6911,"title":{},"body":{"2949228":{}}}],["referencesl",{"_index":3910,"title":{},"body":{"3440655":{}}}],["reg",{"_index":7753,"title":{},"body":{"1015833":{}}}],["reg/opç",{"_index":12019,"title":{},"body":{"1015817":{}}}],["reg_option_non_volatil",{"_index":2727,"title":{},"body":{"1015823":{}}}],["reg_sz",{"_index":2732,"title":{},"body":{"1015823":{}}}],["regclosekey(hkeycl",{"_index":2737,"title":{},"body":{"1015823":{}}}],["regclosekey(hkeyinproc32",{"_index":2742,"title":{},"body":{"1015823":{}}}],["regcreatekeyex(hkey_classes_r",{"_index":2724,"title":{},"body":{"1015823":{}}}],["regcreatekeyex(hkeycl",{"_index":2738,"title":{},"body":{"1015823":{}}}],["regdeletekey(hkey_classes_r",{"_index":2753,"title":{},"body":{"1015823":{}}}],["registerclass(&wndcl",{"_index":7749,"title":{},"body":{"1015833":{}}}],["register）的段选择子到gdt表中找到tss段描述符，得到了tss的基址、以及段大小，这样就能定位到tss这块内存",{"_index":9295,"title":{},"body":{"1015831":{}}}],["registrypath",{"_index":5474,"title":{},"body":{"1015847":{}}}],["regsetvalueex(hkeycl",{"_index":2731,"title":{},"body":{"1015823":{}}}],["regsetvalueex(hkeyinproc32",{"_index":2748,"title":{},"body":{"1015823":{}}}],["regsvr32",{"_index":2768,"title":{},"body":{"1015823":{}}}],["rel",{"_index":2603,"title":{},"body":{"1015820":{},"1015823":{},"1015828":{},"3440657":{}}}],["releasecaptur",{"_index":989,"title":{},"body":{"1015822":{}}}],["releasedc(hw",{"_index":7691,"title":{},"body":{"1015833":{}}}],["releasemutex(hmutex",{"_index":7618,"title":{},"body":{"1015833":{}}}],["releasemutex(ç",{"_index":7545,"title":{},"body":{"1015833":{}}}],["releasesemaph",{"_index":10704,"title":{},"body":{"2424889":{}}}],["release方法实现如下所示",{"_index":2618,"title":{},"body":{"1015823":{}}}],["reloç",{"_index":6048,"title":{},"body":{"1015828":{}}}],["remotcreatefile(dw",{"_index":8632,"title":{},"body":{"1015833":{}}}],["remotcreatefile(getpid(\"杩涚▼鍚",{"_index":8683,"title":{},"body":{"1015833":{}}}],["removalreq",{"_index":6953,"title":{},"body":{"2949228":{}}}],["remove(v.begi",{"_index":11683,"title":{},"body":{"1015814":{}}}],["remove_if(v.begi",{"_index":11686,"title":{},"body":{"1015814":{}}}],["remove_if锛屾寜鏉′欢鍒犻櫎鍏冪礌",{"_index":11684,"title":{},"body":{"1015814":{}}}],["remove_if，条件移除",{"_index":11655,"title":{},"body":{"1015814":{}}}],["removedirect",{"_index":8076,"title":{},"body":{"1015833":{}}}],["removedirectory(text(\"c:\\\\",{"_index":8079,"title":{},"body":{"1015833":{}}}],["removefunc(vector<",{"_index":11682,"title":{},"body":{"1015814":{}}}],["removeiffunc(vector<",{"_index":11685,"title":{},"body":{"1015814":{}}}],["removevectoredexceptionhandl",{"_index":4343,"title":{},"body":{"2949166":{}}}],["remove锛屽垹闄ゆ寚瀹氬唴瀹圭殑鍏冪礌锛岄渶瑕佹敞鎰忕殑鏄紝鍗充娇鍒犻櫎浜嗕絾鏄敱浜庡厓绱犲ぇ灏忔病鍙橈紝鎵�浠ュ氨浼氬悜鍓嶇щ锛屼緥濡傝繖閲屾槸1,1,4,5锛屽綋浣犲垹闄や簡1锛岃繖涓厓绱犵殑鍐呭灏变細鍙樻垚4,5,4,5",{"_index":11681,"title":{},"body":{"1015814":{}}}],["remove锛氬垹闄や笌鎸囧畾鍊肩浉绛夌殑鍏冪礌",{"_index":11400,"title":{},"body":{"1015814":{}}}],["remove，删除指定元素",{"_index":11654,"title":{},"body":{"1015814":{}}}],["ren",{"_index":8829,"title":{},"body":{"1015850":{}}}],["rep",{"_index":1396,"title":{},"body":{"1015825":{},"1015843":{}}}],["rep/repz(硬编码：f3)；重复指令，在这里z表示根据eflag标志寄存器zf位为1的时候执行",{"_index":11796,"title":{},"body":{"1015817":{}}}],["replace(v.begi",{"_index":11673,"title":{},"body":{"1015814":{}}}],["replace_if(v.begi",{"_index":11678,"title":{},"body":{"1015814":{}}}],["replace_if锛屽厓绱犳潯浠舵浛鎹紝涓嶅彲浠ヨ2鏁撮櫎鐨勫氨鏇挎崲涓�10",{"_index":11676,"title":{},"body":{"1015814":{}}}],["replace_if，条件替换",{"_index":11653,"title":{},"body":{"1015814":{}}}],["replacefunc(vector<",{"_index":11672,"title":{},"body":{"1015814":{}}}],["replaceiffunc(vector<",{"_index":11677,"title":{},"body":{"1015814":{}}}],["replace锛屽厓绱犳浛鎹紝灏�1鏇挎崲鎴�10",{"_index":11671,"title":{},"body":{"1015814":{}}}],["replace，指定元素替换成新值",{"_index":11652,"title":{},"body":{"1015814":{}}}],["repne/repnz(硬编码：f2)：rep*就是我们之前汇编所学过的重复指令，在这里的ne或者nz表示根据eflag标志寄存器zf位为0的时候执行",{"_index":11795,"title":{},"body":{"1015817":{}}}],["rep指令",{"_index":5311,"title":{},"body":{"1015825":{}}}],["requ",{"_index":128,"title":{},"body":{"1015822":{},"1015831":{},"1015847":{}}}],["request）后面加上数字来表示不同的请求，例如在windows中时钟中断的irq编号为0，也就是irq0",{"_index":9574,"title":{},"body":{"1015831":{}}}],["res",{"_index":3896,"title":{},"body":{"1015828":{},"1015833":{},"1015850":{},"3440655":{}}}],["resdstp",{"_index":10388,"title":{},"body":{"1015818":{}}}],["reserv",{"_index":6070,"title":{},"body":{"1015828":{},"1015833":{}}}],["resident",{"_index":2761,"title":{},"body":{"1015823":{}}}],["resl",{"_index":10327,"title":{},"body":{"1015818":{}}}],["ressrcp",{"_index":10384,"title":{},"body":{"1015818":{}}}],["resstr",{"_index":10299,"title":{},"body":{"1015818":{}}}],["resstr+",{"_index":10301,"title":{},"body":{"1015818":{}}}],["resulta(0x8",{"_index":6380,"title":{},"body":{"1015828":{}}}],["resulta涔樹互鍐呭瓨瀵归綈鐨勫",{"_index":6425,"title":{},"body":{"1015828":{}}}],["resultb(0x80",{"_index":6382,"title":{},"body":{"1015828":{}}}],["resultlength",{"_index":4005,"title":{},"body":{"3440655":{}}}],["resultp",{"_index":6424,"title":{},"body":{"1015828":{}}}],["resultpoin",{"_index":4004,"title":{},"body":{"3440655":{}}}],["resumethr",{"_index":7425,"title":{},"body":{"1015833":{}}}],["resumethread(hthr",{"_index":7428,"title":{},"body":{"1015833":{}}}],["resumethread函数",{"_index":7423,"title":{},"body":{"1015833":{}}}],["resumethread函数用于恢复被暂停（挂起）的线程，其语法格式也很简单，只需要传入一个线程句柄即可",{"_index":7424,"title":{},"body":{"1015833":{}}}],["ret",{"_index":967,"title":{},"body":{"1015817":{},"1015818":{},"1015822":{},"1015825":{},"1015843":{},"1015847":{},"1703937":{}}}],["retf",{"_index":9103,"title":{},"body":{"1015817":{},"1015831":{}}}],["retstatu",{"_index":5773,"title":{},"body":{"1015847":{}}}],["retur",{"_index":150,"title":{},"body":{"1015814":{},"1015817":{},"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015828":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1703937":{},"1933378":{},"2424889":{},"2949166":{},"3440655":{},"3440657":{}}}],["return的汇编代码则很简单：通过ebp寻址获得传递的参数，ebp+8则是1，ebp+0xc则是2，最终结果在eax中",{"_index":1445,"title":{},"body":{"1015843":{}}}],["ret指令",{"_index":5360,"title":{},"body":{"1015825":{}}}],["rev3.7z",{"_index":4090,"title":{},"body":{"1015820":{}}}],["reverse锛氶鍊掗摼琛",{"_index":11403,"title":{},"body":{"1015814":{}}}],["rgb(0,0,0",{"_index":823,"title":{},"body":{"1015822":{}}}],["rgb(0xff,00,0",{"_index":7678,"title":{},"body":{"1015833":{}}}],["rgb(128,128,128",{"_index":805,"title":{},"body":{"1015822":{}}}],["rgb(255,0,0",{"_index":834,"title":{},"body":{"1015822":{}}}],["rgb(255,0,25",{"_index":797,"title":{},"body":{"1015822":{}}}],["rgb(255,255,0",{"_index":796,"title":{},"body":{"1015822":{}}}],["rgb(255,255,25",{"_index":804,"title":{},"body":{"1015822":{}}}],["rgb(window",{"_index":3766,"title":{},"body":{"3440655":{}}}],["rgb琛ㄧず绾㈢豢钃濓紝绾㈢豢钃濈殑缁勫悎灏卞彲浠ョ粍鎴愭柊鐨勪竴绉嶉鑹层",{"_index":7679,"title":{},"body":{"1015833":{}}}],["ri",{"_index":2647,"title":{},"body":{"1015823":{}}}],["rightchild：右子树地址",{"_index":6704,"title":{},"body":{"2949228":{}}}],["righttablerect(0",{"_index":894,"title":{},"body":{"1015822":{}}}],["righttablerect.bot",{"_index":917,"title":{},"body":{"1015822":{}}}],["righttablerect.top",{"_index":916,"title":{},"body":{"1015822":{}}}],["rip_inf",{"_index":4697,"title":{},"body":{"3440657":{}}}],["ripinf",{"_index":4698,"title":{},"body":{"3440657":{}}}],["rmaplisth",{"_index":6921,"title":{},"body":{"2949228":{}}}],["ro",{"_index":8012,"title":{},"body":{"1015833":{}}}],["rom",{"_index":6955,"title":{},"body":{"2949228":{}}}],["rom椹卞姩鍣",{"_index":8030,"title":{},"body":{"1015833":{}}}],["rou",{"_index":429,"title":{},"body":{"1015822":{}}}],["routineindex",{"_index":4069,"title":{},"body":{"3440655":{}}}],["routineindex参数是一个索引，它与回到3环的落脚点有关，在当前代码里它是一个宏，点进去查看就会发现实际上是一个数字，还有其他许多别的索引值",{"_index":4073,"title":{},"body":{"3440655":{}}}],["rpdes",{"_index":3813,"title":{},"body":{"3440655":{}}}],["rpl",{"_index":9082,"title":{},"body":{"1015831":{}}}],["rpl（requ",{"_index":9083,"title":{},"body":{"1015831":{}}}],["rsa",{"_index":10461,"title":{},"body":{"1015818":{}}}],["rsa_free(pr",{"_index":10538,"title":{},"body":{"1015818":{}}}],["rsa_free(r",{"_index":10473,"title":{},"body":{"1015818":{}}}],["rsa_new",{"_index":10523,"title":{},"body":{"1015818":{}}}],["rsa_new(v",{"_index":10471,"title":{},"body":{"1015818":{}}}],["rsa_no_p",{"_index":10532,"title":{},"body":{"1015818":{}}}],["rsa_pkcs1_padding銆丷sa_pkcs1_oaep_padding銆丷sa_sslv23_padding銆丷sa_no_p",{"_index":10502,"title":{},"body":{"1015818":{}}}],["rsa_private_decryp",{"_index":10504,"title":{},"body":{"1015818":{}}}],["rsa_public_encryp",{"_index":10494,"title":{},"body":{"1015818":{}}}],["rsa_public_encrypt(datal",{"_index":10531,"title":{},"body":{"1015818":{}}}],["rsa加密密钥的获取",{"_index":10430,"title":{},"body":{"1015818":{}}}],["rsa加密密钥获取步骤如下所示",{"_index":10431,"title":{},"body":{"1015818":{}}}],["rsa加密的基本原理",{"_index":10420,"title":{},"body":{"1015818":{}}}],["rsa加密解密算法",{"_index":10446,"title":{},"body":{"1015818":{}}}],["rsa就属于非对称加密，也就是我们本章节所学的",{"_index":10426,"title":{},"body":{"1015818":{}}}],["rsa库之bignum及ap",{"_index":10474,"title":{},"body":{"1015818":{}}}],["rsa库之rsa结构体及ap",{"_index":10459,"title":{},"body":{"1015818":{}}}],["rsa库之加密解密函数",{"_index":10492,"title":{},"body":{"1015818":{}}}],["rsa库的使用",{"_index":10455,"title":{},"body":{"1015818":{}}}],["rsa结构体如下",{"_index":10460,"title":{},"body":{"1015818":{}}}],["rsa缁撴瀯鎴愬憳璧嬪",{"_index":10529,"title":{},"body":{"1015818":{}}}],["rsiz",{"_index":1302,"title":{},"body":{"1015822":{}}}],["rt_v3",{"_index":4089,"title":{},"body":{"1015820":{}}}],["rti",{"_index":206,"title":{},"body":{"1015822":{}}}],["rtlansistringtounicodestr",{"_index":5587,"title":{},"body":{"1015847":{}}}],["rtlcomparestr",{"_index":5584,"title":{},"body":{"1015847":{}}}],["rtlcompareunicoodestr",{"_index":5585,"title":{},"body":{"1015847":{}}}],["rtlcopystr",{"_index":5581,"title":{},"body":{"1015847":{}}}],["rtlcopyunicodestr",{"_index":5582,"title":{},"body":{"1015847":{}}}],["rtldispatchexception函数再往下走，我们看见它调用了rtlisvalidhandler函数，用于验证异常处理函数是否有效，接着调用rtlpexecutehandlerforexception函数，用于调用异常处理函数，因此我们的异常处理函数并不可以完全自定义，而是需要遵循其所能执行的格式",{"_index":4387,"title":{},"body":{"2949166":{}}}],["rtldispatchexception是个库函数，在内核异常分发处理时用的也是这个函数，虽然在用户异常也是如此，但实际过程是不一样的",{"_index":4310,"title":{},"body":{"2949166":{}}}],["rtlfillme",{"_index":5550,"title":{},"body":{"1015847":{}}}],["rtlinitansistr",{"_index":5578,"title":{},"body":{"1015847":{}}}],["rtlinitunicodestr",{"_index":5579,"title":{},"body":{"1015847":{}}}],["rtlinitunicodestring(&dev",{"_index":5642,"title":{},"body":{"1015847":{}}}],["rtlinitunicodestring(&symboliclink",{"_index":5676,"title":{},"body":{"1015847":{}}}],["rtlmoveme",{"_index":5552,"title":{},"body":{"1015847":{}}}],["rtlmovememory((puchar)cmdaddr",{"_index":5940,"title":{},"body":{"1015847":{}}}],["rtlunicodestringtoansistr",{"_index":5588,"title":{},"body":{"1015847":{}}}],["rtti瀹",{"_index":335,"title":{},"body":{"1015822":{}}}],["ru",{"_index":183,"title":{},"body":{"1015822":{},"1015833":{}}}],["rundownr",{"_index":10839,"title":{},"body":{"2424869":{}}}],["runtime_cl",{"_index":201,"title":{},"body":{"1015822":{}}}],["runtime_class(base_class_",{"_index":279,"title":{},"body":{"1015822":{}}}],["runtime_class(class_",{"_index":281,"title":{},"body":{"1015822":{}}}],["runtime_class这个宏就是返回处理传入的类名，返回一个cruntimeclass的指针，其本质我们在vc6中鼠标点击按f12即可看见",{"_index":229,"title":{},"body":{"1015822":{}}}],["rva",{"_index":6602,"title":{},"body":{"1015828":{}}}],["rva与foa的转换",{"_index":6326,"title":{},"body":{"1015828":{}}}],["rva地址减去节.virtualaddress等于差值，foa地址就是根据节.pointertorawdata加上差值",{"_index":6338,"title":{},"body":{"1015828":{}}}],["rva地址由内存地址减去imagebase地址（pe文件在内存中的开始位置是由扩展pe头中的imagebase决定",{"_index":6333,"title":{},"body":{"1015828":{}}}],["rva锛屽鍑哄嚱鏁板湴鍧�琛",{"_index":6477,"title":{},"body":{"1015828":{}}}],["rva锛屾寚鍚慖mage_thunk_data缁撴瀯鏁扮粍",{"_index":6542,"title":{},"body":{"1015828":{}}}],["rva锛岃〃绀轰緷璧栨ā鍧楀悕瀛楃殑鍦板潃锛岃繖鏄竴涓插瓧绗︿覆",{"_index":6545,"title":{},"body":{"1015828":{}}}],["s",{"_index":6057,"title":{},"body":{"1015828":{},"1015831":{}}}],["s(1",{"_index":3351,"title":{},"body":{"1015840":{}}}],["s.a",{"_index":3296,"title":{},"body":{"1015840":{}}}],["s.b",{"_index":3297,"title":{},"body":{"1015840":{}}}],["s.c",{"_index":3298,"title":{},"body":{"1015840":{}}}],["s.d",{"_index":3299,"title":{},"body":{"1015840":{}}}],["s.en",{"_index":11780,"title":{},"body":{"1015814":{}}}],["s.init(1,2",{"_index":3330,"title":{},"body":{"1015840":{}}}],["s.insert(member(\"name1",{"_index":11777,"title":{},"body":{"1015814":{}}}],["s.insert(member(\"name2",{"_index":11778,"title":{},"body":{"1015814":{}}}],["s.plu",{"_index":3310,"title":{},"body":{"1015840":{}}}],["s.prin",{"_index":3334,"title":{},"body":{"1015840":{}}}],["s1",{"_index":2152,"title":{},"body":{"1015814":{},"1015843":{}}}],["s1.emp",{"_index":11553,"title":{},"body":{"1015814":{}}}],["s1.en",{"_index":11460,"title":{},"body":{"1015814":{}}}],["s1.pop",{"_index":11548,"title":{},"body":{"1015814":{}}}],["s1.push(1",{"_index":11543,"title":{},"body":{"1015814":{}}}],["s1.push(2",{"_index":11545,"title":{},"body":{"1015814":{}}}],["s1.push(3",{"_index":11546,"title":{},"body":{"1015814":{}}}],["s1.siz",{"_index":11547,"title":{},"body":{"1015814":{}}}],["s1.swap(stack<",{"_index":11554,"title":{},"body":{"1015814":{}}}],["s1.top",{"_index":11550,"title":{},"body":{"1015814":{}}}],["s2",{"_index":2153,"title":{},"body":{"1015814":{},"1015843":{}}}],["s3",{"_index":11436,"title":{},"body":{"1015814":{}}}],["s4(naray",{"_index":11439,"title":{},"body":{"1015814":{}}}],["s4.beg",{"_index":11470,"title":{},"body":{"1015814":{}}}],["s4.count(1",{"_index":11485,"title":{},"body":{"1015814":{}}}],["s4.en",{"_index":11442,"title":{},"body":{"1015814":{}}}],["s4.erase(",{"_index":11472,"title":{},"body":{"1015814":{}}}],["s4.erase(5",{"_index":11464,"title":{},"body":{"1015814":{}}}],["s4.erase(s4.begi",{"_index":11466,"title":{},"body":{"1015814":{}}}],["s4.find(2",{"_index":11478,"title":{},"body":{"1015814":{}}}],["s4.insert(5",{"_index":11454,"title":{},"body":{"1015814":{}}}],["s4.insert(narray+5",{"_index":11456,"title":{},"body":{"1015814":{}}}],["s4.insert(s1.begi",{"_index":11459,"title":{},"body":{"1015814":{}}}],["s5(s4.beg",{"_index":11441,"title":{},"body":{"1015814":{}}}],["s6(s5",{"_index":11444,"title":{},"body":{"1015814":{}}}],["s\\n",{"_index":5662,"title":{},"body":{"1015818":{},"1015847":{}}}],["s\\ndesc",{"_index":10136,"title":{},"body":{"1015818":{}}}],["s_addr",{"_index":9762,"title":{},"body":{"1015818":{}}}],["s_b1,s_b2,s_b3,s_b4",{"_index":9757,"title":{},"body":{"1015818":{}}}],["s_fail",{"_index":2864,"title":{},"body":{"1015823":{}}}],["s_fal",{"_index":2717,"title":{},"body":{"1015823":{}}}],["s_hos",{"_index":9766,"title":{},"body":{"1015818":{}}}],["s_imp",{"_index":9771,"title":{},"body":{"1015818":{}}}],["s_lh",{"_index":9774,"title":{},"body":{"1015818":{}}}],["s_net",{"_index":9768,"title":{},"body":{"1015818":{}}}],["s_ok",{"_index":2718,"title":{},"body":{"1015823":{}}}],["s_u",{"_index":9763,"title":{},"body":{"1015818":{}}}],["s_un.s_addr",{"_index":9764,"title":{},"body":{"1015818":{}}}],["s_un.s_un_b.s_b1",{"_index":9769,"title":{},"body":{"1015818":{}}}],["s_un.s_un_b.s_b2",{"_index":9767,"title":{},"body":{"1015818":{}}}],["s_un.s_un_b.s_b3",{"_index":9775,"title":{},"body":{"1015818":{}}}],["s_un.s_un_b.s_b4",{"_index":9773,"title":{},"body":{"1015818":{}}}],["s_un.s_un_w.s_w2",{"_index":9772,"title":{},"body":{"1015818":{}}}],["s_un_b",{"_index":9758,"title":{},"body":{"1015818":{}}}],["s_un_w",{"_index":9760,"title":{},"body":{"1015818":{}}}],["s_w1,s_w2",{"_index":9759,"title":{},"body":{"1015818":{}}}],["safearay",{"_index":2971,"title":{},"body":{"1015823":{}}}],["sahf（st",{"_index":5426,"title":{},"body":{"1015825":{}}}],["sampl",{"_index":2734,"title":{},"body":{"1015823":{}}}],["savedapç",{"_index":10801,"title":{},"body":{"1703937":{},"2424869":{}}}],["scal",{"_index":12072,"title":{},"body":{"1015817":{}}}],["scanf(\"%",{"_index":4760,"title":{},"body":{"1015818":{},"3440657":{}}}],["scanf(\"%x",{"_index":9348,"title":{},"body":{"1015831":{}}}],["sched",{"_index":11189,"title":{},"body":{"1703937":{}}}],["scheduling(v",{"_index":11156,"title":{},"body":{"1703937":{}}}],["scod",{"_index":2964,"title":{},"body":{"1015823":{}}}],["scop",{"_index":4435,"title":{},"body":{"2949166":{}}}],["scopetable_entr",{"_index":4434,"title":{},"body":{"2949166":{}}}],["scrip",{"_index":3216,"title":{},"body":{"1015823":{}}}],["scrollb",{"_index":1090,"title":{},"body":{"1015822":{}}}],["scroll、v",{"_index":1118,"title":{},"body":{"1015822":{}}}],["scroll，这样就可以让这个编辑框支持多行并且有自动的上下、左右的滚动条",{"_index":1119,"title":{},"body":{"1015822":{}}}],["sd",{"_index":7215,"title":{},"body":{"1015833":{}}}],["sd_both",{"_index":10005,"title":{},"body":{"1015818":{}}}],["sd_sen",{"_index":9826,"title":{},"body":{"1015818":{}}}],["sdk中的结构和过程；另外mfc还提供了一个应用程序框架，例如程序向导和类向导自动生成的代码，这样大大减少了程序语言的工作量，提高了开发效率",{"_index":11,"title":{},"body":{"1015822":{}}}],["seach_n锛屾悳绱㈠鍣ㄤ腑鏄惁瀛樺湪3涓繛缁�间负2鐨勫厓绱",{"_index":11646,"title":{},"body":{"1015814":{}}}],["seach锛屾牴鎹瓙搴忓垪v2鍘绘悳绱涓殑鍏冪礌锛岃繖閲屽彧鑳芥悳绱竴娆★紝涔熷氨琛ㄧず杩欓噷鍙v2鐨勯鍏冪礌5鍦╲涓氨浼氭湁缁撴灉锛屽弽涔嬪鏋滈鍏冪礌涓嶅湪鍒欒繑鍥炵殑灏辨槸v.",{"_index":11640,"title":{},"body":{"1015814":{}}}],["search(v.begi",{"_index":11643,"title":{},"body":{"1015814":{}}}],["search_n(v.begi",{"_index":11648,"title":{},"body":{"1015814":{}}}],["search_n，重复元素子序列搜索",{"_index":11619,"title":{},"body":{"1015814":{}}}],["searchfunc(vector<",{"_index":11641,"title":{},"body":{"1015814":{}}}],["searchnfunc(vector<",{"_index":11647,"title":{},"body":{"1015814":{}}}],["search，子序列搜索",{"_index":11618,"title":{},"body":{"1015814":{}}}],["searç",{"_index":8204,"title":{},"body":{"1015814":{},"1015833":{}}}],["secr",{"_index":10464,"title":{},"body":{"1015818":{}}}],["sect",{"_index":6218,"title":{},"body":{"1015828":{},"2949228":{}}}],["sectional",{"_index":6143,"title":{},"body":{"1015828":{}}}],["sectionalignment(0x10",{"_index":6379,"title":{},"body":{"1015828":{}}}],["secur",{"_index":7952,"title":{},"body":{"1015833":{}}}],["segement，任务段）得到的值",{"_index":9286,"title":{},"body":{"1015831":{}}}],["segm",{"_index":8913,"title":{},"body":{"1015831":{}}}],["seh",{"_index":4378,"title":{},"body":{"2949166":{}}}],["seh与veh不同的是，前者没法使用函数的方式去注册异常处理函数，需要我们手动的向栈中填充，然后将fs:[0]指向这块栈地址。这里我们可以自己定义一个seh结构体，但一定需要包含2个成员，即next、handler，如下所示",{"_index":4382,"title":{},"body":{"2949166":{}}}],["seh寮傚父澶勭悊鍑芥暟鎵ц浜",{"_index":4398,"title":{},"body":{"2949166":{}}}],["seh异常处理函数的格式如下，它一共有4个参数，我们只需要了解前三个参数的含义即可",{"_index":4388,"title":{},"body":{"2949166":{}}}],["seh缁撴瀯浣撳湴鍧",{"_index":4393,"title":{},"body":{"2949166":{}}}],["seh链表是一种存在堆栈中的局部链表，本章要学习的veh链表结构与之相似，只不过veh链表是全局链表。我们要想通过veh来处理异常，要先创建如下回调函数来接收和处理异常",{"_index":4312,"title":{},"body":{"2949166":{}}}],["seh链表的格式如下所示，它是一个单向链表，每个成员中包含了两个成员，即next（下一个seh）和handler（异常处理函数）。无论是在内核还是用户空间，我们都可以通过fs:[0]来找到该链表头",{"_index":4381,"title":{},"body":{"2949166":{}}}],["select",{"_index":8914,"title":{},"body":{"1015831":{}}}],["select(0",{"_index":10072,"title":{},"body":{"1015818":{}}}],["selectobject(hdç",{"_index":3764,"title":{},"body":{"1015833":{},"3440655":{}}}],["selectobjeç",{"_index":7682,"title":{},"body":{"1015833":{}}}],["select函数",{"_index":10017,"title":{},"body":{"1015818":{}}}],["select模型实际上就是调用了select这个函数，其语法如下",{"_index":10018,"title":{},"body":{"1015818":{}}}],["select模型的本质",{"_index":10009,"title":{},"body":{"1015818":{}}}],["select模型逻辑",{"_index":10012,"title":{},"body":{"1015818":{}}}],["select模型逻辑步骤如下",{"_index":10013,"title":{},"body":{"1015818":{}}}],["select的中文意思是选择，也就表示是从某些东西中去选择自己想要的，如下图所示，有两个地方可供我们选择，也就是可读检测池、可写检测池，在这两个池子里的是我们的套接字句柄（soç",{"_index":10010,"title":{},"body":{"1015818":{}}}],["select的原理就是不停的检测，越多的socket效率就越低，延迟就越大，所以说这个模型只适合小用户量去访问，应该自己选择一个合适的大小",{"_index":10047,"title":{},"body":{"1015818":{}}}],["seleç",{"_index":8843,"title":{},"body":{"1015818":{},"1015850":{}}}],["self",{"_index":11059,"title":{},"body":{"1703937":{}}}],["selfpcr",{"_index":11063,"title":{},"body":{"1703937":{}}}],["sen",{"_index":3826,"title":{},"body":{"1015818":{},"1015820":{},"3440655":{}}}],["send(asoç",{"_index":9820,"title":{},"body":{"1015818":{}}}],["send(csoç",{"_index":9882,"title":{},"body":{"1015818":{}}}],["send(readfds.fd_array[",{"_index":10076,"title":{},"body":{"1015818":{}}}],["sendbuf",{"_index":9957,"title":{},"body":{"1015818":{}}}],["sendbuf[10",{"_index":9956,"title":{},"body":{"1015818":{}}}],["senddata[10",{"_index":9881,"title":{},"body":{"1015818":{}}}],["sendmessage与postmessagı",{"_index":4010,"title":{},"body":{"3440655":{}}}],["sendto(csoç",{"_index":9959,"title":{},"body":{"1015818":{}}}],["sentmessageslisth",{"_index":3828,"title":{},"body":{"3440655":{}}}],["sentmessageslisthead：接到sendmessage发来的消息",{"_index":3974,"title":{},"body":{"3440655":{}}}],["serial",{"_index":8043,"title":{},"body":{"1015833":{}}}],["serv",{"_index":2735,"title":{},"body":{"1015823":{},"1015833":{}}}],["serversockaddrinf",{"_index":9872,"title":{},"body":{"1015818":{}}}],["serversockaddrinfo.sin_addr.s_un.s_addr",{"_index":9873,"title":{},"body":{"1015818":{}}}],["serversockaddrinfo.sin_famil",{"_index":9875,"title":{},"body":{"1015818":{}}}],["serversockaddrinfo.sin_p",{"_index":9874,"title":{},"body":{"1015818":{}}}],["server、oracle等等，它们不仅有基础的数据管理功能，还能保证数据的完整性、安全性和可靠性",{"_index":8740,"title":{},"body":{"1015850":{}}}],["server应用了，接下来只需要将include和lib目录填入vc6的配置中即可，在正式使用之前还需要包含几个头文件",{"_index":8857,"title":{},"body":{"1015850":{}}}],["server）https://downloads.mysql.com/arç",{"_index":8747,"title":{},"body":{"1015850":{}}}],["servicecountertablep",{"_index":5808,"title":{},"body":{"1015847":{}}}],["servicelimit锛堢郴缁熸湇鍔¤〃鍐呭瓨鍌ㄥ嚱鏁扮殑涓暟锛夛細0000011ç",{"_index":2574,"title":{},"body":{"1015846":{}}}],["servicetablep",{"_index":5807,"title":{},"body":{"1015847":{}}}],["servicetable锛堝嚱鏁板湴鍧�琛ㄥ湴鍧�锛夛細80504734",{"_index":2572,"title":{},"body":{"1015846":{}}}],["serviç",{"_index":2561,"title":{},"body":{"1015846":{},"1703937":{}}}],["set",{"_index":84,"title":{},"body":{"1015814":{},"1015822":{},"1015850":{},"3440655":{}}}],["set/m",{"_index":11746,"title":{},"body":{"1015814":{}}}],["set/multiset容器",{"_index":11420,"title":{},"body":{"1015814":{}}}],["set<",{"_index":11431,"title":{},"body":{"1015814":{}}}],["set<int>:",{"_index":11468,"title":{},"body":{"1015814":{}}}],["set<memp",{"_index":11776,"title":{},"body":{"1015814":{}}}],["setage(",{"_index":3533,"title":{},"body":{"1015840":{}}}],["setbkmode鍑芥暟鏉ヨ缃瓺rawtext鍑芥暟鐨勮緭鍑烘柟寮",{"_index":808,"title":{},"body":{"1015822":{}}}],["setcaptur",{"_index":987,"title":{},"body":{"1015822":{}}}],["setcurrentdirect",{"_index":8102,"title":{},"body":{"1015833":{}}}],["setcurrentdirectory(text(\"c:\\\\",{"_index":8105,"title":{},"body":{"1015833":{}}}],["setcursel",{"_index":1158,"title":{},"body":{"1015822":{}}}],["setdcbrushcolor(hdç",{"_index":3765,"title":{},"body":{"3440655":{}}}],["setdlgitemtext(hw",{"_index":7876,"title":{},"body":{"1015833":{}}}],["setdlgitemtext鍑芥暟淇敼缂栬緫妗嗗唴瀹",{"_index":7875,"title":{},"body":{"1015833":{}}}],["setevent(e_ev",{"_index":7588,"title":{},"body":{"1015833":{}}}],["setevent(ev",{"_index":7636,"title":{},"body":{"1015833":{}}}],["setevent(eventp",{"_index":7632,"title":{},"body":{"1015833":{}}}],["setfilepointer(hfil",{"_index":8189,"title":{},"body":{"1015833":{}}}],["setgeometry(qrect(0,0,50,30",{"_index":4165,"title":{},"body":{"1015820":{}}}],["setgeometry(qrect(100,0,80,30",{"_index":4169,"title":{},"body":{"1015820":{}}}],["sethandleinformation(handl",{"_index":8712,"title":{},"body":{"1933378":{}}}],["sethardbreakpoint(pv",{"_index":4935,"title":{},"body":{"3440657":{}}}],["setint3breakpoint(pç",{"_index":4812,"title":{},"body":{"3440657":{}}}],["setit",{"_index":1162,"title":{},"body":{"1015822":{}}}],["setlevel(",{"_index":3535,"title":{},"body":{"1015840":{}}}],["setmembreakpoint(pç",{"_index":4874,"title":{},"body":{"3440657":{}}}],["setsex(",{"_index":3534,"title":{},"body":{"1015840":{}}}],["setsinglestep",{"_index":4966,"title":{},"body":{"3440657":{}}}],["settext(qstring(\"cl",{"_index":4167,"title":{},"body":{"1015820":{}}}],["settext(qstring(\"fullscr",{"_index":4170,"title":{},"body":{"1015820":{}}}],["settext(u",{"_index":4211,"title":{},"body":{"1015820":{}}}],["setthreadcontex",{"_index":7481,"title":{},"body":{"1015833":{}}}],["setthreadcontext(hdebugeethr",{"_index":4846,"title":{},"body":{"3440657":{}}}],["setthreadcontext(hthr",{"_index":7484,"title":{},"body":{"1015833":{}}}],["setthreadcontext函数",{"_index":7479,"title":{},"body":{"1015833":{}}}],["settings\\\\administrator\\\\妗岄潰\\\\test\\\\b.dl",{"_index":8472,"title":{},"body":{"1015833":{}}}],["setting中选择c/c++标签按如下图选择即可",{"_index":210,"title":{},"body":{"1015822":{}}}],["setunhandledexceptionfilter(callbaç",{"_index":4509,"title":{},"body":{"2949166":{}}}],["setupui(th",{"_index":4220,"title":{},"body":{"1015820":{}}}],["setwindowlong(m_list.m_hw",{"_index":1193,"title":{},"body":{"1015822":{}}}],["setwindowtext(\"123123123123",{"_index":1114,"title":{},"body":{"1015822":{}}}],["setwindowtext(\"changı",{"_index":1101,"title":{},"body":{"1015822":{}}}],["setwindowtitle(qstring(\"hel",{"_index":4123,"title":{},"body":{"1015820":{}}}],["set容器不可以直接修改容器内的数据，但是在map容器中是可以修改值(value)的，不可以修改键(key)的",{"_index":11524,"title":{},"body":{"1015814":{}}}],["set容器不可以直接修改容器内的数据，要想完成这个修改元素的操作，就先删除后增加",{"_index":11475,"title":{},"body":{"1015814":{}}}],["sex",{"_index":3376,"title":{},"body":{"1015840":{}}}],["shadow（即keservicedescriptortableshadow）里，我们可以通过windbg查看这张表并且能看到里面有2张系统服务表，但是这张表是未导出的我们想要使用的话，通常采用内存搜索的方式来找到",{"_index":2568,"title":{},"body":{"1015846":{}}}],["shar",{"_index":6784,"title":{},"body":{"1015833":{},"2949228":{}}}],["shareabl",{"_index":6316,"title":{},"body":{"1015828":{}}}],["sharecoun",{"_index":6909,"title":{},"body":{"2949228":{}}}],["shor",{"_index":1527,"title":{},"body":{"1015818":{},"1015823":{},"1015831":{},"1015843":{}}}],["shortflagı",{"_index":6915,"title":{},"body":{"2949228":{}}}],["short鍗犵敤涓や釜瀛楄妭锛岄渶瑕�20涓瓧鑺傦紝20涓瓧鑺傛濂界鍚�4瀛楄妭瀵归綈锛屾墍浠ュ垎閰嶇殑灏辨槸20涓瓧鑺",{"_index":1921,"title":{},"body":{"1015843":{}}}],["show",{"_index":4125,"title":{},"body":{"1015820":{},"1015833":{},"1015850":{}}}],["showlabel",{"_index":4210,"title":{},"body":{"1015820":{}}}],["showwindow",{"_index":7775,"title":{},"body":{"1015833":{}}}],["showwindow(hw",{"_index":7777,"title":{},"body":{"1015833":{}}}],["showwindow(m_ncmdshow",{"_index":146,"title":{},"body":{"1015822":{}}}],["showwindow(sw_show",{"_index":1063,"title":{},"body":{"1015822":{}}}],["shutdow",{"_index":9823,"title":{},"body":{"1015818":{}}}],["shutdown(asoç",{"_index":9825,"title":{},"body":{"1015818":{}}}],["shutdown(csoç",{"_index":9885,"title":{},"body":{"1015818":{}}}],["shutdown(tsoç",{"_index":10094,"title":{},"body":{"1015818":{}}}],["si.cb",{"_index":7253,"title":{},"body":{"1015833":{}}}],["si.dw",{"_index":7288,"title":{},"body":{"1015833":{}}}],["si.dwfillattribu",{"_index":7293,"title":{},"body":{"1015833":{}}}],["si.dwflagı",{"_index":7294,"title":{},"body":{"1015833":{}}}],["si.dwx",{"_index":7287,"title":{},"body":{"1015833":{}}}],["si.dwxcountç",{"_index":7291,"title":{},"body":{"1015833":{}}}],["si.dwxsiz",{"_index":7289,"title":{},"body":{"1015833":{}}}],["si.dwy",{"_index":7290,"title":{},"body":{"1015833":{}}}],["si.dwycountç",{"_index":7292,"title":{},"body":{"1015833":{}}}],["sib",{"_index":12046,"title":{},"body":{"1015817":{}}}],["sib字节的8个位被分成了三部分",{"_index":12056,"title":{},"body":{"1015817":{}}}],["sig",{"_index":1546,"title":{},"body":{"1015843":{}}}],["signal",{"_index":4150,"title":{},"body":{"1015820":{},"2424889":{}}}],["signal(pr",{"_index":4172,"title":{},"body":{"1015820":{}}}],["signalstate无信号：signalstate值为小于等于0，说明当前线程一定拥有该互斥体，此时signalstate仍会减1，最多可以减少至0x80000000，也就表示可以重入0x8000000次",{"_index":10748,"title":{},"body":{"2424889":{}}}],["signalstate有信号：signalstate值大于0，任何线程可以等待这个互斥体对象",{"_index":10747,"title":{},"body":{"2424889":{}}}],["signalstate涓嶅ぇ浜�0",{"_index":10634,"title":{},"body":{"2424889":{}}}],["signatur",{"_index":420,"title":{},"body":{"1015822":{},"1015828":{}}}],["sin_addr",{"_index":9750,"title":{},"body":{"1015818":{}}}],["sin_famil",{"_index":9744,"title":{},"body":{"1015818":{}}}],["sin_p",{"_index":9747,"title":{},"body":{"1015818":{}}}],["sin_zero[8",{"_index":9752,"title":{},"body":{"1015818":{}}}],["single_list_entr",{"_index":3909,"title":{},"body":{"2949228":{},"3440655":{}}}],["singlestepexceptionproc(exception_debug_inf",{"_index":4944,"title":{},"body":{"3440657":{}}}],["sip转为二进制：010",{"_index":12070,"title":{},"body":{"1015817":{}}}],["siz",{"_index":5604,"title":{},"body":{"1015814":{},"1015818":{},"1015828":{},"1015833":{},"1015847":{},"2424869":{},"2424889":{}}}],["size_",{"_index":2436,"title":{},"body":{"1015833":{},"1015846":{},"2949228":{},"3440657":{}}}],["size_is(maximumlength",{"_index":5561,"title":{},"body":{"1015847":{}}}],["sizeof",{"_index":10227,"title":{},"body":{"1015818":{}}}],["sizeof(",{"_index":3388,"title":{},"body":{"1015818":{},"1015833":{},"1015840":{}}}],["sizeof(_t(\"dp",{"_index":2736,"title":{},"body":{"1015823":{}}}],["sizeof(acceptsockaddrinf",{"_index":9854,"title":{},"body":{"1015818":{}}}],["sizeof(buf",{"_index":10089,"title":{},"body":{"1015818":{}}}],["sizeof(cl",{"_index":278,"title":{},"body":{"1015822":{}}}],["sizeof(createfile_p",{"_index":8652,"title":{},"body":{"1015833":{}}}],["sizeof(k",{"_index":3939,"title":{},"body":{"3440655":{}}}],["sizeof(lf",{"_index":867,"title":{},"body":{"1015822":{}}}],["sizeof(p",{"_index":7252,"title":{},"body":{"1015833":{}}}],["sizeof(processentry32",{"_index":8516,"title":{},"body":{"1015833":{}}}],["sizeof(px",{"_index":2188,"title":{},"body":{"1015843":{}}}],["sizeof(recvbuf",{"_index":9983,"title":{},"body":{"1015818":{}}}],["sizeof(serversockaddrinf",{"_index":9878,"title":{},"body":{"1015818":{}}}],["sizeof(sockaddrinf",{"_index":9792,"title":{},"body":{"1015818":{}}}],["sizeof(sz",{"_index":2747,"title":{},"body":{"1015823":{}}}],["sizeof(tchar)*(lstrlen(sz",{"_index":2750,"title":{},"body":{"1015823":{}}}],["sizeofbloç",{"_index":6603,"title":{},"body":{"1015828":{}}}],["sizeofh",{"_index":6161,"title":{},"body":{"1015828":{}}}],["sizeofheapreserv",{"_index":6173,"title":{},"body":{"1015828":{}}}],["sizeofheapç",{"_index":6175,"title":{},"body":{"1015828":{}}}],["sizeofimagı",{"_index":6159,"title":{},"body":{"1015828":{}}}],["sizeofinitial",{"_index":6131,"title":{},"body":{"1015828":{}}}],["sizeofoptionalh",{"_index":6107,"title":{},"body":{"1015828":{}}}],["sizeofraw",{"_index":6205,"title":{},"body":{"1015828":{}}}],["sizeofresource(n",{"_index":1303,"title":{},"body":{"1015822":{}}}],["sizeofstackreserv",{"_index":6169,"title":{},"body":{"1015828":{}}}],["sizeofstackç",{"_index":6171,"title":{},"body":{"1015828":{}}}],["sizeofuninitial",{"_index":6133,"title":{},"body":{"1015828":{}}}],["sizeofç",{"_index":6129,"title":{},"body":{"1015828":{}}}],["size锛岃緭鍑虹被鍨嬶紝楂�32浣嶇殑鏂囦欢澶у皬锛岃繖涓病鏈夌敤锛岄暱搴︿竴鑸湪浣�32浣嶄腑锛屼篃灏辨槸褰撳墠鍑芥暟鐨勮繑鍥炲",{"_index":8134,"title":{},"body":{"1015833":{}}}],["size）只对pde有意义，为1表示pde直接指向物理页（没有pte），低22位就是物理页的页内偏移。因此，线性地址就只能拆分为2部分，而它的一个物理页就不再是4kb大小，而是4mb大小，我们也称之为大页",{"_index":9446,"title":{},"body":{"1015831":{}}}],["sleep(10",{"_index":7543,"title":{},"body":{"1015833":{}}}],["sleep(20",{"_index":8530,"title":{},"body":{"1015833":{}}}],["sleep(50",{"_index":7411,"title":{},"body":{"1015833":{}}}],["sleepmillsecondu",{"_index":11105,"title":{},"body":{"1703937":{}}}],["sleep函数",{"_index":7418,"title":{},"body":{"1015833":{}}}],["sleep函数是让当前执行到本函数时延迟指定的毫秒之后再向下走，例如",{"_index":7419,"title":{},"body":{"1015833":{}}}],["slot",{"_index":4205,"title":{},"body":{"1015820":{}}}],["slot(changetex",{"_index":4223,"title":{},"body":{"1015820":{}}}],["slot(cl",{"_index":4173,"title":{},"body":{"1015820":{}}}],["slot(showfullscr",{"_index":4176,"title":{},"body":{"1015820":{}}}],["small",{"_index":8773,"title":{},"body":{"1015850":{}}}],["snapl",{"_index":10161,"title":{},"body":{"1015818":{}}}],["soc",{"_index":8897,"title":{},"body":{"1015818":{},"1015850":{}}}],["sock_dgr",{"_index":9941,"title":{},"body":{"1015818":{}}}],["sock_str",{"_index":9735,"title":{},"body":{"1015818":{}}}],["sockaddr",{"_index":9738,"title":{},"body":{"1015818":{}}}],["sockaddr*)&",{"_index":10081,"title":{},"body":{"1015818":{}}}],["sockaddr*)&acceptsockaddrinf",{"_index":9807,"title":{},"body":{"1015818":{}}}],["sockaddr*)&serversockaddrinf",{"_index":9877,"title":{},"body":{"1015818":{}}}],["sockaddr*)&sockaddrinf",{"_index":9791,"title":{},"body":{"1015818":{}}}],["sockaddr_",{"_index":9743,"title":{},"body":{"1015818":{}}}],["sockaddr_in*)tmpaddr",{"_index":10141,"title":{},"body":{"1015818":{}}}],["sockaddr_in结构体的定义如下",{"_index":9742,"title":{},"body":{"1015818":{}}}],["sockaddr_in缁撴瀯浣撶殑闀垮害",{"_index":9741,"title":{},"body":{"1015818":{}}}],["sockaddrinf",{"_index":9781,"title":{},"body":{"1015818":{}}}],["sockaddrinfo.sin_addr.s_un.s_addr",{"_index":9782,"title":{},"body":{"1015818":{}}}],["sockaddrinfo.sin_famil",{"_index":9787,"title":{},"body":{"1015818":{}}}],["sockaddrinfo.sin_p",{"_index":9784,"title":{},"body":{"1015818":{}}}],["sockaddrinfos.sin_addr.s_un.s_addr",{"_index":9976,"title":{},"body":{"1015818":{}}}],["sockaddrinfos.sin_famil",{"_index":9978,"title":{},"body":{"1015818":{}}}],["sockaddrinfos.sin_p",{"_index":9977,"title":{},"body":{"1015818":{}}}],["sockcl",{"_index":9975,"title":{},"body":{"1015818":{}}}],["socket(af_",{"_index":9734,"title":{},"body":{"1015818":{}}}],["socket)lpp",{"_index":10003,"title":{},"body":{"1015818":{}}}],["socket_err",{"_index":9845,"title":{},"body":{"1015818":{}}}],["socket_error(瀹",{"_index":10035,"title":{},"body":{"1015818":{}}}],["sockets瀹炵幇鐨勭粏鑺",{"_index":9838,"title":{},"body":{"1015818":{}}}],["sockets鐗堟湰锛屾垜浠彲浠ヤ娇鐢∕akeword鍘诲垱寤轰竴涓増鏈彿",{"_index":9835,"title":{},"body":{"1015818":{}}}],["sort(",{"_index":3625,"title":{},"body":{"1015840":{}}}],["sort(v.begi",{"_index":11693,"title":{},"body":{"1015814":{}}}],["sort_heap(v.begi",{"_index":11700,"title":{},"body":{"1015814":{}}}],["sort_heap锛屽鍫嗚繘琛屾帓搴忥紝鎺掑簭鍚庡氨涓嶆槸鍫嗕簡",{"_index":11698,"title":{},"body":{"1015814":{}}}],["sort_heap，对堆进行排序，排序后就不是堆了",{"_index":11690,"title":{},"body":{"1015814":{}}}],["sortfunc(vector<",{"_index":11692,"title":{},"body":{"1015814":{}}}],["sortheapfunc(vector<",{"_index":11699,"title":{},"body":{"1015814":{}}}],["sort锛屾帓搴忓嚱鏁帮紝灏嗗厓绱犵殑鍐呭浠庡皬鍒板ぇ鎺掑簭",{"_index":11691,"title":{},"body":{"1015814":{}}}],["sort锛氭帓搴�(list鍗曠嫭瀹炵幇",{"_index":11399,"title":{},"body":{"1015814":{}}}],["sort，普通排序",{"_index":11688,"title":{},"body":{"1015814":{}}}],["sourç",{"_index":10159,"title":{},"body":{"1015818":{}}}],["sp",{"_index":5166,"title":{},"body":{"1015825":{},"1015828":{}}}],["sp2，安装包链接：https://pan.baidu.com/s/1j0odzghvvimvilwgwhdoxg，提取码：key",{"_index":9356,"title":{},"body":{"1015831":{}}}],["spare0",{"_index":10831,"title":{},"body":{"2424869":{}}}],["spdbcon",{"_index":3264,"title":{},"body":{"1015823":{}}}],["spdbconn.cocreateinstance(l\"dualdbconnect.ado.1",{"_index":3289,"title":{},"body":{"1015823":{}}}],["spdbconn;创建了一个智能指针，其实它是一个类对象，对象内部有一个idbconnect*的指针变量，而idbconneç",{"_index":3249,"title":{},"body":{"1015823":{}}}],["spe",{"_index":10414,"title":{},"body":{"1015818":{}}}],["spec",{"_index":6254,"title":{},"body":{"1015828":{}}}],["special",{"_index":431,"title":{},"body":{"1015822":{}}}],["specif",{"_index":97,"title":{},"body":{"1015822":{},"1015828":{},"3440655":{}}}],["speed/1024",{"_index":10417,"title":{},"body":{"1015818":{}}}],["sphkcurr",{"_index":3854,"title":{},"body":{"3440655":{}}}],["sprintf(c",{"_index":919,"title":{},"body":{"1015822":{}}}],["sprintf(szoutbuf",{"_index":298,"title":{},"body":{"1015822":{},"1015833":{},"3440655":{}}}],["spun",{"_index":3262,"title":{},"body":{"1015823":{}}}],["spunk.cocreateinstance(l\"dualdbconnect.ado.1",{"_index":3265,"title":{},"body":{"1015823":{}}}],["sql",{"_index":3158,"title":{},"body":{"1015823":{}}}],["sql璇彞",{"_index":8891,"title":{},"body":{"1015850":{}}}],["sql语言：它是一种数据库查询语言和程序设计语言，主要用于管理数据库中的数据，如存储数据、查询数据、更新数据等",{"_index":8742,"title":{},"body":{"1015850":{}}}],["squ",{"_index":11670,"title":{},"body":{"1015814":{}}}],["square(",{"_index":11666,"title":{},"body":{"1015814":{}}}],["src",{"_index":2147,"title":{},"body":{"1015843":{}}}],["src.zip?viasf=1）来帮助我们对代码进行分析",{"_index":4522,"title":{},"body":{"3440657":{}}}],["srcgmthreadp",{"_index":11158,"title":{},"body":{"1703937":{}}}],["srcip[",{"_index":10344,"title":{},"body":{"1015818":{}}}],["srcip[0",{"_index":10347,"title":{},"body":{"1015818":{}}}],["srcip[1",{"_index":10348,"title":{},"body":{"1015818":{}}}],["srcip[2",{"_index":10349,"title":{},"body":{"1015818":{}}}],["srcip[3",{"_index":10350,"title":{},"body":{"1015818":{}}}],["srcip[4",{"_index":10343,"title":{},"body":{"1015818":{}}}],["srcmac[",{"_index":10244,"title":{},"body":{"1015818":{}}}],["srcmac[0",{"_index":10247,"title":{},"body":{"1015818":{}}}],["srcmac[1",{"_index":10248,"title":{},"body":{"1015818":{}}}],["srcmac[2",{"_index":10249,"title":{},"body":{"1015818":{}}}],["srcmac[3",{"_index":10250,"title":{},"body":{"1015818":{}}}],["srcmac[4",{"_index":10251,"title":{},"body":{"1015818":{}}}],["srcmac[5",{"_index":10252,"title":{},"body":{"1015818":{}}}],["srcmac[6",{"_index":10243,"title":{},"body":{"1015818":{}}}],["srcport[2",{"_index":10381,"title":{},"body":{"1015818":{}}}],["srcport[x",{"_index":10382,"title":{},"body":{"1015818":{}}}],["ss(硬编码：36",{"_index":11800,"title":{},"body":{"1015817":{}}}],["ss0",{"_index":9315,"title":{},"body":{"1015831":{}}}],["ss1",{"_index":9317,"title":{},"body":{"1015831":{}}}],["ss2",{"_index":9319,"title":{},"body":{"1015831":{}}}],["ss:[ebp+0x08",{"_index":12045,"title":{},"body":{"1015817":{}}}],["ss:[esp+4",{"_index":5393,"title":{},"body":{"1015825":{}}}],["ssdt",{"_index":2559,"title":{},"body":{"1015846":{},"1015847":{}}}],["ssdt也有两张表：keservicedescriptortable、keservicedescriptortableshadow。keservicedescriptortable是内核文件导出的，我们可以在内核文件ntoskrnl.exe的导出表中找到",{"_index":2564,"title":{},"body":{"1015846":{}}}],["ssleay32.lip",{"_index":10512,"title":{},"body":{"1015818":{}}}],["ssoc",{"_index":9733,"title":{},"body":{"1015818":{}}}],["ss锛孋s涓嶴s闇�瑕佷繚鎸佷竴鑷",{"_index":9327,"title":{},"body":{"1015831":{}}}],["st",{"_index":2047,"title":{},"body":{"1015843":{}}}],["stac",{"_index":7399,"title":{},"body":{"1015814":{},"1015833":{}}}],["stack<",{"_index":11541,"title":{},"body":{"1015814":{}}}],["stack[10",{"_index":9343,"title":{},"body":{"1015831":{}}}],["stackb",{"_index":11057,"title":{},"body":{"1703937":{}}}],["stackdwordp",{"_index":11125,"title":{},"body":{"1703937":{}}}],["stackl",{"_index":11014,"title":{},"body":{"1703937":{}}}],["stackpagı",{"_index":11124,"title":{},"body":{"1703937":{}}}],["stack容器",{"_index":11533,"title":{},"body":{"1015814":{}}}],["stack容器又称之为栈容器，这是一个先进后出顺序的容器，只能进行增加、删除、访问栈顶的元素；其有这几种操作方法",{"_index":11535,"title":{},"body":{"1015814":{}}}],["stack容器又称之为队列容器，这是一个先进先出顺序的容器；其有这几种操作方法",{"_index":11557,"title":{},"body":{"1015814":{}}}],["stand",{"_index":94,"title":{},"body":{"1015814":{},"1015822":{}}}],["standbypagel",{"_index":6986,"title":{},"body":{"2949228":{}}}],["star",{"_index":8261,"title":{},"body":{"1015833":{}}}],["startingvpn：当前节点对应的内存的线性地址起始位置（以页为单位，即4kb），因此本例中实际上对应的起始位置为0x1900",{"_index":6700,"title":{},"body":{"2949228":{}}}],["startup",{"_index":7232,"title":{},"body":{"1015833":{}}}],["startupinf",{"_index":4631,"title":{},"body":{"1015833":{},"3440657":{}}}],["stat",{"_index":3887,"title":{},"body":{"1015831":{},"1015833":{},"1703937":{},"3440655":{}}}],["static、const双关键词",{"_index":218,"title":{},"body":{"1015822":{}}}],["static关键字",{"_index":3731,"title":{},"body":{"1015840":{}}}],["static关键字的作用",{"_index":204,"title":{},"body":{"1015822":{}}}],["static关键词之前课程中也有了解到，这里我们重新温故一下，当用这个关键词定义一个变量，该变量则存储在全局数据区而不是局部的，如果static关键词的变量为某类的成员，则该成员与类进行关联，但并不会与类创建的对象进行关联，也就表示我们不需要创建对象就可以使用这个成员，所以我们想要使用的话就要通过类名::成员名的方式去使用，并且我们不可以在类的内部去赋值初始化，只可以在外部",{"_index":214,"title":{},"body":{"1015822":{}}}],["static关键词的作用",{"_index":213,"title":{},"body":{"1015822":{}}}],["static控件",{"_index":1104,"title":{},"body":{"1015822":{}}}],["static的经典应用：单子模式；有些时候我们希望定义的类只能有一个对象存在，这时候你该如何限制呢？实现思路有两个",{"_index":3741,"title":{},"body":{"1015840":{}}}],["statiç",{"_index":87,"title":{},"body":{"1015818":{},"1015822":{},"1015823":{},"1015840":{}}}],["statu",{"_index":3934,"title":{},"body":{"1015833":{},"3440655":{}}}],["status_access_viol",{"_index":4893,"title":{},"body":{"3440657":{}}}],["status_breakpoin",{"_index":4890,"title":{},"body":{"3440657":{}}}],["status_buffer_overflow",{"_index":5528,"title":{},"body":{"1015847":{}}}],["status_invalid_p",{"_index":5525,"title":{},"body":{"1015847":{}}}],["status_suç",{"_index":3954,"title":{},"body":{"1015847":{},"3440655":{}}}],["std",{"_index":2775,"title":{},"body":{"1015814":{},"1015823":{}}}],["stdafx.h",{"_index":91,"title":{},"body":{"1015822":{},"1015833":{}}}],["stdap",{"_index":2705,"title":{},"body":{"1015823":{}}}],["stdcal",{"_index":8865,"title":{},"body":{"1015850":{}}}],["stdio.h",{"_index":1659,"title":{},"body":{"1015814":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1933378":{},"2424889":{},"2949166":{},"2949228":{},"3440657":{}}}],["stdio.h>，三个printf分别表示输出字符串、整数、浮点数",{"_index":1671,"title":{},"body":{"1015843":{}}}],["stdlib.h",{"_index":7244,"title":{},"body":{"1015833":{}}}],["stdmethod(checksql)(bstr",{"_index":3157,"title":{},"body":{"1015823":{}}}],["stdmethodcalltyp",{"_index":2886,"title":{},"body":{"1015823":{}}}],["stdmethodimp",{"_index":3129,"title":{},"body":{"1015823":{}}}],["sti",{"_index":5885,"title":{},"body":{"1015847":{}}}],["stl",{"_index":4977,"title":{"1015814":{}},"body":{"1015826":{},"1015827":{}}}],["stl主要由容器，迭代器和算法组成",{"_index":11318,"title":{},"body":{"1015814":{}}}],["stl基本组件",{"_index":11317,"title":{},"body":{"1015814":{}}}],["stl常见的算法",{"_index":11607,"title":{},"body":{"1015814":{}}}],["stl常见的算法有如下三种",{"_index":11608,"title":{},"body":{"1015814":{}}}],["stl提供了大量实现算法的模版函数，只要我们熟悉了stl之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要的功能，从而大大地提升效率",{"_index":11605,"title":{},"body":{"1015814":{}}}],["stl提供了能在各种容器中使用的通用算法，也就表示可以在不同的容器中使用，比如插入，删除，查找，排序等，这些算法主要是存放在头文件<algorithm>，<numeric>和<functional>中",{"_index":11601,"title":{},"body":{"1015814":{}}}],["stl是最新的c++标准函数库中的一个子集，这个庞大的子集占据了整个库的大约80%的份量",{"_index":11316,"title":{},"body":{"1015814":{}}}],["stl概述",{"_index":11309,"title":{},"body":{"1015814":{}}}],["stl算法简介",{"_index":11600,"title":{},"body":{"1015814":{}}}],["stl迭代器用于指向容器中的一个元素，有常量迭代器和非常量迭代器；通过迭代器可以读取它指向的元素，通过非常量迭代器还能修改其指向的元素，迭代器用法和指针类似；迭代器是容器和算法的桥梁，stl容器和算法是分离的，连接它们的是迭代器",{"_index":11703,"title":{},"body":{"1015814":{}}}],["stl迭代器简介",{"_index":11702,"title":{},"body":{"1015814":{}}}],["stl（stand",{"_index":11311,"title":{},"body":{"1015814":{}}}],["sto",{"_index":1397,"title":{},"body":{"1015825":{},"1015843":{},"1015847":{}}}],["stos",{"_index":5319,"title":{},"body":{"1015825":{}}}],["stosb",{"_index":5317,"title":{},"body":{"1015825":{}}}],["stosd（简写）就是将eax的值储存到edi指定的内存地址，默认情况下标志寄存器的",{"_index":1442,"title":{},"body":{"1015843":{}}}],["stosw",{"_index":5318,"title":{},"body":{"1015825":{}}}],["stos指令",{"_index":5304,"title":{},"body":{"1015825":{}}}],["stpoin",{"_index":1998,"title":{},"body":{"1015843":{}}}],["str",{"_index":2158,"title":{},"body":{"1015818":{},"1015843":{}}}],["str[6",{"_index":2156,"title":{},"body":{"1015843":{}}}],["strbuf",{"_index":7123,"title":{},"body":{"1015833":{}}}],["strbuff1",{"_index":7135,"title":{},"body":{"1015833":{}}}],["strbuffer[0x10",{"_index":3735,"title":{},"body":{"1015840":{}}}],["strcat(c",{"_index":2149,"title":{},"body":{"1015843":{}}}],["strcmp(buf",{"_index":10004,"title":{},"body":{"1015818":{}}}],["strcmp(char",{"_index":2151,"title":{},"body":{"1015843":{}}}],["strcmp(recvbuf",{"_index":9984,"title":{},"body":{"1015818":{}}}],["strcmp(sendbuf",{"_index":9986,"title":{},"body":{"1015818":{}}}],["strcmp(sznam",{"_index":8518,"title":{},"body":{"1015833":{}}}],["strcont",{"_index":7180,"title":{},"body":{"1015833":{}}}],["strcpy(arr[0].name,\"鐜嬮挗铔",{"_index":2068,"title":{},"body":{"1015843":{}}}],["strcpy(buffer,",{"_index":2349,"title":{},"body":{"1015843":{}}}],["strcpy(buffer,arr[0].",{"_index":2066,"title":{},"body":{"1015843":{}}}],["strcpy(ch",{"_index":2145,"title":{},"body":{"1015843":{}}}],["strcpy(lf.lffac",{"_index":877,"title":{},"body":{"1015822":{}}}],["strcpy(m_strbuf",{"_index":3684,"title":{},"body":{"1015840":{}}}],["strcpy(strbuf",{"_index":3736,"title":{},"body":{"1015840":{}}}],["strcpy是一个字符串处理函数，用于字符串拷贝，其参数是传入的是两个地址，就谁传给谁",{"_index":2069,"title":{},"body":{"1015843":{}}}],["strftime(timestr",{"_index":10226,"title":{},"body":{"1015818":{}}}],["string",{"_index":5566,"title":{},"body":{"1015814":{},"1015833":{},"1015847":{}}}],["string>:",{"_index":11521,"title":{},"body":{"1015814":{}}}],["string>::value_typ",{"_index":11507,"title":{},"body":{"1015814":{}}}],["string>::value_type(2",{"_index":11515,"title":{},"body":{"1015814":{}}}],["strlen(buf)+1",{"_index":9821,"title":{},"body":{"1015818":{}}}],["strlen(c",{"_index":2143,"title":{},"body":{"1015843":{}}}],["strlen(m_n",{"_index":6855,"title":{},"body":{"2949228":{}}}],["strlen(recvbuf",{"_index":9945,"title":{},"body":{"1015818":{}}}],["strlen(sendbuf)+1",{"_index":9981,"title":{},"body":{"1015818":{}}}],["strlen(senddata)+1",{"_index":9883,"title":{},"body":{"1015818":{}}}],["strlen(szdllpath",{"_index":8451,"title":{},"body":{"1015833":{}}}],["strlen(szfilepath",{"_index":8675,"title":{},"body":{"1015833":{}}}],["strlen(szfilepathname)+1",{"_index":8646,"title":{},"body":{"1015833":{}}}],["strmod",{"_index":7378,"title":{},"body":{"1015833":{}}}],["strmodule[256",{"_index":7368,"title":{},"body":{"1015833":{}}}],["strnam",{"_index":11758,"title":{},"body":{"1015814":{}}}],["strpoin",{"_index":7169,"title":{},"body":{"1015833":{}}}],["strtitl",{"_index":7179,"title":{},"body":{"1015833":{}}}],["struc",{"_index":239,"title":{},"body":{"1015814":{},"1015818":{},"1015822":{},"1015823":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1703937":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["struç",{"_index":3015,"title":{},"body":{"1015823":{},"1015833":{}}}],["strwor",{"_index":7374,"title":{},"body":{"1015833":{}}}],["strwork[10",{"_index":7372,"title":{},"body":{"1015833":{}}}],["str指令可以读取tr段寄存器的内容，但是该指令只能读取tr段寄存器的16位，也就是选择子",{"_index":9301,"title":{},"body":{"1015831":{}}}],["ststud",{"_index":1990,"title":{},"body":{"1015843":{}}}],["stu",{"_index":3111,"title":{},"body":{"1015823":{}}}],["stu1",{"_index":11771,"title":{},"body":{"1015814":{}}}],["stu1.",{"_index":11773,"title":{},"body":{"1015814":{}}}],["stu2",{"_index":11772,"title":{},"body":{"1015814":{}}}],["stu2.",{"_index":11774,"title":{},"body":{"1015814":{}}}],["stuagı",{"_index":1993,"title":{},"body":{"1015843":{}}}],["stuc",{"_index":1991,"title":{},"body":{"1015843":{}}}],["stud",{"_index":1995,"title":{},"body":{"1015840":{},"1015843":{}}}],["student(",{"_index":3350,"title":{},"body":{"1015840":{}}}],["studio\\vc98\\inclu",{"_index":8304,"title":{},"body":{"1015833":{}}}],["studio\\vc98\\include\\winnt.h头文件中看见",{"_index":6003,"title":{},"body":{"1015828":{}}}],["studio\\vc98\\include目录中找到winuser.h这个文件来查看，搜索0x0001就可以找到",{"_index":7806,"title":{},"body":{"1015833":{}}}],["studio\\vc98\\lip",{"_index":8306,"title":{},"body":{"1015833":{}}}],["stuf",{"_index":113,"title":{},"body":{"1015822":{}}}],["stuname[20",{"_index":1992,"title":{},"body":{"1015843":{}}}],["stusex",{"_index":1994,"title":{},"body":{"1015843":{}}}],["styl",{"_index":482,"title":{},"body":{"1015818":{},"1015822":{},"1015833":{}}}],["subcl",{"_index":501,"title":{},"body":{"1015822":{}}}],["submitp",{"_index":4222,"title":{},"body":{"1015820":{}}}],["subsy",{"_index":6164,"title":{},"body":{"1015828":{}}}],["sub指令",{"_index":5270,"title":{},"body":{"1015825":{}}}],["succeeded(hr",{"_index":2873,"title":{},"body":{"1015823":{}}}],["successf",{"_index":7255,"title":{},"body":{"1015833":{}}}],["suspendthr",{"_index":7422,"title":{},"body":{"1015833":{}}}],["suspendthread(hthr",{"_index":7427,"title":{},"body":{"1015833":{}}}],["suspendthread函数",{"_index":7420,"title":{},"body":{"1015833":{}}}],["suspendthread函数用于暂停（挂起）某个线程，当暂停后该线程不会占用cpu，其语法格式很简单，只需要传入一个线程句柄即可",{"_index":7421,"title":{},"body":{"1015833":{}}}],["sw_show",{"_index":7778,"title":{},"body":{"1015833":{}}}],["swapcontext分析",{"_index":11246,"title":{},"body":{"1703937":{}}}],["swapcontext这个函数是windows线程切换的核心，无论是主动切换还是系统时钟导致的线程切换，最终都会调用这个函数。在这个函数中除了切换堆栈以外，还做了很多其他的事情，了解这些细节对我们学习操作系统至关重要。这节课我们讲一下线程切换与tss的关系",{"_index":11235,"title":{},"body":{"1703937":{}}}],["swapentr",{"_index":6905,"title":{},"body":{"2949228":{}}}],["switc",{"_index":3788,"title":{},"body":{"1015818":{},"1015833":{},"1015847":{},"3440655":{},"3440657":{}}}],["switch(cgetç",{"_index":8486,"title":{},"body":{"1015833":{}}}],["switch(umsgu",{"_index":7810,"title":{},"body":{"1015833":{}}}],["switch(x",{"_index":1810,"title":{},"body":{"1015843":{}}}],["switch(琛ㄨ揪寮",{"_index":1793,"title":{},"body":{"1015843":{}}}],["switchcontext(gmthread_",{"_index":11175,"title":{},"body":{"1703937":{}}}],["switchcontext(srcgmthreadp",{"_index":11172,"title":{},"body":{"1703937":{}}}],["switch语句",{"_index":1791,"title":{},"body":{"1015843":{}}}],["switch语句与if..else语句的区别",{"_index":1805,"title":{},"body":{"1015843":{}}}],["switch语句为什么高效",{"_index":1808,"title":{},"body":{"1015843":{}}}],["switch语句也是分支语句的一种，其语法如下",{"_index":1792,"title":{},"body":{"1015843":{}}}],["switch语句只能进行等值判断（仅能支持常量表达式），而if..else可以进行区间判断（表达式、常量...都可以",{"_index":1806,"title":{},"body":{"1015843":{}}}],["switch语句的执行效率远远高于if..else，在分支条件比较多的情况下，这种趋势愈发明显",{"_index":1807,"title":{},"body":{"1015843":{}}}],["swtich(pexceptioninf",{"_index":4887,"title":{},"body":{"3440657":{}}}],["symboliclink",{"_index":5675,"title":{},"body":{"1015847":{}}}],["sysallocstring(l\"hel",{"_index":2926,"title":{},"body":{"1015823":{}}}],["sysallocstring(ç",{"_index":2937,"title":{},"body":{"1015823":{}}}],["sysallocstringlen(bstr",{"_index":2929,"title":{},"body":{"1015823":{}}}],["sysallocstringlen(ç",{"_index":2940,"title":{},"body":{"1015823":{}}}],["sysfreestring(bstr",{"_index":2932,"title":{},"body":{"1015823":{}}}],["sysfreestring(bstrp",{"_index":2934,"title":{},"body":{"1015823":{}}}],["sysstringlen(bstr",{"_index":2930,"title":{},"body":{"1015823":{}}}],["syst",{"_index":95,"title":{},"body":{"1015822":{},"1015831":{},"1015833":{}}}],["system(\"paus",{"_index":7258,"title":{},"body":{"1015833":{}}}],["systemargument1",{"_index":10846,"title":{},"body":{"2424869":{}}}],["systemargument2",{"_index":10849,"title":{},"body":{"2424869":{}}}],["systemcal",{"_index":2460,"title":{},"body":{"1015846":{}}}],["systemserv",{"_index":2543,"title":{},"body":{"1015846":{}}}],["szdllpathn",{"_index":8447,"title":{},"body":{"1015833":{}}}],["szeditbuf",{"_index":7883,"title":{},"body":{"1015833":{}}}],["szeditbuffer[0x80",{"_index":7881,"title":{},"body":{"1015833":{}}}],["szfilepath",{"_index":8633,"title":{},"body":{"1015833":{}}}],["szfilesystemnamebuf",{"_index":8063,"title":{},"body":{"1015833":{}}}],["szfilesystemnamebuffer[260",{"_index":8059,"title":{},"body":{"1015833":{}}}],["szmod",{"_index":8552,"title":{},"body":{"1015833":{}}}],["sznam",{"_index":2746,"title":{},"body":{"1015823":{},"1015833":{}}}],["szname[max_path",{"_index":2744,"title":{},"body":{"1015823":{}}}],["szoutbuf",{"_index":8007,"title":{},"body":{"1015833":{}}}],["szoutbuff[0x80",{"_index":297,"title":{},"body":{"1015822":{},"1015833":{}}}],["szoutbuffer[10",{"_index":8005,"title":{},"body":{"1015833":{}}}],["szvol",{"_index":8061,"title":{},"body":{"1015833":{}}}],["szvolumename[260",{"_index":8055,"title":{},"body":{"1015833":{}}}],["s位",{"_index":9031,"title":{},"body":{"1015831":{}}}],["s位是段描述符高位4字节的第12位，它的值表示当前描述符是属于什么段的",{"_index":9032,"title":{},"body":{"1015831":{}}}],["s位的值同样也决定了type域的值",{"_index":9036,"title":{},"body":{"1015831":{}}}],["t",{"_index":10188,"title":{},"body":{"1015818":{},"1703937":{}}}],["t(1,2,3",{"_index":3561,"title":{},"body":{"1015840":{}}}],["t.ag",{"_index":3385,"title":{},"body":{"1015840":{}}}],["t.clas",{"_index":3387,"title":{},"body":{"1015840":{}}}],["t.le",{"_index":3527,"title":{},"body":{"1015840":{}}}],["t.person::agı",{"_index":3400,"title":{},"body":{"1015840":{}}}],["t.sex",{"_index":3386,"title":{},"body":{"1015840":{}}}],["t.wor",{"_index":3528,"title":{},"body":{"1015840":{}}}],["t1",{"_index":1880,"title":{},"body":{"1015843":{}}}],["t2",{"_index":1882,"title":{},"body":{"1015843":{}}}],["t3",{"_index":1884,"title":{},"body":{"1015843":{}}}],["t3来说，断点触发后，eip位于原始地址的下一个字节位置，因此需要将eip减去1来修复它",{"_index":4828,"title":{},"body":{"3440657":{}}}],["t4",{"_index":1886,"title":{},"body":{"1015843":{}}}],["tabh",{"_index":891,"title":{},"body":{"1015822":{}}}],["tabl",{"_index":6066,"title":{},"body":{"1015828":{},"1015831":{},"1015850":{}}}],["tablerect(25,0,125,20",{"_index":893,"title":{},"body":{"1015822":{}}}],["tablerect.bot",{"_index":904,"title":{},"body":{"1015822":{}}}],["tablerect.lef",{"_index":908,"title":{},"body":{"1015822":{}}}],["tablerect.r",{"_index":909,"title":{},"body":{"1015822":{}}}],["tablerect.top",{"_index":903,"title":{},"body":{"1015822":{}}}],["table），它同样有4kb的大小，每个成员也是4字节大小，每个成员的名字叫页表项（pte，pagı",{"_index":9419,"title":{},"body":{"1015831":{}}}],["table），它有4kb的大小，每个成员大小是4字节，每个成员的名字叫页目录项（pde，pagı",{"_index":9417,"title":{},"body":{"1015831":{}}}],["table，全局描述符表）、ldt（loç",{"_index":8959,"title":{},"body":{"1015831":{}}}],["table，导入名称表）和iat（imp",{"_index":6563,"title":{},"body":{"1015828":{}}}],["table，导入地址表",{"_index":6564,"title":{},"body":{"1015828":{}}}],["table，局部描述符表",{"_index":8960,"title":{},"body":{"1015831":{}}}],["table，系统服务描述符表",{"_index":2563,"title":{},"body":{"1015846":{}}}],["table，页目录指针表），其中的成员就是pdpte（pagı",{"_index":9519,"title":{},"body":{"1015831":{}}}],["tabwidth",{"_index":890,"title":{},"body":{"1015822":{}}}],["tag_inpu",{"_index":3940,"title":{},"body":{"3440655":{}}}],["tagcreatestruç",{"_index":463,"title":{},"body":{"1015822":{}}}],["tagh",{"_index":3853,"title":{},"body":{"3440655":{}}}],["tagkl",{"_index":3808,"title":{},"body":{"3440655":{}}}],["tagmenus",{"_index":3844,"title":{},"body":{"3440655":{}}}],["tagmsg",{"_index":4025,"title":{},"body":{"1015833":{},"3440655":{}}}],["tagsbtraç",{"_index":3857,"title":{},"body":{"3440655":{}}}],["tagv",{"_index":2948,"title":{},"body":{"1015823":{}}}],["tah",{"_index":861,"title":{},"body":{"1015822":{}}}],["tas",{"_index":9311,"title":{},"body":{"1015831":{}}}],["tbeg",{"_index":10400,"title":{},"body":{"1015818":{}}}],["tbegin.tv_seç",{"_index":10409,"title":{},"body":{"1015818":{}}}],["tbegin.tv_useç",{"_index":10411,"title":{},"body":{"1015818":{}}}],["tchar",{"_index":2743,"title":{},"body":{"1015823":{},"1015833":{}}}],["tchar.h",{"_index":11448,"title":{},"body":{"1015814":{}}}],["tcoutbuf",{"_index":5744,"title":{},"body":{"1015847":{}}}],["tcp",{"_index":9765,"title":{},"body":{"1015818":{}}}],["tcp.port==2118",{"_index":9908,"title":{},"body":{"1015818":{}}}],["tcp三次握手与抓包分析",{"_index":9903,"title":{},"body":{"1015818":{}}}],["tcp和udp的比较",{"_index":9964,"title":{},"body":{"1015818":{}}}],["tcp四次握手与抓包分析",{"_index":9915,"title":{},"body":{"1015818":{}}}],["tcp客户端和服务器端编程架构",{"_index":9705,"title":{},"body":{"1015818":{}}}],["tcp帧结构",{"_index":10364,"title":{},"body":{"1015818":{}}}],["tcp帧结构与tcp包的解析",{"_index":10362,"title":{},"body":{"1015818":{}}}],["tcp帧结构如下图所示",{"_index":10365,"title":{},"body":{"1015818":{}}}],["tcp，英文全称是tran",{"_index":9707,"title":{},"body":{"1015818":{}}}],["teacher(",{"_index":3543,"title":{},"body":{"1015840":{}}}],["teacher.agı",{"_index":3396,"title":{},"body":{"1015840":{}}}],["teacher.cl",{"_index":3398,"title":{},"body":{"1015840":{}}}],["teacher:p",{"_index":3379,"title":{},"body":{"1015840":{}}}],["teacher:publ",{"_index":3526,"title":{},"body":{"1015840":{}}}],["teaç",{"_index":3377,"title":{},"body":{"1015840":{}}}],["teb",{"_index":11017,"title":{},"body":{"1703937":{}}}],["teb(thr",{"_index":8536,"title":{},"body":{"1015833":{}}}],["teb→teb.peb(0x30偏移位)→peb.kernelcallbacktable(0x2c偏移位)，其实也就是peb结构体中的成员kernelcallbaç",{"_index":4076,"title":{},"body":{"3440655":{}}}],["teb第一个成员是一个结构体，这个结构体包含了当前线程栈栈底和当前线程栈的界限；teb的020偏移是一个结构体，其包含了两个成员，一个是当前线程所在进程的pid和当前线程自己的线程",{"_index":8541,"title":{},"body":{"1015833":{}}}],["teb（thr",{"_index":11018,"title":{},"body":{"1703937":{}}}],["temp",{"_index":3630,"title":{},"body":{"1015840":{}}}],["templ",{"_index":3088,"title":{},"body":{"1015814":{},"1015823":{},"1015833":{}}}],["template<cl",{"_index":3634,"title":{},"body":{"1015840":{}}}],["ten",{"_index":10401,"title":{},"body":{"1015818":{}}}],["tend.tv_seç",{"_index":10408,"title":{},"body":{"1015818":{}}}],["tend.tv_useç",{"_index":10410,"title":{},"body":{"1015818":{}}}],["ter",{"_index":7459,"title":{},"body":{"1015833":{}}}],["terminateprocess函数",{"_index":7335,"title":{},"body":{"1015833":{}}}],["terminateprocess函数是用来终止进程的，具体的可以参考",{"_index":7345,"title":{},"body":{"1015833":{}}}],["terminateprocess鍑芥暟",{"_index":7338,"title":{},"body":{"1015833":{}}}],["terminateproç",{"_index":7339,"title":{},"body":{"1015833":{}}}],["tes",{"_index":853,"title":{},"body":{"1015822":{},"1015840":{},"1015843":{},"2949166":{}}}],["test.cp",{"_index":8444,"title":{},"body":{"1015833":{}}}],["test[",{"_index":912,"title":{},"body":{"1015822":{}}}],["testpoin",{"_index":975,"title":{},"body":{"1015822":{}}}],["testpoint.",{"_index":981,"title":{},"body":{"1015822":{}}}],["tex",{"_index":4213,"title":{},"body":{"1015820":{},"1015833":{},"1015850":{}}}],["text(\"",{"_index":7735,"title":{},"body":{"1015833":{}}}],["text(\"but",{"_index":7859,"title":{},"body":{"1015833":{}}}],["text(\"c:/windows/system32/cmd.ex",{"_index":7246,"title":{},"body":{"1015833":{}}}],["text(\"c:\\\\test1",{"_index":8090,"title":{},"body":{"1015833":{}}}],["text(\"haç",{"_index":7878,"title":{},"body":{"1015833":{}}}],["text(\"hel",{"_index":154,"title":{},"body":{"1015822":{},"1015833":{}}}],["text(\"titl",{"_index":7185,"title":{},"body":{"1015833":{}}}],["text(\"涓浗",{"_index":7165,"title":{},"body":{"1015833":{}}}],["text(\"璁剧疆",{"_index":7861,"title":{},"body":{"1015833":{}}}],["text(\"绐楀彛",{"_index":7772,"title":{},"body":{"1015833":{}}}],["text(\"鑾峰彇",{"_index":7868,"title":{},"body":{"1015833":{}}}],["textout函数输出文本",{"_index":848,"title":{},"body":{"1015822":{}}}],["theap",{"_index":141,"title":{},"body":{"1015822":{}}}],["theclass::_messageentr",{"_index":385,"title":{},"body":{"1015822":{}}}],["theclass::_messageentries[0",{"_index":384,"title":{},"body":{"1015822":{}}}],["theclass::getmessagemap",{"_index":381,"title":{},"body":{"1015822":{}}}],["theclass::messagemap",{"_index":382,"title":{},"body":{"1015822":{}}}],["thisruntimecl",{"_index":302,"title":{},"body":{"1015822":{}}}],["this指针",{"_index":3319,"title":{},"body":{"1015840":{}}}],["this指针不占用结构体的宽度",{"_index":3341,"title":{},"body":{"1015840":{}}}],["this指针不能做",{"_index":3339,"title":{},"body":{"1015840":{}}}],["this指针是编译器默认传入的，通常会使用ecx进行参数的传递",{"_index":3337,"title":{},"body":{"1015840":{}}}],["this这样一个操作的，你就需要自己写",{"_index":588,"title":{},"body":{"1015822":{}}}],["thre",{"_index":2213,"title":{},"body":{"1015817":{},"1015833":{},"1015843":{},"2424869":{},"2424889":{},"3440655":{}}}],["threadinf",{"_index":3914,"title":{},"body":{"3440655":{}}}],["threadlistentr",{"_index":11037,"title":{},"body":{"1703937":{}}}],["threadproc(lpv",{"_index":4485,"title":{},"body":{"1015818":{},"1015833":{},"2424889":{},"2949166":{}}}],["threadprocb(lpv",{"_index":7579,"title":{},"body":{"1015833":{}}}],["threadprocp",{"_index":7586,"title":{},"body":{"1015833":{}}}],["threadproç",{"_index":4488,"title":{},"body":{"1015818":{},"1015833":{},"2949166":{}}}],["threadsproç",{"_index":11045,"title":{},"body":{"1703937":{}}}],["through，页直写），该值为1时不仅写入缓存中，也会写入到内存中；为0时只会写入缓存",{"_index":9626,"title":{},"body":{"1015831":{}}}],["ti",{"_index":3831,"title":{},"body":{"1015818":{},"1015831":{},"1015833":{},"1015850":{},"3440655":{}}}],["tickcoun",{"_index":11157,"title":{},"body":{"1703937":{}}}],["tif_flagı",{"_index":3819,"title":{},"body":{"3440655":{}}}],["tim",{"_index":10029,"title":{},"body":{"1015818":{},"2424889":{}}}],["time_",{"_index":10221,"title":{},"body":{"1015818":{}}}],["timedatestamp",{"_index":6102,"title":{},"body":{"1015828":{}}}],["timel",{"_index":3832,"title":{},"body":{"3440655":{}}}],["timestamp",{"_index":8794,"title":{},"body":{"1015850":{}}}],["timestr",{"_index":10228,"title":{},"body":{"1015818":{}}}],["timestr[16",{"_index":10220,"title":{},"body":{"1015818":{}}}],["timev",{"_index":10028,"title":{},"body":{"1015818":{}}}],["timeval缁撴瀯浣擄紝鏈�澶х瓑寰呮椂闂达紝褰搒ocket娌℃湁鍝嶅簲鏃讹紝瑕佺瓑寰呯殑鏃堕棿",{"_index":10030,"title":{},"body":{"1015818":{}}}],["tiny",{"_index":8772,"title":{},"body":{"1015850":{}}}],["tinytex",{"_index":8807,"title":{},"body":{"1015850":{}}}],["titl",{"_index":7156,"title":{},"body":{"1015833":{}}}],["tlb",{"_index":6255,"title":{},"body":{"1015828":{},"1015831":{}}}],["tlb在x86体系的cpu里的实际应用最早是从intel的486cpu开始的，在x86体系的cpu里，一般都设有如下4组tlp",{"_index":9557,"title":{},"body":{"1015831":{}}}],["tlhelp32.h",{"_index":8506,"title":{},"body":{"1015833":{}}}],["tm",{"_index":10218,"title":{},"body":{"1015818":{}}}],["tmpaddr",{"_index":10138,"title":{},"body":{"1015818":{}}}],["tmparay",{"_index":11342,"title":{},"body":{"1015814":{}}}],["tmparray+2",{"_index":11363,"title":{},"body":{"1015814":{}}}],["tmparray+5",{"_index":11344,"title":{},"body":{"1015814":{}}}],["tmpdat",{"_index":4401,"title":{},"body":{"2949166":{}}}],["tmpdevsp",{"_index":10128,"title":{},"body":{"1015818":{}}}],["tmplen",{"_index":10328,"title":{},"body":{"1015818":{}}}],["tmplen[0",{"_index":10330,"title":{},"body":{"1015818":{}}}],["tmplen[1",{"_index":10332,"title":{},"body":{"1015818":{}}}],["tmpstr",{"_index":10298,"title":{},"body":{"1015818":{}}}],["tmpstr+(index+",{"_index":10302,"title":{},"body":{"1015818":{}}}],["tol",{"_index":6116,"title":{},"body":{"1015818":{},"1015828":{}}}],["tools。环境安装流程大致就是如此，这里不再进行图文赘述",{"_index":8967,"title":{},"body":{"1015831":{}}}],["tool和p",{"_index":10452,"title":{},"body":{"1015818":{}}}],["tool生成的填写进去即可",{"_index":10514,"title":{},"body":{"1015818":{}}}],["top",{"_index":10480,"title":{},"body":{"1015814":{},"1015818":{}}}],["top，返回栈顶元素的引用，但不移除",{"_index":11537,"title":{},"body":{"1015814":{}}}],["top，返回队列头部（最大的元素）的引用，但不移除",{"_index":11582,"title":{},"body":{"1015814":{}}}],["trac",{"_index":3888,"title":{},"body":{"3440655":{}}}],["transform(v.begi",{"_index":11669,"title":{},"body":{"1015814":{}}}],["transformfunc(vector<",{"_index":11668,"title":{},"body":{"1015814":{}}}],["transform锛屽厓绱犲彉鎹紝鍏跺疄涔熸槸涓�绉嶅鍒讹紝鍙笉杩囪繖閲岀殑澶嶅埗鏄缁忚繃涓�涓嚱鏁板幓澶勭悊瑕佸鍒剁殑鍖洪棿鐨勬瘡涓厓绱",{"_index":11667,"title":{},"body":{"1015814":{}}}],["transform，元素变换，也是复制，按照某种方案复制",{"_index":11651,"title":{},"body":{"1015814":{}}}],["translatemessage(&msgi",{"_index":3984,"title":{},"body":{"1015833":{},"3440655":{}}}],["transparent鏄娇鐢ㄩ�忔槑鐨勮緭鍑猴紝涔熷氨鏄枃瀛楃殑鑳屾櫙鏄笉鏀瑰彉鐨勩",{"_index":811,"title":{},"body":{"1015822":{}}}],["trapfr",{"_index":4276,"title":{},"body":{"1703937":{},"2949166":{}}}],["treectrl控件",{"_index":1218,"title":{},"body":{"1015822":{}}}],["trlen(strbuf",{"_index":7137,"title":{},"body":{"1015833":{}}}],["tru",{"_index":151,"title":{},"body":{"1015818":{},"1015822":{},"1015833":{},"1933378":{},"2424889":{},"3440655":{},"3440657":{}}}],["true琛ㄧず鐜板湪鍙互寮�濮嬭鍙栭敭鐩橀紶鏍囪緭鍏",{"_index":3951,"title":{},"body":{"3440655":{}}}],["tryl",{"_index":4436,"title":{},"body":{"2949166":{}}}],["tr段寄存器",{"_index":9298,"title":{},"body":{"1015831":{}}}],["ts.tv_sec",{"_index":10224,"title":{},"body":{"1015818":{}}}],["tsoc",{"_index":10092,"title":{},"body":{"1015818":{}}}],["tss[0x68",{"_index":9310,"title":{},"body":{"1015831":{}}}],["tss作用",{"_index":9289,"title":{},"body":{"1015831":{}}}],["tss本质上就是一块内存，这块内存的大小是104字节，如下图所示就是它的结构，我们可以看见tss里包含了所有寄存器的值",{"_index":9288,"title":{},"body":{"1015831":{}}}],["tss段描述符",{"_index":9296,"title":{},"body":{"1015831":{}}}],["tss结构",{"_index":9287,"title":{},"body":{"1015831":{}}}],["tvs_disabledragdrop",{"_index":1229,"title":{},"body":{"1015822":{}}}],["tvs_editlabel",{"_index":1227,"title":{},"body":{"1015822":{}}}],["tvs_hasbut",{"_index":1225,"title":{},"body":{"1015822":{}}}],["tvs_hasl",{"_index":1221,"title":{},"body":{"1015822":{}}}],["tvs_linestr",{"_index":1223,"title":{},"body":{"1015822":{}}}],["tvs_showselalway",{"_index":1231,"title":{},"body":{"1015822":{}}}],["two",{"_index":2209,"title":{},"body":{"1015817":{},"1015843":{}}}],["txt",{"_index":1299,"title":{},"body":{"1015822":{}}}],["typ",{"_index":195,"title":{},"body":{"1015818":{},"1015820":{},"1015822":{},"1015828":{},"1015831":{},"1015833":{},"1015847":{},"2424869":{},"2424889":{}}}],["type=\"but",{"_index":3225,"title":{},"body":{"1015823":{}}}],["type=\"text/javascrip",{"_index":3217,"title":{},"body":{"1015823":{}}}],["type[",{"_index":10305,"title":{},"body":{"1015818":{}}}],["type[0",{"_index":10308,"title":{},"body":{"1015818":{}}}],["type[1",{"_index":10309,"title":{},"body":{"1015818":{}}}],["type[2",{"_index":10304,"title":{},"body":{"1015818":{}}}],["typedef",{"_index":2683,"title":{},"body":{"1015818":{},"1015823":{},"1015828":{},"1015833":{},"1015847":{},"1703937":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["typeid操作符",{"_index":207,"title":{},"body":{"1015822":{}}}],["type」中有解释每个字母的含义",{"_index":11834,"title":{},"body":{"1015817":{}}}],["type域",{"_index":9035,"title":{},"body":{"1015831":{}}}],["type域中的c位=0",{"_index":9130,"title":{},"body":{"1015831":{}}}],["u/s位",{"_index":9442,"title":{},"body":{"1015831":{}}}],["u/s位表示物理页的访问权限，为1表示普通用户可以访问，为0则表示特权用户可以访问",{"_index":9443,"title":{},"body":{"1015831":{}}}],["u1",{"_index":6575,"title":{},"body":{"1015828":{},"2949228":{}}}],["u2",{"_index":6892,"title":{},"body":{"2949228":{}}}],["u3",{"_index":6894,"title":{},"body":{"2949228":{}}}],["u4",{"_index":6898,"title":{},"body":{"2949228":{}}}],["u_",{"_index":10041,"title":{},"body":{"1015818":{}}}],["u_ch",{"_index":9756,"title":{},"body":{"1015818":{}}}],["u_char*)&resl",{"_index":10329,"title":{},"body":{"1015818":{}}}],["u_longu",{"_index":9761,"title":{},"body":{"1015818":{}}}],["u_sh",{"_index":9746,"title":{},"body":{"1015818":{}}}],["uch",{"_index":5517,"title":{},"body":{"1015847":{},"1703937":{},"2424869":{},"2424889":{}}}],["udatainlength",{"_index":5782,"title":{},"body":{"1015847":{}}}],["udataoutlength",{"_index":5784,"title":{},"body":{"1015847":{}}}],["udp",{"_index":9970,"title":{},"body":{"1015818":{}}}],["udp客户端和服务器端编程架构",{"_index":9930,"title":{},"body":{"1015818":{}}}],["udp是us",{"_index":9932,"title":{},"body":{"1015818":{}}}],["uexitç",{"_index":7340,"title":{},"body":{"1015833":{}}}],["ui",{"_index":4209,"title":{},"body":{"1015820":{}}}],["ui(new",{"_index":4218,"title":{},"body":{"1015820":{}}}],["ui::mywidgi",{"_index":4219,"title":{},"body":{"1015820":{}}}],["uin",{"_index":245,"title":{},"body":{"1015822":{},"1015823":{},"1015833":{},"1015847":{},"3440655":{}}}],["uint",{"_index":2996,"title":{},"body":{"1015823":{}}}],["uint2p",{"_index":10580,"title":{},"body":{"2424889":{}}}],["uint4p",{"_index":10832,"title":{},"body":{"1703937":{},"2424869":{}}}],["uint_ptr",{"_index":4883,"title":{},"body":{"3440657":{}}}],["uiocontrolç",{"_index":5779,"title":{},"body":{"1015847":{}}}],["uival",{"_index":2991,"title":{},"body":{"1015823":{}}}],["ui设计",{"_index":4195,"title":{},"body":{"1015820":{}}}],["ul",{"_index":2992,"title":{},"body":{"1015823":{}}}],["ul_reason_for_cal",{"_index":8439,"title":{},"body":{"1015833":{}}}],["ull",{"_index":2994,"title":{},"body":{"1015823":{}}}],["ulong)myntopenproç",{"_index":5933,"title":{},"body":{"1015847":{}}}],["ulong*)(0xc00000",{"_index":5875,"title":{},"body":{"1015847":{}}}],["ulong*)(0xc03000",{"_index":5873,"title":{},"body":{"1015847":{}}}],["ulong*)(pushretç",{"_index":5932,"title":{},"body":{"1015847":{}}}],["ulong64*)(0xc00000",{"_index":5870,"title":{},"body":{"1015847":{}}}],["ulong64*)(0xc06000",{"_index":5868,"title":{},"body":{"1015847":{}}}],["ulong_ptr",{"_index":3833,"title":{},"body":{"2949166":{},"2949228":{},"3440655":{}}}],["ulonglongu",{"_index":2993,"title":{},"body":{"1015823":{}}}],["ulongu",{"_index":2602,"title":{},"body":{"1015823":{},"1015847":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["umsg",{"_index":4041,"title":{},"body":{"1015833":{},"3440655":{}}}],["un",{"_index":2949,"title":{},"body":{"1015818":{},"1015823":{},"1015828":{},"2949228":{},"3440657":{}}}],["undef",{"_index":2386,"title":{},"body":{"1015843":{}}}],["unf",{"_index":11625,"title":{},"body":{"1015814":{}}}],["unhandledexceptionfilter函数的执行流程如下",{"_index":4498,"title":{},"body":{"2949166":{}}}],["unicode_str",{"_index":5572,"title":{},"body":{"1015847":{}}}],["unicode_string字符串",{"_index":5577,"title":{},"body":{"1015847":{}}}],["unicode_string字符串的定义如下",{"_index":5568,"title":{},"body":{"1015847":{}}}],["unicode存储的实现方式",{"_index":7078,"title":{},"body":{"1015833":{}}}],["unicode编码",{"_index":7072,"title":{},"body":{"1015833":{}}}],["unicode编码的范围是：0x0",{"_index":7075,"title":{},"body":{"1015833":{}}}],["unicode编码这种表现形式实际上就是宽字符，所以在提起宽字符的时候我们就应该想到这种方式",{"_index":7129,"title":{},"body":{"1015833":{}}}],["unicode编码（utf",{"_index":7125,"title":{},"body":{"1015833":{}}}],["unique][",{"_index":2887,"title":{},"body":{"1015823":{}}}],["uniqueproç",{"_index":10970,"title":{},"body":{"1703937":{}}}],["unique锛氬垹闄ゆ墍鏈夊拰鍓嶄竴涓厓绱犵浉鍚岀殑鍏冪礌",{"_index":11401,"title":{},"body":{"1015814":{}}}],["unix_socket涓簄ull鏃讹紝琛ㄦ槑涓嶄娇鐢╯ocket鎴栫閬撴満鍒",{"_index":8882,"title":{},"body":{"1015850":{}}}],["unix_soç",{"_index":8881,"title":{},"body":{"1015850":{}}}],["unload_dll_debug_ev",{"_index":4662,"title":{},"body":{"3440657":{}}}],["unload_dll_debug_inf",{"_index":4693,"title":{},"body":{"3440657":{}}}],["unloaddl",{"_index":4694,"title":{},"body":{"3440657":{}}}],["unmapviewoffile(g_lpbuf",{"_index":7978,"title":{},"body":{"1015833":{}}}],["unmapviewoffile(lpaddr",{"_index":8252,"title":{},"body":{"1015833":{}}}],["uns",{"_index":1548,"title":{},"body":{"1015818":{},"1015823":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{}}}],["unus",{"_index":6300,"title":{},"body":{"1015828":{}}}],["up",{"_index":8851,"title":{},"body":{"1015818":{},"1015850":{}}}],["updatedata函数的参数值为布尔类型，也就是非true即false，为什么这里是false呢，这是因为这个值为false则表示修改编辑框的内容，而值为true则表示将编辑框的内容给到变量",{"_index":1047,"title":{},"body":{"1015822":{}}}],["updatewindow",{"_index":148,"title":{},"body":{"1015822":{}}}],["ur",{"_index":5772,"title":{},"body":{"1015847":{}}}],["us",{"_index":86,"title":{},"body":{"1015814":{},"1015818":{},"1015822":{},"1015823":{},"1015840":{},"1015843":{},"3440655":{}}}],["us/openspecs/windows_protocols/",{"_index":4248,"title":{},"body":{"2949166":{}}}],["user",{"_index":8874,"title":{},"body":{"1015818":{},"1015850":{}}}],["user32.dl",{"_index":2413,"title":{},"body":{"1015846":{}}}],["user32.dll和gdi32.dll的区别在哪呢？前者是你想使用windows已经画好的界面就用它，我们称之为gui编程；后者是你想自己画一个界面，例如你要画一朵花，那么就使用后者，因为这涉及到绘图相关的内容，我们称之为gdi编程",{"_index":7647,"title":{},"body":{"1015833":{}}}],["user32.dll：windows用户界面相关的应用程序接口，例如创建窗口、发送信息等",{"_index":7145,"title":{},"body":{"1015833":{}}}],["userapcp",{"_index":10785,"title":{},"body":{"2424869":{}}}],["usert",{"_index":10952,"title":{},"body":{"1703937":{}}}],["ush",{"_index":2914,"title":{},"body":{"1015823":{},"1015847":{},"2949228":{},"3440655":{}}}],["ush（压入）和pop（释放",{"_index":5337,"title":{},"body":{"1015825":{}}}],["utf",{"_index":7079,"title":{},"body":{"1015833":{}}}],["utyp",{"_index":7157,"title":{},"body":{"1015833":{}}}],["uwr",{"_index":5771,"title":{},"body":{"1015847":{}}}],["u：用于表示内存属性",{"_index":6705,"title":{},"body":{"2949228":{}}}],["v",{"_index":3405,"title":{},"body":{"1015814":{},"1015840":{}}}],["v.en",{"_index":11624,"title":{},"body":{"1015814":{}}}],["v1",{"_index":11334,"title":{},"body":{"1015814":{}}}],["v1.beg",{"_index":11765,"title":{},"body":{"1015814":{}}}],["v1.begin()+5",{"_index":11375,"title":{},"body":{"1015814":{}}}],["v1.erase(v1.begin()+3",{"_index":11372,"title":{},"body":{"1015814":{}}}],["v1.insert(v1.begi",{"_index":11356,"title":{},"body":{"1015814":{}}}],["v1.insert(v1.begin()+3",{"_index":11359,"title":{},"body":{"1015814":{}}}],["v1.pop_fro",{"_index":11391,"title":{},"body":{"1015814":{}}}],["v1.push_back(",{"_index":11351,"title":{},"body":{"1015814":{}}}],["v1.push_back(member(\"name1",{"_index":11762,"title":{},"body":{"1015814":{}}}],["v1.push_back(member(\"name2",{"_index":11763,"title":{},"body":{"1015814":{}}}],["v1.push_baç",{"_index":11368,"title":{},"body":{"1015814":{}}}],["v1.push_front(123",{"_index":11388,"title":{},"body":{"1015814":{}}}],["v2(10",{"_index":11336,"title":{},"body":{"1015814":{}}}],["v2(tmparay",{"_index":11642,"title":{},"body":{"1015814":{}}}],["v2.beg",{"_index":11644,"title":{},"body":{"1015814":{}}}],["v2.en",{"_index":11645,"title":{},"body":{"1015814":{}}}],["v3(10",{"_index":11338,"title":{},"body":{"1015814":{}}}],["v4(v3",{"_index":11340,"title":{},"body":{"1015814":{}}}],["v5(tmparray+2",{"_index":11343,"title":{},"body":{"1015814":{}}}],["vadflagı",{"_index":6719,"title":{},"body":{"2949228":{}}}],["vadr",{"_index":10993,"title":{},"body":{"1703937":{}}}],["vadroot对应的类型实际上就是_mmvad结构体，也就表示该结构体为搜索二叉树结点的数据类型，我们可以通过该数据类型对这个节点所对应的线性地址区域有个整体上的认识",{"_index":6698,"title":{},"body":{"2949228":{}}}],["valu",{"_index":432,"title":{},"body":{"1015814":{},"1015822":{},"1015828":{}}}],["value=\"op",{"_index":3226,"title":{},"body":{"1015823":{}}}],["values(鍊�1,鍊�2",{"_index":8847,"title":{},"body":{"1015850":{}}}],["values(鍊�1,鍊�2,鍊�3",{"_index":8849,"title":{},"body":{"1015850":{}}}],["var",{"_index":2917,"title":{},"body":{"1015823":{}}}],["var.l",{"_index":3062,"title":{},"body":{"1015823":{}}}],["var.v",{"_index":3060,"title":{},"body":{"1015823":{}}}],["varc",{"_index":8802,"title":{},"body":{"1015850":{}}}],["variant_bol",{"_index":2915,"title":{},"body":{"1015823":{}}}],["variantargı",{"_index":3074,"title":{},"body":{"1015823":{}}}],["variantchangetyp",{"_index":3072,"title":{},"body":{"1015823":{}}}],["variantchangetype(&v",{"_index":3084,"title":{},"body":{"1015823":{}}}],["variantclear(&v",{"_index":3064,"title":{},"body":{"1015823":{}}}],["variantinit(&v",{"_index":3059,"title":{},"body":{"1015823":{}}}],["varp",{"_index":8805,"title":{},"body":{"1015850":{}}}],["vartyp",{"_index":2951,"title":{},"body":{"1015823":{}}}],["vc6创建mfc项目",{"_index":12,"title":{},"body":{"1015822":{}}}],["vc6创建项目",{"_index":8317,"title":{},"body":{"1015833":{}}}],["vc6安装目录",{"_index":8299,"title":{},"body":{"1015833":{}}}],["vc6新建工程，选择win32",{"_index":7702,"title":{},"body":{"1015833":{}}}],["vc6的快捷键",{"_index":1412,"title":{},"body":{"1015843":{}}}],["vc6连接mysql",{"_index":8855,"title":{},"body":{"1015850":{}}}],["vect",{"_index":11328,"title":{},"body":{"1015814":{}}}],["vectexcephandl",{"_index":4373,"title":{},"body":{"2949166":{}}}],["vectexcephandler(pexception_poin",{"_index":4356,"title":{},"body":{"2949166":{}}}],["vector<",{"_index":11333,"title":{},"body":{"1015814":{}}}],["vector<int>:",{"_index":11622,"title":{},"body":{"1015814":{}}}],["vector<int>::const_",{"_index":11711,"title":{},"body":{"1015814":{}}}],["vector<member>:",{"_index":11764,"title":{},"body":{"1015814":{}}}],["vector<memp",{"_index":11761,"title":{},"body":{"1015814":{}}}],["vectoredhandl",{"_index":4313,"title":{},"body":{"2949166":{}}}],["vectorerhandl",{"_index":4331,"title":{},"body":{"2949166":{}}}],["vector容器",{"_index":11324,"title":{},"body":{"1015814":{}}}],["vector支持随机存取，它有大小（size）和容量（capacity）两个属性，大小（size）就是实际元素的个数，容量（capacity）表示能容纳元素最大的数量，如果插入元素时，元素个数超过容量大小，则需要重新配置内部存储器",{"_index":11329,"title":{},"body":{"1015814":{}}}],["vector（向量）是一个封装了动态大小数组的顺序容器；跟任意其它类型容器一样，它能够存放各种类型的对象；vector是用动态数组来实现的",{"_index":11326,"title":{},"body":{"1015814":{}}}],["veh",{"_index":4308,"title":{},"body":{"2949166":{}}}],["veh_registr",{"_index":4339,"title":{},"body":{"2949166":{}}}],["ver",{"_index":10314,"title":{},"body":{"1015818":{}}}],["verifierallocation:1",{"_index":6925,"title":{},"body":{"2949228":{}}}],["versionandheaderl",{"_index":10312,"title":{},"body":{"1015818":{}}}],["vertiç",{"_index":7760,"title":{},"body":{"1015833":{}}}],["vi",{"_index":11708,"title":{},"body":{"1015814":{}}}],["virtual",{"_index":122,"title":{},"body":{"1015822":{},"1015823":{},"1015828":{},"1015833":{},"1015840":{},"1703937":{}}}],["virtualaddr",{"_index":6203,"title":{},"body":{"1015828":{}}}],["virtualalloc(",{"_index":6753,"title":{},"body":{"1015833":{},"2949228":{}}}],["virtualallocex(hproç",{"_index":8453,"title":{},"body":{"1015833":{}}}],["virtualalloc函数一共有4个参数，其每个参数的含义和作用如下",{"_index":6742,"title":{},"body":{"2949228":{}}}],["virtualalloç",{"_index":6738,"title":{},"body":{"1015833":{},"2949228":{}}}],["virtualfr",{"_index":7934,"title":{},"body":{"1015833":{}}}],["virtualfree(p",{"_index":7940,"title":{},"body":{"1015833":{}}}],["virtualprotectex",{"_index":4853,"title":{},"body":{"3440657":{}}}],["virtualprotectex(hdebugeeproç",{"_index":4878,"title":{},"body":{"3440657":{}}}],["virtualprotectex函数的语法格式如下，其中需要关注的是flnewprotect参数，该参数取决定了修改的物理页的新属性",{"_index":4852,"title":{},"body":{"3440657":{}}}],["visual",{"_index":132,"title":{},"body":{"1015822":{},"1015828":{},"1015833":{}}}],["vmworkingsetlist对应的结构体_mmwsl还有一个wsle成员，用来描述一个有效页面",{"_index":7007,"title":{},"body":{"2949228":{}}}],["vo",{"_index":293,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015846":{},"1015847":{},"1015850":{},"1703937":{},"2424869":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["void(*func)(v",{"_index":11111,"title":{},"body":{"1703937":{}}}],["void**)&g_gdp",{"_index":2799,"title":{},"body":{"1015823":{}}}],["void**)&pdbfact",{"_index":2792,"title":{},"body":{"1015823":{}}}],["vol",{"_index":8038,"title":{},"body":{"1015833":{}}}],["vt",{"_index":2952,"title":{},"body":{"1015814":{},"1015823":{}}}],["vt.fir",{"_index":11508,"title":{},"body":{"1015814":{}}}],["vt.seco",{"_index":11509,"title":{},"body":{"1015814":{}}}],["vt_aray",{"_index":3029,"title":{},"body":{"1015823":{}}}],["vt_bol",{"_index":3022,"title":{},"body":{"1015823":{}}}],["vt_bstr",{"_index":3026,"title":{},"body":{"1015823":{}}}],["vt_byref",{"_index":3045,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_",{"_index":3039,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_aray",{"_index":3043,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_bol",{"_index":3036,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_bstr",{"_index":3040,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_c",{"_index":3038,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_deç",{"_index":3052,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_dispatç",{"_index":3042,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_err",{"_index":3037,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_i1",{"_index":3053,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_i2",{"_index":3031,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_i4",{"_index":3032,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_i8",{"_index":3033,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_r4",{"_index":3034,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_r8",{"_index":3035,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_ui1",{"_index":3030,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_ui2",{"_index":3054,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_ui4",{"_index":3055,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_ui8",{"_index":3056,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_uin",{"_index":3057,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_unknow",{"_index":3041,"title":{},"body":{"1015823":{}}}],["vt_byref|vt_v",{"_index":3044,"title":{},"body":{"1015823":{}}}],["vt_ci",{"_index":3024,"title":{},"body":{"1015823":{}}}],["vt_dat",{"_index":3025,"title":{},"body":{"1015823":{}}}],["vt_dispatç",{"_index":3028,"title":{},"body":{"1015823":{}}}],["vt_err",{"_index":3023,"title":{},"body":{"1015823":{}}}],["vt_i1",{"_index":3046,"title":{},"body":{"1015823":{}}}],["vt_i2",{"_index":3019,"title":{},"body":{"1015823":{}}}],["vt_i4",{"_index":3017,"title":{},"body":{"1015823":{}}}],["vt_i8",{"_index":3016,"title":{},"body":{"1015823":{}}}],["vt_in",{"_index":3050,"title":{},"body":{"1015823":{}}}],["vt_r4",{"_index":3020,"title":{},"body":{"1015823":{}}}],["vt_r8",{"_index":3021,"title":{},"body":{"1015823":{}}}],["vt_ui1",{"_index":3018,"title":{},"body":{"1015823":{}}}],["vt_ui2",{"_index":3047,"title":{},"body":{"1015823":{}}}],["vt_ui4",{"_index":3048,"title":{},"body":{"1015823":{}}}],["vt_ui8",{"_index":3049,"title":{},"body":{"1015823":{}}}],["vt_uin",{"_index":3051,"title":{},"body":{"1015823":{}}}],["vt_unknow",{"_index":3027,"title":{},"body":{"1015823":{}}}],["vt，其有对应的值",{"_index":3014,"title":{},"body":{"1015823":{}}}],["vt，可见variant被设置得多么巧妙、合理",{"_index":2946,"title":{},"body":{"1015823":{}}}],["v：字、双字或四字",{"_index":12007,"title":{},"body":{"1015817":{}}}],["w32callbacklisth",{"_index":3908,"title":{},"body":{"3440655":{}}}],["w32thre",{"_index":3803,"title":{},"body":{"3440655":{}}}],["wai",{"_index":7448,"title":{},"body":{"1015833":{}}}],["waitblockl",{"_index":10617,"title":{},"body":{"2424889":{}}}],["waitbloç",{"_index":10619,"title":{},"body":{"1703937":{},"2424889":{}}}],["waitffotsingleobject函数分析",{"_index":10598,"title":{},"body":{"2424889":{}}}],["waitfordebugevent(&debugev",{"_index":4646,"title":{},"body":{"3440657":{}}}],["waitfordebugeventsuç",{"_index":4645,"title":{},"body":{"3440657":{}}}],["waitformultipleobjects(2",{"_index":7454,"title":{},"body":{"1015833":{},"2424889":{}}}],["waitformultipleobjects函数",{"_index":7439,"title":{},"body":{"1015833":{}}}],["waitformultipleobjects函数与waitforsingleobject函数作用是一样的，只不过它可以等待多个内核对象的状态发生变更，其语法格式如下",{"_index":7440,"title":{},"body":{"1015833":{}}}],["waitformultipleobjeç",{"_index":7441,"title":{},"body":{"1015833":{}}}],["waitforsingleobject(e_ev",{"_index":7577,"title":{},"body":{"1015833":{}}}],["waitforsingleobject(ev",{"_index":7630,"title":{},"body":{"1015833":{}}}],["waitforsingleobject(eventp",{"_index":7634,"title":{},"body":{"1015833":{}}}],["waitforsingleobject(hevent[0",{"_index":10562,"title":{},"body":{"2424889":{}}}],["waitforsingleobject(hmutex",{"_index":7613,"title":{},"body":{"1015833":{}}}],["waitforsingleobject(hthr",{"_index":7438,"title":{},"body":{"1015833":{}}}],["waitforsingleobject(ç",{"_index":7541,"title":{},"body":{"1015833":{}}}],["waitforsingleobject函数",{"_index":7430,"title":{},"body":{"1015833":{}}}],["waitforsingleobject函数格式如下，对于我们来说它只是一个3环的api封装，通过系统调用的方式进入0环然后去调用ntwaitforsingleobject函数",{"_index":10600,"title":{},"body":{"2424889":{}}}],["waitforsingleobject函数用于等待一个内核对象状态发生变更，那也就是执行结束之后，才会继续向下执行，其语法格式如下",{"_index":7431,"title":{},"body":{"1015833":{}}}],["waitforsingleobjeç",{"_index":7432,"title":{},"body":{"1015833":{},"2424889":{}}}],["waitforusercomma",{"_index":4849,"title":{},"body":{"3440657":{}}}],["waitkey",{"_index":10579,"title":{},"body":{"2424889":{}}}],["waitlistentr",{"_index":10569,"title":{},"body":{"2424889":{}}}],["waitlisth",{"_index":10652,"title":{},"body":{"2424889":{}}}],["waittyp",{"_index":10583,"title":{},"body":{"2424889":{}}}],["wak",{"_index":3859,"title":{},"body":{"3440655":{}}}],["wchar",{"_index":3877,"title":{},"body":{"1015833":{},"3440655":{}}}],["wchar_",{"_index":7134,"title":{},"body":{"1015833":{}}}],["wchinjeç",{"_index":3878,"title":{},"body":{"3440655":{}}}],["wcslen(strbuff1",{"_index":7139,"title":{},"body":{"1015833":{}}}],["wdk",{"_index":5447,"title":{},"body":{"1015847":{}}}],["wdk文档里只包含了导出的函数信息，对于未导出的函数是查阅不到相关资料的（我们也可以将其称之为未文档化函数）。如果我们想使用未导出的函数，需要定义一个函数指针，并且为函数指针提供正确的函数地址就可以使用了。未导出函数的地址可以通过特征码搜索、解析内核的pdb文件来找到",{"_index":5512,"title":{},"body":{"1015847":{}}}],["wdk的写法",{"_index":5515,"title":{},"body":{"1015847":{}}}],["wdm",{"_index":5457,"title":{},"body":{"1015847":{}}}],["wep",{"_index":2760,"title":{},"body":{"1015823":{}}}],["wflag",{"_index":3080,"title":{},"body":{"1015823":{}}}],["while(1",{"_index":1938,"title":{},"body":{"1015833":{},"1015843":{}}}],["while(1==2",{"_index":1873,"title":{},"body":{"1015843":{}}}],["while(i<",{"_index":1851,"title":{},"body":{"1015843":{}}}],["while(i<=",{"_index":1857,"title":{},"body":{"1015843":{}}}],["while(i<=x",{"_index":1841,"title":{},"body":{"1015843":{}}}],["while(j<=",{"_index":1861,"title":{},"body":{"1015843":{}}}],["while(tru",{"_index":10628,"title":{},"body":{"2424889":{}}}],["while(琛ㄨ揪寮",{"_index":1848,"title":{},"body":{"1015843":{}}}],["while(表达式",{"_index":1871,"title":{},"body":{"1015843":{}}}],["while(鍏朵粬闃熷垪",{"_index":4007,"title":{},"body":{"3440655":{}}}],["while语句就是当表达式为非0时执行循环体内的语句，使用不当则会造成死循环，例如",{"_index":1850,"title":{},"body":{"1015843":{}}}],["wi",{"_index":7,"title":{},"body":{"1015822":{}}}],["width",{"_index":3757,"title":{},"body":{"1015833":{},"3440655":{}}}],["win",{"_index":536,"title":{},"body":{"1015822":{},"1015833":{}}}],["win32",{"_index":607,"title":{"1015833":{}},"body":{"1015822":{},"1015826":{},"1015827":{},"1015833":{}}}],["win32_file_attribute_",{"_index":8153,"title":{},"body":{"1015833":{}}}],["win32_find_",{"_index":8207,"title":{},"body":{"1015833":{}}}],["win32_lean_and_",{"_index":110,"title":{},"body":{"1015822":{}}}],["win32k.",{"_index":7646,"title":{},"body":{"1015833":{}}}],["win32versionval",{"_index":6157,"title":{},"body":{"1015828":{}}}],["win32不是用来画界面的，如果你以后要在windows写好程序，是必须要学win32的；摆正学习态度",{"_index":7060,"title":{},"body":{"1015833":{}}}],["win32课程介绍",{"_index":7058,"title":{},"body":{"1015833":{}}}],["winap",{"_index":4484,"title":{},"body":{"1015818":{},"1015833":{},"2424889":{},"2949166":{},"2949228":{}}}],["wind32ktabl",{"_index":5816,"title":{},"body":{"1015847":{}}}],["windbg提供了一个更快捷的指令：!v",{"_index":6710,"title":{},"body":{"2949228":{}}}],["window",{"_index":114,"title":{},"body":{"1015820":{},"1015822":{},"1015833":{},"3440655":{}}}],["windowcl",{"_index":3759,"title":{},"body":{"3440655":{}}}],["windowclass.",{"_index":3776,"title":{},"body":{"3440655":{}}}],["windowclass.color.blu",{"_index":3783,"title":{},"body":{"3440655":{}}}],["windowclass.color.gr",{"_index":3781,"title":{},"body":{"3440655":{}}}],["windowclass.color.r",{"_index":3779,"title":{},"body":{"3440655":{}}}],["windowclass.h",{"_index":3778,"title":{},"body":{"3440655":{}}}],["windowclass.width",{"_index":3777,"title":{},"body":{"3440655":{}}}],["windowclass.x",{"_index":3775,"title":{},"body":{"3440655":{}}}],["windowlisth",{"_index":3907,"title":{},"body":{"3440655":{}}}],["windowproc(hw",{"_index":4040,"title":{},"body":{"1015833":{},"3440655":{}}}],["windowproç",{"_index":7746,"title":{},"body":{"1015833":{}}}],["windows.cp",{"_index":7731,"title":{},"body":{"1015833":{}}}],["windows.h",{"_index":1832,"title":{},"body":{"1015831":{},"1015833":{},"1015843":{},"1015847":{},"1933378":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["windows下的程序运用坐标空间和转换来对图形输出进行缩放、旋转、平移、斜切和反射；坐标空间是一个平面的空间，通过使用两个互相垂直并且长度相等的轴来定位二维对象",{"_index":653,"title":{},"body":{"1015822":{}}}],["windows下的线程切换是比较复杂的，为了更好的学习我们需要读一份代码，这份代码是用来进行模拟windows线程切换的",{"_index":11099,"title":{},"body":{"1703937":{}}}],["windows传统控件",{"_index":1072,"title":{},"body":{"1015822":{}}}],["windows传统控件如下表，其与窗口之间的关系是父子关系，当窗口（父亲）移动，控件（儿子）也会跟随",{"_index":1073,"title":{},"body":{"1015822":{}}}],["windows平台下的可执行文件的格式，我们称之为pe（p",{"_index":5972,"title":{},"body":{"1015828":{}}}],["windows提供了几个预定义的窗口类以方便我们的使用，我们一般叫它们为子窗口控件，简称控件",{"_index":7830,"title":{},"body":{"1015833":{}}}],["windows没有使用调用门，但是使用了中断门，当我们有了调用门的基础之后，中断门的学习就很轻松了",{"_index":9253,"title":{},"body":{"1015831":{}}}],["windows状态码及其对应含义，我们可以在在线文档中获取：https://learn.microsoft.com/",{"_index":4247,"title":{},"body":{"2949166":{}}}],["windows用户界面相关api，如创建窗口、发送消息",{"_index":2414,"title":{},"body":{"1015846":{}}}],["windows的内存管理是很复杂的，我们没必要精确到每一行代码的学习，所以我们以线性地址的管理作为突破口，重点学习线性地址是如何管理的，物理地址、物理页是如何管理的，以及了解我们平时所听到的缺页解决了什么问题，堆、栈内存申请等内容。这样，我们才能对windows的内存管理有一个清晰的认识",{"_index":6687,"title":{},"body":{"2949228":{}}}],["windows的键盘消息和处理",{"_index":992,"title":{},"body":{"1015822":{}}}],["windows通过给拥有输入焦点的窗口发送wm_keydown和wm_keyup消息来报靠按键被按下还是释放事件；这些消息被称为按键消息。除了alt和f10以外的所有键都产生按下和抬起消息，alt和f10是系统键，对windows有特殊意义",{"_index":991,"title":{},"body":{"1015822":{}}}],["windows预定义的窗口类可以在",{"_index":7885,"title":{},"body":{"1015833":{}}}],["window有20多种不同的消息用来报告与鼠标有关的输入事件，这些消息分为窗口客户区消息和非客户区消息，通常我们只需要关心客户区消息",{"_index":924,"title":{},"body":{"1015822":{}}}],["winioctl.h",{"_index":5732,"title":{},"body":{"1015847":{}}}],["winmain(h",{"_index":7723,"title":{},"body":{"1015833":{}}}],["winmain函数",{"_index":7706,"title":{},"body":{"1015833":{}}}],["winmain函数作为win32窗口程序的入口函数，我们需要了解一下其函数的参数，语法格式如下",{"_index":7707,"title":{},"body":{"1015833":{}}}],["winoleautap",{"_index":3071,"title":{},"body":{"1015823":{}}}],["winpcap(window",{"_index":10100,"title":{},"body":{"1015818":{}}}],["winpcap介绍",{"_index":10099,"title":{},"body":{"1015818":{}}}],["winpcap常用的功能如下所示",{"_index":10104,"title":{},"body":{"1015818":{}}}],["winpcap库并不是windows系统自带的，而是由外部开发者去维护的，我们可以从这个地址去下载：https://www.winpcap.org/archive/4.0.1",{"_index":10110,"title":{},"body":{"1015818":{}}}],["winsock2.h",{"_index":8858,"title":{},"body":{"1015818":{},"1015850":{}}}],["wire_marsh",{"_index":2947,"title":{},"body":{"1015823":{}}}],["wireshark抓包分析",{"_index":10379,"title":{},"body":{"1015818":{}}}],["wireshark抓包解析",{"_index":10262,"title":{},"body":{"1015818":{}}}],["wireshark直接抓网卡的流量即可，用过滤语法来过滤一下：(ip.dst==172.16.176.5",{"_index":9907,"title":{},"body":{"1015818":{}}}],["wm_char",{"_index":7825,"title":{},"body":{"1015833":{}}}],["wm_char宏对应的窗口函数参数作用如下",{"_index":7824,"title":{},"body":{"1015833":{}}}],["wm_char消息",{"_index":1017,"title":{},"body":{"1015822":{}}}],["wm_comma",{"_index":7871,"title":{},"body":{"1015833":{}}}],["wm_cre",{"_index":7844,"title":{},"body":{"1015833":{}}}],["wm_destroy",{"_index":7812,"title":{},"body":{"1015833":{}}}],["wm_keydow",{"_index":7816,"title":{},"body":{"1015833":{}}}],["wm_lbuttondblcl",{"_index":933,"title":{},"body":{"1015822":{}}}],["wm_lbuttondow",{"_index":387,"title":{},"body":{"1015822":{}}}],["wm_lbuttonup",{"_index":931,"title":{},"body":{"1015822":{}}}],["wm_mbuttondblcl",{"_index":939,"title":{},"body":{"1015822":{}}}],["wm_mbuttondow",{"_index":935,"title":{},"body":{"1015822":{}}}],["wm_mbuttonup",{"_index":937,"title":{},"body":{"1015822":{}}}],["wm_mousemov",{"_index":943,"title":{},"body":{"1015822":{}}}],["wm_nchittest消息",{"_index":961,"title":{},"body":{"1015822":{}}}],["wm_notif",{"_index":409,"title":{},"body":{"1015822":{}}}],["wm_qu",{"_index":3835,"title":{},"body":{"3440655":{}}}],["wm_rbuttondow",{"_index":941,"title":{},"body":{"1015822":{}}}],["wmsgfilt",{"_index":3991,"title":{},"body":{"1015833":{},"3440655":{}}}],["wmsgfiltermax",{"_index":3993,"title":{},"body":{"1015833":{},"3440655":{}}}],["wndclas",{"_index":1075,"title":{},"body":{"1015822":{},"1015833":{}}}],["wndclass.h",{"_index":7743,"title":{},"body":{"1015833":{}}}],["wndclass.hbrbackgroun",{"_index":7738,"title":{},"body":{"1015833":{}}}],["wndclass.lpfnwndproç",{"_index":7745,"title":{},"body":{"1015833":{}}}],["wndclass.lpszclass",{"_index":7741,"title":{},"body":{"1015833":{}}}],["wndproc",{"_index":503,"title":{},"body":{"1015822":{}}}],["wndproc)setwindowlong(hw",{"_index":506,"title":{},"body":{"1015822":{}}}],["wor",{"_index":1715,"title":{},"body":{"1015818":{},"1015823":{},"1015825":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"3440655":{},"3440657":{}}}],["word*)&buff[4",{"_index":9217,"title":{},"body":{"1015831":{}}}],["worl",{"_index":1685,"title":{},"body":{"1015820":{},"1015833":{},"1015843":{}}}],["world!\\",{"_index":1661,"title":{},"body":{"1015843":{}}}],["wpar",{"_index":499,"title":{},"body":{"1015822":{},"1015833":{},"3440655":{}}}],["wparamhkcur",{"_index":3856,"title":{},"body":{"3440655":{}}}],["wpcap.lip",{"_index":10117,"title":{},"body":{"1015818":{}}}],["wpdpack.zip，如果你是基于vc6去使用的话，选择>=4.0.1的版本",{"_index":10111,"title":{},"body":{"1015818":{}}}],["wp：对于intel",{"_index":9608,"title":{},"body":{"1015831":{}}}],["wreserved1",{"_index":2953,"title":{},"body":{"1015823":{}}}],["wreserved2",{"_index":2954,"title":{},"body":{"1015823":{}}}],["wreserved3",{"_index":2955,"title":{},"body":{"1015823":{}}}],["wri",{"_index":2002,"title":{},"body":{"1015831":{},"1015833":{},"1015843":{},"2949228":{}}}],["writeabl",{"_index":6325,"title":{},"body":{"1015828":{}}}],["writef",{"_index":10024,"title":{},"body":{"1015818":{}}}],["writefds.fd_coun",{"_index":10075,"title":{},"body":{"1015818":{}}}],["writefil",{"_index":5693,"title":{},"body":{"1015833":{},"1015847":{}}}],["writefile(hfil",{"_index":6854,"title":{},"body":{"2949228":{}}}],["writeinprogr",{"_index":6948,"title":{},"body":{"2949228":{}}}],["writeprocessmemory(hdebugeeproç",{"_index":4820,"title":{},"body":{"3440657":{}}}],["writeprocessmemory(hproç",{"_index":8456,"title":{},"body":{"1015833":{}}}],["ws2_32.lib",{"_index":9726,"title":{},"body":{"1015818":{}}}],["ws_chil",{"_index":7848,"title":{},"body":{"1015833":{}}}],["ws_overlappedwindow",{"_index":61,"title":{},"body":{"1015822":{},"1015833":{}}}],["ws_visibl",{"_index":7849,"title":{},"body":{"1015833":{}}}],["ws_vscrol",{"_index":164,"title":{},"body":{"1015822":{},"1015833":{}}}],["wsacleanup",{"_index":9861,"title":{},"body":{"1015818":{}}}],["wsad",{"_index":9842,"title":{},"body":{"1015818":{}}}],["wsastartup",{"_index":9832,"title":{},"body":{"1015818":{}}}],["wsastartup(wsv",{"_index":9843,"title":{},"body":{"1015818":{}}}],["wschem",{"_index":272,"title":{},"body":{"1015822":{}}}],["wshowwindow",{"_index":7278,"title":{},"body":{"1015833":{}}}],["wsindex",{"_index":6901,"title":{},"body":{"2949228":{}}}],["wsver",{"_index":9840,"title":{},"body":{"1015818":{}}}],["wversionreq",{"_index":9833,"title":{},"body":{"1015818":{}}}],["x",{"_index":479,"title":{},"body":{"1015814":{},"1015818":{},"1015822":{},"1015825":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["x+i",{"_index":1361,"title":{},"body":{"1015843":{}}}],["x+y;x",{"_index":1706,"title":{},"body":{"1015843":{}}}],["x,i",{"_index":1703,"title":{},"body":{"1015843":{}}}],["x,in",{"_index":2307,"title":{},"body":{"1015843":{}}}],["x.y}f",{"_index":1676,"title":{},"body":{"1015843":{}}}],["x86",{"_index":4093,"title":{},"body":{"1015820":{}}}],["x86绯荤粺涓嬶紝璇ュ�间负nul",{"_index":4274,"title":{},"body":{"2949166":{}}}],["x<i",{"_index":3646,"title":{},"body":{"1015840":{}}}],["x=10",{"_index":723,"title":{},"body":{"1015822":{}}}],["x\\n",{"_index":4747,"title":{},"body":{"1015847":{},"3440657":{}}}],["x\\n\",x,x,x",{"_index":1663,"title":{},"body":{"1015843":{}}}],["xchg",{"_index":11896,"title":{},"body":{"1015817":{}}}],["xchg是用来做内容交换的，0x90对应着xchg",{"_index":11904,"title":{},"body":{"1015817":{}}}],["xchg：内容交换",{"_index":11897,"title":{},"body":{"1015817":{}}}],["xd标志位",{"_index":9542,"title":{},"body":{"1015831":{}}}],["xd标志位在amd中称之为nx，即",{"_index":9543,"title":{},"body":{"1015831":{}}}],["xor",{"_index":4375,"title":{},"body":{"1015825":{},"1015847":{},"2949166":{}}}],["xor指令",{"_index":5279,"title":{},"body":{"1015825":{}}}],["xp",{"_index":5489,"title":{},"body":{"1015831":{},"1015847":{},"2949228":{}}}],["xp下的段选择子是0x3b，也就表示它的段描述符是在gdt表的第7个，即0x38偏移位，再结合如下的代码，我们可以根据段选择子的结构体，发现它实际上就是将目标线程的teb地址写入到fs段描述符的b",{"_index":11255,"title":{},"body":{"1703937":{}}}],["xp中并没有使用到它",{"_index":8933,"title":{},"body":{"1015831":{}}}],["xp中找到虚拟内存：系统属性",{"_index":7017,"title":{},"body":{"2949228":{}}}],["xp中没有使用ldt表，所以默认情况下ti位都是0。），index位可以知道具体要查的表的哪一个段描述符",{"_index":9009,"title":{},"body":{"1015831":{}}}],["xp的内核了",{"_index":8983,"title":{},"body":{"1015831":{}}}],["xp系统中，系统服务表有两张，下图中绿色、黄色表即体现。它们的结构都是一样的，只是存储的函数、参数不一样，前者存储的是常用的内核函数（ntoskrl.exe），后者存储的是与图像显示用户界面相关的函数（win32k.",{"_index":2547,"title":{},"body":{"1015846":{}}}],["xp系统使用了两张系统服务表，目前只能看到一张系统服务表，第二张表却无法看见",{"_index":2566,"title":{},"body":{"1015846":{}}}],["xp系统的虚拟机；接着，在物理机器上安装windbg，你可以通过微软官方地址进行下载安装：https://docs.microsoft.com/zh",{"_index":8964,"title":{},"body":{"1015831":{}}}],["xp虚拟机中修改c盘下的boot.ini文件（取消文件隐藏即可看见），添加如下内容即可",{"_index":8971,"title":{},"body":{"1015831":{}}}],["xp虚拟机环境中的段寄存器相关的属性，标红部分即表示这些属性对应的值是不固定的",{"_index":8923,"title":{},"body":{"1015831":{}}}],["xp虚拟机，添加串行端口并按如下图进行配置",{"_index":8969,"title":{},"body":{"1015831":{}}}],["xx",{"_index":12037,"title":{},"body":{"1015817":{}}}],["xxxx.h",{"_index":8296,"title":{},"body":{"1015833":{}}}],["xxxx.lib",{"_index":8298,"title":{},"body":{"1015833":{}}}],["xxx部分",{"_index":6785,"title":{},"body":{"2949228":{}}}],["xyz",{"_index":3237,"title":{},"body":{"1015823":{},"1015833":{}}}],["x向右则是+，y向下则是",{"_index":636,"title":{},"body":{"1015822":{}}}],["x和y轴的方向(右，下",{"_index":633,"title":{},"body":{"1015822":{}}}],["x标志打印总长度",{"_index":1678,"title":{},"body":{"1015843":{}}}],["x鍧愭爣",{"_index":480,"title":{},"body":{"1015822":{}}}],["y0",{"_index":4996,"title":{},"body":{"1015825":{}}}],["y3",{"_index":4991,"title":{},"body":{"1015825":{}}}],["y4",{"_index":4992,"title":{},"body":{"1015825":{}}}],["y5",{"_index":4993,"title":{},"body":{"1015825":{}}}],["y9",{"_index":4995,"title":{},"body":{"1015825":{}}}],["y;x<y;x=y;x=",{"_index":1707,"title":{},"body":{"1015843":{}}}],["y=10",{"_index":2199,"title":{},"body":{"1015843":{}}}],["y=10寮�濮",{"_index":724,"title":{},"body":{"1015822":{}}}],["yang",{"_index":8765,"title":{},"body":{"1015850":{}}}],["yb",{"_index":4990,"title":{},"body":{"1015825":{}}}],["yd",{"_index":4994,"title":{},"body":{"1015825":{}}}],["year",{"_index":8783,"title":{},"body":{"1015850":{}}}],["yx",{"_index":4997,"title":{},"body":{"1015825":{}}}],["yy",{"_index":4989,"title":{},"body":{"1015825":{}}}],["yyyi",{"_index":8784,"title":{},"body":{"1015850":{}}}],["y坐标",{"_index":755,"title":{},"body":{"1015822":{}}}],["y坐标的",{"_index":731,"title":{},"body":{"1015822":{}}}],["y坐标，只需要4组就可以了",{"_index":744,"title":{},"body":{"1015822":{}}}],["y坐标，后2个参数为右下角的x",{"_index":754,"title":{},"body":{"1015822":{}}}],["y坐标，如下图就是其绘制正方形的流程",{"_index":740,"title":{},"body":{"1015822":{}}}],["y鍧愭爣锛屽鏋滅獥鍙ｆ槸涓�涓瓙绐楀彛锛屽潗鏍囨槸鐩稿浜庣埗绐楀彛鐨勶紝鍚﹀垯锛屽潗鏍囨槸鐩稿浜庡睆骞曞師鐐圭殑銆",{"_index":478,"title":{},"body":{"1015822":{}}}],["z",{"_index":1487,"title":{},"body":{"1015843":{}}}],["z)函数（releasemutant的内核函数",{"_index":10755,"title":{},"body":{"2424889":{}}}],["za",{"_index":6508,"title":{},"body":{"1015828":{}}}],["zeroedpagel",{"_index":6983,"title":{},"body":{"2949228":{}}}],["zeromemory(&",{"_index":7250,"title":{},"body":{"1015833":{}}}],["zeromemory(&p",{"_index":7251,"title":{},"body":{"1015833":{}}}],["zeromemory(pszbuf",{"_index":8186,"title":{},"body":{"1015833":{}}}],["zeromemory(stackpagı",{"_index":11132,"title":{},"body":{"1703937":{}}}],["zf",{"_index":11963,"title":{},"body":{"1015817":{}}}],["zwcontinue函数的意义就是返回内核，如果还有用户apc，重复上面的执行过程；如果没有需要执行的用户apc，会将_context结构体赋值给trap_frame结构体，这样就像从来没有修改过一样，zwcontinue后面的代码不会执行，线程从哪里进0环仍然会从哪里回去",{"_index":10935,"title":{},"body":{"2424869":{}}}],["z排序的，同样这里的地址是rva，需要转换为foa；通过numberofnames知道有3个是以函数名字导出的函数，所以从该地址开始依次寻找3个4字节的地址即可",{"_index":6509,"title":{},"body":{"1015828":{}}}],["一个cpu只有一个tss，但是线程是有很多个的，每个线程在0环对应的堆栈是不一样的，那么到底是什么样的方式能让一个tss来保存所有线程的esp0呢？这里的细节在线程切换中，因此我们需要分析swapcontext函数",{"_index":11245,"title":{},"body":{"1703937":{}}}],["一个可执行程序是由多个pe文件组成，这些pe文件依靠倒入表、导出表进行联系，导出表存储着pe文件提供给其他人使用的函数列表，导入表则存储着pe文件所需要用到的pe文件列表。从pe文件的角度去看，任何pe文件都可以有导入、导出表，从一般情况下来看，exe文件不会提供导出表，也就是不会提供给他人使用的函数，但这并不代表不可以提供",{"_index":6451,"title":{},"body":{"1015828":{}}}],["一个线程可以等待一个或多个对象，线程与等待对象建立联系主要通过等待块，我们可以做个实验来看一下",{"_index":10558,"title":{},"body":{"2424889":{}}}],["一个线程等待一个对象",{"_index":10559,"title":{},"body":{"2424889":{}}}],["一个线程等待多个对象",{"_index":10586,"title":{},"body":{"2424889":{}}}],["一个线程等待多个对象的情况，我们需要将代码进行修改，如下代码所示，我们添加两个可等待对象，然后将waitforsingleobject替换为waitformultipleobjects，这样就可以使得一个线程等待多个对象",{"_index":10587,"title":{},"body":{"2424889":{}}}],["一个进程可以包含多个线程（一个进程至少要包含一个线程，进程是空间上的概念，线程是时间上的概念",{"_index":7392,"title":{},"body":{"1015833":{}}}],["一个进程都有一个页目录表，在该表里记录着线性地址所引用的物理页，所以修改该成员就可以控制整个进程",{"_index":10948,"title":{},"body":{"1703937":{}}}],["一个逻辑单位",{"_index":632,"title":{},"body":{"1015822":{}}}],["一共16位，这意味着最多能有16位有效数字",{"_index":1641,"title":{},"body":{"1015843":{}}}],["一共7位，这意味着最多能有7位有效数字",{"_index":1638,"title":{},"body":{"1015843":{}}}],["一共有三种方式，最后一种的表示我们就称之为多维数组，我们之前所学的数组我们可以称之为一维数组；为什么会使用到多维数组",{"_index":1953,"title":{},"body":{"1015843":{}}}],["一共有三种赋值方式，在实际应用中我们更偏向于第三种方式",{"_index":2215,"title":{},"body":{"1015843":{}}}],["一共有如下几个步骤",{"_index":10150,"title":{},"body":{"1015818":{}}}],["一张图来总结包含了调试器的异常处理流程",{"_index":4790,"title":{},"body":{"3440657":{}}}],["一旦发生缺页异常，cpu就会执行idt表中0xe号中断处理程序，也就是由操作系统来接管",{"_index":9594,"title":{},"body":{"1015831":{}}}],["一段时间内下载数据的大小除以持续时长就是网速：spe",{"_index":10396,"title":{},"body":{"1015818":{}}}],["一种是使用可视化的方法，一种是使用代码去编写",{"_index":4200,"title":{},"body":{"1015820":{}}}],["一种是通过sleep函数实现的，一种是通过让当前的cpu”空转“实现的，但这两种等待方式都有局限性",{"_index":10543,"title":{},"body":{"2424889":{}}}],["一致代码段描述符",{"_index":9144,"title":{},"body":{"1015831":{}}}],["一致代码段：我们又称之为共享段，特权级高的程序不允许访问特权级低的数据，ring0不允许访问ring3的数据，特权级低的程序可以访问到特权级高得数据，但特权级不会发生改变，ring3还是ring3",{"_index":9119,"title":{},"body":{"1015831":{}}}],["一般情况下自带库默认使用",{"_index":2303,"title":{},"body":{"1015843":{}}}],["一般我们在函数指令集合的最后写入ret指令，以此来实现函数执行完后返回原来要执行的地址继续执行",{"_index":5368,"title":{},"body":{"1015825":{}}}],["一般来说我们选择第三个即可",{"_index":2815,"title":{},"body":{"1015823":{}}}],["三个关键的宏",{"_index":357,"title":{},"body":{"1015822":{}}}],["三大断点",{"_index":4791,"title":{},"body":{"3440657":{}}}],["三种不同风格的表达式示例代码如下，我们可以看见当简单的异常过滤可以直接写常量，复杂一些的使用三元表达式，再复杂一些的可以使用函数的方式，并且我们可以使用getexceptioncode、getexceptioninformation函数来获取异常状态码、异常相关信息",{"_index":4421,"title":{},"body":{"2949166":{}}}],["上一章中了解到新增节需要在节表之后至少有40个字节的空白区给我们去新增，但并不是所有的程序都可以满足这个条件，如下图所示的程序在节表之后的数据是编译器填充的，这些数据我们并不能覆盖",{"_index":6417,"title":{},"body":{"1015828":{}}}],["上一章中我们了解了使用线程锁来解决多个线程共用一个全局变量的线程安全问题；那么假设a进程的b线程和c进程的d线程，同时使用的是内核级的临界资源（内核对象：线程、文件、进程...）该怎么让这个访问是安全的？使用线程锁的方式明显不行，因为线程锁仅能控制同进程中的多线程",{"_index":7527,"title":{},"body":{"1015833":{}}}],["上一章了解了多态，那么我们来了解一下多态在c++中是如何实现的",{"_index":3581,"title":{},"body":{"1015840":{}}}],["上一章学习了如何通过拷贝对象函数的方式来实现对象拷贝，这里就来学习使用重载赋值运算符实现对象拷贝",{"_index":3690,"title":{},"body":{"1015840":{}}}],["上一章我们学习了无符号数和有符号数，但实际上我们只了解到无符号数存储的编码规则，对有符号数不了解，这一章来聊一下原码、反码、补码",{"_index":5106,"title":{},"body":{"1015825":{}}}],["上一章的学习中，我们知道等待事件对象的线程在进入临界区之前会通过调用waitforsingleobject或者waitformultipleobjects来判断当前的事件对象是否有信号（即signalstate的值大于0），只有当事件对象有信号时，才可以进入临界区",{"_index":10687,"title":{},"body":{"2424889":{}}}],["上一章节中我们知道当想插入的代码过多的时候，空白区不够用的情况下，我们可以使用扩大节的方法扩大最后一个节，然后在里面插入自己的代码；这样的方法虽然有效，但还是有一些弊端，比如最后一个节的属性会被修改，插入的代码会与原节的数据混合在一块。所以，我们可以新增节，在新增的节里添加自己的数据",{"_index":6406,"title":{},"body":{"1015828":{}}}],["上一章节中我们简单了解了80x86的10",{"_index":9414,"title":{},"body":{"1015831":{}}}],["上文中我们举了两军协同作战，他们之间有个作战协议，而一旦作战成功，夺下对方城池那就需要另外一个瓜分战果的协议，所以每个不同的场景都会有对应的协议，这是有这么多协议的原因",{"_index":9637,"title":{},"body":{"1015818":{}}}],["上文中我们了解到硬编码的结构，在结构图中第一部分为前缀指令，前缀指令下面有一个描述是“最多有四个前缀，每个前缀只能有1个字节”（并且途中表示前缀指令是可选的，所以前缀指令最少占0字节，最多占4字节），这也就表示这前缀指令是有分组的，也就是四组，在前缀指令中每组只能出现一个，分组如下所示",{"_index":11792,"title":{},"body":{"1015817":{}}}],["上文中我们知道段寄存器的结构中是有几个成员（属性）的，我们可见的部分是16位的selecter，其余的都无法看见，那么这些属性都是真实存在的还是一个虚无缥缈的概念呢，我们可以使用代码来证实这些属性的存在",{"_index":8921,"title":{},"body":{"1015831":{}}}],["上文中，我们了解了pe文件的整体结构，我们可以看见其中有很多结构体",{"_index":5993,"title":{},"body":{"1015828":{}}}],["上述操作执行完成之后，3环的栈分布大致如下",{"_index":10930,"title":{},"body":{"2424869":{}}}],["上面的内存复制是在栈中，而我们想在堆中去拷贝可以这样写",{"_index":3670,"title":{},"body":{"1015840":{}}}],["上面这段代码是定义一个结构体，然后将该结构体传入plus函数（将结构体成员相加返回），那么问题来了，结构体它是否跟数组一样，传递的是指针呢？来看一下反汇编代码",{"_index":3300,"title":{},"body":{"1015840":{}}}],["下一个条件断点，当nmsg",{"_index":516,"title":{},"body":{"1015822":{}}}],["下完内存断点后，当被调试进程试图访问或写入被修改属性后的物理页时，就会触发页异常。然后就进行了异常的处理流程",{"_index":4865,"title":{},"body":{"3440657":{}}}],["下完条件断点之后我们可以重新运行程序",{"_index":519,"title":{},"body":{"1015822":{}}}],["下完硬件断点后，当cpu检测调试寄存器（dr0",{"_index":4928,"title":{},"body":{"3440657":{}}}],["下断点：f9",{"_index":1413,"title":{},"body":{"1015843":{}}}],["下载下来之后是一个压缩包，主要的就是lib和include这两个文件夹",{"_index":10112,"title":{},"body":{"1015818":{}}}],["下载与安装",{"_index":8743,"title":{},"body":{"1015850":{}}}],["下载与配置",{"_index":10109,"title":{},"body":{"1015818":{}}}],["下面为不同表中，任务门进行任务切换的过程",{"_index":9365,"title":{},"body":{"1015831":{}}}],["下面是具体的步骤",{"_index":7050,"title":{},"body":{"2949228":{}}}],["不可屏蔽中断线",{"_index":9570,"title":{},"body":{"1015831":{}}}],["不可屏蔽中断线，称为nmi（nonm",{"_index":9568,"title":{},"body":{"1015831":{}}}],["不同容器上支持的迭代器功能强弱有所不同，容器的迭代器的功能强弱决定了该容器是否支持stl中的某种算法，例如：stl通用的排序算法需要通过随机迭代器来访问容器中的元素，那么list容器不支持随机存储就不能用这个函数，只能用自带的排序函数排序",{"_index":11714,"title":{},"body":{"1015814":{}}}],["不同点：无论应用程序消息队列是否有消息，peekmessage函数都立即返回，程序得以继续执行后面的语句（无消息则执行其它指令，有消息时一般要将消息派发出去，再执行其它指令）；getmessage函数只有在消息对立中有消息时返回，队列中无消息就会一直等，直至下一个消息出现时才返回。在等的这段时间，应用程序不能执行任何指令",{"_index":575,"title":{},"body":{"1015822":{}}}],["不同状态物理页描述结构体_mmpfn对应的成员意义如下图所示",{"_index":7003,"title":{},"body":{"2949228":{}}}],["不同迭代器所能进行的操作如下",{"_index":11728,"title":{},"body":{"1015814":{}}}],["不处理异常，由上一层调用函数处理",{"_index":5542,"title":{},"body":{"1015847":{}}}],["不支持迭代器",{"_index":11748,"title":{},"body":{"1015814":{}}}],["不是所有的进程行为都会产生调试事件的，调试事件也分种类，如下所示一共有8种，但有一个已经废弃，因此实际上只有7种调试事件",{"_index":4573,"title":{},"body":{"3440657":{}}}],["不满足激活条件时，判断是否是第一次执行",{"_index":10657,"title":{},"body":{"2424889":{}}}],["不确定局部变量的内存地址，所以其也就只能作用于当前函数内部，其他函数不能使用",{"_index":1480,"title":{},"body":{"1015843":{}}}],["不禁止其它进程读写访问文件，但如果文件已经被其它进程以兼容模式打开，则创建文件失败",{"_index":1275,"title":{},"body":{"1015822":{}}}],["不等于",{"_index":1750,"title":{},"body":{"1015843":{}}}],["不管有没有内核调试器，或内核调试器函数返回结果为0",{"_index":4803,"title":{},"body":{"3440657":{}}}],["不能使用c语言的关键字（例如：void、return之类",{"_index":1358,"title":{},"body":{"1015843":{}}}],["不能使用常量字符串",{"_index":8608,"title":{},"body":{"1015833":{}}}],["不能使用系统调用",{"_index":8609,"title":{},"body":{"1015833":{}}}],["不能写返回类型（无返回值",{"_index":3358,"title":{},"body":{"1015840":{}}}],["不能嵌套调用其他函数",{"_index":8610,"title":{},"body":{"1015833":{}}}],["不能有全局变量",{"_index":8607,"title":{},"body":{"1015833":{}}}],["不要忘记在接口列表中也将接口添加上去",{"_index":3142,"title":{},"body":{"1015823":{}}}],["不论左移还是右移。一律把指数",{"_index":1628,"title":{},"body":{"1015843":{}}}],["与",{"_index":1773,"title":{},"body":{"1015843":{}}}],["与apc相关的成员",{"_index":11027,"title":{},"body":{"1703937":{}}}],["与gdt一样，我们也可以在windbg中查看idt表的基址和长度",{"_index":9257,"title":{},"body":{"1015831":{}}}],["与上一章一样，我们将宏转换为其背后的代码来了解其本质",{"_index":332,"title":{},"body":{"1015822":{}}}],["与其他结构体一样，pe节也有属性，这就是成员characteristics，其数据宽度是16位（4字节），其每一数据位对应的属性如下所示",{"_index":6216,"title":{},"body":{"1015828":{}}}],["与应用程序开发一样，我们想要去了解某个内核api的信息，也需要查阅文档，老版本的wdk安装之后会自带文档信息，较新一点的wdk不会自带，我们需要去官网查看：https://docs.microsoft.com/zh",{"_index":5509,"title":{},"body":{"1015847":{}}}],["与服务器端不同的是，客户端需要连接服务器端，同样也是通过sockaddr_in结构体去指定服务器端的地址和端口，使用到了一个新的函数connect，该函数语法如下",{"_index":9887,"title":{},"body":{"1015818":{}}}],["与服务端意义，这里有一个新函数sendto，其语法如下",{"_index":9960,"title":{},"body":{"1015818":{}}}],["与线程切换有关的成员",{"_index":11016,"title":{},"body":{"1703937":{}}}],["与线程相关的结构体就是_ethread，在windows内核中每一个进程的每一个线程都有着一个_ethread结构体，它存储着线程相关的信息，我们可以使用如下命令在windbg中查看该结构体",{"_index":2505,"title":{},"body":{"1015846":{}}}],["与调用门使用长返回retf不同，中断门使用中断返回指令：iret/",{"_index":9269,"title":{},"body":{"1015831":{}}}],["与调试相关的信息",{"_index":10988,"title":{},"body":{"1703937":{}}}],["与运算：两个位都为1，结果才为1",{"_index":5122,"title":{},"body":{"1015825":{}}}],["与进程结构体一样，线程结构体的第一个成员（即0x0偏移位）也是一个结构体_kthread，我们可以使用windbg来查看一下",{"_index":11010,"title":{},"body":{"1703937":{}}}],["与静态链接库的创建方式一样，我们创建一个新的类mydll，这样就会自动创建mydll.h和mydll.cp",{"_index":8318,"title":{},"body":{"1015833":{}}}],["世界坐标系空间：在应用程序调用setworldtransform函数之前，不会出现世界坐标空间到页面空间的转换",{"_index":655,"title":{},"body":{"1015822":{}}}],["两者进行异或得出：000",{"_index":5133,"title":{},"body":{"1015825":{}}}],["个人见解：说实话，这样的效果有些差强人意，还需要我们手动去调整，才能在矩形中对齐，所以如果你想在矩形中居中对齐建议使用drawtext函数",{"_index":855,"title":{},"body":{"1015822":{}}}],["个指针，分别指向它的前一个元素和后一个元素。其中第一个元素的前向指针总为",{"_index":11407,"title":{},"body":{"1015814":{}}}],["中国",{"_index":7124,"title":{},"body":{"1015833":{}}}],["中文字符",{"_index":1688,"title":{},"body":{"1015843":{}}}],["中断",{"_index":9563,"title":{},"body":{"1015831":{}}}],["中断与异常",{"_index":9562,"title":{},"body":{"1015831":{}}}],["中断与异常的区别",{"_index":9585,"title":{},"body":{"1015831":{}}}],["中断描述符表i",{"_index":11070,"title":{},"body":{"1703937":{}}}],["中断来自于外部设备，是中断源（键盘、鼠标等等）发起的，cpu是被动触发的",{"_index":9586,"title":{},"body":{"1015831":{}}}],["中断请求的目的是希望cpu暂时停止执行当前正在执行的程序，转去执行中断请求所对应的中断处理程序（中断处理程序在哪由idt表决定",{"_index":9566,"title":{},"body":{"1015831":{}}}],["中断通常是由cpu外部的输入或输出设备（硬件）所触发的，供外部设备通知cpu有事情需要处理，因此又称之为中断请求（irq",{"_index":9564,"title":{},"body":{"1015831":{}}}],["中断门",{"_index":9252,"title":{},"body":{"1015831":{}}}],["中断门也有一张表，我们称之为idt（中断描述符表），与gdt一样，idt也是由一系列描述符组成的，每个描述符占8字节，需要注意的是idt表中的第一个元素不是null（gdt是",{"_index":9256,"title":{},"body":{"1015831":{}}}],["中断门会修改eflag寄存器中的if位的值",{"_index":9278,"title":{},"body":{"1015831":{}}}],["中断门描述符。通过中断门描述符我们知道了cs（低32位的第16至31位，也就是段选择子）和eip寄存器（高32位的第16至31位加上低32位的第0至15位，也就是段内偏移），ss和esp寄存器也就是基于tss获取的",{"_index":2475,"title":{},"body":{"1015846":{}}}],["中断门有两个场景：1.系统调用：大家在开发应用程序时都会使用到windows提供的api，这些api在执行的过程中需要从3环一步一步进入到0环，这一过程就是系统调用，在这个过程中也用到了中断门（一些比较老的api使用的是中断门，但是新api中使用的都是快速调用）；2.调试：大家使用od调试程序时候会使用断点，断点本质上就是在你选中的这一行中写入一个字节0xcc，也就是",{"_index":9254,"title":{},"body":{"1015831":{}}}],["中级篇",{"_index":6619,"title":{"1015832":{}},"body":{"1015827":{}}}],["中级篇笔记参考（致敬，感谢！）：https://cata1oc.github.",{"_index":8736,"title":{},"body":{"1015832":{}}}],["中（unicode编码）：0x1234",{"_index":7084,"title":{},"body":{"1015833":{}}}],["中（unicode编码）：0x4",{"_index":7103,"title":{},"body":{"1015833":{}}}],["中，scale描述2的1次方，index描述ecx",{"_index":12060,"title":{},"body":{"1015817":{}}}],["中，是ansi/",{"_index":11313,"title":{},"body":{"1015814":{}}}],["临界区",{"_index":6629,"title":{},"body":{"1015833":{},"1933380":{}}}],["临界区&自旋锁",{"_index":10539,"title":{},"body":{"2424889":{}}}],["临界区实现起来很简单，本质上就是加一个锁，例如我们可以设置一个全局变量，当线程进入时设为1，当线程离开时设为0，当该全局变量为0时才允许进入，在临界区内的指令就是原子操作，否则不允许",{"_index":6661,"title":{},"body":{"1933380":{}}}],["临界区是一个概念，即这个区域一次只允许一个线程进入，直至线程离开才允许下一个线程进入，虽然windows也提供了临界区，但也不影响我们自己按照这个概念去实现自己的临界区",{"_index":6660,"title":{},"body":{"1933380":{}}}],["为了使用variant类型更加方便，atl对variant数据类型做了封装，封装了一个ccomvariant类型，它内部维护了一个variant的数据结构，所以我们可以很方便的在大多少情况下用ccomvariant来替代v",{"_index":3231,"title":{},"body":{"1015823":{}}}],["为了便于更好的学习，我们需要了解一下线性地址、有效地址、物理地址分别是什么。我们看汇编指令时经常会看见如下类似的指令",{"_index":9386,"title":{},"body":{"1015831":{}}}],["为了保证参数的生命周期，我们也可以将参数放在全局变量区",{"_index":7415,"title":{},"body":{"1015833":{}}}],["为了对数据进行保护，普通代码段是禁止不同级别进行访问的。用户态的代码不能访问内核的数据，同样，内核态的代码也不能访问用户态的数据",{"_index":9149,"title":{},"body":{"1015831":{}}}],["为了提高效率，cpu在内部做了一张表，来记录这些东西，这就是tlb（transl",{"_index":9550,"title":{},"body":{"1015831":{}}}],["为了提高物理内存的利用效率，windows引入了内存交换机制。该机制的核心思想是，只有正在被使用的线性地址才会被分配物理页。如果某个线性地址在一段时间内没有被使用，或者当前的物理页资源接近耗尽，操作系统将把该线性地址对应的物理页上的数据保存到硬盘，并将对应的页表项（pte）中的p位设置为0。这样，该物理页就被释放出来供其他线性地址使用",{"_index":7015,"title":{},"body":{"2949228":{}}}],["为了方便寻址，在kthread结构体中定义了一个指针数组apcstatepoin",{"_index":10810,"title":{},"body":{"2424869":{}}}],["为了方便添加节我们还需要修改下最后一个节表成员的属性，将其真实大小（virtualsize）修改成文件对齐之后的大小（sizeofraw",{"_index":6410,"title":{},"body":{"1015828":{}}}],["为了方便，添加一个成员函数，用于打印输出成员的值",{"_index":3335,"title":{},"body":{"1015840":{}}}],["为了更灵活的通信，我们可以使用deviceiocontrol函数，该函数在应用层使用，可以用来与内核层传输数据。我的应用层代码如下，根据代码注释我们知道该函数的参数作用，其中操作码我们也可以理解为是一个密码，内核层也应定义操作码，根据操作码来执行不同的指令",{"_index":5731,"title":{},"body":{"1015847":{}}}],["为了管理方便，物理内存以4kb大小来分页，那么在系统里面这个物理页的数量是多少呢？我使用的虚拟机是可以设置内存大小的（从物理上可以理解为这就是一个内存条",{"_index":7902,"title":{},"body":{"1015833":{}}}],["为了规避以上所述的情况，微软将内核对象的地址隐藏起来，但为了让3环可以使用，又设计了一张表（即句柄表），在这个表中存储着内核对象的地址，句柄则为这张表中的索引，这样在3环中就可以通过句柄来使用内核对象",{"_index":8688,"title":{},"body":{"1933378":{}}}],["为了解决ascii的缺陷，unicode编码就诞生了，那么unicode是如何解决这一问题的呢",{"_index":7073,"title":{},"body":{"1015833":{}}}],["为了解决多连接所面临的问题，这时候就需要用到多线程的解决方案，为每个客户端连接开一个线程，主线程只管负责监听客户端连接请求，而真正负责通信的任务转交为工作线程",{"_index":9996,"title":{},"body":{"1015818":{}}}],["为了解决这种隐患，我们可以使用写拷贝的方式来处理",{"_index":8280,"title":{},"body":{"1015833":{}}}],["为了让程序看起来更加丰满，我们可以使用draw3drect函数实现3d立体感，其第一个参数与ellipse函数、rectangle函数一样，可以为四个int类型的参数，也可以是一个lpcrect，另外两个参数就是3d实体图形左边与上边的颜色和右边和下边的颜色",{"_index":790,"title":{},"body":{"1015822":{}}}],["为了论证观点，我们可以做一个实验，以线性地址0x0为例，拆分并观察其pte是否有物理页",{"_index":9422,"title":{},"body":{"1015831":{}}}],["为了避免出错，宏定义中给形参加上括号",{"_index":2371,"title":{},"body":{"1015843":{}}}],["为了避免并发修改eventlist链表，需要使用一个mutex进行互斥操作。这样，当调试器从eventlist链表中提取调试事件时，同时dbgkpsendapimessage函数向eventlist链表写入数据时也会被正确地互斥。另外，flags参数用于标识该事件是否已被调试器读取",{"_index":4620,"title":{},"body":{"3440657":{}}}],["为了避免混乱，在1线程挂靠b进程时，会将apcstate中的值暂时存储到savedapcstate中，等回到原进程a时，再将apc队列恢复。所以，savedapcstate又称为备用apc队列",{"_index":10808,"title":{},"body":{"2424869":{}}}],["为什么代码里没有winmain？mfc没有winmain函数吗？其实mfc是在内部接管了winmain，我们可以认为cwinapp就是winmain，只不过我们没法很直观的看见winmain函数",{"_index":156,"title":{},"body":{"1015822":{}}}],["为什么是1？这是因为在变量x作为参数传入plus函数，是传入值而不是这个变量本身，所以并不会改变变量本身",{"_index":2125,"title":{},"body":{"1015843":{}}}],["为什么缓冲区填充的数据是0xcccccccc？因为cc可以起到断点的作用，填充cc就是以防程序使用缓冲区时用过了，如果用过了可以及时断点；这一块包含调试器的一些知识，这里不过多阐述",{"_index":1444,"title":{},"body":{"1015843":{}}}],["为什么要声明全局的应用程序对象(cwinap",{"_index":168,"title":{},"body":{"1015822":{}}}],["为什么需要加密",{"_index":10421,"title":{},"body":{"1015818":{}}}],["为什么需要协议",{"_index":9633,"title":{},"body":{"1015818":{}}}],["为什么需要有rpl",{"_index":9098,"title":{},"body":{"1015831":{}}}],["为什么需要计算机网络",{"_index":9631,"title":{},"body":{"1015818":{}}}],["为什么需要这么多协议",{"_index":9636,"title":{},"body":{"1015818":{}}}],["为实现万能类型的功能，在c++中，variant是一个结构体，该结构体内部又有联合体（联合了多种基本的数据类型），又有变量类型标志vartyp",{"_index":2945,"title":{},"body":{"1015823":{}}}],["为是，0",{"_index":2845,"title":{},"body":{"1015823":{}}}],["为每个选项显示大图标",{"_index":1176,"title":{},"body":{"1015822":{}}}],["为每个选项显示小图标",{"_index":1178,"title":{},"body":{"1015822":{}}}],["主动切换",{"_index":11195,"title":{},"body":{"1703937":{}}}],["主动调用api函数（swapcontex",{"_index":11218,"title":{},"body":{"1703937":{}}}],["主窗口",{"_index":1030,"title":{},"body":{"1015822":{}}}],["主窗口文件是hellodialogdlg.cpp，在里面我们可以看见熟悉的消息映射以及相关的消息处理函数",{"_index":1031,"title":{},"body":{"1015822":{}}}],["主要用于清理工作",{"_index":3371,"title":{},"body":{"1015840":{}}}],["主要结构体",{"_index":5992,"title":{},"body":{"1015828":{}}}],["举一反三，写文件也很简单，但是需要注意的是写文件不是立即生效的，而是先将写入的存放到缓存中，只有等到你释放资源了才会把缓存里的值真正的写入到文件",{"_index":8258,"title":{},"body":{"1015833":{}}}],["举例说明",{"_index":8476,"title":{},"body":{"1015833":{}}}],["举例说明，我们分别以字节（byte）的形式将1、6",{"_index":5110,"title":{},"body":{"1015825":{}}}],["举例说明：数组in",{"_index":11322,"title":{},"body":{"1015814":{}}}],["举例：那么ax、al、ah分别代表着eax的哪一部分呢？我们使用dtdebug打开一个exe可执行文件",{"_index":5171,"title":{},"body":{"1015825":{}}}],["之前学习过虚函数，也提到了纯虚函数，虽然纯虚函数语法很简单的，但是其比较难理解，所以在有一定的面向对象的基础时候再来学习会比较容易理解一些",{"_index":3652,"title":{},"body":{"1015840":{}}}],["之前已经学习过继承和封装了，但是要在实际开发中使用，光学语法和原理是不够的，在设计层面我们需要做一些优化",{"_index":3523,"title":{},"body":{"1015840":{}}}],["之前我们举例可以处理键盘按下的消息，但是我们想要直观的看到底输入了什么而不是虚拟键码该怎么办？这时候我们就需要使用wm_char这个宏了，但是在这之前，我们的消息是必须要经过转换的，只有其转换了，我们的虚拟键码才能变成具体的字符",{"_index":7823,"title":{},"body":{"1015833":{}}}],["之前我们了解了函数，以及堆栈传参，那其实我们获取参数就是借助的esp去获取对应参数的地址，这种行为我们称之为esp寻址",{"_index":5391,"title":{},"body":{"1015825":{}}}],["之前我们了解了直接注入一个dll到进程中，但是这样实际上是很难存活的，因为程序很容易就可以通过api来获取当前加载的dll模块，所以我们需要使用模块隐藏技术来隐藏自己需要注入的dll模块",{"_index":8533,"title":{},"body":{"1015833":{}}}],["之前我们了解到modr/m结构可以拆分为三部分，其中reg/opcode的描述了g的意义（通用寄存器），但其并不仅仅用来表示寄存器，有时候也可以用来表示opç",{"_index":12022,"title":{},"body":{"1015817":{}}}],["之前我们了解到win32",{"_index":7174,"title":{},"body":{"1015833":{}}}],["之前我们了解到不同的等待对象，在临时唤醒以及关键循环处修改signalstate会有差异，因此我们先来具体看下setevent函数的作用，该函数对应的内核函数为kesetevent，它做了这些事情",{"_index":10678,"title":{},"body":{"2424889":{}}}],["之前我们了解到大多数内核函数都最终会调用到swapcontext来进行线程切换，但如果有线程没有去调用系统api是否就不会进行线程切换呢？其实不然，时钟中断也会导致线程切换",{"_index":11203,"title":{},"body":{"1703937":{}}}],["之前我们了解过create函数，其第一个参数（类名）为null，则以mfc内建的窗口类产生一个标准的外框窗口，既然它有窗口类那肯定就有窗口过程处理函数，我们需要从这个函数入手下断点去跟进",{"_index":458,"title":{},"body":{"1015822":{}}}],["之前我们了解过handle句柄，其都是私有的，而在图形界面中有一个新的句柄，其叫hwnd，win32k.sys提供在内核层创建图形化界面，我们想要在应用层调用就需要对应的句柄hwnd，而这个句柄表是全局的，并且只有一个",{"_index":7648,"title":{},"body":{"1015833":{}}}],["之前我们使用调用门时没有传递参数，但实际上调用门是支持参数传递的，所以我们来看下如何实现",{"_index":9232,"title":{},"body":{"1015831":{}}}],["之前我们可以了解了键盘消息处理函数的几个参数，第一个参数可以用来获取键盘按下的键，并且使用wm_keydown消息来使用了，但是这有一个问题，就是通过wm_keydown消息对应处理函数获取的键只是针对字符键的永远都是大写的",{"_index":1018,"title":{},"body":{"1015822":{}}}],["之前我们学习写的程序都是基于控制台的，而从本章开始学习图形化界面相关的知识",{"_index":7643,"title":{},"body":{"1015833":{}}}],["之前我们学习过了mov指令，那这个指令也可以向内存中添加数据或从内存中获取数据",{"_index":5192,"title":{},"body":{"1015825":{}}}],["之前我们学习过本机宽度的概念，在32位操作系统中，当我们定义变量时，当其数据宽度小于4字节时，在编译的时候还是会以4字节的方式去存储，这是一种用空间换时间的策略，那么除了本机宽度，还有字节对齐也属于这一策略",{"_index":2017,"title":{},"body":{"1015843":{}}}],["之前我们学习过用createfilemapping函数来创建共享内存，这个函数同样也可以将文件映射到物理页，只不过在这之前我们需要传递一个文件句柄",{"_index":8229,"title":{},"body":{"1015833":{}}}],["之前我们学习过的malloc或者new申请内存，它们是申请的什么内存呢？其实通过它们申请的内存是假申请，因为它们是从已经申请好的内存中申请给自己用的，通过它们申请的内存称为堆内存，局部变量称为栈内存",{"_index":7942,"title":{},"body":{"1015833":{}}}],["之前我们学习过结构体这个概念，那么结构体可以做参数传递吗？我们来看一下如下代码",{"_index":3294,"title":{},"body":{"1015840":{}}}],["之前我们学过了封装，如下代码",{"_index":3320,"title":{},"body":{"1015840":{}}}],["之前我们学过几本类型的参数传递，如下代码所示",{"_index":2122,"title":{},"body":{"1015843":{}}}],["之前我们已经了解了jmp",{"_index":9125,"title":{},"body":{"1015831":{}}}],["之前我们已经创建了自己的第一个qt应用，但如果学过mfc，理应知道，通过这种可视化去创建一个应用，会加入很多其他代码，不够纯粹，也不便于学习",{"_index":4110,"title":{},"body":{"1015820":{}}}],["之前我们已经按照pe文件的整体结构对实际的pe文件进行了大致上的了解了，现在我们需要来看看每个结构的意义和作用",{"_index":6035,"title":{},"body":{"1015828":{}}}],["之前我们已经看过了正常的内存布局了，在这里，很明显，少了一个0x10位置的成员，那么按照内存布局应该是这样的",{"_index":3391,"title":{},"body":{"1015840":{}}}],["之前我们所举例的mov指令本质上就是加载段描述符至段寄存器，除了该指令外，我们还可以使用les、lss、lds、lfs、lgs指令完成这一动作",{"_index":9011,"title":{},"body":{"1015831":{}}}],["之前我们所了解的in",{"_index":9588,"title":{},"body":{"1015831":{}}}],["之前我们所了解的三次握手，是在建立连接时的，而我们现在所需要了解的四次握手，则是在断开连接时的；你可以思考一下为什么在这里连接时需要三次握手，而在断开连接时，却需要四次握手呢",{"_index":9917,"title":{},"body":{"1015818":{}}}],["之前我们所了解的两张表int、iat，在pe文件加载前其结构内容都是一样的",{"_index":6591,"title":{},"body":{"1015828":{}}}],["之前我们所了解的句柄表都是每个进程私有的句柄表，而实际上在windows操作系统上有一个全局句柄表，所有进程、线程无论是否打开，都存放在这张表中。每个进程和线程都有一个唯一的编号，即pid、cid（我们在任务管理器中可以看到进程的pid），这两个值就是全局句柄表中的索引",{"_index":8724,"title":{},"body":{"1933378":{}}}],["之前我们所了解过variant类型，该类型的优点我们都知道是其可以兼容所有的数据类型，但同时，我们了解variant类型初始化赋值十分繁琐",{"_index":3230,"title":{},"body":{"1015823":{}}}],["之前我们所学习的进程、线程之类的函数，其接口来源于kernel32.dl",{"_index":7644,"title":{},"body":{"1015833":{}}}],["之前我们是远程创建线程，调用的也是人家自己的线程函数，而如果我们想要创建远程线程调用自己定义的线程函数就需要使用远程线程注入技术",{"_index":8422,"title":{},"body":{"1015833":{}}}],["之前我们说了这种方式是空间换时间的策略，但是在一些场景下，我们可用的空间有限，这种空间浪费可能无法满足或者我们无法接受这种浪费，这种情况下我们可以使用如下的方式来改变这种对齐方式",{"_index":2028,"title":{},"body":{"1015843":{}}}],["之前我们说到tcp协议可以保证传输过程中的数据是正确的，这是因为其是面向连接的网络协议",{"_index":9711,"title":{},"body":{"1015818":{}}}],["之前我们调用动态链接库（dll文件）使用的方式实际上是显式链接，它的优点是非常灵活，缺点就是使用起来非常麻烦，步骤很繁琐",{"_index":8357,"title":{},"body":{"1015833":{}}}],["之前我们进行双机调试配置时，需要手动修改文件然后重启，这个步骤相对来说比较繁琐，我们可以通过virtualkd（开源项目地址：https://github.com/4d61726b/virtual",{"_index":5485,"title":{},"body":{"1015847":{}}}],["之前的学习中我们学了几个带有declare_前缀的宏，就是声明的意思，将它放在类内部即可，所以宏declare_message_map直接写在类里头（声明里",{"_index":365,"title":{},"body":{"1015822":{}}}],["之前的实验我们可以在windbg中通过线性地址拆分，找到pde、pte，最终找到物理页，对属性进行修改等操作。但是这样的操作都是基于手动调试器的，我们要想通过代码去完成就需要通过表基址（页目录表、页表",{"_index":9452,"title":{},"body":{"1015831":{}}}],["之前说到switch语句的执行效率远远高于if..else，这是为什么？我们可以写一段代码通过反汇编来查看其在底层的具体实现",{"_index":1809,"title":{},"body":{"1015843":{}}}],["之前都是借用esp去寻址确定一些参数",{"_index":5397,"title":{},"body":{"1015825":{}}}],["乘",{"_index":1733,"title":{},"body":{"1015843":{}}}],["乘法运算符（1*2",{"_index":2109,"title":{},"body":{"1015843":{}}}],["也可以修改eip，跟jmp指令的功能是一样的，其格式为",{"_index":5357,"title":{},"body":{"1015825":{}}}],["也可以通过windbg来查看，即指令",{"_index":6877,"title":{},"body":{"2949228":{}}}],["也就是函数的参数",{"_index":3587,"title":{},"body":{"1015840":{}}}],["也就是有524138个物理页（十进制），转为十六进制就是0x7ff6a",{"_index":7905,"title":{},"body":{"1015833":{}}}],["也就是说当我们使用越界读取时会去读取一个不存在的未知地址",{"_index":1935,"title":{},"body":{"1015843":{}}}],["也就是说当我们将结构体作为参数传递时与我们传整数什么的是没有本质区别的，唯一的区别就是传递结构体时不是使用的push来传递的，而是一次性的提升堆栈，然后mov赋值",{"_index":3302,"title":{},"body":{"1015840":{}}}],["也就是说运算符重载，其本质意义就是给重新定义运算符，或者说取一个别名；其在底层上和我们之前的代码是没有任何区别的，其价值就是为了便于写代码",{"_index":3616,"title":{},"body":{"1015840":{}}}],["也就表示其他消息是交由dispatchmessage函数来处理的，dispatchmessage函数最终调用的是win32k.sys中的ntuserdispatchmessage函数。该函数主要做了以下两件事情",{"_index":4020,"title":{},"body":{"3440655":{}}}],["也就表示在modr/m字段之后一定存在sip",{"_index":12052,"title":{},"body":{"1015817":{}}}],["也就表示在这里扩展pe头的宽度就是240字节",{"_index":6017,"title":{},"body":{"1015828":{}}}],["也就表示我们的数据存储模式是小端模式，而一般来说在80x86处理器上，绝大部分的应用数据存储都是采用小端模式，在arm上则是大端模式",{"_index":5233,"title":{},"body":{"1015825":{}}}],["也就表示这里的id是32位的立即数，其实你也可以不用看官方的释义，我们可以这样推出：首先这是一个定长指令，长度是固定的，其次这里的erx就表示着32位寄存器，由此可以得出后面的立即数是必须是固定的长度，所以只能是32位的立即数",{"_index":11893,"title":{},"body":{"1015817":{}}}],["也就说明：*()与[]的互换，如下是互换的一些例子",{"_index":2167,"title":{},"body":{"1015843":{}}}],["了解apc",{"_index":10768,"title":{},"body":{"2424869":{}}}],["了解gdi的画笔、画刷以及字体",{"_index":702,"title":{},"body":{"1015822":{}}}],["了解windows自旋锁，我们可以来看这个函数：keacquirespinlockatdpclevel，在函数名中带有spinlock的都与自旋锁有关",{"_index":6671,"title":{},"body":{"1933380":{}}}],["了解了eax、ax、al、ah，其他的寄存器以此类推即可",{"_index":5178,"title":{},"body":{"1015825":{}}}],["了解了qt，就不得不了解一下qt",{"_index":4081,"title":{},"body":{"1015820":{}}}],["了解了scopetable及其对应结构体的成员之后，我们再来看一下trylevel成员，该成员表示当前在哪个_try_except程序块，我们可以通过如下这段代码来看一下该值的变化",{"_index":4455,"title":{},"body":{"2949166":{}}}],["了解了terminateprocess函数后，我们想要真正的去关闭一个进程，需要借助openprocess函数，这个函数是用来打开进程对象的",{"_index":7348,"title":{},"body":{"1015833":{}}}],["了解了服务器端如何编写，客户端也就了如指掌的，实现代码如下",{"_index":9867,"title":{},"body":{"1015818":{}}}],["了解了理论之后就要付诸于行动，在编程的时候我们的服务器端要有七个步骤去完成",{"_index":9715,"title":{},"body":{"1015818":{}}}],["了解了，服务端变成框架之后我们再来看客户端会发现，它的步骤更加简单",{"_index":9955,"title":{},"body":{"1015818":{}}}],["了解什么是win32",{"_index":7141,"title":{},"body":{"1015833":{}}}],["了解句柄表",{"_index":8684,"title":{},"body":{"1933378":{}}}],["了解四次握手",{"_index":9916,"title":{},"body":{"1015818":{}}}],["了解完基础的语法和知识点之后，接下来我们需要使用vc6通过sdk去连接mysql，在之前你已经安装过了mysql",{"_index":8856,"title":{},"body":{"1015850":{}}}],["了解完每个参数的意义之后我们可以来编写一段简单的代码，来使用virtualalloç",{"_index":6750,"title":{},"body":{"2949228":{}}}],["了解完算法原理之后，我们需要了解一个概念：大表和小表；当生成的函数跳转地址表，每个成员有4个字节的时，我们称之为大表",{"_index":1824,"title":{},"body":{"1015843":{}}}],["了解本质，那就通过反汇编代码去看就行了，首先我们看下非多态的情况下的反汇编代码",{"_index":3582,"title":{},"body":{"1015840":{}}}],["了解消息队列与线程关系后，我们需要知道消息是从哪里来，又到哪里去，是谁来做这些消息传递的",{"_index":3924,"title":{},"body":{"3440655":{}}}],["事件",{"_index":7563,"title":{},"body":{"1015833":{},"2424889":{}}}],["事件本身也是一种内核对象，其也是是用来控制线程的",{"_index":7564,"title":{},"body":{"1015833":{}}}],["事件本身可以做为通知类型来使用，创建事件使用函数createevent，其语法格式如下",{"_index":7566,"title":{},"body":{"1015833":{}}}],["事件等待",{"_index":6625,"title":{"2424889":{}},"body":{"1015827":{},"1015832":{}}}],["事实证明这是可行的，我们在传入参数的时候使用数组第一个值的地址即可",{"_index":2140,"title":{},"body":{"1015843":{}}}],["二个关键的宏",{"_index":314,"title":{},"body":{"1015822":{}}}],["二者操作的用法和意义一样",{"_index":3251,"title":{},"body":{"1015823":{}}}],["二进制",{"_index":5067,"title":{},"body":{"1015825":{}}}],["二进制位标志着存在哪些驱动器，位0为1则表示存在驱动器a，位1为1则表示存在驱动器b，以此类推，这里我们获取的0xd二进制是1101，位1为1、位2为0、位3为1、位4为1，那么就表示我们存在驱动器a、c、",{"_index":7992,"title":{},"body":{"1015833":{}}}],["二进制简写形式",{"_index":5062,"title":{},"body":{"1015825":{}}}],["二进制：000",{"_index":5141,"title":{},"body":{"1015825":{}}}],["于此同时打开vmmon64.exe，选择好对应的windbg程序路径（一般情况下程序会寻找默认windbg程序路径",{"_index":5497,"title":{},"body":{"1015847":{}}}],["互为质数：一般指互质数，互质数为数学中的一种概念，即两个或多个整数的公因数只有1的非零自然数。公因数只有1的两个非零自然数，叫做互质数",{"_index":10429,"title":{},"body":{"1015818":{}}}],["互斥体",{"_index":7525,"title":{},"body":{"1015833":{},"2424889":{}}}],["互斥体可以设定等待超时，但线程锁不能",{"_index":7549,"title":{},"body":{"1015833":{}}}],["互斥体和线程锁的区别",{"_index":7547,"title":{},"body":{"1015833":{}}}],["互斥体效率没有线程锁高",{"_index":7551,"title":{},"body":{"1015833":{}}}],["互斥体是通过createmutex函数创建的，它的语法格式如下",{"_index":10731,"title":{},"body":{"2424889":{}}}],["互斥体的使用",{"_index":7529,"title":{},"body":{"1015833":{}}}],["互斥体的结构如下所示，我们可以看见它一共有4个成员",{"_index":10717,"title":{},"body":{"2424889":{}}}],["互斥体防止程序多开",{"_index":7552,"title":{},"body":{"1015833":{}}}],["互斥体（mutant）与事件（event）和信号量（semaphore）一样，都可以用来进行线程的同步控制。因为这些都是内核对象，所以我们通过这些对象可以进行跨进程的线程同步控制",{"_index":10714,"title":{},"body":{"2424889":{}}}],["人与人沟通需要使用到语言，人与计算机沟通也需要一种语言进行，你要跟计算机进行沟通，必须要使用计算机可以识别的语言，这种语言我们称之为机器语言，也就是0和1，二进制",{"_index":4981,"title":{},"body":{"1015825":{}}}],["什么时候需要动态创建",{"_index":311,"title":{},"body":{"1015822":{}}}],["什么是deque容器",{"_index":11377,"title":{},"body":{"1015814":{}}}],["什么是list容器",{"_index":11393,"title":{},"body":{"1015814":{}}}],["什么是map/multimap容器",{"_index":11488,"title":{},"body":{"1015814":{}}}],["什么是prior",{"_index":11579,"title":{},"body":{"1015814":{}}}],["什么是queue容器",{"_index":11556,"title":{},"body":{"1015814":{}}}],["什么是rti",{"_index":193,"title":{},"body":{"1015822":{}}}],["什么是select模型",{"_index":10008,"title":{},"body":{"1015818":{}}}],["什么是set/multiset容器",{"_index":11421,"title":{},"body":{"1015814":{}}}],["什么是stack容器",{"_index":11534,"title":{},"body":{"1015814":{}}}],["什么是stl",{"_index":11310,"title":{},"body":{"1015814":{}}}],["什么是tcp",{"_index":9706,"title":{},"body":{"1015818":{}}}],["什么是udp",{"_index":9931,"title":{},"body":{"1015818":{}}}],["什么是vector容器",{"_index":11325,"title":{},"body":{"1015814":{}}}],["什么是内存映射文件",{"_index":8223,"title":{},"body":{"1015833":{}}}],["什么是内核对象",{"_index":7301,"title":{},"body":{"1015833":{}}}],["什么是函数？函数就是一系列指令的集合，为了完成某个会重复使用的特定功能",{"_index":5364,"title":{},"body":{"1015825":{}}}],["什么是命令传递",{"_index":454,"title":{},"body":{"1015822":{}}}],["什么是多连接",{"_index":9991,"title":{},"body":{"1015818":{}}}],["什么是定长、变长指令",{"_index":11818,"title":{},"body":{"1015817":{}}}],["什么是数组？或者说什么情况下我们需要使用数组，比如说我们需要定义一个人的年龄，我们可以定义一个变量来表示，但是如果我们需要定义三个人的年龄呢？那就需要三个变量来表示，这样很复杂，那么我们是否可以使用一个变量来存储三个人的年龄呢？这时候我们就需要使用数组来定义",{"_index":1902,"title":{},"body":{"1015843":{}}}],["什么是注入",{"_index":8423,"title":{},"body":{"1015833":{}}}],["什么是消息",{"_index":7692,"title":{},"body":{"1015833":{}}}],["什么是消息映射",{"_index":354,"title":{},"body":{"1015822":{}}}],["什么是消息队列",{"_index":3749,"title":{},"body":{"3440655":{}}}],["什么是线程",{"_index":7390,"title":{},"body":{"1015833":{}}}],["什么是缺页异常",{"_index":7010,"title":{},"body":{"2949228":{}}}],["什么是运算符？什么是表达式？运算符：加减乘除、大于小于等于、赋值，表达式则是由运算符和变量组成，如下代码示例，从x+y开始都是表达式",{"_index":1702,"title":{},"body":{"1015843":{}}}],["什么是进程",{"_index":7188,"title":{},"body":{"1015833":{}}}],["仅仅是模拟代码，不用写实际功能，写上构造、析构函数即可，这里使用vc6的类视图来创建，教程如下所示",{"_index":176,"title":{},"body":{"1015822":{}}}],["介绍",{"_index":1133,"title":{},"body":{"1015822":{},"1703937":{}}}],["从0环调用3环函数的有三种方法",{"_index":4051,"title":{},"body":{"3440655":{}}}],["从_trap_frame结构来看，目标线程的栈底（eax）就指向了hardwaresegss成员的位置，当然这是快速调用时所指向的位置，如果是普通调用（通过中断门的方式）由于cpu会帮我们压入5个寄存器值，所以栈底是指向errcode成员的",{"_index":11249,"title":{},"body":{"1703937":{}}}],["从c++到com",{"_index":2585,"title":{},"body":{"1015823":{}}}],["从lock指令字面意思来看，我们就知道它是一个锁，它锁的不是cpu而是内存，可以锁定当前指令执行时线程所访问的内存。如上所示代码执行时，会对0x12345678地址处的值进行修改，在lock指令的限制下，其它线程是不能访问或修改0x12345678地址处的值的，只有在这条指令执行完后，其他线程才可以对此地址的值进行访问或者修改",{"_index":6644,"title":{},"body":{"1933380":{}}}],["从下往上读，由此可以得出8的二进制为1000，我们还可以来算一下9的二进制",{"_index":1583,"title":{},"body":{"1015843":{}}}],["从右至左入栈",{"_index":2297,"title":{},"body":{"1015843":{}}}],["从字面意思理解，select可从诸多连接中检测出可读的（accpet函数），也就是有响应的连接；也可以从诸多连接中检测出可写的（recv、send函数），也就是可以发送消息的连接",{"_index":10011,"title":{},"body":{"1015818":{}}}],["从字面意思理解，这个函数的目的很明显，就是向调试器发送一些虚构的假消息。并且此时，被调试进程还未与调试对象关联，因此调试器无法接收来自被调试线程的任何消息",{"_index":4770,"title":{},"body":{"3440657":{}}}],["从实现来看swapcontext使用的是0x44偏移位成员，即_ethread.tcb.apcstate.process来进行线程间的所属进程比对",{"_index":11275,"title":{},"body":{"1703937":{}}}],["从小数点右边第一位开始数出二十三位数字放入第22到第0位",{"_index":1596,"title":{},"body":{"1015843":{}}}],["从当前位置开始将一系列点用线段连接起来",{"_index":711,"title":{},"body":{"1015822":{}}}],["从当前位置画一条线到指定位置（终止位置",{"_index":708,"title":{},"body":{"1015822":{}}}],["从我们的实验环境上来看该成员仅有4字节（即32位），所以也就只支持32核cpu",{"_index":10957,"title":{},"body":{"1703937":{}}}],["从本章开始就要学习pe相关的内容",{"_index":5969,"title":{},"body":{"1015828":{}}}],["从本质上来看就是用lock指令完成一个原子操作以保证多核状态下的线程同步",{"_index":6654,"title":{},"body":{"1933380":{}}}],["从本质上来讲，windows字符串都是宽字符的，所以使用messageboxw这种方式性能会更好一些，因为当你使用messageboxa的时候，在到内核的时候（系统底层）其会转化unicode，所以性能相对差一些",{"_index":7177,"title":{},"body":{"1015833":{}}}],["从本质上来说并不需要所谓的“重载内核”，只要了解pe基础，对于我们来说一切都是“重载模块”，我们需要就是通过自己的代码来实现windows加载模块的过程",{"_index":6685,"title":{},"body":{"1933380":{}}}],["从父函数传递的参数ecx，我们可以跟进看一下kiswapthread函数，如下图所示ecx是通过eax得来的，而eax是通过kifindreadythread函数返回的，该函数从字面意思就是寻找准备就绪的线程，返回的自然就是一个线程结构体了",{"_index":11198,"title":{},"body":{"1703937":{}}}],["从理论上来说，重定位表中存储的项应该都是4字节大小的地址，但是这样一旦需要修改的地址多了，就会占用大量的空间，所以重定位表就做了一些优化，假设你现在有这几个地址需要修正",{"_index":6609,"title":{},"body":{"1015828":{}}}],["从理论上讲，它是不能保证唯一，但重复的可能性非常非常小。有句夸张的说法是：“在每秒钟产生一万亿个guid的情况下，即使太阳变成白矮星的时候，它仍是唯一的",{"_index":2818,"title":{},"body":{"1015823":{}}}],["从线性地址角度看，内存分为private和mapped类型",{"_index":6735,"title":{},"body":{"2949228":{}}}],["从设备中写入数据",{"_index":5694,"title":{},"body":{"1015847":{}}}],["从设备中读取数据",{"_index":5691,"title":{},"body":{"1015847":{}}}],["从调试器角度，我们第一步仍然是要下断点，在处理创建进程调试事件时，选择要下的断点类型，以下只是示例代码，具体的要根据不同的需求进行分支的判断和调整",{"_index":4873,"title":{},"body":{"3440657":{}}}],["从这张表中我们可以总结一下",{"_index":5168,"title":{},"body":{"1015825":{}}}],["从这节课开始我们不再使用struct作为类的创建，而是直接使用class关键词，其使用没有什么区别，唯一的区别在于成员默认访问属性不一样，在struct中所有成员默认的属性是public，而在class中则相反",{"_index":3430,"title":{},"body":{"1015840":{}}}],["从集合中删除指定的socket一定要close，手动释放",{"_index":10058,"title":{},"body":{"1015818":{}}}],["仔细的人可能会发现pe的全称是p",{"_index":5975,"title":{},"body":{"1015828":{}}}],["仔细看这张图，你就会发现在段寄存器结构中的成员limit对应到段描述符中只有20位，其余的12位没有了，也就表示这里的limit最大值就是0xfffff，而另外12位取决于描述符的属性g位",{"_index":9026,"title":{},"body":{"1015831":{}}}],["仔细观察上图，你会发现，虽然这两个成员指向是不同的表（地址不一样）但是内容却是一样的，我们通过两个成员都可以找到当前所依赖模块中的函数。因此，我们就选择一个成员去寻找到依赖函数即可，我在这里选择了第一个成员originalfirstth",{"_index":6565,"title":{},"body":{"1015828":{}}}],["代码",{"_index":10050,"title":{},"body":{"1015818":{}}}],["代码中有很多细节的点，如防止我们的代码中会使用到寄存器先压入原来的寄存器到栈，接着还原，在jmp回原函数被替换指令的下一行地址之前我们需要将被替换的指令执行一下，以保证函数运行的完整性",{"_index":5925,"title":{},"body":{"1015847":{}}}],["代码中的注释可以大致了解到每个成员的作用，其中有2个成员来描述节的大小，分别是没有对齐前的真实尺寸和对齐后的宽度，这时候会出现一种情况就是对齐前的真实尺寸大于对齐后的宽度，这就是存在全局变量没有赋予初始值导致的，在文件存储中全局变量没有赋予初始值也就不占空间，但是在内存中是必须要赋予初始值的，这时候宽度就大了一些，所以在内存中节是谁大就按照谁去展开",{"_index":6215,"title":{},"body":{"1015828":{}}}],["代码分析",{"_index":2552,"title":{},"body":{"1015846":{}}}],["代码如下",{"_index":881,"title":{},"body":{"1015814":{},"1015822":{}}}],["代码实现",{"_index":8615,"title":{},"body":{"1015833":{}}}],["代码实现如下",{"_index":2607,"title":{},"body":{"1015823":{}}}],["代码执行：cpu将cs.b",{"_index":9121,"title":{},"body":{"1015831":{}}}],["代码操作",{"_index":4203,"title":{},"body":{"1015820":{}}}],["代码改造",{"_index":2592,"title":{},"body":{"1015823":{}}}],["代码模拟",{"_index":172,"title":{},"body":{"1015822":{}}}],["代码跨段",{"_index":9100,"title":{},"body":{"1015831":{}}}],["代码跨段本质上就是修改cs段寄存器，我们之前有了解到读写段寄存器可以使用mov或lxx指令进行，但是由于cs段寄存器的特殊性我们没办法之间修改",{"_index":9101,"title":{},"body":{"1015831":{}}}],["代表8位内存",{"_index":5244,"title":{},"body":{"1015825":{}}}],["代表8位立即数",{"_index":5246,"title":{},"body":{"1015825":{}}}],["代表8位通用寄存器",{"_index":5242,"title":{},"body":{"1015825":{}}}],["代表内存",{"_index":5238,"title":{},"body":{"1015825":{}}}],["代表小数点后长度",{"_index":1679,"title":{},"body":{"1015843":{}}}],["代表立即数",{"_index":5240,"title":{},"body":{"1015825":{}}}],["代表通用寄存器",{"_index":5237,"title":{},"body":{"1015825":{}}}],["以c++的角度来看，上面的代码dwval的自增只有一行指令，所以多个线程去调用不会存在问题，但实际并不是这样的，因为程序的执行是以汇编指令出发的，自增的汇编代码如下",{"_index":6636,"title":{},"body":{"1933380":{}}}],["以上代码b继承了a，这里a前面的public代表着，按照a的成员定义的属性继承过来，公有就是公有，私有就是私有",{"_index":3438,"title":{},"body":{"1015840":{}}}],["以上代码就是告诉编译器，test是cobject的朋友，所以test可以直接访问cobject的私有成员；但是要注意的是，这种访问是单向的，test可以访问cobject，但反之则不行",{"_index":3712,"title":{},"body":{"1015840":{}}}],["以上代码我们在编译的时候是没法成功的，它的报错内容是",{"_index":2099,"title":{},"body":{"1015843":{}}}],["以上就是大致的cpu时间片到期的执行流程",{"_index":11231,"title":{},"body":{"1703937":{}}}],["以上流程结束之后就返回到kidispatchinterrupt函数了，接着跟进发现将_kpcr.prcbdata.currentthread设为下一个就绪状态的线程，并且把当前线程挂到调度链表中，最终进行堆栈的切换（线程切换",{"_index":11230,"title":{},"body":{"1703937":{}}}],["以下为_debug_object结构体的组成",{"_index":4545,"title":{},"body":{"3440657":{}}}],["以下就是一些_kprocess的成员，我们可以简单了解一下",{"_index":10943,"title":{},"body":{"1703937":{}}}],["以下就是这两个容器内部的存储结构",{"_index":11493,"title":{},"body":{"1015814":{}}}],["以下操作中用的pe文件建议自行寻找一个再去实验",{"_index":6369,"title":{},"body":{"1015828":{}}}],["以下是一些经常用到的返回值和宏定义",{"_index":2860,"title":{},"body":{"1015823":{}}}],["以下汇编代码需要熟悉了解（plus函数的汇编代码实现",{"_index":1375,"title":{},"body":{"1015843":{}}}],["以下示例代码，就是一个调用函数（x+y），结果给了局部变量z，然后返回z",{"_index":1486,"title":{},"body":{"1015843":{}}}],["以写方式打开文件",{"_index":1269,"title":{},"body":{"1015822":{}}}],["以只读方式打开文件",{"_index":1267,"title":{},"body":{"1015822":{}}}],["以可读可写方式不管有没有，有就覆盖没有就新建的方式创建一个隐藏文件",{"_index":8119,"title":{},"body":{"1015833":{}}}],["以挂起的形式创建进程",{"_index":7358,"title":{},"body":{"1015833":{}}}],["以此类推",{"_index":6940,"title":{},"body":{"2949228":{}}}],["以独占模式打开文件，禁止其它进程对文件的读写，如果文件已经被其它模式打开读写（即使是当前进程），则构造失败",{"_index":1281,"title":{},"body":{"1015822":{}}}],["以读、写方式打开文件",{"_index":1271,"title":{},"body":{"1015822":{}}}],["任何以wm打头的消息都属于标准消息(除wm_command)以外",{"_index":446,"title":{},"body":{"1015822":{}}}],["任何类型都可以带这个符号，格式就是：类型",{"_index":2076,"title":{},"body":{"1015843":{}}}],["任务段",{"_index":9284,"title":{},"body":{"1015831":{}}}],["任务门",{"_index":9360,"title":{},"body":{"1015831":{}}}],["任务门可以放在gdt表中，也可以放在idt表中，还能放在当前线程的ldt表中，而tss段描述符只能在gdt表中",{"_index":9362,"title":{},"body":{"1015831":{}}}],["任务门可以让低权限的线程进行任意切换，通过任务门，tss段描述符就不再进行权限检查了（cpl=3的程序使用dpl=3的任务门，可以访问到dpl=0的tss段描述符，最终可以完成任务切换",{"_index":9363,"title":{},"body":{"1015831":{}}}],["任务门描述符也存储在idt表中，它的结构如下所示，灰色的部分保留（填0",{"_index":9367,"title":{},"body":{"1015831":{}}}],["优点",{"_index":8225,"title":{},"body":{"1015818":{},"1015833":{}}}],["优点：整个逻辑非常清楚，编程实现及维护都相对容易",{"_index":9998,"title":{},"body":{"1015818":{}}}],["优点：节省空间；缺点：解析很麻烦",{"_index":7099,"title":{},"body":{"1015833":{}}}],["会发现在程序执行结束，也就是main函数的return之后会执行析构函数函数，但这句话实际上是不严谨的，因为我们的main函数是没有返回值的，也就是return不会有对应的汇编代码，当我们设置返回值再来看下反汇编代码",{"_index":3365,"title":{},"body":{"1015840":{}}}],["会发现这段反汇编和指针的反汇编一模一样的",{"_index":3498,"title":{},"body":{"1015840":{}}}],["会重复编写大量客户与组件通信的基础性代码（比如我们写了一个类就写了一个类工厂和dllgetclassfactoryobject函数",{"_index":2631,"title":{},"body":{"1015823":{}}}],["传参就是一个lpctstr类型（字符串），但是需要注意的是这个函数只能打印固定字符串，不能打印格式化的字符串，所以如果需要格式化输出，需要在这之前使用sprintf函数进行格式化（自行查阅），这里我们可以尝试输出当前模块的句柄",{"_index":7721,"title":{},"body":{"1015833":{}}}],["传输不可靠",{"_index":9972,"title":{},"body":{"1015818":{}}}],["传输可靠",{"_index":9968,"title":{},"body":{"1015818":{}}}],["传输效率高",{"_index":9971,"title":{},"body":{"1015818":{}}}],["传送前两个，剩下：从右至左入栈",{"_index":2302,"title":{},"body":{"1015843":{}}}],["传递参数",{"_index":8611,"title":{},"body":{"1015833":{}}}],["传递的参数使用结构体指针，我们可以通过runtime_class这个宏来返回该格式",{"_index":227,"title":{},"body":{"1015822":{}}}],["但也不完全如此，很多内核函数调用时会直接的去使用keinitializeapc、kiinsertqueueapc，也就不完全是这么一个挂入流程了，因此我们想要真正了解挂入流程，就需要了解这两个函数",{"_index":10859,"title":{},"body":{"2424869":{}}}],["但从汇编来看我们可以看得出do...while循环语句效率是最高的，但是在日常使用来说大部分会选择使用for与while，do...while出现的较少，还是跟之前我们说的一样，这一点空间可以忽视不管，for语句是最方便书写的，也就是我们可以用空间换编写效率",{"_index":1899,"title":{},"body":{"1015843":{}}}],["但如果存到堆栈里面的值过多，那么就得不断地调整esp的指向，这是esp寻址的缺点",{"_index":5398,"title":{},"body":{"1015825":{}}}],["但如果引用类型就是指针，为什么c++需要新创建一个引用类型的概念呢？它们之间必然存在着一些区别，我们可以从初始化、运算、赋值来看反汇编代码的区别",{"_index":3500,"title":{},"body":{"1015840":{}}}],["但如果有用户apc要执行的话，就意味着线程要提前返回到用户空间去执行，而且返回的位置不是线程进入内核时的位置，而是返回到其他的位置，每处理一个用户apc都会涉及到内核空间与用户空间的切换，因此栈的操作比较复杂，如果我们需要足够了解栈的操作细节才能理解用户apc是如何执行的",{"_index":10920,"title":{},"body":{"2424869":{}}}],["但实际操作并没有这么简单，我们需要考虑当内核文件加载进来之后它申请到的内存基址是否与imagebase一致，如果不一致的情况下，我们就需要去修改重定位表，这样才可以正确的使用全局变量；除此以外，我们还需要去修复iat表，如下两张图所示，是windows在pe文件加载前后iat表存储内容的变化，如果我们不去修复iat表使得其存储的内容执向真正的函数地址，那么当我们使用某个函数时就会出错，因为它指向的是一个image_thunk_data结构体",{"_index":6680,"title":{},"body":{"1933380":{}}}],["但对于人来说机器语言（二进制）比较难懂，所以前人就在这个基础上衍生出了「汇编语言」，相比于机器语言，汇编语言更加通俗易懂一些，但汇编语言终究不是机器语言，想要计算机读懂汇编语言，就需要「编译器」来将汇编语言转为机器语言",{"_index":4982,"title":{},"body":{"1015825":{}}}],["但很显然这些虚假消息并不可靠，因为它们主要依赖于peb.ldr中的三个链表（很容易被修改），这些链表以不同的顺序存储了该进程加载的所有模块",{"_index":4774,"title":{},"body":{"3440657":{}}}],["但是在”一个线程等待不超过3个对象“的场景下，_kthread+0x5c所指向的地址就是_kthread+0x70的地址",{"_index":10624,"title":{},"body":{"2424889":{}}}],["但是在这个函数调用之前，又将_ethread.tcb.apcstate.process的值修改为要读取的进程结构体_kprocess地址，这样就避免了线程切换时导致的cr3值还原回去",{"_index":11297,"title":{},"body":{"1703937":{}}}],["但是在这里赋值运算符是否就非常完美了呢？不是的，赋值运算符和拷贝构造函数是有相同缺点的，那就是其默认都是浅拷贝",{"_index":3696,"title":{},"body":{"1015840":{}}}],["但是在这里，我们只是比较一下大小，确实用int类型，这有点浪费了，在c++中有一个类型叫bool类型，其返回就是真（1）、假（0），所以我们可以使用这个数据类型",{"_index":3609,"title":{},"body":{"1015840":{}}}],["但是如果每次都是按照这个从高到低的优先级寻找，从效率和性能来看是很差的，所以windows就通过一个dword类型的变量（_kireadysummary）来记录，当向调度链表中挂入或取出某个线程时，会先判断当前级别的链表是否为空，为空则在dword变量的对应偏移位的值设为0，反之不为空就设为1",{"_index":11261,"title":{},"body":{"1703937":{}}}],["但是存放的这个值是存放在物理内存上的，所以这里的虚拟内存和物理内存就有一个对应关系，当你真正使用的时候才会给分配物理内存，不使用的时候则就只有虚拟内存（空头支票",{"_index":7891,"title":{},"body":{"1015833":{}}}],["但是完整的重定位表还包含了很多重定位项，所以整体大小是没有一个统一标准的，需要根据实际情况。该结构体的第一个成员virtualaddress表示基地址，第二个成员sizeofblock也就是减去当前结构体的大小之后其他的所有重定位项加起来的大小",{"_index":6607,"title":{},"body":{"1015828":{}}}],["但是我们一般不会使用jmp来调用函数，因为它执行完后没办法返回到原来要执行的地址，所以我们选择call指令，call指令需要搭配ret指令一起使用",{"_index":5367,"title":{},"body":{"1015825":{}}}],["但是我们之前举例的变长指令00却让有点让人摸不着头脑",{"_index":11829,"title":{},"body":{"1015817":{}}}],["但是我们会发现使用创建进程调试时，触发dll加载类型的调试事件。使用附加进程调试时，也同样的会出现dll加载类型的调试事件",{"_index":4766,"title":{},"body":{"3440657":{}}}],["但是我们可以通过hook系统函数来突破xp操作系统的4gb限制",{"_index":7911,"title":{},"body":{"1015833":{}}}],["但是我们点击其他的标签页的时候还是会看见这个子窗口，那么我们应该用其他事件去解决这个问题，先写好其他页面的填充，然后通过类向导去创建tcn_selectchange消息相关的处理函数，这个消息表示当选择被修改时应如何去处理",{"_index":1330,"title":{},"body":{"1015822":{}}}],["但是有一个问题，当我们把eax的值压入堆栈中，然后再想把eax的值放回去使用这种方法完全不行，我们还需要一个mov指令将值放回去，这样很繁琐，所以我们可以使用堆栈指令：p",{"_index":5336,"title":{},"body":{"1015825":{}}}],["但是现在我们这是创建好了标签页，实际上里面还没有任何东西，我们可以现在资源中区创建几个对话框，并且为其创建窗口类",{"_index":1324,"title":{},"body":{"1015822":{}}}],["但是这个冒泡排序的函数只能对int类型，如果我们想要使用char类型的时候就要重新写一个函数，这就违背了c++的初衷，重复造轮子了",{"_index":3631,"title":{},"body":{"1015840":{}}}],["但是这个并不是我们最重要的，或者说不是其真正有意义的参数，有意义的是参数值为create_suspended，也就是以挂起的形式创建进程",{"_index":7363,"title":{},"body":{"1015833":{}}}],["但是这个这个实际上与我们的功能差了一些，因为模式为mm_lometric，其x向右则加，y向下则减，所以在代码中的point.y+100需要改成point.",{"_index":688,"title":{},"body":{"1015822":{}}}],["但是这样就会存在缺点，所以我们可以写个循环去遍历获取，这里完全可以根据getnextsiblingitem函数、getchilditem函数两者的返回值去循环判断遍历",{"_index":1245,"title":{},"body":{"1015822":{}}}],["但是这样我们还需要一个消息处理的函数，这个函数要写在cmainwindow类声明中",{"_index":368,"title":{},"body":{"1015822":{}}}],["但是这样显然还不行，因为我们的标签页被遮住了，所以我们需要手动的去调整一下坐标让看起来更好一些",{"_index":1329,"title":{},"body":{"1015822":{}}}],["但是这样的弊端，就很清楚了，就是我们通过父类类型的指针指向子类类型的对象，是无法访问到子类类型自己本身的成员，只能访问到继承父类类型的成员",{"_index":3565,"title":{},"body":{"1015840":{}}}],["但是这样能满足中文、韩文这种象形文字吗？其实并不可以，如上这张表实际上使用频率很低，而这时候gb2312编码（该编码与gbk没有什么本质区别，无非就是收录的汉字和图形符号的区别：gb2312标准共收录6763个汉字，gbk共收入21886个汉字和图形符号）考虑到这个因素就占用了这张表，那么是怎么占用的呢？其本质就是创建两张如上图所示的表，然后进行拼接，两个字节加起来就组成一个新的中文文字",{"_index":7070,"title":{},"body":{"1015833":{}}}],["但是这样，如上代码就会出现问题，因为我们没法直接访问到成员，因此从设计层面出发设计这个，我们可以提供按钮或者说一个函数用来控制这些值",{"_index":3532,"title":{},"body":{"1015840":{}}}],["但是这里很奇怪，第一个成员为什么就能是print函数呢？跟我们之前理解的4个字节的参数完全不一样",{"_index":3591,"title":{},"body":{"1015840":{}}}],["但是需要注意的是低2g的用户空间使用还有前64kb的空指针赋值区和后64kb的用户禁入区是我们目前不能使用的",{"_index":7896,"title":{},"body":{"1015833":{}}}],["但是，当pe文件加载之后，iat就发生了变化，它里面就直接存储了函数的地址",{"_index":6592,"title":{},"body":{"1015828":{}}}],["但未必都能访问，所以需要记录哪些地方分配了",{"_index":7899,"title":{},"body":{"1015833":{}}}],["但这个结构体已经指定了成员变量的数据宽度int、char，而我们想要比较任意类型的话，可以使用模板改造下这段代码",{"_index":3647,"title":{},"body":{"1015840":{}}}],["但这也会引起命名冲突，如果命名空间x里面有一个test函数，但是在正常代码中也存在test函数，你想调用的是本身的该怎么办呢？实际上在c++中，你定义的所有东西都存在一个全局命名空间，而想调用可以使用如下语法",{"_index":3730,"title":{},"body":{"1015840":{}}}],["但这只是intel的设计思想，操作系统并没有这样做，所以我们理解tss的话，只需要知道它可以一次性换掉所有的寄存器即可",{"_index":9291,"title":{},"body":{"1015831":{}}}],["但这样看似解决了多行指令的同步问题，但实际又出了一个新的问题，即在dwflag的值设为1之前发生了线程切换，其他的线程仍然可以通过判断进入临界区，这样临界区的作用就失效了。那么这里的问题就很明显是发生在了上锁的顺序上，所以我们可以换一种方式，先修改锁的值，然后再判断进入临界区",{"_index":6662,"title":{},"body":{"1933380":{}}}],["但这样随之而来的问题也就产生了，一般情况下，我们是想要在创建对象的时候就赋值了，也就是说我们使用构造函数去赋值，那这时候如果父类存在构造函数，使用子类创建对象的时候，子类默认会调用父类无参的构造函数，也就是说父类如果存在有参的构造函数被继承，就必须要有无参的构造函数",{"_index":3540,"title":{},"body":{"1015840":{}}}],["但这种方式在很多面向对象语言中是不允许时间的，在c++中是可以使用的，其内存分布也与第一种方式不一样",{"_index":3413,"title":{},"body":{"1015840":{}}}],["但需要注意的是如果你继承的不是cframewnd而是cwnd，其是没有del",{"_index":587,"title":{},"body":{"1015822":{}}}],["但需要注意的是由于内存对齐的缘故，在重定位表中还是有很多的无用项的，所以你需要判断当前重定位项（2字节）的高四位是否为3，如果是那么低12位就是偏移量，最后的地址也就是virtualaddress+低12位，如果不是就表示这是无所谓的值",{"_index":6615,"title":{},"body":{"1015828":{}}}],["但需要注意的是，这里我们看见的反汇编代码是debug版本，也就是方便我们调试的，而实际上程序编译应该是以release版本，两个版本对应的汇编代码也是不一样的，另外vc6在展示反汇编代码的时，适当的做了一些优化，也就是便于阅读理解，例如上图所示的函数调用的汇编call指令，实际上就是cal",{"_index":1372,"title":{},"body":{"1015843":{}}}],["但需要注意的是，这里我们需要加入一个父类的cframewnd::onnclbuttondown，这是因为如果不加入的话，当前消息处理函数就没法处理放大、缩小、关闭这些按钮，而会一直触发弹框",{"_index":959,"title":{},"body":{"1015822":{}}}],["但需要注意，指针类型无法做乘除运算",{"_index":2091,"title":{},"body":{"1015843":{}}}],["位数",{"_index":1001,"title":{},"body":{"1015822":{}}}],["位运算加减乘除",{"_index":5128,"title":{},"body":{"1015825":{}}}],["位运算在汇编的学习中有提到，这里不过多赘述",{"_index":1774,"title":{},"body":{"1015843":{}}}],["位运算符",{"_index":1768,"title":{},"body":{"1015843":{}}}],["位（bi",{"_index":5081,"title":{},"body":{"1015825":{}}}],["低12位属性",{"_index":9437,"title":{},"body":{"1015831":{}}}],["低32位段选择子可以设为0x0008（对应0环代码段）、0x001b（对应3环代码段），偏移不确定所以填0",{"_index":9205,"title":{},"body":{"1015831":{}}}],["作用",{"_index":705,"title":{},"body":{"1015817":{},"1015818":{},"1015822":{},"1015823":{},"1015846":{},"1703937":{},"1933378":{}}}],["作用：如果我们需要实现一些功能而用到一个类，但是其他的模块、类用不到，我们可以就把这个类写到当前所需要使用类中。（隐藏",{"_index":3720,"title":{},"body":{"1015840":{}}}],["你会发现原来指令中的ds变为了ss，这是因为当你的内存地址是esp或ebp组成的需要使用ss，暂时先不用管原因",{"_index":5394,"title":{},"body":{"1015825":{}}}],["你可以尝试在16进制的编辑器中去编辑某个exe文件保留两个成员e_magic和e_lfanew，其他的以0x00填充，然后保存文件，你会发现修改后的文件还是可以正常运行的",{"_index":6079,"title":{},"body":{"1015828":{}}}],["你可以理解为没有去具体声明和实现addref、release、queryinterface这三个接口函数的类就是我们的com接口，在如上代码中也就是idb这个类为com接口",{"_index":2821,"title":{},"body":{"1015823":{}}}],["你可以通过设置方法来设置属性，通过获取方法来获取属性",{"_index":620,"title":{},"body":{"1015822":{}}}],["你复制过去就一定可以执行吗？前提条件是什么",{"_index":8600,"title":{},"body":{"1015833":{}}}],["你想要识别一个文件是不是pe文件，或者说是不是一个可执行文件，可以根据pe指纹来识别：首先你需要找到一个可以以16进制打开pe文件的工具（010",{"_index":5984,"title":{},"body":{"1015828":{}}}],["你要将自定义函数复制到目标进程中，你复制的东西本质是什么",{"_index":8599,"title":{},"body":{"1015833":{}}}],["使列表框在不需要滚动时显示一个禁止的垂直滚动条",{"_index":1148,"title":{},"body":{"1015822":{}}}],["使列表框在显示列表项时识别并扩展制表符('\\t')，默认的制表宽度是32个对话框单位",{"_index":1146,"title":{},"body":{"1015822":{}}}],["使拖放无效",{"_index":1230,"title":{},"body":{"1015822":{}}}],["使用",{"_index":3257,"title":{},"body":{"1015823":{}}}],["使用.def文件",{"_index":8327,"title":{},"body":{"1015833":{}}}],["使用16位栈指针寄存器sp",{"_index":9056,"title":{},"body":{"1015831":{}}}],["使用32位栈指针寄存器esp",{"_index":9054,"title":{},"body":{"1015831":{}}}],["使用bstr不能直接赋值，需要借助函数",{"_index":2924,"title":{},"body":{"1015823":{}}}],["使用cal",{"_index":9306,"title":{},"body":{"1015831":{}}}],["使用cdc类",{"_index":606,"title":{},"body":{"1015822":{}}}],["使用const关键词定义的成员，同样没办法直接初始化，需要在初始化列表中进行初始化",{"_index":216,"title":{},"body":{"1015822":{}}}],["使用deque容器",{"_index":11382,"title":{},"body":{"1015814":{}}}],["使用in",{"_index":1976,"title":{},"body":{"1015831":{},"1015843":{}}}],["使用inl",{"_index":5904,"title":{},"body":{"1015847":{}}}],["使用lineto函数画线需要搭配moveto函数，moveto函数决定了画一条线的其实位置，lineto函数则是开始画一条线然后到终止位置，而后如果你想再画一条线实际上就要遵循最后一次lineto函数终止位置开始画",{"_index":721,"title":{},"body":{"1015822":{}}}],["使用listctrl",{"_index":1183,"title":{},"body":{"1015822":{}}}],["使用list容器",{"_index":11409,"title":{},"body":{"1015814":{}}}],["使用map/multimap容器",{"_index":11494,"title":{},"body":{"1015814":{}}}],["使用printf函数需要在代码开头写#inclu",{"_index":1670,"title":{},"body":{"1015843":{}}}],["使用prior",{"_index":11584,"title":{},"body":{"1015814":{}}}],["使用queue容器",{"_index":11562,"title":{},"body":{"1015814":{}}}],["使用sendmessage函数发送消息，当getmessage函数接收消息时，它会进入0环遍历sentmessageslisthead消息队列以检查是否有消息。如果有消息，则会进行处理；如果没有消息，则会立即返回。在有消息的情况下，必须完全处理完消息才能返回，否则sendmessage函数会一直阻塞在这里，直到接收到对方的执行结果并返回",{"_index":4012,"title":{},"body":{"3440655":{}}}],["使用set/multiset容器",{"_index":11428,"title":{},"body":{"1015814":{}}}],["使用shor",{"_index":1978,"title":{},"body":{"1015843":{}}}],["使用stack容器",{"_index":11539,"title":{},"body":{"1015814":{}}}],["使用tabctrl",{"_index":1318,"title":{},"body":{"1015822":{}}}],["使用treectrl",{"_index":1233,"title":{},"body":{"1015822":{}}}],["使用tss段中的值修改tr寄存器",{"_index":9372,"title":{},"body":{"1015831":{}}}],["使用vc6中自带的rti",{"_index":208,"title":{},"body":{"1015822":{}}}],["使用vector容器",{"_index":11330,"title":{},"body":{"1015814":{}}}],["使用while语句要注意表达式中的变量要自增自减，来实现循环结束的效果，不然会出现死循环的情况",{"_index":1843,"title":{},"body":{"1015843":{}}}],["使用win32",{"_index":81,"title":{},"body":{"1015822":{},"1015833":{}}}],["使用三个关键的宏",{"_index":364,"title":{},"body":{"1015822":{}}}],["使用不同类型的数组传入冒泡排序函数，观察一下执行地址",{"_index":3639,"title":{},"body":{"1015840":{}}}],["使用动态创建",{"_index":327,"title":{},"body":{"1015822":{}}}],["使用动态链接库",{"_index":8338,"title":{},"body":{"1015833":{}}}],["使用动态链接库的步骤比较繁琐，一共有如下几个步骤",{"_index":8339,"title":{},"body":{"1015833":{}}}],["使用双引号：系统首先到当前目录下查找被包含的文件，如果没找到，再到系统指定的包含文件目录(由用户在配置环境时设置)去找使用尖括号：直接到系统指定的包含文件目录去查找",{"_index":2399,"title":{},"body":{"1015843":{}}}],["使用头文件afxwin.h",{"_index":89,"title":{},"body":{"1015822":{}}}],["使用如下格式即可",{"_index":3650,"title":{},"body":{"1015840":{}}}],["使用宏在自己的类中构建",{"_index":222,"title":{},"body":{"1015822":{}}}],["使用宏定义函数和普通函数的区别：使用宏比较节省空间，因为使用宏定义函数，没有堆栈提升操作，也就是不会作为函数调用而是直接内联到代码内",{"_index":2367,"title":{},"body":{"1015843":{}}}],["使用序号减去base（起始序号）得到的值",{"_index":6535,"title":{},"body":{"1015828":{}}}],["使用方式",{"_index":3196,"title":{},"body":{"1015823":{}}}],["使用时左右两边的结果相与、相或，结果最终只有一个",{"_index":1767,"title":{},"body":{"1015843":{}}}],["使用画刷、画笔、字体",{"_index":827,"title":{},"body":{"1015822":{}}}],["使用简写方式指令：movsd，将esi指定的内存地址的值（4字节数据）存入edi指定的内存地址中",{"_index":5301,"title":{},"body":{"1015825":{}}}],["使用自动化组件",{"_index":3209,"title":{},"body":{"1015823":{}}}],["使用自动化组件并不难，跟之前一样创建atl项目以及简单对象，只不过在创建对象的时候需要选择接口类型为双重",{"_index":3210,"title":{},"body":{"1015823":{}}}],["使用自定义对象",{"_index":11750,"title":{},"body":{"1015814":{}}}],["使用隐式链接，编译器会将链接的dll文件存放到导入表中",{"_index":8373,"title":{},"body":{"1015833":{}}}],["使用驱动程序",{"_index":5479,"title":{},"body":{"1015847":{}}}],["使置换式标签编辑通知有效",{"_index":1228,"title":{},"body":{"1015822":{}}}],["例如以上代码中的类型lpctstr，实际上我们跟进一下代码（选中f12）会发现其本质就是con",{"_index":7159,"title":{},"body":{"1015833":{}}}],["例如在如下的程序中有一个硬编码55，对应的汇编就是push",{"_index":11809,"title":{},"body":{"1015817":{}}}],["例如如下代码",{"_index":2023,"title":{},"body":{"1015843":{}}}],["例如如下代码，我们指定左上角坐标为：10",{"_index":756,"title":{},"body":{"1015822":{}}}],["例如字母a，在0x0000",{"_index":7101,"title":{},"body":{"1015833":{}}}],["例如我们想要在控制台中打印一个宽字符的字符串",{"_index":7131,"title":{},"body":{"1015833":{}}}],["例如我现在想将long类型转为float类型",{"_index":3083,"title":{},"body":{"1015823":{}}}],["例如，在当前程序中就是这样，根据0x42ba30",{"_index":6340,"title":{},"body":{"1015828":{}}}],["例如：中国的“中”这个字，就是0xd0和0xd6拼接起来的。这种编码是否存在问题？这是必然的，我们已经知道了该编码的设计原理，假设我们将“中国”这两个字发给国外的朋友，他的电脑上并没有该编码表，所以解析出来的则不会是汉字，而会出现大家所熟知的“乱码",{"_index":7071,"title":{},"body":{"1015833":{}}}],["例：in",{"_index":1459,"title":{},"body":{"1015843":{}}}],["依次按照步骤配置安装即可，建议将这三个东西放在同一个目录下",{"_index":4102,"title":{},"body":{"1015820":{}}}],["保存现场",{"_index":2496,"title":{},"body":{"1015846":{}}}],["保护模式",{"_index":6620,"title":{"1015831":{}},"body":{"1015827":{},"1015831":{},"1015832":{}}}],["保护模式下有段、页机制，本章节就来了解页的机制，它相对于段来说更加重要",{"_index":9383,"title":{},"body":{"1015831":{}}}],["保护模式的特点就是段、页的机制，这也是保护模式所需要学习的内容。学习保护模式才能真正的理解内核是如何运作的",{"_index":8902,"title":{},"body":{"1015831":{}}}],["保留",{"_index":1008,"title":{},"body":{"1015822":{}}}],["保留与提交的误区",{"_index":7032,"title":{},"body":{"2949228":{}}}],["保留这两个成员的原因是因为它们代表着我们之前所说的pe指纹，操作系统也是根据这个来识别是否是pe文件的，所以不能够更改、删除（e_magic是一种标识，e_lfanew则表示pe文件头的位置",{"_index":6080,"title":{},"body":{"1015828":{}}}],["保证对象只有一个存在",{"_index":3743,"title":{},"body":{"1015840":{}}}],["信号和槽",{"_index":4132,"title":{},"body":{"1015820":{}}}],["信号量",{"_index":10686,"title":{},"body":{"2424889":{}}}],["信号量与事件的差异在于前者允许多个线程同时进入由waitforxx和releasesemaphore函数形成的临界区。事件可以在多个线程想要同时对一个全局变量进行处理时进行使用，确保只有一个线程会对其进行处理，处理完之后再给到另外一个线程",{"_index":10689,"title":{},"body":{"2424889":{}}}],["信号量对应的结构体如下，该结构体由_dispatcher_header和limit成员组成，创建信号量对象就是填充这个结构体，createsemaphore函数的linitialcount填充_dispatcher_header.signalstate，lmaximumcount填充l",{"_index":10699,"title":{},"body":{"2424889":{}}}],["信号量用于解决生产者与消费者问题，也就是在生产资源与消费者数量不对等的情况下，该如何确保线程同步。如下图所示，有1个生产者线程，每次可以生产出3个资源，此时有5个消费者线程，需要保证不会有2个线程同时消费1个资源",{"_index":10690,"title":{},"body":{"2424889":{}}}],["修复eip寄存器的值，是对于不同类型的断点，在断点触发后，eip寄存器的位置会有所不同。对于软件断点",{"_index":4827,"title":{},"body":{"3440657":{}}}],["修改",{"_index":6973,"title":{},"body":{"2949228":{}}}],["修改eip",{"_index":11906,"title":{},"body":{"1015817":{}}}],["修改eip的指令",{"_index":5349,"title":{},"body":{"1015825":{}}}],["修改erx",{"_index":11838,"title":{},"body":{"1015817":{}}}],["修改signalstate为1",{"_index":10679,"title":{},"body":{"2424889":{}}}],["修改元素",{"_index":11474,"title":{},"body":{"1015814":{}}}],["修改函数地址表地址",{"_index":5852,"title":{},"body":{"1015847":{}}}],["修改完成之后保存运行就会发现其先运行了我们插入的代码而后再进入程序真正的入口函数代码",{"_index":6366,"title":{},"body":{"1015828":{}}}],["修改对象程序",{"_index":2644,"title":{},"body":{"1015823":{}}}],["修改接口文件",{"_index":2637,"title":{},"body":{"1015823":{}}}],["修改映射模式",{"_index":661,"title":{},"body":{"1015822":{}}}],["修改物理页读写属性的方式有两种，第一种方法是根据页目录表、页表基址找到pde、pte修改其r/w位值为1，就可以让物理页具有读写属性（关于具体的代码实现可以参考不同分页模式下的mmisaddressvalid函数",{"_index":5854,"title":{},"body":{"1015847":{}}}],["修改目录名称（移动",{"_index":8080,"title":{},"body":{"1015833":{}}}],["修改该参数然后重启系统即可",{"_index":9393,"title":{},"body":{"1015831":{}}}],["借助写表格的方式去查表计算，这并不高效，那么回想一下我们从学习数学开始是怎么学习计算的呢？相信你已经回忆起来了，我们是借助加减乘除这四张算术表去计算的，那么在这里我们可以尝试写一下八进制的加法算术表",{"_index":5032,"title":{},"body":{"1015825":{}}}],["借助算术表",{"_index":5004,"title":{},"body":{"1015825":{}}}],["值为0和1我们好理解，但是2和3我们就需要来具体分析代码了，如下图所示因为不确定此时的环境和先前的环境是否一致（可能发生挂靠），所以这里会进行判断，如果environment值为2就会跳转到一处代码，将当前线程的apcstateindex赋值给dl寄存器，并跳回去之后将dl寄存器的值赋给kapc.apcstateindex",{"_index":10880,"title":{},"body":{"2424869":{}}}],["值得注意的是全局句柄表与私有句柄表不同，前者指向的内核对象地址不包含0x18字节的_object_header结构，因此我们只需要将低3位的属性清0即可直接访问到进程结构体，如下图所示，我们通过imagefilename确定我们找到的是计算机进程对应的结构体",{"_index":8734,"title":{},"body":{"1933378":{}}}],["值得注意的是在这张表中最多也就是占用一个字节的宽度，所以我们完全没有必要使用int来存储字符，可以选择char，例如：ç",{"_index":1652,"title":{},"body":{"1015843":{}}}],["值得注意的是，waitformultipleobjects函数多出了两个参数，分别是第一个参数ncount（即等待对象的数量）和第二个参数bwaitall（即是否要所有等待对象符合条件，该值决定了等待块的waittype成员的值，该值为false，则waittype值为1，反之为0",{"_index":10588,"title":{},"body":{"2424889":{}}}],["值得注意的是：这里的表达式最终结果只要是非0，都会进入循环，而表达式也不具备强制性，可以是任何形式，但需要一个最终结果给到循环语句即可",{"_index":1849,"title":{},"body":{"1015843":{}}}],["假设中这个字以unicode方式表示占2个字节，而国这个字却占4个，这个时候你该如何去存储",{"_index":7077,"title":{},"body":{"1015833":{}}}],["假设你自己来实现临界区，可能在判断令牌有没有被拿走的时候就又会出现问题，所以自己实现临界区还是有一定的门槛的",{"_index":7504,"title":{},"body":{"1015833":{}}}],["假设你访问的是www.baidu.com，这是一个域名，但是这个域名你想要去访问到真正的那些展示给你的资源其背后对应的正是某个服务器的ip，根据这个ip和对应的端口你才可以访问到资源，而将域名和ip进行关联的正是",{"_index":9703,"title":{},"body":{"1015818":{}}}],["假设当前dos头、pe头与节表加起来的宽度为302，而成员filealignment的值为200，这时候成员sizeofheaders的值按filealignment的值进行文件对齐就应该是400，而之所以需要文件对齐是为了提高执行效率，这是一个牺牲空间换时间的一种策略，我们可以在当前pe文件中查看这两个成员",{"_index":6027,"title":{},"body":{"1015828":{}}}],["假设当前操作系统只有2m的有效物理内存。如果一个线程使用virtualalloc函数申请了某个线性地址对应的物理页，并且一直占用不释放，很快就会占满整个内存。然而线程并非始终处于执行状态，有时会进入休眠，进入等待队列。线程处于休眠状态，却仍然占用着物理页，导致内存利用效率非常低下",{"_index":7014,"title":{},"body":{"2949228":{}}}],["假设我们有这样一个需求：打开当前工作目录下的1.txt文件",{"_index":7380,"title":{},"body":{"1015833":{}}}],["假设我们要添加一个鼠标左键按下的消息就需要在这里面去填写",{"_index":367,"title":{},"body":{"1015822":{}}}],["假设有一个冒泡排序的函数",{"_index":3624,"title":{},"body":{"1015840":{}}}],["假设现在我们想要在鼠标左键按下的消息处理函数中判断当shift键按下则触发弹框，可以这样写",{"_index":949,"title":{},"body":{"1015822":{}}}],["假设现在我们进程a的代码是这样的",{"_index":8477,"title":{},"body":{"1015833":{}}}],["假设调度链表中都没有就绪状态的线程了，cpu就会取_kpcr.prcbdata.idlethread即空闲线程去运行，这一点我们可以通过ida来看一下kswapthread调用kifindreadythread的前后代码来论证",{"_index":11264,"title":{},"body":{"1703937":{}}}],["假设，子类中存在一个与父类中相同的成员会如何",{"_index":3382,"title":{},"body":{"1015840":{}}}],["偏移",{"_index":10378,"title":{},"body":{"1015818":{},"1703937":{}}}],["偏移：这个就类似于我们ip帧结构中的首部长度，1个单位4字节",{"_index":10373,"title":{},"body":{"1015818":{}}}],["做准备",{"_index":3188,"title":{},"body":{"1015823":{}}}],["停止调试：shif",{"_index":1421,"title":{},"body":{"1015843":{}}}],["先前模式，某些内核函数会判断程序调用它时是0环还是3环，就是通过该成员去判断",{"_index":11036,"title":{},"body":{"1703937":{}}}],["先前状态，先前键被按下为1，抬起为0",{"_index":1010,"title":{},"body":{"1015822":{}}}],["先将esi、edi的值修改为对应内存地址",{"_index":5296,"title":{},"body":{"1015825":{}}}],["先将这个实数的绝对值化为二进制格式",{"_index":1594,"title":{},"body":{"1015843":{}}}],["先是给了esi一个_kprcb的地址，接着调用kifindreadythread，比较返回结果是否为空，如果为空则进行跳转",{"_index":11265,"title":{},"body":{"1703937":{}}}],["先用函数名字去查询函数名称表的索引（每张表都有一个从0开始的索引",{"_index":6531,"title":{},"body":{"1015828":{}}}],["先进行",{"_index":11961,"title":{},"body":{"1015817":{}}}],["入参是一个键值对，first成员就是key，second成员就是value，另外这里输出参数由printf变成了cout，这是为了可以更方便的去编写代码，使用printf需要提前知道输出数据的类型然后使用，而cout不需要",{"_index":11510,"title":{},"body":{"1015814":{}}}],["內存重新分配函数3.cotaskmemfree：内存释放函数4.cogetmallo：获取com库的内存管理器接口",{"_index":2840,"title":{},"body":{"1015823":{}}}],["全局变量",{"_index":1465,"title":{},"body":{"1015843":{}}}],["全局变量a实际上就是一个内存地址，接着来看其存储的内容（0x7b转为十进制就是123",{"_index":1476,"title":{},"body":{"1015843":{}}}],["全局变量中的值任何程序都可以改，其最终存储的就是最后一次修改的值",{"_index":1470,"title":{},"body":{"1015843":{}}}],["全局变量区，在函数外面",{"_index":3445,"title":{},"body":{"1015840":{}}}],["全局变量是可以没有初始值直接使用的，因为系统默认给其0为初始值",{"_index":1482,"title":{},"body":{"1015843":{}}}],["全局句柄表",{"_index":8723,"title":{},"body":{"1933378":{}}}],["全局句柄表相对于进程私有的句柄表来说比较复杂，它的结构如下图所示，全局句柄表的大小可以通过它的成员tablecode来查看，当tablecode的低2位值为0时，则表示全局句柄表的大小只有一页也就是4kb（4096个字节），512个表项，当tablecode的低2位值为1时，它就是多级的，第一页存储的就是1024个地址，每个地址指向着具有实际内容（内核对象地址）的表，那也就表示有1024*512个表项，tablecode的其他值以此类推",{"_index":8729,"title":{},"body":{"1933378":{}}}],["全局对象的建构会比程序入口点更早，所以cwinapp类的对象构造函数将早于winmain函数，而winmain函数又广泛使用了应用程序对象，这就是为什么应该程序对象必须做全局声明的原因",{"_index":179,"title":{},"body":{"1015822":{}}}],["全局数组及成员",{"_index":6880,"title":{},"body":{"2949228":{}}}],["全窗口坐标，如下图所示",{"_index":699,"title":{},"body":{"1015822":{}}}],["八进制的前50表",{"_index":5005,"title":{},"body":{"1015825":{}}}],["公开密钥",{"_index":10442,"title":{},"body":{"1015818":{}}}],["公钥加密函数",{"_index":10493,"title":{},"body":{"1015818":{}}}],["共1字节",{"_index":11984,"title":{},"body":{"1015817":{}}}],["共2字节",{"_index":11960,"title":{},"body":{"1015817":{}}}],["共3字节",{"_index":11988,"title":{},"body":{"1015817":{}}}],["共5字节",{"_index":11975,"title":{},"body":{"1015817":{}}}],["共7字节",{"_index":11980,"title":{},"body":{"1015817":{}}}],["共享内存",{"_index":7948,"title":{},"body":{"1015833":{}}}],["共享内存函数",{"_index":6786,"title":{},"body":{"2949228":{}}}],["共享内存实验",{"_index":6831,"title":{},"body":{"2949228":{}}}],["共享内存的申请释放",{"_index":7947,"title":{},"body":{"1015833":{}}}],["共享内存通过createfilemapping函数映射",{"_index":7921,"title":{},"body":{"1015833":{}}}],["共享内存通过createfilemapping函数映射，该函数语法格式如下",{"_index":7949,"title":{},"body":{"1015833":{}}}],["共享文件",{"_index":6846,"title":{},"body":{"2949228":{}}}],["共享文件的主要好处是能有效地处理大文件，减少重复的内存加载和拉伸操作，从而节省资源开销。需要注意的是，如果一个进程修改了共享文件，那么所有使用该文件的进程都会受到影响",{"_index":6860,"title":{},"body":{"2949228":{}}}],["共享物理页",{"_index":6832,"title":{},"body":{"2949228":{}}}],["关于gdi有这么几个概念",{"_index":7653,"title":{},"body":{"1015833":{}}}],["关于mfc的动态创建",{"_index":305,"title":{},"body":{"1015822":{}}}],["关于其他的信号和槽可以查看qt",{"_index":4177,"title":{},"body":{"1015820":{}}}],["关于函数名、参数名的命名也是有要求的，如下所示",{"_index":1355,"title":{},"body":{"1015843":{}}}],["关于子窗口控件",{"_index":7829,"title":{},"body":{"1015833":{}}}],["关于强制唤醒",{"_index":10666,"title":{},"body":{"2424889":{}}}],["关于本节课的环境：vc6，vc6是一个集成开发环境，使用vc6而不去使用较新的vs是因为vs会自己优化代码，而我们想要直接了解真正的本质就应该选择无添加的vc6",{"_index":1335,"title":{},"body":{"1015843":{}}}],["关系式推导出来d（私有指数",{"_index":10441,"title":{},"body":{"1015818":{}}}],["关系运算符",{"_index":1744,"title":{},"body":{"1015843":{}}}],["关系运算符的值为假时，结果值都为0",{"_index":1759,"title":{},"body":{"1015843":{}}}],["关系运算符的值为真时，结果值都为1",{"_index":1758,"title":{},"body":{"1015843":{}}}],["关系运算符的值只能是0或1",{"_index":1757,"title":{},"body":{"1015843":{}}}],["关系：两者之间不存在什么特殊关系，也无法访问对方的私有成员",{"_index":3716,"title":{},"body":{"1015840":{}}}],["关联调试对象与被调试进程",{"_index":4535,"title":{},"body":{"3440657":{}}}],["关联调试对象与调试器",{"_index":4529,"title":{},"body":{"3440657":{}}}],["关键循环",{"_index":10625,"title":{},"body":{"2424889":{}}}],["关键循环部分的大致逻辑如下所示，通过代码我们知道在这里，signalstate参数起到了激活条件的判断作用，因此我们要先知道该参数的含义",{"_index":10627,"title":{},"body":{"2424889":{}}}],["关键的宏",{"_index":198,"title":{},"body":{"1015822":{}}}],["关键的结构体",{"_index":202,"title":{},"body":{"1015822":{}}}],["关闭文件",{"_index":8125,"title":{},"body":{"1015833":{}}}],["关闭系统前会产生该类型",{"_index":5704,"title":{},"body":{"1015847":{}}}],["关闭设备",{"_index":5697,"title":{},"body":{"1015847":{}}}],["关闭该对象时是否产生一个审计事件默认值为0，第3位到第31位存放的是该内核对象在内核中的具体地址",{"_index":8719,"title":{},"body":{"1933378":{}}}],["其三个参数分别是画笔样式：虚线、线条宽度：1（注意使用非实线只能使用1）、画笔颜色：红色",{"_index":835,"title":{},"body":{"1015822":{}}}],["其中异常状态码是来自上层的eax，这点我们通过之前的流程就可以知道，接着我们来看异常发生地址（即exceptionaddress）是来自上层的ebx，而ebx又来自[ebp+0x68]，这里实际上指的是trap_frame结构体0x68偏移位eip成员，它是用来记录中断发生地址的，这是因为在保存现场结束之后，esp指向trap_frame的顶部，而ebp也与esp一样",{"_index":4259,"title":{},"body":{"2949166":{}}}],["其中，reg/opcode(第3、4、5位，共3个位)描述指令中的g部分，即寄存器，如下就是这三个位对应寄存器的表示",{"_index":12010,"title":{},"body":{"1015817":{}}}],["其他",{"_index":11061,"title":{},"body":{"1703937":{}}}],["其他以此类推",{"_index":5247,"title":{},"body":{"1015825":{}}}],["其他应用程序",{"_index":7799,"title":{},"body":{"1015833":{}}}],["其他成员",{"_index":10962,"title":{},"body":{"1703937":{}}}],["其他指令",{"_index":11978,"title":{},"body":{"1015817":{}}}],["其他的使用方法都如出一辙，同样，也不过多赘述了",{"_index":3240,"title":{},"body":{"1015823":{}}}],["其他的属性可以自行去研究，都非常简单",{"_index":1126,"title":{},"body":{"1015822":{}}}],["其他的方法都很常见，但是对编辑框来说，还有当编辑框内容发生改变的处理函数",{"_index":1120,"title":{},"body":{"1015822":{}}}],["其他的节表成员可以用00填充，这一块空间就可以给我们添加自己的节表成员",{"_index":6449,"title":{},"body":{"1015828":{}}}],["其他读写，在调用iocreatedevice函数创建设备后不设置交换数据模式即默认为其他方式读写，在使用其他方式读写设备时，派遣函数直接读写应用程序提供的缓冲区地址。在驱动程序中，直接操作应用程序的缓冲区地址是很危险的（不建议使用），只有驱动程序与应用程序运行在相同线程上下文的情况下，才能使用这种方式",{"_index":5667,"title":{},"body":{"1015847":{}}}],["其他进程相关ap",{"_index":7382,"title":{},"body":{"1015833":{}}}],["其会有一个pmessagemap结构体，这个结构体存储的就是一个消息映射表，我们跟进之后会发现其会不停的基于pbasemap成员去重新赋值直到没有为止",{"_index":525,"title":{},"body":{"1015822":{}}}],["其会返回一个值，也就是这里的确定（idok）和取消（idcancel），我们就可以用它来在我们程序出现的时候做一个验证来返回用户确定或取消的结果",{"_index":1053,"title":{},"body":{"1015822":{}}}],["其使用的是afxdeferregisterclass，这是一个宏，其背后就是afxenddeferregisterclass这个函数",{"_index":492,"title":{},"body":{"1015822":{}}}],["其函数传参char",{"_index":7241,"title":{},"body":{"1015833":{}}}],["其分别表示如下",{"_index":10270,"title":{},"body":{"1015818":{}}}],["其原理如下图所示（个人见解），10",{"_index":767,"title":{},"body":{"1015822":{}}}],["其原理如下图所示（个人见解），从10",{"_index":760,"title":{},"body":{"1015822":{}}}],["其参数分别为字体大小、字体名称",{"_index":862,"title":{},"body":{"1015822":{}}}],["其反汇编代码为",{"_index":1815,"title":{},"body":{"1015843":{}}}],["其地址为0x0012fd70，我们就得出对应tss段描述符中base的值，接着limit就是tss的大小0x68，dpl为3（3环程序访问），type域为0x9即表示当前描述符没有被加载过。最终得出tss段描述符为：0000e912`fd700068",{"_index":9335,"title":{},"body":{"1015831":{}}}],["其地址是7c920000，我们在dtdebug中使用命令dp",{"_index":8586,"title":{},"body":{"1015833":{}}}],["其处理流程就是先根据两个标志（空闲标志）去判断当前线程是否是空闲状态，首先在这里我们发现在这里调用并不是getmessage函数而是peekmessage函数，该两者区别如下",{"_index":573,"title":{},"body":{"1015822":{}}}],["其实在内核函数中大多都用到了线程切换，我们可以根据ida的xref来看调用链，最终看见有很多个内核函数调用了线程切换",{"_index":11200,"title":{},"body":{"1703937":{}}}],["其实在创建完项目的时候就应该感觉到有一个文件非常的显眼，那就是hellodialog.rc，这个文件从没见过，其表示的是资源脚本文件，有了这个文件我们就可以添加图标、版本信息等",{"_index":1034,"title":{},"body":{"1015822":{}}}],["其实很简单，unicode编码创建了一张包含世界上所有文字的编码表，只要世界上存在的文字符号，都会赋予一个唯一的编码",{"_index":7074,"title":{},"body":{"1015833":{}}}],["其实本质很简单，我们只需要在创建filemapping对象时候给其一个对象名称即可",{"_index":8268,"title":{},"body":{"1015833":{}}}],["其实这里也运用了缺页异常机制，当cpu访问线性地址时，如果发现pte的值为0，就会触发无效pte的第四种情况（原因未知，需要检查vad）。在这种情况下，操作系统会检查当前进程的vad树",{"_index":7043,"title":{},"body":{"2949228":{}}}],["其实通过这段代码我们就可以知道implement_dyncreate宏的作用就是声明classcmainwindow成员变量、getruntimeclass成员方法、createobject成员方法",{"_index":339,"title":{},"body":{"1015822":{}}}],["其对应的ap",{"_index":10469,"title":{},"body":{"1015818":{}}}],["其对应的反汇编代码如下",{"_index":3321,"title":{},"body":{"1015840":{}}}],["其将case分支的执行地址都存入到了堆栈中，而后使用算法去寻找到对应要执行的地址（堆栈存储的地址），这套算法我们可以这样理解",{"_index":1821,"title":{},"body":{"1015843":{}}}],["其有5个参数，其中argument是提供参数的，其中包含窗口过程函数、窗口句柄、消息类型、消息参数等等内容，这些参数也就对上在3环窗口过程函数所需要的参数了",{"_index":4072,"title":{},"body":{"3440655":{}}}],["其有三个参数，第一个参数表示虚拟键码（就是你键盘某个键对应的代码），第二个参数表示重复数，第三个参数表示通过取位的方式来列出零个和多个标志位",{"_index":999,"title":{},"body":{"1015822":{}}}],["其本质就是很简单的内存复制",{"_index":3669,"title":{},"body":{"1015840":{}}}],["其次b进程使用terminateprocess函数来终止a进程，首先使用句柄信息终止",{"_index":7337,"title":{},"body":{"1015833":{}}}],["其次再取系统调用号给到ebx，然后由于之前已经通过下标为12的位找到了对应的表，所以将系统调用号和0xfff进行与运算，也就是把下标为12的位设为0，接着edi+8与eax进行比较，即系统服务表的servicelimit成员与系统调用号，以此来判断传递的函数索引是否越界，如果越界则跳转异常处理",{"_index":2555,"title":{},"body":{"1015846":{}}}],["其次可以添加右击事件显示菜单",{"_index":1217,"title":{},"body":{"1015822":{}}}],["其次在winmain函数之前使用implement_dynamic宏（个人理解：要在当前使用rtti，又像建立一个父类和子类的关联），其用法跟函数是一样的，传参为类名、父类名",{"_index":225,"title":{},"body":{"1015822":{}}}],["其次我们要创建文件的话就必须要使用createfile函数，我们不能直接这样写，因为它依赖当前进程的导入表，当前进程和目标进程导入表的地址肯定是不一样的，所以不符合复制代码的编写原则；所以我们可以通过线程函数的参数来解决，我们先将所有用到的目标参数写到一个结构体中复制到目标进程，然后将目标进程结构体的地址作为线程函数的参数",{"_index":8614,"title":{},"body":{"1015833":{}}}],["其次我们需要在实现文件中实现这个方法",{"_index":4207,"title":{},"body":{"1015820":{}}}],["其次是begin_message_map、end_message_map宏（这两个宏是成双结对的所以一起看）和on_wm_lbuttondown宏（因为这个宏在它们中间调用",{"_index":378,"title":{},"body":{"1015822":{}}}],["其次需要知道发出了什么信号",{"_index":4140,"title":{},"body":{"1015820":{}}}],["其第一个成员machine表示可以运行在什么样的cpu上，如果它的值为0x0则表示可以运行在任意的cpu上，支持在intel",{"_index":6112,"title":{},"body":{"1015828":{}}}],["其缺点就是根据项目引导生成的代码繁杂冗余，对初学者来说不利用学习和驾驭",{"_index":23,"title":{},"body":{"1015822":{}}}],["其表示在modr/m字节的3、4、5位可以作为opcode的拓宽，也就可以认为其不用来表示通用寄存器了",{"_index":12029,"title":{},"body":{"1015817":{}}}],["具体实现步骤如下图所示",{"_index":8434,"title":{},"body":{"1015833":{}}}],["内存",{"_index":5149,"title":{},"body":{"1015825":{}}}],["内存交换与虚拟内存",{"_index":7013,"title":{},"body":{"2949228":{}}}],["内存和寄存器都是存储数据的，但由于cpu中的寄存器有限（造价比较昂贵），所以我们可以给每一个寄存器取名，但内存不一样，内存太大了无法取名字，所以我们只能使用编号。当我们想向内存中读取数据时，就需要使用到这个编号，这个编号我们称之为内存地址（32位），每一个内存地址（编号）都能存储一个字节（8位）。内存地址是32位的（32位表示32个0和",{"_index":5181,"title":{},"body":{"1015825":{}}}],["内存地址的5种形式",{"_index":5198,"title":{},"body":{"1015825":{}}}],["内存地址的格式（byte、word、dword）来查看内存，在这使用dp",{"_index":5230,"title":{},"body":{"1015825":{}}}],["内存地址表示有很多种形式",{"_index":5199,"title":{},"body":{"1015825":{}}}],["内存断点",{"_index":4850,"title":{},"body":{"3440657":{}}}],["内存映射文件",{"_index":8222,"title":{},"body":{"1015833":{}}}],["内存映射文件之共享",{"_index":8266,"title":{},"body":{"1015833":{}}}],["内存映射文件之写拷贝",{"_index":8278,"title":{},"body":{"1015833":{}}}],["内存映射文件可以让2个进程同时共享一个文件",{"_index":8267,"title":{},"body":{"1015833":{}}}],["内存映射文件就如下图，将硬盘某个文件映射到物理页上，然后再将物理页映射到虚拟内存中",{"_index":8224,"title":{},"body":{"1015833":{}}}],["内存映射文件读写",{"_index":8228,"title":{},"body":{"1015833":{}}}],["内存申请与释放",{"_index":7922,"title":{},"body":{"1015833":{}}}],["内存管理",{"_index":6626,"title":{"2949228":{}},"body":{"1015827":{},"1015832":{}}}],["内存管理函数",{"_index":2838,"title":{},"body":{"1015823":{}}}],["内核",{"_index":5547,"title":{},"body":{"1015847":{}}}],["内核apc与用户apc类似，但是不需要判断这么多，并且内核apc在执行前会先将apcstate.kernelapcpending设为1，表示有等待执行的内核apc，并调用kiunwaitthread函数唤醒线程，用户apc只有在满足3个执行条件后，才会修改apcstate.userapcpending值为1",{"_index":10895,"title":{},"body":{"2424869":{}}}],["内核apc在内核空间执行，不需要换栈，一个循环全部执行完毕",{"_index":10916,"title":{},"body":{"2424869":{}}}],["内核apc在线程切换的时候就会执行，这也就意味着，只要插入内核apc很快就会执行",{"_index":10914,"title":{},"body":{"2424869":{}}}],["内核apc执行过程",{"_index":10897,"title":{},"body":{"2424869":{}}}],["内核api的使用",{"_index":5507,"title":{},"body":{"1015847":{}}}],["内核中会有很多的函数被层层hook，要想绕过hook我们就可以使用重载内核的方式。重载内核跟权限（r3、r0）和内核没关系，重载内核的本质就是将内核文件（pe文件）自己拿过来在按内存格式要求（按pe头成员sectionalignment的值在内存中进行对齐）放入内存，然后自己使用",{"_index":6679,"title":{},"body":{"1933380":{}}}],["内核中的异常处理",{"_index":5533,"title":{},"body":{"1015847":{}}}],["内核函数所在模块为：ntoskrnl.exe（10",{"_index":2493,"title":{},"body":{"1015846":{}}}],["内核回调机制",{"_index":4044,"title":{},"body":{"3440655":{}}}],["内核回调机制中，0环是通过keusermodecallback函数来调用3环函数的。在之前我们的分析ntuserdispatchmessage函数的调用时（ntuserdispatchmessagı",{"_index":4063,"title":{},"body":{"3440655":{}}}],["内核回调：内核回调是指在ring",{"_index":4058,"title":{},"body":{"3440655":{}}}],["内核堆栈",{"_index":11236,"title":{},"body":{"1703937":{}}}],["内核堆栈的结构大致分为两个部分。第一部分就是从initialstack开始一共0x210个字节，存储的就是浮点寄存器的值；剩下的第二部分就是我们之前了解过的_trap_frame结构体",{"_index":11238,"title":{},"body":{"1703937":{}}}],["内核字符串常用函数",{"_index":5574,"title":{},"body":{"1015847":{}}}],["内核字符串种类",{"_index":5555,"title":{},"body":{"1015847":{}}}],["内核对象",{"_index":7300,"title":{},"body":{"1015833":{},"1933378":{}}}],["内核层代码如下，在派遣函数devicedispatchfunc中，我们通过参数pirp获取irp数据，并根据操作码进入读取数据、写入数据指令",{"_index":5766,"title":{},"body":{"1015847":{}}}],["内核异常",{"_index":4268,"title":{},"body":{"2949166":{}}}],["内核模块",{"_index":5597,"title":{},"body":{"1015847":{}}}],["内核空间",{"_index":3796,"title":{},"body":{"1015847":{},"3440655":{}}}],["内核空间与模块",{"_index":5590,"title":{},"body":{"1015847":{}}}],["内核级临界资源怎么办",{"_index":7526,"title":{},"body":{"1015833":{}}}],["内部类",{"_index":3713,"title":{},"body":{"1015840":{}}}],["内部类，简单的说就是在别的类里面定义的类就是内部类",{"_index":3714,"title":{},"body":{"1015840":{}}}],["再一个例子就是字符串的长度",{"_index":7132,"title":{},"body":{"1015833":{}}}],["再使用rtlmovememory来替换函数指令",{"_index":5936,"title":{},"body":{"1015847":{}}}],["再右击这行代码，选择如下图所示的按钮，来查看反汇编代码",{"_index":1370,"title":{},"body":{"1015843":{}}}],["再回到afxwinmain函数，接下来就是一个initapplication函数",{"_index":567,"title":{},"body":{"1015822":{}}}],["再回到ntoskrnl.exe内核模块，跟进kidispatchinterrupt函数你会发现它最终又调用了swapcontext函数，因此也就证明了时钟中断也会导致线程切换",{"_index":11215,"title":{},"body":{"1703937":{}}}],["再回到run函数接下里调用的就是isidlemessage函数",{"_index":581,"title":{},"body":{"1015822":{}}}],["再拼接上指令（别忘了小端存储模式）插入即可（这里的指令进行了简化，省略了jmp跳回原addressofentrypoint地址部分",{"_index":6395,"title":{},"body":{"1015828":{}}}],["再接着就是merge函数，如下图所示当使用这个函数的时候就会合并两个链表，并清空被合并的那个链表，值得注意的是，两个有序的链表合并了，最终的也是一个有序的链表",{"_index":11418,"title":{},"body":{"1015814":{}}}],["再接着就是将之前的与运算结果和0x10进行比较，也就是判断系统调用号对应的表，如果与运算结果是0x10则向下会调用到_kegdiflushuserbatch函数（自行查阅手册），如果与运算的结果是0x0则跳转",{"_index":2556,"title":{},"body":{"1015846":{}}}],["再接着就是跳到某个代码段，但是这个代码段是属于_kifastcallentry函数的，所以从本质上来说两个函数最终都是走向同一个地方，无非就是中断门调用会传入5个值需要保存而快速调用不会传入这5个值",{"_index":2539,"title":{},"body":{"1015846":{}}}],["再接着我们对应填充参数即可",{"_index":3167,"title":{},"body":{"1015823":{}}}],["再来看下反汇编代码",{"_index":3390,"title":{},"body":{"1015840":{}}}],["再看_debug_objeç",{"_index":4618,"title":{},"body":{"3440657":{}}}],["再继续向下看，将当前cpu执行的线程信息给到了esi寄存器，即fs段的0x124偏移位的内容，也就是_kprcb结构体的0x4偏移位成员currentthread；它是一个结构体_kthread，接着压入该结构体的0x140偏移位成员，也就是先前模式previousm",{"_index":2536,"title":{},"body":{"1015846":{}}}],["再跟进看看使用delete，它会释放空间并调用析构函数",{"_index":3453,"title":{},"body":{"1015840":{}}}],["再跟进这个成员就找到了句柄表的位置，即如下图所示的0xe26fa0",{"_index":8701,"title":{},"body":{"1933378":{}}}],["写出八进制的前50",{"_index":5003,"title":{},"body":{"1015825":{}}}],["写拷贝",{"_index":6861,"title":{},"body":{"2949228":{}}}],["写拷贝原理",{"_index":7048,"title":{},"body":{"2949228":{}}}],["写拷贝属性时候，写入时并不会影响原本的文件内容",{"_index":8283,"title":{},"body":{"1015833":{}}}],["写拷贝的实现就是mapviewoffile函数中的第二个参数值为file_map_copy，它的意思表示当你在写的时候进行拷贝",{"_index":8281,"title":{},"body":{"1015833":{}}}],["准双工：a和b进行通信，双方可以互相发送接收，但不可以同时进行，只有一条通信线路",{"_index":9922,"title":{},"body":{"1015818":{}}}],["准备要替换的函数",{"_index":5827,"title":{},"body":{"1015847":{}}}],["减",{"_index":1732,"title":{},"body":{"1015843":{}}}],["减法：若被减数与减数符号不相同，而结果的符号与减数相同则of=1，否则of=0发生溢出，说明运算的结果已经不可信",{"_index":5411,"title":{},"body":{"1015825":{}}}],["几个操作都很简单，直接上手使用即可",{"_index":11540,"title":{},"body":{"1015814":{}}}],["出栈8个字节，低4个字节赋值给eip，高4个字节中低2位赋值给cs后，esp",{"_index":11993,"title":{},"body":{"1015817":{}}}],["出栈8个字节，低4个字节赋值给eip，高4个字节中低2位赋值给ç",{"_index":11991,"title":{},"body":{"1015817":{}}}],["出现这样的问题其本质原因是什么呢？因为多线程在执行的时候是同步进行的，并不是按照顺序来，所以就都会窒息，自然就会出现这种情况",{"_index":7498,"title":{},"body":{"1015833":{}}}],["函数closehandle用于关闭文件，其语法格式如下",{"_index":8126,"title":{},"body":{"1015833":{}}}],["函数createdirectory用于创建目录，其语法格式如下",{"_index":8066,"title":{},"body":{"1015833":{}}}],["函数createfile用于创建文件，其语法格式如下",{"_index":8108,"title":{},"body":{"1015833":{}}}],["函数findfirstfile、findnextfile用于查找文件，其语法格式如下",{"_index":8196,"title":{},"body":{"1015833":{}}}],["函数getcurrentdirectory用于获取程序当前目录，其语法格式如下",{"_index":8092,"title":{},"body":{"1015833":{}}}],["函数getfileattributes、getfileattributesex用于获取文件的属性和信息，其语法格式如下",{"_index":8141,"title":{},"body":{"1015833":{}}}],["函数getfilesize用于获取文件大小，其语法格式如下",{"_index":8130,"title":{},"body":{"1015833":{}}}],["函数getlogicaldrivestrings用于获取卷的类型，语法格式为",{"_index":8009,"title":{},"body":{"1015833":{}}}],["函数getlogicaldrivestrings用于获取所有逻辑驱动器的字符串，语法格式为",{"_index":7998,"title":{},"body":{"1015833":{}}}],["函数getlogicaldrives用于获取当前计算机所有逻辑驱动器，语法格式为",{"_index":7987,"title":{},"body":{"1015833":{}}}],["函数getvolumeinformation用于获取卷的信息，语法格式为",{"_index":8034,"title":{},"body":{"1015833":{}}}],["函数movefile用于修改目录名称（移动），其语法格式如下",{"_index":8081,"title":{},"body":{"1015833":{}}}],["函数mycreateremotethread传入2个参数，一个是进程id，一个是线程函数地址",{"_index":8417,"title":{},"body":{"1015833":{}}}],["函数readfile、writefile、copyfile、deletefile用于读/写/拷贝/删除文件，其语法格式如下",{"_index":8159,"title":{},"body":{"1015833":{}}}],["函数removedirectory用于删除目录，其语法格式如下",{"_index":8075,"title":{},"body":{"1015833":{}}}],["函数setcurrentdirectory用于设置程序当前目录，其语法格式如下",{"_index":8101,"title":{},"body":{"1015833":{}}}],["函数作用",{"_index":5685,"title":{},"body":{"1015847":{}}}],["函数内压栈会导致执行ret指令后，esp",{"_index":5382,"title":{},"body":{"1015825":{}}}],["函数参数",{"_index":4614,"title":{},"body":{"3440657":{}}}],["函数名",{"_index":704,"title":{},"body":{"1015822":{},"1015823":{},"1015828":{}}}],["函数名(参数列表",{"_index":3705,"title":{},"body":{"1015840":{}}}],["函数声明格式如下",{"_index":8365,"title":{},"body":{"1015833":{}}}],["函数嵌套调用实际上就是函数中调用另外一个函数，以下为示例代码",{"_index":1497,"title":{},"body":{"1015843":{}}}],["函数嵌套调用的内存布局",{"_index":1496,"title":{},"body":{"1015843":{}}}],["函数执行失败，失败原因不确定",{"_index":2865,"title":{},"body":{"1015823":{}}}],["函数执行失败，失败原因为内存分配不成功",{"_index":2867,"title":{},"body":{"1015823":{}}}],["函数执行失败，成员函数没有被实现",{"_index":2869,"title":{},"body":{"1015823":{}}}],["函数执行失败，组件没有实现指定的接口",{"_index":2871,"title":{},"body":{"1015823":{}}}],["函数执行成功，其值为0(注意，其值与true相反",{"_index":2862,"title":{},"body":{"1015823":{}}}],["函数执行成功，其值为1",{"_index":2863,"title":{},"body":{"1015823":{}}}],["函数指针",{"_index":2309,"title":{},"body":{"1015843":{}}}],["函数指针变量定义的格式",{"_index":2310,"title":{},"body":{"1015843":{}}}],["函数指针类型变量的赋值与使用",{"_index":2314,"title":{},"body":{"1015843":{}}}],["函数本身不占用结构体的空间（函数不属于结构体",{"_index":3316,"title":{},"body":{"1015840":{}}}],["函数模板的语法是这样的",{"_index":3633,"title":{},"body":{"1015840":{}}}],["函数调用约定就是告诉编译器怎么传递参数，怎么传递返回值，怎么平衡堆栈",{"_index":2292,"title":{},"body":{"1015843":{}}}],["分别使用getchar函数挂住了运行，a进程写入0x41414142，b进程也成功读取到了这个值",{"_index":8277,"title":{},"body":{"1015833":{}}}],["分别自写函数打印出它父类的cruntimeclass结构体信息",{"_index":291,"title":{},"body":{"1015822":{}}}],["分支语句",{"_index":1782,"title":{},"body":{"1015843":{}}}],["分析readprocessmemory函数",{"_index":2419,"title":{},"body":{"1015846":{}}}],["分析完run函数，其实我们还有一个问题没有解决，那就是我们实例化cmainwodw，使用的关键词是new，该关键词是在堆上创建的，而我们不使用需要去释放，否则则会造成安全隐患（内存泄漏），我们在代码中没有去写这类操作，实际上这些都在mfc内部去完成的",{"_index":584,"title":{},"body":{"1015822":{}}}],["分页设计",{"_index":9499,"title":{},"body":{"1015831":{}}}],["列",{"_index":8753,"title":{},"body":{"1015850":{}}}],["列表",{"_index":1080,"title":{},"body":{"1015822":{}}}],["则不是；操作码(16",{"_index":2846,"title":{},"body":{"1015823":{}}}],["则该结构体的起始地址则是4的整数倍，因为其最宽的数据类型成员是a（int类型",{"_index":2024,"title":{},"body":{"1015843":{}}}],["刚刚举例说明的是友元函数，就是告诉编译器这个函数是我的朋友，可以访问我的任何成员",{"_index":3707,"title":{},"body":{"1015840":{}}}],["刚刚我们是从一个被调试器角度了解软件断点的执行流程，那么从调试器角度又如何去实现软件断点，这值得我们去关注。首先在这里，为了实现软件断点功能，需要手动编写一个setint3breakpoint函数，具体实现如下代码所示，我们可以在处理创建进程调试事件时，下该断点",{"_index":4811,"title":{},"body":{"3440657":{}}}],["创建atl工程：直接使用vs创建默认的即可",{"_index":3091,"title":{},"body":{"1015823":{}}}],["创建一个带有消息队列的结构体，并将其挂接到_kthread结构体win32thread成员上",{"_index":3917,"title":{},"body":{"3440655":{}}}],["创建一个带滚动条的，300x300的窗口",{"_index":162,"title":{},"body":{"1015822":{}}}],["创建互斥体的函数为createmutex，该函数的语法格式如下",{"_index":7530,"title":{},"body":{"1015833":{}}}],["创建全局变量：critical_seç",{"_index":7507,"title":{},"body":{"1015833":{}}}],["创建内核对象eprocess（高2gi",{"_index":7199,"title":{},"body":{"1015833":{}}}],["创建初始化窗口的类名和窗口名称，并注册其样式，父级和关联菜单的默认值",{"_index":78,"title":{},"body":{"1015822":{}}}],["创建动态链接库",{"_index":8315,"title":{},"body":{"1015833":{}}}],["创建在堆上的cmainwindow",{"_index":583,"title":{},"body":{"1015822":{}}}],["创建好设备对象之后，就需要设置0环和3环交换数据的方式，有以下三种",{"_index":5664,"title":{},"body":{"1015847":{}}}],["创建字符串",{"_index":5580,"title":{},"body":{"1015847":{}}}],["创建完项目之后，进入到项目属性，按如下图所示进行配置",{"_index":5459,"title":{},"body":{"1015847":{}}}],["创建容器",{"_index":11331,"title":{},"body":{"1015814":{}}}],["创建对象时，则会自动调用执行，一般用于初始化",{"_index":3359,"title":{},"body":{"1015840":{}}}],["创建对象的对应反汇编代码如下，可以清晰的看见与我们正常的内存布局是一样的",{"_index":3380,"title":{},"body":{"1015840":{}}}],["创建对象的时候，在对象名后面加上括号传入即可；但是这样就会存在一个问题，我们不想初始化值的时候就没有办法创建这个类",{"_index":3352,"title":{},"body":{"1015840":{}}}],["创建工程",{"_index":4109,"title":{},"body":{"1015820":{}}}],["创建文件",{"_index":8107,"title":{},"body":{"1015833":{}}}],["创建画笔并不代表画笔被我们所使用了，要使用的话则需要selectobject来使用",{"_index":839,"title":{},"body":{"1015822":{}}}],["创建目录",{"_index":8065,"title":{},"body":{"1015833":{}}}],["创建窗口程序",{"_index":7729,"title":{},"body":{"1015833":{}}}],["创建线程",{"_index":7389,"title":{},"body":{"1015833":{}}}],["创建线程使用createthread函数，其语法格式如下",{"_index":7395,"title":{},"body":{"1015833":{}}}],["创建线程内核对象rthread（高2gı",{"_index":7201,"title":{},"body":{"1015833":{}}}],["创建编辑框和按钮",{"_index":7833,"title":{},"body":{"1015833":{}}}],["创建设备对象",{"_index":5639,"title":{},"body":{"1015847":{}}}],["创建进程",{"_index":7206,"title":{},"body":{"1015833":{}}}],["创建进程、线程事件采集",{"_index":4598,"title":{},"body":{"3440657":{}}}],["创建进程的函数是createprocess()，这个函数的使用方法如下",{"_index":7207,"title":{},"body":{"1015833":{}}}],["创建进程的本质就是创建线程，其中第一次创建线程时即为创建进程。因此，无论是创建进程还是线程，底层调用的函数是相同的，都是pspuserthreadstartup函数",{"_index":4599,"title":{},"body":{"3440657":{}}}],["创建远程线程",{"_index":8390,"title":{},"body":{"1015833":{}}}],["创建远程线程的函数是createremotethread，其语法格式如下",{"_index":8391,"title":{},"body":{"1015833":{}}}],["创建项目a，然后新建a.cpp和a.h，在a.h中声明一个add方法，在a.cpp中实现该方法",{"_index":8288,"title":{},"body":{"1015833":{}}}],["创建（初始化）set容器有如下5种方式",{"_index":11430,"title":{},"body":{"1015814":{}}}],["创建（初始化）容器有如下5种方式",{"_index":11332,"title":{},"body":{"1015814":{}}}],["初始化全局变量：initializecriticalsection(&ç",{"_index":7508,"title":{},"body":{"1015833":{}}}],["初始化函数",{"_index":2832,"title":{},"body":{"1015823":{}}}],["初始化线程",{"_index":11119,"title":{},"body":{"1703937":{}}}],["初始化线程之后，也就是执行完registergmthread函数，就进入了线程切换运行，即scheduling函数。该函数遍历调度链表，找到其中的线程结构体，并根据flags成员判断线程是否为准备状态，获取对应的线程结构体通过switchcontext函数进行线程切换",{"_index":11155,"title":{},"body":{"1703937":{}}}],["初次之外我们害可以借助cocreateguid函数来生成这个gu",{"_index":2816,"title":{},"body":{"1015823":{}}}],["初级篇",{"_index":4971,"title":{"1015826":{}},"body":{"1015827":{}}}],["删除c盘下的test目录",{"_index":8077,"title":{},"body":{"1015833":{}}}],["删除元素",{"_index":11364,"title":{},"body":{"1015814":{}}}],["删除元素可以使用erase函数",{"_index":11463,"title":{},"body":{"1015814":{}}}],["删除容器中的元素有三个函数可以操作，第一个是pop_back函数",{"_index":11365,"title":{},"body":{"1015814":{}}}],["删除目录",{"_index":8074,"title":{},"body":{"1015833":{}}}],["判断[ecx]值是否为1，不为1则zf位为1，为1则zf位为0",{"_index":6675,"title":{},"body":{"1933380":{}}}],["判断rva地址是否位于pe头中",{"_index":6334,"title":{},"body":{"1015828":{}}}],["判断元素是否存在",{"_index":11482,"title":{},"body":{"1015814":{}}}],["判断元素是否存在对于multimap容器来说可以知道指定元素有几个",{"_index":11530,"title":{},"body":{"1015814":{}}}],["判断元素是否存在对于multiset容器来说可以知道指定元素有几个",{"_index":11483,"title":{},"body":{"1015814":{}}}],["判断对象类型",{"_index":10680,"title":{},"body":{"2424889":{}}}],["判断是否存在进位（两者进行与运算）：000",{"_index":5134,"title":{},"body":{"1015825":{}}}],["判断程序权限",{"_index":9070,"title":{},"body":{"1015831":{}}}],["判断链表是否为空可以通过kidispatcherreadylisthead全局变量找到调度链表，然后根据它的链表成员判断是否前后指向的地址都是同一个，且该地址与链表的成员地址一致，如果都是一致的则表示该链表为空",{"_index":11263,"title":{},"body":{"1703937":{}}}],["利用c++的抽象基类建立一个只包含所有导出成员函数的地址指针表，客户调用函数时只需简单的查找这个表获取函数地址即可调用",{"_index":2626,"title":{},"body":{"1015823":{}}}],["前三个成员很好理解，最后一个成员是一个联合体，里面包含了各种结构体，这是因为调试事件类型的多样性，所以对应的结构也不同，通过这样的方式就可以根据不同类型的调试事件存放对应的结构体信息（这也是为什么不同的调试事件有不同的调试采集函数",{"_index":4673,"title":{},"body":{"3440657":{}}}],["前两个参数比较好理解，我们可以写代码来看一下第三个参数，这里我们用到的是wm_keydown消息",{"_index":1013,"title":{},"body":{"1015822":{}}}],["前提条件",{"_index":8604,"title":{},"body":{"1015833":{}}}],["前缀指令",{"_index":11788,"title":{},"body":{"1015817":{}}}],["前缀指令分组",{"_index":11791,"title":{},"body":{"1015817":{}}}],["前面的可以不用管，都是一些容错代码，进到这个while循环，我们可以很清晰的看见其会判断当前类和传递进来的类是否一样，如果一样则返回tru",{"_index":289,"title":{},"body":{"1015822":{}}}],["前面，我们有提到计算机只可以读懂机器语言，那机器语言本身就是二进制，所以为了更好的了解、学习计算机，我们要深刻的去理解什么是进制",{"_index":4986,"title":{},"body":{"1015825":{}}}],["加",{"_index":1731,"title":{},"body":{"1015843":{}}}],["加入函数声明",{"_index":8364,"title":{},"body":{"1015833":{}}}],["加减乘除、取余都很简单，我们要了解一下自加、自减的用法",{"_index":1738,"title":{},"body":{"1015843":{}}}],["加壳和脱壳（保护与破解",{"_index":5981,"title":{},"body":{"1015828":{}}}],["加属性",{"_index":3124,"title":{},"body":{"1015823":{}}}],["加法的本质实际上就是查表，10+4，就是从10这个数字开始依次往后查4位，那么其结果就是14。那么10",{"_index":5030,"title":{},"body":{"1015825":{}}}],["加载段描述符至段寄存器",{"_index":9010,"title":{},"body":{"1015831":{}}}],["加载段描述符：通过权限检查之后，cpu会将段描述符加载到cs段寄存器中",{"_index":9120,"title":{},"body":{"1015831":{}}}],["动态创建",{"_index":304,"title":{},"body":{"1015822":{}}}],["动态创建的作用",{"_index":313,"title":{},"body":{"1015822":{}}}],["动态链接库",{"_index":8312,"title":{},"body":{"1015833":{}}}],["动态链接库弥补了静态链接库的两个缺点，动态链接库（dynam",{"_index":8313,"title":{},"body":{"1015833":{}}}],["动手思考一下，如下代码是否可行",{"_index":2012,"title":{},"body":{"1015843":{}}}],["包含文件",{"_index":2396,"title":{},"body":{"1015843":{}}}],["十六进制",{"_index":5076,"title":{},"body":{"1015825":{}}}],["协议",{"_index":9966,"title":{},"body":{"1015818":{}}}],["协议：该值表示上层的协议，占8位，其中1表示icmp、2表示igmp、6表示tcp、17表示udp、89表示ospf",{"_index":10282,"title":{},"body":{"1015818":{}}}],["单击plus(1,2);那一行，按一下f9，下一个断点，然后f7构建，f5运行",{"_index":1369,"title":{},"body":{"1015843":{}}}],["单工：a和b进行通信，只能有一方发送，一方接收，只有一条通信线路",{"_index":9920,"title":{},"body":{"1015818":{}}}],["单步异常的处理流程与硬件断点一致，都是cpu检测到异常后通过idt表找到0x01号中断函数进行处理等等，因此此处就不再赘述",{"_index":4964,"title":{},"body":{"3440657":{}}}],["单步步入和步过",{"_index":4959,"title":{},"body":{"3440657":{}}}],["单步步入（异常）的断点实现也很简单，就是获取线程上下文，就得到了相关的寄存器，接着将eflags寄存器的tf位置1，然后再将上下文设置回去",{"_index":4965,"title":{},"body":{"3440657":{}}}],["单行指令同步",{"_index":6632,"title":{},"body":{"1933380":{}}}],["单连接如下图所示当一个客户端和服务器进行通信时，其它客户端就需要排队，那如果是一个电商网站，你想一下有人买东西会先看很久，然后再对比，然后再挑选，当他这一系列动作完成之后可能已经几个小时过去了，那么请问你能忍受得了等这么几个小时的队伍吗",{"_index":9989,"title":{},"body":{"1015818":{}}}],["单连接面临的窘境",{"_index":9988,"title":{},"body":{"1015818":{}}}],["即eascii)取消掉，规定：一个小于127的字符意义与原来相同，但是两个大于127的字符连在一起时，就表示一个汉字，这样我们就可以组合出大约7000多个简体汉字了",{"_index":1692,"title":{},"body":{"1015843":{}}}],["即标准模板库，是一个具有工业强度的，高效的c++程序库；它被容纳于c++标准程序库",{"_index":11312,"title":{},"body":{"1015814":{}}}],["即跳转",{"_index":11983,"title":{},"body":{"1015817":{}}}],["即通过指令：d",{"_index":7000,"title":{},"body":{"2949228":{}}}],["卷可以理解为就是我们的本地磁盘（逻辑驱动器），我们可以把一块2gb的内存条分为两个卷，卷里头的就是文件和目录",{"_index":7985,"title":{},"body":{"1015833":{}}}],["卷相关ap",{"_index":7984,"title":{},"body":{"1015833":{}}}],["历史版本下载链接（选择mysql",{"_index":8746,"title":{},"body":{"1015850":{}}}],["原因",{"_index":3197,"title":{},"body":{"1015823":{}}}],["原始数据包就是适配器（物理网卡、虚拟网卡都可以称为适配器）接收到，没有经过任何处理的包",{"_index":10148,"title":{},"body":{"1015818":{}}}],["原始数据包的获取与打印",{"_index":10147,"title":{},"body":{"1015818":{}}}],["原始的ascii编码",{"_index":7063,"title":{},"body":{"1015833":{}}}],["原理",{"_index":4133,"title":{},"body":{"1015820":{}}}],["原生seh",{"_index":4379,"title":{},"body":{"2949166":{}}}],["原码、反码、补码",{"_index":5105,"title":{},"body":{"1015825":{}}}],["原码：最高位为符号位，其余各位为数值本身的绝对值",{"_index":5107,"title":{},"body":{"1015825":{}}}],["去掉一个*后类型的宽度",{"_index":2090,"title":{},"body":{"1015843":{}}}],["参数1：消息结构。总共有7种类型的消息结构，每种消息都有自己的消息结构，这些结构是由不同的调试事件采集函数创建的。参数2：挂起线程标志。这个参数用于指示是否需要挂起除了当前进程之外的其他线程。有些调试事件需要挂起其他线程，比如针对int3断点的事件；而有些调试事件则不需要挂起线程，比如模块加载事件",{"_index":4616,"title":{},"body":{"3440657":{}}}],["参数传递与返回值",{"_index":1422,"title":{},"body":{"1015843":{}}}],["参数压栈顺序",{"_index":2294,"title":{},"body":{"1015843":{}}}],["参数含义如下",{"_index":6797,"title":{},"body":{"2949228":{}}}],["参数无效",{"_index":5527,"title":{},"body":{"1015847":{}}}],["参数解释",{"_index":7709,"title":{},"body":{"1015833":{}}}],["友元",{"_index":3698,"title":{},"body":{"1015840":{}}}],["友元可以理解为：朋友、元素；老师认为这个友元是c++中的一个垃圾，因为友元的存在破坏了面向对象的封装性，不推荐使用，之所以有这个章节是因为有人不了解这个概念",{"_index":3699,"title":{},"body":{"1015840":{}}}],["友元的诞生就是破坏了这个封装性，让你可以在外部去使用这个私有成员",{"_index":3702,"title":{},"body":{"1015840":{}}}],["友元的语法就是：frien",{"_index":3703,"title":{},"body":{"1015840":{}}}],["双击函数名，在ida的反汇编窗口我们可以看到该函数的反汇编指令",{"_index":2421,"title":{},"body":{"1015846":{}}}],["双击新建的这个按钮，随便取你想要的按钮事件处理函数名称然后写对应的代码，如下代码中使用了getdlgitem函数，该函数是根据控件id来获取控件的句柄，而后再用其内部方法setwindowtext来改写编辑框的内容，控件id我们可以点右键选择控件→properties来获取",{"_index":1040,"title":{},"body":{"1015822":{}}}],["双击运行vminstall.ex",{"_index":5491,"title":{},"body":{"1015847":{}}}],["双向",{"_index":11745,"title":{},"body":{"1015814":{}}}],["双向迭代器：上面全部，前后自减（p",{"_index":11734,"title":{},"body":{"1015814":{}}}],["双向链表，一个进程的所有线程都链入这个表中了",{"_index":11038,"title":{},"body":{"1703937":{}}}],["双向链表，将所有活动的进程都链接成一个表，我们可以通过这个成员找到前一个进程和后一个进程的结构体（需要注意这里找到的并不是结构体的起始位置，而是结构体的0x88偏移位",{"_index":10973,"title":{},"body":{"1703937":{}}}],["双向：bidireç",{"_index":11723,"title":{},"body":{"1015814":{}}}],["双字（doublew",{"_index":5087,"title":{},"body":{"1015825":{}}}],["双工：a和b进行通信，双方可以同时互相发送接收，有两条通信线路",{"_index":9921,"title":{},"body":{"1015818":{}}}],["双引号",{"_index":2402,"title":{},"body":{"1015843":{}}}],["双接口",{"_index":3191,"title":{},"body":{"1015823":{}}}],["双机调试环境",{"_index":8962,"title":{},"body":{"1015831":{}}}],["反之则禁止可屏蔽中断",{"_index":9281,"title":{},"body":{"1015831":{}}}],["反之，如果返回为0则表示没有处理该异常，继续向下执行就是为返回3环做准备，将trap_frame的值修改为返回3环时候的环境，详细的不再多说，其中最为重要的就是返回3环时的地址，即trap_frame._eip（0x68偏移位），如下图代码所示，将_eip修改为了keuserexceptiondispatcher函数的地址，也就表示返回3环后就执行该函数。但是这里修改完trap_frame的值之后并没有返回3环，而是直接跳转，kidispatchexception函数执行结束",{"_index":4305,"title":{},"body":{"2949166":{}}}],["反反调试的方法",{"_index":4560,"title":{},"body":{"3440657":{}}}],["反码：正数反码与原码相同，负数符号位为1，其余位对原码取反",{"_index":5108,"title":{},"body":{"1015825":{}}}],["反调试(startupinfo结构体",{"_index":7262,"title":{},"body":{"1015833":{}}}],["发现其会判断是否定义了_afxdll宏，经查阅发现这是判断是否使用了动态链接库，而我们现在使用的是静态链接库，在这自然不存在所以返回的就是afxwndproc这个函数的地址",{"_index":510,"title":{},"body":{"1015822":{}}}],["取代",{"_index":535,"title":{},"body":{"1015822":{}}}],["取余",{"_index":1735,"title":{},"body":{"1015843":{}}}],["取值",{"_index":6959,"title":{},"body":{"2949228":{}}}],["取值范围",{"_index":8782,"title":{},"body":{"1015850":{}}}],["取值运算符",{"_index":2107,"title":{},"body":{"1015843":{}}}],["取值运算符举例",{"_index":2120,"title":{},"body":{"1015843":{}}}],["取值运算符就是我们之前所了解的“*”星号，“*”星号有这几个用途",{"_index":2108,"title":{},"body":{"1015843":{}}}],["取值运算符（星号+指针类型的变量）；也就是取地址的存储的值",{"_index":2111,"title":{},"body":{"1015843":{}}}],["取反)子网掩码",{"_index":9676,"title":{},"body":{"1015818":{}}}],["取消已定义的宏",{"_index":2387,"title":{},"body":{"1015843":{}}}],["受写拷贝保护的文件的物理页所在的pte的r/w属性被设置为0（只读",{"_index":7052,"title":{},"body":{"2949228":{}}}],["变量",{"_index":1453,"title":{},"body":{"1015843":{}}}],["变量与参数的内存布局",{"_index":1484,"title":{},"body":{"1015843":{}}}],["变量名",{"_index":1457,"title":{},"body":{"1015843":{}}}],["变量名[常量",{"_index":1905,"title":{},"body":{"1015843":{}}}],["变量的命名规范与函数名、参数名一样",{"_index":1463,"title":{},"body":{"1015843":{}}}],["变量类型",{"_index":1456,"title":{},"body":{"1015843":{}}}],["变量类型标志vartyp",{"_index":3013,"title":{},"body":{"1015823":{}}}],["变长指令",{"_index":11998,"title":{},"body":{"1015817":{}}}],["句柄",{"_index":8703,"title":{},"body":{"1933378":{}}}],["句柄是否\"允许\"被继承",{"_index":7324,"title":{},"body":{"1015833":{}}}],["句柄是否\"可以\"被继承",{"_index":7315,"title":{},"body":{"1015833":{}}}],["句柄本质上就一个防火墙，将应用层、内核层隔离开来，通过句柄就可以控制进程内核结构体，我们得到所谓句柄的值实际上就是句柄表里的一个索引",{"_index":7310,"title":{},"body":{"1015833":{}}}],["句柄的存在是为了避免在应用层直接修改内核对象，如果你创建一个线程，随之返回给你内核对象的地址，你就可以通过这个地址去修改内核对象，一旦你修改内核对象地址指向了一个无效的内核内存地址，在0环处理时就会导致操作系统崩溃（蓝屏），而在三环指向一个无效的内存地址最多就程序程序退出",{"_index":8687,"title":{},"body":{"1933378":{}}}],["句柄表",{"_index":6622,"title":{"1933378":{}},"body":{"1015827":{},"1015832":{},"1015833":{},"1933378":{}}}],["句柄表表项数据宽度为8字节，主要分为四个部分",{"_index":8709,"title":{},"body":{"1933378":{}}}],["句柄表，存储了当前进程使用的其他内核对象的句柄；我们可以通过遍历其他进程的句柄表，如果表中存在当前进程的进程结构体地址，那就说明当前进程被使用，也就是被调试，我们可以此作为一种反调试的手段",{"_index":10991,"title":{},"body":{"1703937":{}}}],["另外两个宏就是实现，begin_message_map有两个参数分别是当前类、当前类的基类（父类），应该成对出现在类实现外",{"_index":366,"title":{},"body":{"1015822":{}}}],["另外值得注意的是，for语句中的表达式是可以省略的",{"_index":1889,"title":{},"body":{"1015843":{}}}],["另外由于我们这里使用了cout和string所以需要包含这两个头文件",{"_index":11511,"title":{},"body":{"1015814":{}}}],["只做字符序列的替换工作，不做任何语法检测，在编译前处理",{"_index":2369,"title":{},"body":{"1015843":{}}}],["只有当前结构体内部函数才可以访问private的成员",{"_index":3426,"title":{},"body":{"1015840":{}}}],["只有当组件满足以下两个条件才能被卸载",{"_index":2900,"title":{},"body":{"1015823":{}}}],["只有这个参数设置为true时，我们创建的子进程才允许继承父进程的句柄",{"_index":7328,"title":{},"body":{"1015833":{}}}],["只能为",{"_index":12063,"title":{},"body":{"1015817":{}}}],["只能以字母、数字、下划线组成；且第一个字母必须是字母或下划线",{"_index":1356,"title":{},"body":{"1015843":{}}}],["只能有一个，不支持重载",{"_index":3368,"title":{},"body":{"1015840":{}}}],["只要有虚函数，不论多少个，对象的数据宽度就会比其原来多出4个字节，这四个字节我们称之为虚表",{"_index":3593,"title":{},"body":{"1015840":{}}}],["只要程序启动，全局变量就已经存在，如若变量在一开始声明时没有赋值，则初始值为0",{"_index":1468,"title":{},"body":{"1015843":{}}}],["只需要在自定义类里面按照格式重载运算符即可",{"_index":3615,"title":{},"body":{"1015840":{}}}],["可不可以再建个门出去呢？也就是用call指令，当然可以，前门进，后门出",{"_index":9251,"title":{},"body":{"1015831":{}}}],["可以使用count函数来判断元素是否存在，从名字上来看也知道这是一个统计数量的函数，返回的内容就是指定元素的数量",{"_index":11484,"title":{},"body":{"1015814":{}}}],["可以做一个比喻来理解，将virtualalloc看作是一个批发市场，需要一次性从操作系统那里批量购买内存，而且必须是4kb的整数倍。而heapalloc则类似于零售商，从已经批发到批发市场（virtualalloc）的货物中购买一小部分。换句话说，heapalloc并不是直接向操作系统申请内存，而是在已经预分配的堆内存中分配小块内存供程序使用。这种方式可以提高内存分配的效率，减少频繁调用操作系统的开销",{"_index":6768,"title":{},"body":{"2949228":{}}}],["可以去选择设置自己想要的风格样式，这里也不多说了；我们继续创建一个关联变量",{"_index":1320,"title":{},"body":{"1015822":{}}}],["可以很明显的看见，当我们使用一维数组去调用的时候要通过计算的方法去思考，但是使用多维数组（这里有两个方括号所以称之为二维数组）我们完全没有这种烦恼，可以很方便的去调用",{"_index":1958,"title":{},"body":{"1015843":{}}}],["可以很清晰的看见函数指针生成来一堆汇编代码，传参、调用、以及如何平衡堆栈；而如上这段代码最终会调用地址0xa，但它本身不存在，所以无法运行",{"_index":2322,"title":{},"body":{"1015843":{}}}],["可以很清晰的看见最后说到，该函数会修改内核对象的状态，所以通知类型的原理就很简单了，就是当事件对象为通知类型时该函数就不会去修改对象的状态，这个状态我们可以理解成是占用，当waitforsingleobject函数判断为非占用时就修改内核对象的状态为占用然后向下执行，而其他线程想使用就需要等待，这就是互斥的概念",{"_index":7598,"title":{},"body":{"1015833":{}}}],["可以很清晰的看见，析构函数是在return返回之前执行的",{"_index":3366,"title":{},"body":{"1015840":{}}}],["可以很清晰的看见，结构体作为参数传递时栈顶（esp）提升了0x10（16个字节，也就是结构体的四个成员【int】的宽度），而后将esp的值给了eax，再通过eax（esp）将结构体的成员传入函数，结构体成员从左到右依次从栈顶向下复制进入堆栈",{"_index":3301,"title":{},"body":{"1015840":{}}}],["可以很清楚的看见我们的函数名称变成了_add@8（此处就是由于使用了_stdcall调用约定导致函数名发生了改变，如若导入该函数，则不能直接使用add，而需要使用此处的名字",{"_index":8326,"title":{},"body":{"1015833":{}}}],["可以很清楚的看见窗口函数的第三个参数就是虚拟键码（键盘上每个键都对应一个虚拟键码），我们可以输出下按下a，其对应虚拟键码是什么",{"_index":7818,"title":{},"body":{"1015833":{}}}],["可以有多个构造函数（建议只有一个无参的），这种声明方式我们称之为重载（其他函数也可以",{"_index":3360,"title":{},"body":{"1015840":{}}}],["可以清晰的看见esp的值加0x8，此时才是遵循了堆栈平衡，还原了堆栈在函数执行前的样子",{"_index":1449,"title":{},"body":{"1015843":{}}}],["可以清晰的看见，这里的地址并不是连续的，35、36、37这三个字节是被浪费掉了，这是为什么呢？这就是我们所谓的字节对齐；细心的人会发现这里的地址实际上就是数据宽度的整数倍，例如0x38是十进制4的整数倍",{"_index":2020,"title":{},"body":{"1015843":{}}}],["可以直接修改它然后保存运行，这时候你就会发现全局变量的值已经发生了改变",{"_index":6342,"title":{},"body":{"1015828":{}}}],["可以直接调用ixxx函数，效率最高",{"_index":3206,"title":{},"body":{"1015823":{}}}],["可以看到这个结构还是挺复杂的，如果我们想要手动生成，这将会是一件非常麻烦的事情，不过我们可以通过vs自带的功能去生成",{"_index":2814,"title":{},"body":{"1015823":{}}}],["可以看到，lis",{"_index":11405,"title":{},"body":{"1015814":{}}}],["可以看见char类型在分配内存空间时，都是以4字节空间分配的，这是因为在32位操作系统中，char类型分配的空间与int类型是一样的",{"_index":1915,"title":{},"body":{"1015843":{}}}],["可以看见printf根本没有进行编译",{"_index":2380,"title":{},"body":{"1015843":{}}}],["可以看见一个是20，一个是4；一个是指针变量的数组，一个是数组指针，本质是不一样的",{"_index":2233,"title":{},"body":{"1015843":{}}}],["可以看见从右到左，依次压入我们调用函数传入的参数，然后再使用call指令去调用函数，在这里我们可以使用f10跟进执行",{"_index":1433,"title":{},"body":{"1015843":{}}}],["可以看见其会一行一行的执行，而不像switch语句一样，直接可以跳转到对应的地址",{"_index":1819,"title":{},"body":{"1015843":{}}}],["可以看见当前初始大小是2046mb，那么这个是存放在哪的呢？我们可以在c盘下查看（需要显示系统隐藏文件）pagefile.sys这个文件，它刚好是2046mb这个大小，这个文件就是用来做虚拟内存的",{"_index":7907,"title":{},"body":{"1015833":{}}}],["可以看见我们使用s.plus()的时候，传递的参数是一个指针，这个指针就是当前结构体的地址，这个指针就是this指针。（通常情况下编译器会使用ecx来传递当前结构体的指针",{"_index":3322,"title":{},"body":{"1015840":{}}}],["可以看见我们定义了一个类，然后创建了两个对象obj、objnew，但是第二个对象的语法很奇怪，传入的参数是第一对象，其实这就是默认拷贝析构函数",{"_index":3668,"title":{},"body":{"1015840":{}}}],["可以看见果然如我们所了解的在断开连接的时候发送了fin以及ack包，这里的seq的值和ack的值与我们之前所说的是一样的，seq是随机的，但ack的值是根据上一条的seq的值+1所得出来的",{"_index":9929,"title":{},"body":{"1015818":{}}}],["可以看见第一个输出了1，第二个输出了3，那么我们可以暂时认为：自加、自减符号在前则自加、自减完返回，符号在前则先返回当前值，然后再自加、自减；具体的，我们来看一下反汇编代码便可得知",{"_index":1742,"title":{},"body":{"1015843":{}}}],["可以看见这边输出了一个0x1，想要知道这个对应着什么，我们可以在c:\\progr",{"_index":7804,"title":{},"body":{"1015833":{}}}],["可以看见这里会将eax放入到当前函数的缓冲区（main函数，ebp",{"_index":1494,"title":{},"body":{"1015843":{}}}],["可以看见这里在汇编中直接存储的是0（十六进制），因为这里的数据宽度是1个字节，也就是8位二进制，其二进制则为000",{"_index":1537,"title":{},"body":{"1015843":{}}}],["可以看见，两个函数的地址完全不一样，这就说明模板的本质就是编译器会在看见不同的传入类型时创建不同的函数",{"_index":3640,"title":{},"body":{"1015840":{}}}],["可以看见，在这里两个值不一样，所以当前sizeofrawdata是按文件对齐的值直接添加是不可取的，我们还需要按内存对齐，可以使用如下公式进行计算",{"_index":6377,"title":{},"body":{"1015828":{}}}],["可以看见，我们下断点成功断下来了，断点本质上就是在mov",{"_index":2326,"title":{},"body":{"1015843":{}}}],["可以看见，这里成功进行初始化了",{"_index":3336,"title":{},"body":{"1015840":{}}}],["可以调用，但执行效率最低",{"_index":3201,"title":{},"body":{"1015823":{}}}],["可以调用，执行效率比较低",{"_index":3204,"title":{},"body":{"1015823":{}}}],["可以这样进行指针赋值",{"_index":2101,"title":{},"body":{"1015843":{}}}],["可以通过反汇编代码来看一下",{"_index":2379,"title":{},"body":{"1015843":{}}}],["可以通过通过代码来证明这一点，这个值都是由我们之前创建的m_edit1变量来传递的",{"_index":1048,"title":{},"body":{"1015822":{}}}],["可使用的物理内存",{"_index":7901,"title":{},"body":{"1015833":{}}}],["可变序列算法",{"_index":11610,"title":{},"body":{"1015814":{}}}],["可变序列算法是指可以修改它们所操作的容器内容的算法，如下面的拷贝、替换、删除函数",{"_index":11649,"title":{},"body":{"1015814":{}}}],["可屏蔽中断线",{"_index":9572,"title":{},"body":{"1015831":{}}}],["可屏蔽中断线，称为intr（interrup",{"_index":9569,"title":{},"body":{"1015831":{}}}],["可执行文件",{"_index":5970,"title":{},"body":{"1015828":{}}}],["可等待对象",{"_index":10549,"title":{},"body":{"2424889":{}}}],["可等待对象，与进程结构体的_kprocess中的header成员是一样的",{"_index":11012,"title":{},"body":{"1703937":{}}}],["可等待对象，可以通过waitforsingleobject函数来使用可等待对象（例如互斥体、事件",{"_index":10945,"title":{},"body":{"1703937":{}}}],["可能会改动的函数或者变量，定义成private，使用时编译器会检测",{"_index":3425,"title":{},"body":{"1015840":{}}}],["可能很多人看到这就很疑惑了，那这跟c++有什么关系呢？我们之前说过c++和c的本质区别，就是编译器替代我们做了很多事情；别着急，慢慢来看",{"_index":3307,"title":{},"body":{"1015840":{}}}],["可视化操作",{"_index":4201,"title":{},"body":{"1015820":{}}}],["可识别的物理内存",{"_index":7908,"title":{},"body":{"1015833":{}}}],["可读、可写",{"_index":8925,"title":{},"body":{"1015831":{}}}],["可读、可执行",{"_index":8927,"title":{},"body":{"1015831":{}}}],["可选的部分：一些特殊的要求会加在这个部分，一般情况下是不会有这个字段的",{"_index":10285,"title":{},"body":{"1015818":{}}}],["右移",{"_index":1770,"title":{},"body":{"1015843":{}}}],["右移：各二进制位全部右移若干位，低位丢弃，高位补0（shr）或补符号位（sar",{"_index":5127,"title":{},"body":{"1015825":{}}}],["各类调试事件对应的结构体如下",{"_index":4700,"title":{},"body":{"3440657":{}}}],["合并节",{"_index":6416,"title":{},"body":{"1015828":{}}}],["同el",{"_index":2390,"title":{},"body":{"1015843":{}}}],["同一台机器上进程之间的通信虽然有很多种方法，但其本质就是共享内存",{"_index":8475,"title":{},"body":{"1015833":{}}}],["同时我们也了解了静态链接库的本质，那就是把你想要调用的接口（函数）直接写入到你的程序中",{"_index":8310,"title":{},"body":{"1015833":{}}}],["同样一个东西总会有好也有坏，在这里多线程解决方案优点很明显，但缺点同样也很致命",{"_index":9997,"title":{},"body":{"1015818":{}}}],["同样你可以简化这种写法，直接使用接口的iid即可",{"_index":3273,"title":{},"body":{"1015823":{}}}],["同样我们也可以使用for_each来打印输出，但在这之前需要做一个改造",{"_index":11505,"title":{},"body":{"1015814":{}}}],["同样我们也可以查看该函数的参数总字节数，也就是0x14（20）个字节，按每个参数4字节算，即有5个参数",{"_index":2577,"title":{},"body":{"1015846":{}}}],["同样我们可以更改设备空间的原点，使用函数setviewportorgu",{"_index":694,"title":{},"body":{"1015822":{}}}],["同样我们需要在cmainwindow类中定义create函数，然后做一个简单的输出即可",{"_index":188,"title":{},"body":{"1015822":{}}}],["同样运行该程序，b进程成功的通过共享映射对象的名称获取到了a进程共享的数据，并且在b进程的vad树中也多了一个节点",{"_index":6844,"title":{},"body":{"2949228":{}}}],["同样这个也有缺点",{"_index":2629,"title":{},"body":{"1015823":{}}}],["同样这里的缺点就很容易暴露出来了，我们的对象的所有私有成员会被客户看得一清二楚，即便客户不能访问它们，如果改变了数据成员的大小，所有客户程序必须重新编译，同样为了避免这种情况，我们可以使用抽象基类",{"_index":2624,"title":{},"body":{"1015823":{}}}],["同样，在链表中被链入的地址为_ethread（_kthread）中的0x60偏移位成员swaplistentry。（0x60偏移位有两个含义",{"_index":11097,"title":{},"body":{"1703937":{}}}],["同样，我们也可以通过getitemtext函数去获取数据，如下图所示就是获取第2行的第2列的数据",{"_index":1211,"title":{},"body":{"1015822":{}}}],["同样，我们可以根据对应的位，编写程序去解析",{"_index":10294,"title":{},"body":{"1015818":{}}}],["同步类型，从等待链表中找到第一个线程的等待块_kwait_block.waittype值为1的线程，将其临时唤醒",{"_index":10682,"title":{},"body":{"2424889":{}}}],["同理pde也由原来的4个字节变成了8个字节，pdt表也由1024个成员变成了512个成员，也就与pte一样了，此时2",{"_index":9515,"title":{},"body":{"1015831":{}}}],["同理也可以知道free和delete[]的区别",{"_index":3482,"title":{},"body":{"1015840":{}}}],["同理，你想获取父节点的子节点就可以使用getchilditem函数",{"_index":1244,"title":{},"body":{"1015822":{}}}],["同理，如果你想在子节点下面再创建子节点，你就可将当前子节点作为父节点去创建子节点",{"_index":1239,"title":{},"body":{"1015822":{}}}],["同理，我们也可以加载exe文件，然后去读取释放",{"_index":1315,"title":{},"body":{"1015822":{}}}],["同理，我们想转换逻辑坐标为设备坐标可以使用函数lptodp",{"_index":690,"title":{},"body":{"1015822":{}}}],["名称",{"_index":928,"title":{},"body":{"1015822":{},"1015825":{},"1015840":{},"1015843":{}}}],["名称；星号可以是多个",{"_index":2077,"title":{},"body":{"1015843":{}}}],["后不可有空格",{"_index":2355,"title":{},"body":{"1015843":{}}}],["后续课程讲解",{"_index":48,"title":{},"body":{"1015822":{}}}],["后缀为idl的文件是什么文件：idl全称interfaç",{"_index":3101,"title":{},"body":{"1015823":{}}}],["向set和map容器中添加自定义对象",{"_index":11767,"title":{},"body":{"1015814":{}}}],["向vector、deque、list、stack、queue容器中添加自定义对象",{"_index":11755,"title":{},"body":{"1015814":{}}}],["向下扩展的数据段",{"_index":9059,"title":{},"body":{"1015831":{}}}],["向下跳的范围是0x0",{"_index":11912,"title":{},"body":{"1015817":{}}}],["向导生成的对话框工程",{"_index":1023,"title":{},"body":{"1015822":{}}}],["向左移动则为1，向右为0",{"_index":1626,"title":{},"body":{"1015843":{}}}],["向线程传递参数，如下图所示，我们想要自定义线程执行for循环的次数，将n传递进去，这时候需要注意参数传递到线程参数时在堆栈中存在，并且传递的时候需要强制转换一下",{"_index":7414,"title":{},"body":{"1015833":{}}}],["向线程函数传递参数",{"_index":7413,"title":{},"body":{"1015833":{}}}],["含义",{"_index":929,"title":{},"body":{"1015822":{},"1015823":{},"1015825":{},"1015847":{},"2949228":{}}}],["含有纯虚函数的类被称之为抽象类，不能创建对象",{"_index":3578,"title":{},"body":{"1015840":{}}}],["含有纯虚函数的类，称之为抽象类",{"_index":3658,"title":{},"body":{"1015840":{}}}],["听起来很简单，但是其中有很多问题",{"_index":8598,"title":{},"body":{"1015833":{}}}],["启动线程的函数如下，我们可以看到它使用线程结构体的func成员函数，传递参数为lpparameter成员，这样我们就可以顺利的去执行对应线程的函数，最后将线程的状态设为退出状态，再进入scheduling函数进行线程切换",{"_index":11185,"title":{},"body":{"1703937":{}}}],["命令传递",{"_index":453,"title":{},"body":{"1015822":{}}}],["命令消息",{"_index":448,"title":{},"body":{"1015822":{}}}],["命令行参数是指在cmd命令行下运行程序所需要提供的参数，例如我们的main入口函数",{"_index":7238,"title":{},"body":{"1015833":{}}}],["命名严格区分大小写",{"_index":1357,"title":{},"body":{"1015843":{}}}],["命名空间",{"_index":3721,"title":{},"body":{"1015840":{}}}],["命名空间主要是用来解决命名冲突的问题；比如你定义了一个函数叫fun，而如果你还想定一个函数也叫fn，这种情况下就可以使用命名空间来解决这个问题",{"_index":3722,"title":{},"body":{"1015840":{}}}],["命名空间的关键词：namespace，其语法格式如下",{"_index":3723,"title":{},"body":{"1015840":{}}}],["和",{"_index":1766,"title":{},"body":{"1015843":{}}}],["唤醒的线程并不会将等待的线程从等待网上摘除，这需要等待的线程自己进行摘除，因此当等待的线程再次获得cpu控制权时，会在”自己把自己挂入等待链表（kiwaitlisthead）“后的位置，继续执行代码，并重新进入循环判断的入口，再判断自己是否符合激活条件，如果符合的话则修改signalstate的值，并退出循环",{"_index":10661,"title":{},"body":{"2424889":{}}}],["四个参数依次都分别表示左、上、右、下，实际上也可以理解为前2个参数为左上角的x",{"_index":753,"title":{},"body":{"1015822":{}}}],["四个操作fd_set的操作宏",{"_index":10048,"title":{},"body":{"1015818":{}}}],["回到实例化对象的相关cpp文件，来看一下domodal函数",{"_index":1050,"title":{},"body":{"1015822":{}}}],["回调函数vectoredhandler创建之后，就可以将其进行注册，也就是添加到全局链表中，当遇到对应的用户异常时，就会被查找并调用。注册回调函数的格式如下",{"_index":4326,"title":{},"body":{"2949166":{}}}],["回调函数vectoredhandler有两个返回值",{"_index":4321,"title":{},"body":{"2949166":{}}}],["回调函数原型",{"_index":10177,"title":{},"body":{"1015818":{}}}],["回顾之前介绍的virtualalloc函数，其第三个参数flallocationtype可以有两个值，含义如下",{"_index":7033,"title":{},"body":{"2949228":{}}}],["因为selectobject方法返回的结果是未被替代前的cpen对象（指针），所以我们可以这样写",{"_index":843,"title":{},"body":{"1015822":{}}}],["因为不同的设备有不同的屏幕，也就造成了像素点不一样的情况，通过指定逻辑单位，我们只需要操作逻辑坐标而不需要去管设备，更换不同的设备依然可以精准的显示我们指定的长度",{"_index":664,"title":{},"body":{"1015822":{}}}],["因为在c语言中不添加如下关键词，默认就是有符号数，所以这里就是两个有符号数的赋值，变量x给到y，y的值就是0xffffffff，这是为什么？int类型代表4个字节，也就是32位二进制数：00",{"_index":1559,"title":{},"body":{"1015843":{}}}],["因为我们光标已经离开客户区域了，所以说它接收不到鼠标左键抬起的信息，我们可以借助函数setcapture，该函数的意思就是在属于当前线程的指定窗口里设置鼠标捕获，一旦窗口捕获了鼠标，所有鼠标输入都针对该窗口，无论光标是否在客户区内；同样，对应的一个函数就是releasecapture函数，当你不在需要继续获得鼠标消息就要应该调用它来释放，但在这里你要通过getcapture来获取当前捕获鼠标信息的窗口的句柄来判断是否是当前窗口的句柄，如果是则释放",{"_index":985,"title":{},"body":{"1015822":{}}}],["因为我们增加了一个节，所以需要在标准pe头的第二个成员（numberofsections）中加1",{"_index":6409,"title":{},"body":{"1015828":{}}}],["因为我们强制要求了以2字节的方式进行对齐，所以char类型虽然只占了一个字节，却需要分配2个地址，而结构体的宽度等于",{"_index":2037,"title":{},"body":{"1015843":{}}}],["因为整个线性地址是32位的，我们已经确定了12、10位，那么最后就剩下10位了，此时10",{"_index":9508,"title":{},"body":{"1015831":{}}}],["因为此处add指令是进行了运算结果不是0，固zf位=0，在汇编中没有像c语言这样高级语言中有if语句、while语句，那它是怎么实现这些功能呢",{"_index":5421,"title":{},"body":{"1015825":{}}}],["因为自增、自减，本质上就是+1，所以我们可以得出算式",{"_index":2088,"title":{},"body":{"1015843":{}}}],["因为这是一个report风格的listctrl控件，该风格是有一个表头的，所以我们需要使用insertcolumn函数去添加一个表头（靠左对齐，宽度为60",{"_index":1205,"title":{},"body":{"1015822":{}}}],["因为需要完美的模拟，所以create函数需要在构造函数中调用，initinstance函数需要在main函数中调用（实际上是通过指针去调用的",{"_index":189,"title":{},"body":{"1015822":{}}}],["因此为了弄清楚这些问题，我们就必须进入0环，从底层理解消息机制的本质",{"_index":3747,"title":{},"body":{"3440655":{}}}],["因此在这里normalroutine并不是用户apc的执行函数，也没法直接去执行，因为当前环境在内核空间，如果直接执行了用户空间的apc函数，就可能存在安全问题，因此需要通过kiinitializeuserapc函数来返回用户空间执行，我们可以来分析一下这个函数",{"_index":10923,"title":{},"body":{"2424869":{}}}],["因此我们可以来看下当前结构体，u1是有值的，u2是没有值，那么我们就可以通过u1来找到下一个零化物理页对应的结构体",{"_index":6999,"title":{},"body":{"2949228":{}}}],["因此我们可以通过switch分支来判断异常类型，从而进一步的处理相关异常引起的断点",{"_index":4886,"title":{},"body":{"3440657":{}}}],["因此我们可以通过如下的代码来进行反调试，编译这个程序，正常打开是会执行printf的，但如果通过od打开则会停止运行",{"_index":4505,"title":{},"body":{"2949166":{}}}],["因此我们希望接收并处理所有类型的消息，就需要提供一个容器，即消息队列。将所有消息都存放在消息队列中，进程再从消息队列中获取",{"_index":3791,"title":{},"body":{"3440655":{}}}],["因此我们得出一个结论，一个进程在底层准备了一个或多个物理页，这些物理页在准备阶段不可被使用。但是，任何进程只要获得了该物理页的句柄，就可以将其映射到自己的内存空间中，从而能够使用这些内存。通过这种方式，进程可以存储数据或读取数据（根据创建物理页时设置的属性），实现了资源共享的目的",{"_index":6845,"title":{},"body":{"2949228":{}}}],["因此我们知道loadlibrary函数底层实现利用了映射文件的机制来实现共享文件，被loadlibrary加载的映射文件具备execute_writecopy内存保护属性，该属性用于防止其他进程修改映射文件",{"_index":6863,"title":{},"body":{"2949228":{}}}],["因此我们需要来看一下cruntimeclass这个结构体",{"_index":235,"title":{},"body":{"1015822":{}}}],["因此我可以将除零异常代码中的_except(1)修改为_except(0)，表示没有对应的异常处理程序，也不去注册",{"_index":4787,"title":{},"body":{"3440657":{}}}],["因此接下来我们需要了解“门”相关的内容",{"_index":9189,"title":{},"body":{"1015831":{}}}],["因此，实际上kewaitforsingleobject函数才是核心功能的实现",{"_index":10609,"title":{},"body":{"2424889":{}}}],["因此，我们取一个句柄7ac，来找到它对应的内核对象，可以使用dq",{"_index":8704,"title":{},"body":{"1933378":{}}}],["因此，我们想要去探测段寄存器的base属性，可以使用向0x0地址写值，因为我们都知道正常情况下0x0地址是不可读不可写的，但是fs段寄存器的base属性值为",{"_index":8943,"title":{},"body":{"1015831":{}}}],["因此，我们需要如下图所示，创建一个空项目，然后添加c++源文件",{"_index":4111,"title":{},"body":{"1015820":{}}}],["因此，窗口就像进程和线程一样，实际上是一个处于0环的结构。窗口也有与之对应的内核结构体，即_window_object。（该结构体没有通过符号表导出，可以查看reactos的代码来查看该结构体",{"_index":3965,"title":{},"body":{"3440655":{}}}],["因此，综上所述我们可以知道只要结构体中成员有_dispatcher_header，或包含了_dispatcher_header结构体的，我们都可以称之为可等待对象",{"_index":10553,"title":{},"body":{"2424889":{}}}],["因此，这意味着该函数的返回结果即为调试对象，它不会直接返回调试对象在0环的地址。所以在3环_teb.dbgssreserved[1]中存储了该调试对象的句柄。这个句柄用于在3环中引用和操作调试对象",{"_index":4534,"title":{},"body":{"3440657":{}}}],["国（unicode编码）：0x12345",{"_index":7085,"title":{},"body":{"1015833":{}}}],["图像（图形）对象：决定你要画的东西的属性",{"_index":7657,"title":{},"body":{"1015833":{}}}],["图形设备接口",{"_index":7649,"title":{},"body":{"1015833":{}}}],["图形设备接口，如画图、显示文本",{"_index":2416,"title":{},"body":{"1015846":{}}}],["在1和g之间任意一个随机整数e（公开指数，满足1<e<gi",{"_index":10438,"title":{},"body":{"1015818":{}}}],["在2",{"_index":9545,"title":{},"body":{"1015831":{}}}],["在32位模式中rcx为ecx",{"_index":11972,"title":{},"body":{"1015817":{}}}],["在3环创建窗口时，首先需要创建和注册一个窗口类对象，并注册和设置窗口的样式和过程函数。然后，通过调用createwindow函数来创建窗口",{"_index":3970,"title":{},"body":{"3440655":{}}}],["在_dbgkforwardexception函数内，最终会调用_dbgkpsendapimessage函数，这个函数我们在“调试事件的采集”篇的学习中已经了解，它的作用就是将已创建的调试事件发送到调试对象的事件链表中",{"_index":4805,"title":{},"body":{"3440657":{}}}],["在_ethread结构体中有两处位置都指向了进程结构体，分别是_ethread.threadsprocess（0x220偏移位）和_ethread.tcb.apcstate.process（0x44偏移位",{"_index":11273,"title":{},"body":{"1703937":{}}}],["在_kiswapprocess函数中，我们发现它就是将cr3修改为目标进程的directorytablep",{"_index":11296,"title":{},"body":{"1703937":{}}}],["在_kpcr结构体中的0x0偏移位成员，它是一个结构体_nt_tib",{"_index":11053,"title":{},"body":{"1703937":{}}}],["在_mmvad结构体中有一个成员u，其指向的是如下所示的一个union共同体结构",{"_index":6716,"title":{},"body":{"2949228":{}}}],["在addvectoredexceptionhandler函数内部，会为每个veh准备如下一个结构体",{"_index":4333,"title":{},"body":{"2949166":{}}}],["在apc章节中了解过，当我们插入一个用户apc时（alertable=1），当前线程是可以被唤醒的，但并不是真正的唤醒。因为，如果当前的线程在等待网上，执行完用户apc后，仍然要进入等待状态",{"_index":10667,"title":{},"body":{"2424889":{}}}],["在c++中我们可以使用父类的指针来指向子类的对象",{"_index":3559,"title":{},"body":{"1015840":{}}}],["在c++中是允许我们在两个对象之间直接使用赋值运算符的",{"_index":3691,"title":{},"body":{"1015840":{}}}],["在case分支大于3个且大表项空隙大于6个且case最大最小差值小于255时存在大表和小表",{"_index":1827,"title":{},"body":{"1015843":{}}}],["在case分支大于3个并且大表项空隙小于等于6个时只有大表没有小表",{"_index":1826,"title":{},"body":{"1015843":{}}}],["在case分支小于等于3个、case最大值和最小值差大于等于255时不存在大小表",{"_index":1825,"title":{},"body":{"1015843":{}}}],["在cmainwindow类里面定义一个函数：createobjectbyname(ç",{"_index":351,"title":{},"body":{"1015822":{}}}],["在com模型中，com对象的位置对于客户来说是透明的，即客户代码不需要直接初始化一个com对象，而是com库通过一个全局标识码guid去对其进行初始化工作",{"_index":2806,"title":{},"body":{"1015823":{}}}],["在c盘下创建test目录",{"_index":8071,"title":{},"body":{"1015833":{}}}],["在c语言中写入中文与其他字符串没区别，但我们了解过gb2312或gb2312",{"_index":1698,"title":{},"body":{"1015843":{}}}],["在c语言中函数返回值是存储在寄存器eax中",{"_index":1452,"title":{},"body":{"1015843":{}}}],["在c语言中参数传递是通过堆栈的，传递的顺序是从右到左",{"_index":1451,"title":{},"body":{"1015843":{}}}],["在c语言中变量类型有这几种",{"_index":1517,"title":{},"body":{"1015843":{}}}],["在c语言中如何实现让某些语句按照一定的条件重复执行呢？比如：打印0",{"_index":1830,"title":{},"body":{"1015843":{}}}],["在c语言中我们想要使用win32",{"_index":7148,"title":{},"body":{"1015833":{}}}],["在c语言中约定俗成的入口函数名称为main()，函数的格式是这样的",{"_index":1348,"title":{},"body":{"1015843":{}}}],["在c语言中，变量有两类：全局变量、局部变量",{"_index":1464,"title":{},"body":{"1015843":{}}}],["在c语言中，我们可以通过一个函数去申请一块内存，就是malloc(n)；申请的这一块内存就是在堆中的",{"_index":3449,"title":{},"body":{"1015840":{}}}],["在c语言里面指针是一种数据类型，是给编译看的，也就是说指针与int、char、数组、结构体是平级的，都是一个类型",{"_index":2074,"title":{},"body":{"1015843":{}}}],["在dtdebug中我们可以在内存窗口使用db/dw/",{"_index":5229,"title":{},"body":{"1015825":{}}}],["在dtdebug中标志寄存器就是这一部分",{"_index":5401,"title":{},"body":{"1015825":{}}}],["在gdi中我们有画刷（cbrush类）、画笔（cpen类）、字体（cfont类），如上案例中我们使用了画刷来填充矩形，那么假设要改别一个矩形四边的线条，我们可以通过画笔来完成",{"_index":828,"title":{},"body":{"1015822":{}}}],["在gdt表中存储的元素就是段描述符，每一个段描述符的宽度是8字节。段描述符的结构如下图所示",{"_index":9001,"title":{},"body":{"1015831":{}}}],["在idt表中有3种门描述符：1.任务门描述符；2.中断门描述符；3.陷阱门描述符。我们来看一下中断门描述符的结构",{"_index":9260,"title":{},"body":{"1015831":{}}}],["在initinstance函数中将new运算符替代为动态创建函数createobject即可",{"_index":331,"title":{},"body":{"1015822":{}}}],["在mfc出来的时候c++并没有rtti这个概念，所以mfc自己设计了这样一套东西，其依靠的就是两个宏：declare_dynamic、implement_dynamic，其中implement_dynamic宏也包含了一个关键的宏runtime_class以及关键结构体crunt",{"_index":221,"title":{},"body":{"1015822":{}}}],["在msdn",{"_index":37,"title":{},"body":{"1015822":{}}}],["在msr寄存器中有三个值即cs段选择子、esp和eip寄存器，当我们找到cs选择子时候，将其地址加0x8即可获得ss选择子。当然这些操作都是硬件去完成的，具体的细节可以参考intel白皮书第二卷中sysenter指令的内容",{"_index":2480,"title":{},"body":{"1015846":{}}}],["在mydll.cpp中实现方法，需要在开头写上一致的调用约定",{"_index":8323,"title":{},"body":{"1015833":{}}}],["在onlbuttondown函数这下断点进行来看一下消息处理的流程",{"_index":514,"title":{},"body":{"1015822":{}}}],["在pe中最重要的三张表就是导出、导入和重定位表，本章来了解一下重定位表",{"_index":6597,"title":{},"body":{"1015828":{}}}],["在pe中，节数据有几个，分别对应着什么类型以及其他相关的属性都是由pe节表来决定的，pe节表是一个结构体数组，结构体的定义如下所示",{"_index":6193,"title":{},"body":{"1015828":{}}}],["在pe格式图中，扩展pe头最后一个成员是结构体数组，在这个结构体数组里面有16个结构体，第一个结构体就是导出表相关的信息，它有2个成员，一个表示导出表的地址，一个表示导出表的大小。如下图所示中的_image_export_directory，就是pe导出表的结构",{"_index":6453,"title":{},"body":{"1015828":{}}}],["在pspexitthread函数内，我们可以看见它判断了debugport是否为0，如果不为0表示当前正在调试，就进行跳转",{"_index":4606,"title":{},"body":{"3440657":{}}}],["在pspuserthreadstartup函数内，我们可以很快到的找到对应的调试事件采集函数_dbgkcreatethr",{"_index":4600,"title":{},"body":{"3440657":{}}}],["在qt",{"_index":4130,"title":{},"body":{"1015820":{}}}],["在qt中信号和槽是这样的运作流程",{"_index":4138,"title":{},"body":{"1015820":{}}}],["在stl中使用自定义对象有一下两种情况",{"_index":11751,"title":{},"body":{"1015814":{}}}],["在swapcontext函数内，实际上是将判断的结果给到了al，而后在kiswapthread调用完kiswapcontext之后，将al值进行了比较，当al的值不为0时则进行跳转",{"_index":10903,"title":{},"body":{"2424869":{}}}],["在udp协议中服务器端和客户端的概念被弱化了，很难界定客户端与服务端，所以一般在udp协议中，我们不以服务器端和客户端概念去做称谓，而是以端对端这种概念",{"_index":9938,"title":{},"body":{"1015818":{}}}],["在vc6中创建静态链接库项目",{"_index":8287,"title":{},"body":{"1015833":{}}}],["在vc6中想要以hex的形式查看某个文件的话可以在打开文件的时候这样设置",{"_index":8257,"title":{},"body":{"1015833":{}}}],["在vc6中没法直接打开这个rc文件，但是我们可以在外部使用记事本去打开",{"_index":1035,"title":{},"body":{"1015822":{}}}],["在vc6编译器下，我们可以通过如下格式的代码来处理seh异常，即_try{...})except(...){...}格式，使用这种格式编写代码后，编译器会在编译时帮我们转换，使得最终代码能够实现挂入链表、异常过滤、异常处理",{"_index":4414,"title":{},"body":{"2949166":{}}}],["在win32中使用字符串",{"_index":7162,"title":{},"body":{"1015833":{}}}],["在win32的课程学习中，我们了解了进程的创建，知道真正运行代码的实际上是线程而不是进程。如下这个汇编指令就是线程运行的，当运行这段代码时cpu是如何解析0x12345678这个地址的呢",{"_index":11270,"title":{},"body":{"1703937":{}}}],["在windbg中使用如下格式命令可以很直观的看到结构体中每个成员对应的内容",{"_index":5629,"title":{},"body":{"1015847":{}}}],["在windbg中我们可以使用如下命令查看_trap_frame结构体",{"_index":2500,"title":{},"body":{"1015846":{}}}],["在windbg中查看结构体，我们会发现这些结构体的第一个成员都是_dispatcher_header，也就表示第一个成员为_dispatcher_header的结构体就是可等待对象",{"_index":10551,"title":{},"body":{"2424889":{}}}],["在window",{"_index":2546,"title":{},"body":{"1015846":{},"2949228":{}}}],["在windows上0环（内核空间）win32k.sys的2个线程分别对鼠标、键盘进行消息的监控，具体的我们可以看下如下这个函数initinputimpl，在初始化win32k.sys的服务时，会调用它来创建2个线程：keyboardthreadmain、mousethreadmain，也就是鼠标、键盘的监控线程",{"_index":3930,"title":{},"body":{"3440655":{}}}],["在windows下提供了结构化异常处理机制，编译器普遍都支持，如下就是代码使用方法",{"_index":5535,"title":{},"body":{"1015847":{}}}],["在windows下有ntfs、fat32这两种文件系统，我们可以通过查看本地磁盘的属性查看",{"_index":7983,"title":{},"body":{"1015833":{}}}],["在windows下的ntreadvirtualmemory、ntwritevirtualmemory函数来跨进程读写就是利用的高2g内存空间来进行读写，具体流程如下",{"_index":11308,"title":{},"body":{"1703937":{}}}],["在windows下的用户空间线性地址是通过”搜索二叉树“的方式进行管理。在这里我们使用windbg来看一下具体是如何管理的",{"_index":6693,"title":{},"body":{"2949228":{}}}],["在windows中，一个线程可以通过等待一个或者多个可等待对象，从而进入等待状态，另一个线程可以在某些时刻唤醒等待这些对象的其他线程，这就是windows的等待与唤醒机制",{"_index":10548,"title":{},"body":{"2424889":{}}}],["在windows操作系统上微软采用了一种不同的策略。由于在0环（内核空间）中，不同进程的地址空间往往是相同的（即我们常说的高2g为共享内存），因此可以将消息队列存储在内核空间",{"_index":3797,"title":{},"body":{"3440655":{}}}],["在windows操作系统中没有使用tss进行任务（线程）切换，我们可以手动实现一下。主要分为几个步骤",{"_index":9303,"title":{},"body":{"1015831":{}}}],["在windows操作系统中，消息队列存储在0环（内核空间）中，并可以通过kthread.win32thread找到",{"_index":3920,"title":{},"body":{"3440655":{}}}],["在windows操作系统当中使用了r",{"_index":9067,"title":{},"body":{"1015831":{}}}],["在windows系统中提供了一些以dbgk开头的函数，可用于采集调试事件，并生成相应事件的结构体，我们称之为调试事件采集函数。如下图所示，我们会发现这些事件采集函数都是在api调用的必经之路上加入的。图中黑色字体的函数就是每个事件api最终都会经过的地方，紫色字体的函数用于采集调试事件，红色字体的函数用于发送（写入）调试事件",{"_index":4595,"title":{},"body":{"3440657":{}}}],["在一个内部的do...while循环中，ntusergetmessage首先会判断sentmessageslisthead中是否存在消息，如果有，则调用窗口回调函数处理它。然后，在处理完sentmessageslisthead中的所有消息之后，才会考虑其他六个队列中的消息。在这种情况下，将不会处理这些消息，而是直接将它们返回。因此，getmessage也会对消息进行处理，但只会处理sentmessageslisthead中的消息",{"_index":4008,"title":{},"body":{"3440655":{}}}],["在一些较老的编译器中，编译出来的文件会区分文件对齐、内存对齐，但是在现在的编译器编译出来的程序，文件对齐与内存对齐时完全一样的，所以我们不用费这么大的周折，我们只需要算出rva的值就可以得出foa的值",{"_index":6339,"title":{},"body":{"1015828":{}}}],["在上一章中，我们用代码分别输出了原始数据包中的目标主机的mac地址和源主机的mac地址，这分别占6字节，还有2字节表示类型，加起来就是14字节，我们称之为mac帧结构",{"_index":10259,"title":{},"body":{"1015818":{}}}],["在上一章节中我们可以在任意空白区添加自己的代码，但如果添加的代码比较多，空白区不够怎么办？这时候就需要扩大节，节有很多个，我们应该扩大哪一个节呢？想象一下如果你现在扩大第一个节，那么其他节的偏移量之类的属性都需要修改，这样很麻烦，所以我们可以选择扩大最后一个节，这样就不用修改其他节的属性了",{"_index":6371,"title":{},"body":{"1015828":{}}}],["在上一章节中我们是将initinstance这个虚函数删除的，在本章中我们可以基于上一章节的代码重新定义一下该虚函数，在原mfc中（这里我们是模拟）这个虚函数在三个类中都存在",{"_index":184,"title":{},"body":{"1015822":{}}}],["在上一章节中我们看到window",{"_index":2458,"title":{},"body":{"1015846":{}}}],["在上一章节中，我们了解了多行指令通过临界区的方式在多核环境下进行线程同步，但那只是简单了解，本章节我们需要了解在windows下实现多核同步的机制：自旋锁",{"_index":6665,"title":{},"body":{"1933380":{}}}],["在上一章节中，我们了解到了createprocess()函数创建进程会有一个结构体lpprocess_inf",{"_index":7298,"title":{},"body":{"1015833":{}}}],["在上一章节的学习中，我们知道如果想控制线程的行为，就需要给它的apc队列里面挂一个apc，也就是在线程结构体0x34偏移位成员apcstate的成员apclisthead其中一个链表中挂入，除了apcstate成员以外，在线程结构体kthread中存着与apc有关的字段不止这一处",{"_index":10794,"title":{},"body":{"2424869":{}}}],["在上一节中我们了解到了函数，函数的本质就是一堆指令，我们可以重复调用；函数的定义在上节中我们也已经了解了，我们举一个函数的例子",{"_index":1423,"title":{},"body":{"1015843":{}}}],["在上文中我们可以通过导入表确定依赖的模块名（导入表结构体的第四个成员name），接着我们还需要确定具体依赖的函数是什么",{"_index":6561,"title":{},"body":{"1015828":{}}}],["在上述代码中我们创建的设备名称是给0环使用的，如果要在3环访问到设备就需要通过符号链接，我们可以理解为它就是一个设备的别名，如果不这样设置则在3环是无法访问到设备的。我们可以通过iocreatesymboliclink函数来创建符号链接，它与设备名称一样，传递的名称需要以unicode编码",{"_index":5673,"title":{},"body":{"1015847":{}}}],["在上面的学习中我们知道可以通过_kthread结构体的0xe0偏移来会找到系统服务表，除了这个方式以外我们还可以通过另外一种方式来访问，那就是ssdt（sy",{"_index":2560,"title":{},"body":{"1015846":{}}}],["在不同的情况下，处理缺页异常的方式也不同。其中，由于内存交换引起的缺页异常属于第一种情况，即页面文件中的情况。在这种情况下，页表项（pte）的1",{"_index":7025,"title":{},"body":{"2949228":{}}}],["在主窗口文件中存在一个函数，其名为chellodialogdlg::dodataexchange，这是用来实现动态绑定的，我们可以来举例说明下动态绑定的意思",{"_index":1038,"title":{},"body":{"1015822":{}}}],["在之前了解到ascii码表中，我们并没有发现存在中文，那么如何在计算机中存储中文？这时候我们需要了解一个新的表：拓展ascii码表",{"_index":1689,"title":{},"body":{"1015843":{}}}],["在之前各种“门”的学习后，我们知道当进行权限切换时（3环进0环），cs、ss、esp、eip寄存器都会发生变化。有了这些前置的知识了解，我们来看一下kiintsystemcall和kifastsystemcall这两个进入0环的方式",{"_index":2467,"title":{},"body":{"1015846":{}}}],["在之前学习pde、pdt结构中我们没有讲解pwt、pcd位，现在我们来了解以下",{"_index":9620,"title":{},"body":{"1015831":{}}}],["在之前异常（用户异常的分发与内核异常的分发过程）章节的学习中，我们分析了kidispatchexception函数的执行流程。因此，我们知道在异常分发时，首先会检查调试器是否存。那么本文将在存在调试器和不存在调试器的情况下，验证异常分发的流程",{"_index":4776,"title":{},"body":{"3440657":{}}}],["在之前我们也说到二进制的简写形式就是十六进制，那么000",{"_index":5090,"title":{},"body":{"1015825":{}}}],["在之前的例子中我们提到了closehandle这个函数是用来关闭进程、线程的，其实它的本质就是释放句柄，但是并不代表执行了这个函数，创建的内核对象就会彻底消失；如上图中所示内核对象存在一个计数器，目前是2，它的值是根据调用a的次数来决定的，如果我们只是在a进程中执行了closehandle函数，内核对象并不会消失，因为进程b还在使用，而只有进程b也执行了closehandle函数，这个内核对象的计数器为0，就会关闭消失了",{"_index":7313,"title":{},"body":{"1015833":{}}}],["在之前的学习中我们反复提到一个进程有4gb大小的内存空间，低2g是程序自己的，高2g是共享的，也就是内核空间。现在我们已经知道一个简单的驱动程序从开发到运行的流程，可以做一个实验来论证“高2g是共享的",{"_index":5591,"title":{},"body":{"1015847":{}}}],["在之前的实验中我们修改了c:\\boot.ini文件，现在我们可以修改参数为noexecute，然后重启系统，这样就可以开启2",{"_index":9525,"title":{},"body":{"1015831":{}}}],["在之前的实验中我们知道pde/pte的低12位表示属性，这两个属性进行与运算得出的结果就是物理页的属性",{"_index":9438,"title":{},"body":{"1015831":{}}}],["在之前的汇编学习中，我们了解到有符号数和无符号数，同样在c语言中，也可以表示有符号数与无符号数，在c语言中不添加如下关键词，默认就是有符号数",{"_index":1545,"title":{},"body":{"1015843":{}}}],["在之前的章节中我们使用了如下这种指令向段寄存器中写入值，并且在最初介绍段寄存器的时候就提到，虽然这里我们是将16位寄存器的值写入进去，但实际上写入的仍然是96位",{"_index":8957,"title":{},"body":{"1015831":{}}}],["在之前的章节学习中我们了解到kewaitforsingleobject函数关键循环部分，会判断线程的激活条件，如果符合条件就修改等待对象的signalstate并退出循环。线程的激活条件（等待对象的signalstate）是由等待对象类型对应函数决定的，不同的等待对象有不同的函数将线程进行临时唤醒，如_kevent事件对象，它对应使用的临时唤醒函数是setevent。不同的等待对象，在临时唤醒的处理上，以及修改等待对象的signalstate的步骤上都会有所差异",{"_index":10669,"title":{},"body":{"2424889":{}}}],["在之前的章节里一家了解过了sizeofimage可以比实际值要大并且这个值默认情况下本身就是与内存对齐之后的结果，所以你在原基础上加0x1000即可，这样我们就完成了扩大节的操作",{"_index":6385,"title":{},"body":{"1015828":{}}}],["在之前的课程中我们了解到变量的定义决定两个事情，第一是决定存储的数据宽度，第二是决定了存储的数据格式，那么我们来看下下面的代码",{"_index":1643,"title":{},"body":{"1015843":{}}}],["在之前的课程中我们提到了变量，变量就是一种容器，我们可以存储数据在里面，里面的数据也可以被我们修改；但是这个容器能存储多少数据，存储什么样格式的数据就取决于变量类型（数据类型",{"_index":1516,"title":{},"body":{"1015843":{}}}],["在之前的课程中我们讲解了10",{"_index":9496,"title":{},"body":{"1015831":{}}}],["在之前的课程概要中，我们说了计算机只能读懂机器语言（二进制），相信很多人就开始疑惑了，为什么计算机只能读懂二进制？原因是因为计算机是需要电的，而电路设计只有两种状态：1（真·通电）0（假·未通电），所以计算机中存储的任何文件、接收的任何指令都是由0和1组成的",{"_index":5063,"title":{},"body":{"1015825":{}}}],["在之前，我们已经了解过pe文件的整体结构了，并且我们进行了静动态差异的文件分析，其开头部分就是dos部分，包含了",{"_index":6037,"title":{},"body":{"1015828":{}}}],["在了解2",{"_index":9500,"title":{},"body":{"1015831":{}}}],["在了解c语言的汇编表示之前，我们要弄清楚c、c++、vc6、vs之间的关系，c和c++都属于编程语言，vc6、vs属于集成开发环境",{"_index":1337,"title":{},"body":{"1015843":{}}}],["在了解g位属性之前，我们先来看一下段描述符与段寄存器结构的对应关系，如下图所示我使用颜色方框标记出了它们之间的对应关系（大家可以会觉得段描述符中的属性分布很零碎，这是因为段描述符也是一步一步发展的，intel需要考虑老版本的系统就需要向下兼容，所以段描述符的结构就不能有变化，只能在以前的结构上进行拓展",{"_index":9025,"title":{},"body":{"1015831":{}}}],["在了解pe之前，我们需要知道什么是可执行文件，从字面理解可执行文件就是可以由操作系统进行加载执行的文件",{"_index":5971,"title":{},"body":{"1015828":{}}}],["在了解qt的信号和槽之前，我们来回顾一下mfc的消息映射机制，其就是将自定义消息和对应的处理函数添加到消息映射表中，这样的方法很简单，并且可以很直观的便于寻找",{"_index":4134,"title":{},"body":{"1015820":{}}}],["在了解临界区之前我们需要补充一些前置知识，以此作为铺垫再进行学习。我们需要了解并发与同步的概念：并发是指多个线程同时执行，在单核的情况下并不是真正的同时执行而是分时执行，多核的情况下就可以在某一个时刻同时多个线程执行。同步则是保证在并发执行的环境中各个线程可以有序的执行，无论是单核或多核的环境",{"_index":6631,"title":{},"body":{"1933380":{}}}],["在了解了调试原理之后，我们可以总结出一些反调试的方法",{"_index":4555,"title":{},"body":{"3440657":{}}}],["在了解了那么多控件的使用方法之后，我发现其实很多都是如出一辙，所以接下来的笔记记录不会那么详细",{"_index":1123,"title":{},"body":{"1015822":{}}}],["在了解保存现场内容时，我们知道在windows内核中每一个进程的每一个线程都有着一个_ethread结构体，它存储着线程相关的信息，在这个结构体里有另外一个结构体_kthread，该结构体的0xe0偏移位成员就存储着系统服务表的地址",{"_index":2549,"title":{},"body":{"1015846":{}}}],["在了解完基本的结构体之后，我们可以手动来分析一下在0环函数kisystemservice，看一下它到底是如何保存现场的。该函数保存现场的过程实际上就是填充trap_frame结构体的过程",{"_index":2519,"title":{},"body":{"1015846":{}}}],["在了解寄存器之前，我们需要知道计算机在哪存储数据，分别是三个地方：cpu",{"_index":5148,"title":{},"body":{"1015825":{}}}],["在了解段权限检查之前我们先来看一下cpu的分级，如下图所示就是cpu权限的不同分级",{"_index":9066,"title":{},"body":{"1015831":{}}}],["在了解这两个位之前我们需要有一个前置知识，那就是cpu缓存。cpu缓存是位于cpu和物理内存之间的临时存储器，它的容量比内存小很多，但是交换速度比内存快很多",{"_index":9622,"title":{},"body":{"1015831":{}}}],["在互联网中采用了这种双工的通信模式，所以说当客户端给服务器端说要断开通信的时候，实际上只断开了一条通信线路，还有一条通信线路需要服务器端给客户端说要断开通信才会断开",{"_index":9923,"title":{},"body":{"1015818":{}}}],["在什么时候去使用有符号、无符号呢",{"_index":1550,"title":{},"body":{"1015843":{}}}],["在代码中去调用，成功执行，结果如下",{"_index":2453,"title":{},"body":{"1015846":{}}}],["在代码中改写",{"_index":342,"title":{},"body":{"1015822":{}}}],["在代码中改写为",{"_index":262,"title":{},"body":{"1015822":{}}}],["在代码中有一个结构体数组，即线程结构体数组",{"_index":11114,"title":{},"body":{"1703937":{}}}],["在代码中的iid_iunknown是com库的东西，所以我们需要包含一个头文件",{"_index":2689,"title":{},"body":{"1015823":{}}}],["在代码段时候，a（访问位，第8位）与数据段一样的意义；r（可读位，第9位）表示当前代码段是否可读；c（一致位，第10位），当该值为1时则表示一致代码段，当该值为0时表示非一致代码段",{"_index":9045,"title":{},"body":{"1015831":{}}}],["在以上流程都结束之后，再回到kernel32.dll，如下图所示，会比较返回结果，如果调试对象创建成功就进行跳转",{"_index":4536,"title":{},"body":{"3440657":{}}}],["在以上章节中我们了解到当使用调用、中断、陷阱门时，当出现权限切换的时候栈也会随之切换，并且由于cs的cpl发生了改变，也就导致ss必须进行切换。我们知道cs的值是由门来指定的，但是esp和ss呢？它们基于tss（t",{"_index":9285,"title":{},"body":{"1015831":{}}}],["在低32位中的第16到31位就是段选择子，在低32位中第0到第15位及高32位中过的第16到31位存储的就是偏移",{"_index":9198,"title":{},"body":{"1015831":{}}}],["在使用vector的时候需要包含头文件和使用命名空间",{"_index":11327,"title":{},"body":{"1015814":{}}}],["在使用之前需要包含头文件和使用命名空间",{"_index":11429,"title":{},"body":{"1015814":{}}}],["在使用之前需要包含头文件（定义的文件），如果你包含了windows.h或者atlbase.h文件也可以",{"_index":2922,"title":{},"body":{"1015823":{}}}],["在使用全局变量开始前构建并进入临界区，使用完之后离开临界区",{"_index":7514,"title":{},"body":{"1015833":{}}}],["在使用只能智能指针需要包含一个头文件",{"_index":3258,"title":{},"body":{"1015823":{}}}],["在例子",{"_index":12057,"title":{},"body":{"1015817":{}}}],["在保存现场的学习时我们知道无论是kisystemservice还是kifastcallentry方法最终都会走到kifastcallentry函数内的某块。这一块代码就是系统调用号查找函数的过程，我们来分析一下",{"_index":2553,"title":{},"body":{"1015846":{}}}],["在保护模式篇的学习中我们实际上已经有了一些物理内存的概念，结合之前的学习我们来重新的了解一下物理内存的管理",{"_index":6866,"title":{},"body":{"2949228":{}}}],["在做\"使用任务门实现任务切换\"实验之前，我们先来看一下任务门的执行过程如下所示",{"_index":9369,"title":{},"body":{"1015831":{}}}],["在做实验之前我们需要知道从线性地址寻找到物理地址的流程，如下所示，cpu通过进程的cr3（cr3是一个寄存器，cr3指向的页有4096字节（4kb），每4字节作为一个成员存储，一共有1024个成员）找到第一级页，再通过第一级找到第二级，最后找到物理页",{"_index":9395,"title":{},"body":{"1015831":{}}}],["在内存中所有东西最终都会变成0和1，a对应0x41，那么可以大胆猜测一下b就是对应0x42，当我们使用字符存储到内存时，字符自然是没办法存储到内存中的，这时候就有了一个字符对应的表：ascii表（美国标准信息交换代码",{"_index":1650,"title":{},"body":{"1015843":{}}}],["在内核中一个小小的错误就可能导致蓝屏，例如我们去读写一个无效的内存地址。为了让自己的内核程序更加健壮，在编写内核程序时要使用到异常处理",{"_index":5534,"title":{},"body":{"1015847":{}}}],["在内核中我们的字符串种类变多了，有char、wchar、ansi_string、unicode_string。前两个就是char和wchar_t在内核的写法，但是一般不建议使用这种写法而使用后两个（后两个即前两个的升级版），因为在内核中使用内存是要非常小心的，如果使用前两个类型字符串是没有控制长度的，即字符串到0x0或两个0x0就截止，但如果读写字符串时没有遵循这个规则读取越界了就会导致蓝屏",{"_index":5556,"title":{},"body":{"1015847":{}}}],["在内核中，它会通过一个链表将线性地址链起来，这样要想再分配内核空间的线性地址，直接通过这个链表查询线性地址的属性即可找到未分配的线性地址进行申请，这里不过多赘述，可以自行学习。我们现在主要还是了解用户空间的线性地址的管理，也就是进程的低2g内存空间，这是因为不同进程的高2g地址往往是相同的，因此高2g的地址变化较少，使用链表的方式足够满足需求，而用户空间的地址管理就较为复杂",{"_index":6691,"title":{},"body":{"2949228":{}}}],["在内核函数中（ntoskrnl.exe模块），存在一个名为mmaddphysicalmemoryex的函数。该函数调用了exverifysuite函数，其限制了操作系统无法识别超过4gb的情况。关于exverifysuite函数的详细分析超出了当前学习的范围，请自行进行进一步研究",{"_index":6874,"title":{},"body":{"2949228":{}}}],["在内核编程的时候，必须要遵守wdk的编码习惯，例如无符号类型不要在类型前加上关键词unsigned，而是要遵循wdk自己的类型",{"_index":5514,"title":{},"body":{"1015847":{}}}],["在准备要替换的函数之前，我们要确定替换哪个函数，并且找到其在函数地址表的位置，这里我们选择一个使用的比较多的函数openprocess，首先我们在kernel32.dll找到该函数，发现该函数实际是调用ntdll.dll下的ntopenprocess即zwopenprocess，系统调用号为0x7",{"_index":5828,"title":{},"body":{"1015847":{}}}],["在函数体内定义，作用于当前所在函数",{"_index":1478,"title":{},"body":{"1015843":{}}}],["在函数体外定义，并且作用于全局",{"_index":1466,"title":{},"body":{"1015843":{}}}],["在函数地址表内存储的并不是所有的内核函数，而是在3环经常使用的内核函数，函数地址表和函数参数表是对应关系，即函数地址表成员1的参数个数就是函数参数表成员1",{"_index":2545,"title":{},"body":{"1015846":{}}}],["在创建完进程之后需要关闭进程，但是我们所知道，每个进程至少有一个线程，所以我们也要关闭线程，使用closehandle函数来关闭",{"_index":7260,"title":{},"body":{"1015833":{}}}],["在初始状态下，_hread.win32thread指向的值为空。然而，当线程调用win32k.sys中的函数创建一个窗口时，_kthread.win32thread将指向_threadinfo结构体，从而将该线程由普通线程转变为gui线程。此时，窗口对象对应的内核结构体window_object中的pti成员也会指向这个_threadinfo结构体。而消息队列则位于threadinfo结构体中，这就使得窗口可以访问所属线程的消息队列",{"_index":3967,"title":{},"body":{"3440655":{}}}],["在初级班的学习后我们都会有进程、线程的概念，从操作系统的角度去看进程、线程实际上都是结构体，当创建一个进程或线程，本质上就是分配一块内存来填充对应的结构体。因此我们要摸清楚进程、线程的具体细节，就要对它们的结构体足够了解",{"_index":10936,"title":{},"body":{"1703937":{}}}],["在前面的学习中我们了解了cpl、dpl、rpl，那么它们之间在数据段中又是如何进行检查的呢？如下代码（当前程序处于0环，也就表示cpl=0",{"_index":9089,"title":{},"body":{"1015831":{}}}],["在图中其实我们也可以看见一个判断type的值为5的情况下会对signalstate的值进行减1，这里type为5时实际上等待对象的类型就是信号量了，在下一章节的学习中我们就需要来了解信号量",{"_index":10685,"title":{},"body":{"2424889":{}}}],["在堆中创建对象",{"_index":3443,"title":{},"body":{"1015840":{}}}],["在堆中创建对象我们可以使用new、delete这两个关键词来创建和释放",{"_index":3450,"title":{},"body":{"1015840":{}}}],["在声明类的时候创建对应的函数",{"_index":613,"title":{},"body":{"1015822":{}}}],["在多级句柄表的情况下我们就要知道当前的索引是否超出512，使用pid/4得出376，则表示它是在第一张表内，我们清空tablecode的低2位跟进找到第一张表的地址，然后根据索引计算找到进程内核对象的地址",{"_index":8733,"title":{},"body":{"1933378":{}}}],["在头文件mydll.h中我们要声明接口（函数），需要使用固定格式来声明而不能像静态链接库那样直接使用，格式如下（注：以下格式中的调用约定可以不用填写，如若填写会导致导出函数名发生变化",{"_index":8319,"title":{},"body":{"1015833":{}}}],["在子类有参构造函数中加入参数列表，而后在括号后门加上冒号跟上父类有参构造函数，传入变量即可",{"_index":3547,"title":{},"body":{"1015840":{}}}],["在学习堆栈相关指令之前，我们需要知道什么是堆栈，实际上我们之前就提到过这个东西，堆栈就是前面我们提到的程序的独立4gb内存空间，与数据结构的堆栈无关",{"_index":5321,"title":{},"body":{"1015825":{}}}],["在学习完指针类型后，我们可以来了解一下这些函数",{"_index":2142,"title":{},"body":{"1015843":{}}}],["在安全领域，“注入”是非常重要的一种技术手段，注入与反注入也一直处于不断变化的，而且也愈来愈激烈的对抗当中",{"_index":8425,"title":{},"body":{"1015833":{}}}],["在官方文档的tabl",{"_index":12023,"title":{},"body":{"1015817":{}}}],["在官方的表格中也可以很直观的看见",{"_index":11885,"title":{},"body":{"1015817":{}}}],["在实操之前，我们先了解一下qobject::connect方法的语法",{"_index":4146,"title":{},"body":{"1015820":{}}}],["在实现中声明一个外部变量g_dwrefcoun",{"_index":2656,"title":{},"body":{"1015823":{}}}],["在实际编写代码之前，我们是要在包含pcap.h头文件之前定一个宏",{"_index":10197,"title":{},"body":{"1015818":{}}}],["在客户侧去使用多接口也很简单，首先引入类型文件，其次定义接口指针",{"_index":3165,"title":{},"body":{"1015823":{}}}],["在客户侧去使用这些属性十分简单，直接访问其对应的函数，或直接访问这个属性即可",{"_index":3137,"title":{},"body":{"1015823":{}}}],["在客户侧去使用，需要注意的是你要给到头文件、lib文件和dll文件",{"_index":2622,"title":{},"body":{"1015823":{}}}],["在应用和内核层分别定义了一个_kuser_shared_data结构体，用于应用和内核间的一些数据共享。它们使用的是固定的地址值映射，该结构区域在用户和内核层的地址分别为：0x7ffe0000、0xffdf0000。从地址来看，它们不是一个线性地址，但本质上指向的都是同一个物理页，在用户层对该物理页有只读权限，但在内核层有读、写权限",{"_index":2457,"title":{},"body":{"1015846":{}}}],["在应用层编程时我们可以通过包含windows.h这个头文件来使用windows提供的api，但是在内核编程时我们不可以使用应用层的api，而要使用内核专用的api，所以我们需要包含的头文件就变成了ntddk.h（需要安装好wdi",{"_index":5508,"title":{},"body":{"1015847":{}}}],["在开发驱动程序之前，我们需要配置好开发环境",{"_index":5442,"title":{},"body":{"1015847":{}}}],["在异常章节的学习中，我们通过分析kidispatchexception函数知道在异常分发时会检查一下是否有内核调试器，但在当时我们并没有学习软件调试的，因此在这里我们可以加入调试来分析一下有无调试器时异常的分发流程",{"_index":4778,"title":{},"body":{"3440657":{}}}],["在当前pe文件中我们可以知道有6个节表，那也就表示在文件中存储数据的也就有6个部分，在节表之后的就是编译器的插入的数据，而编译器又是如何知道从哪开始插入数据呢？这实际上取决于一个扩展pe头的一个成员sizeofh",{"_index":6025,"title":{},"body":{"1015828":{}}}],["在当前工程目录下创建一个1.txt文件，然后在代码中写",{"_index":1255,"title":{},"body":{"1015822":{}}}],["在当前我们的uin",{"_index":442,"title":{},"body":{"1015822":{}}}],["在当前这个函数中我们只有一个地方需要替换修改，所以在写模板关键词时候尖括号内的class形参只有一个，而我们只需要将需要替换的地方改成形参的名字即可",{"_index":3637,"title":{},"body":{"1015840":{}}}],["在很多书中会描述char就是用来存储字符的，这是一个错误的说法，数据的存储是由使用者决定的而不是计算机",{"_index":1653,"title":{},"body":{"1015843":{}}}],["在循环中，等待调试事件的发生，如异常、线程创建、进程创建等，然后根据具体的调试事件类型进行相应的处理。处理完事件后，告诉被调试程序继续执行",{"_index":4626,"title":{},"body":{"3440657":{}}}],["在我们代码（调用plus）函数还没开始执行时候要先记住这两个寄存器的值",{"_index":1430,"title":{},"body":{"1015843":{}}}],["在我们正式使用之前，我们要知道一些扩展样式",{"_index":1185,"title":{},"body":{"1015822":{}}}],["在所有线程刚创建时，它们都是普通线程，可以通过使用_kthread.servicetable，可以找到一张表keservicedescriptortable。然而，当线程首次调用win32k.sys（在0环中实现图形界面api）时，将调用psconverttoguithread函数，该函数执行以下几个主要步骤",{"_index":3915,"title":{},"body":{"3440655":{}}}],["在执行完virtualalloc后，新分配了一个大小为0x2000的内存空间（0x3900",{"_index":6759,"title":{},"body":{"2949228":{}}}],["在执行用户apc之前会先执行内核apç",{"_index":10915,"title":{},"body":{"2424869":{}}}],["在抓包之前，我们需要改一下服务器端的代码，在收发数据时，我们应该写一个死循环，然后判断recv函数的返回值是否为0，为0则表示客户端要断开连接，就跳出循环从而进入断开连接的代码",{"_index":9927,"title":{},"body":{"1015818":{}}}],["在挂起后，调试事件会被发送给调试对象，并在调试循环中被调试器提取。调试器将使用异常调试事件的结构体，列出相关信息，例如当前寄存器的值和内存情况。然后，调试器的用户可以对这些信息进行处理",{"_index":4808,"title":{},"body":{"3440657":{}}}],["在指令!vad所展示表中，imagemap为1的话都会有一个exe字符串的标识",{"_index":6724,"title":{},"body":{"2949228":{}}}],["在操作系统上，我们可以通过rdmsr/wrmst来对msr寄存器进行读写",{"_index":2489,"title":{},"body":{"1015846":{}}}],["在操作系统中，存在一个全局数组，用于记录所有物理页的信息",{"_index":6881,"title":{},"body":{"2949228":{}}}],["在操作系统处理电源消息时产生该类型",{"_index":5702,"title":{},"body":{"1015847":{}}}],["在数据包发送给某应用程序前，根据用户指定的规则过滤数据包",{"_index":10106,"title":{},"body":{"1015818":{}}}],["在数据开头有这个复选框是因为我们的扩展样式设置了checkbox",{"_index":1207,"title":{},"body":{"1015822":{}}}],["在数据段时，a（访问位，第8位）表示该段是否被访问过，当处理器将该段描述符置入某个段寄存器时，其值就会被修改为1；w（可写位，第9位）表示当前数据段是否可写；e（拓展位，第10位），当该值为0时向上拓展，当该值为1时向下拓展",{"_index":9044,"title":{},"body":{"1015831":{}}}],["在数据段的权限检查中是按照如下公式进行的",{"_index":9093,"title":{},"body":{"1015831":{}}}],["在文档的「a.2.1",{"_index":11831,"title":{},"body":{"1015817":{}}}],["在方括号中我们只能选择使用常量，而不可以选择变量，这是因为在声明的时候编译器需要提前知道数组的长度，然后才会去分配对应大小的内存；那么也就说明此处的常量是用来表示数组可存储的个数",{"_index":1906,"title":{},"body":{"1015843":{}}}],["在有了以上基础的铺垫之后，我们可以编写如下代码来使用veh处理异常，这段代码大致分为3部分",{"_index":4345,"title":{},"body":{"2949166":{}}}],["在有多个父节点的情况下，默认是获取第一个，也就是最上面那个",{"_index":1242,"title":{},"body":{"1015822":{}}}],["在有权限切换时，会向栈压入5个值，分别是ss，esp，eflag，cs，返回地址",{"_index":9272,"title":{},"body":{"1015831":{}}}],["在本课程中学习的汇编语言是32位的，虽然现在大部分计算机都是64位的，但从本质上来说64位也是从32位衍生的，只有你学好了32位才能更容易的去学64位",{"_index":5151,"title":{},"body":{"1015825":{}}}],["在查看整个句柄表之前我们要知道windows考虑到兼容性等原因，设计句柄表的每个成员的宽度为8字节，而不是4字节，而我们在3环所看见的句柄的宽度为4字节，因此我们想要通过句柄在句柄表中找到对应的内核对象地址，就需要使用这个公式：句柄表地址",{"_index":8702,"title":{},"body":{"1933378":{}}}],["在栈中创建对象，也就是函数内",{"_index":3446,"title":{},"body":{"1015840":{}}}],["在正式的学习之前我们需要先了解这三个结构体：_trap_frame，_ethread，_kpcr",{"_index":2498,"title":{},"body":{"1015846":{}}}],["在每个进程的内存中都有一张自己的句柄表，表中记录着你创建、打开的内核对象地址，需要注意的是，当你在当前进程中打开其他进程的线程、事件，操作系统并不会再次创建一份内核对象，而是返回这个内核对象的地址存到句柄表中，再返回句柄给你",{"_index":8689,"title":{},"body":{"1933378":{}}}],["在比较时候也存在区别，例如",{"_index":1566,"title":{},"body":{"1015843":{}}}],["在没有权限切换时，会向栈压入3个值，分别是cs，eflag，返回地址",{"_index":9271,"title":{},"body":{"1015831":{}}}],["在消息映射区（begin_message_map宏和end_message_map宏之前）声明，例如如上的onpaint函数我就就需要声明on_wm_pain",{"_index":615,"title":{},"body":{"1015822":{}}}],["在添加接口的时候可以选择接口的参数类型，根据这个接口的作用去选择",{"_index":3094,"title":{},"body":{"1015823":{}}}],["在源代码中我们还需要引入一个头文件typeinfo.h，而后就可以使用typeid这个函数来进行动态识别，该函数只有一个传参，改参数可以为类名或已经创建的对象名",{"_index":211,"title":{},"body":{"1015822":{}}}],["在画线前设定当前位置（起始位置",{"_index":707,"title":{},"body":{"1015822":{}}}],["在知道左子树或右子树地址后，就可以通过指令：dt",{"_index":6707,"title":{},"body":{"2949228":{}}}],["在硬件级层面，可屏蔽中断是由一块专门的芯片来管理的，我们称之为中断控制器；它负责分配终端资源和管理各个中断源发出的中断请求；为了便于标识各个中断请求，中断管理器通常在irq（interrup",{"_index":9573,"title":{},"body":{"1015831":{}}}],["在程序编译完成后，内存地址和宽度就已经确定下来了，变量名就是内存地址的别名",{"_index":1467,"title":{},"body":{"1015843":{}}}],["在窗口关闭时，实际上进程并不会关闭，所以我们需要在窗口函数中筛选条件，当窗口关闭了就退出进程",{"_index":7809,"title":{},"body":{"1015833":{}}}],["在窗口客户区移动了光标",{"_index":944,"title":{},"body":{"1015822":{}}}],["在窗口对象_window_object中，存在一个名为pti的成员，其类型为_pthreadinfo，指向_threadinfo结构体。这个threadinfo结构体正是前文提到的_kthread.win32thread相关联的结构体。通过这种方式，就可以将线程与窗口联系在一起",{"_index":3966,"title":{},"body":{"3440655":{}}}],["在窗口应用程序中，能够接收msg消息的只能是窗口对象，在内核驱动程序中，能够接受irp消息的只能是设备对象",{"_index":5637,"title":{},"body":{"1015847":{}}}],["在第5步，系统启动线程进行dll的映射时会调用ntdll模块中的ldrinitializethunk函数，我们跟进该函数看一下，在ldrinitializethunk函数内部会调用_ldrpinitialize函数，在_ldrpinitialize函数内部会判断当前创建的是否为第一个线程，如果是就会调用_ldrpinitializeprocess函数",{"_index":4754,"title":{},"body":{"3440657":{}}}],["在等待块的填充和准备之后，kewaitforsingleobject就会进入关键循环部分。（在课上，海东老师将该部分以伪代码的形式进行讲解，可以更快的进行理解",{"_index":10626,"title":{},"body":{"2424889":{}}}],["在线程切换时会比较是否属于同一个进程，如果不是同一个进程，就会切换cr3，这样对应进程也就切换了，因此进程的切换实际上也是线程的切换",{"_index":11201,"title":{},"body":{"1703937":{}}}],["在线程模拟的代码中，有一个重要的函数switchcontext，它是用于线程切换的，而对应在windows上有着类似功能的函数就是kiswapcontex",{"_index":11196,"title":{},"body":{"1703937":{}}}],["在线程结构体的0x130偏移位有个成员win32thread，该成员在线程调用图形界面相关函数时，会指向一个名为_threadinfo的结构体，该结构体中包含了消息队列",{"_index":3798,"title":{},"body":{"3440655":{}}}],["在编写程序的时候，经常需要存储数据，前面学习汇编时了解到了，数据可以存在寄存器中，或者内存中。在c语言中，存储数据要存在变量中，变量就是一个容器（通常就是内存）；变量类型决定变量内存宽度，变量名就是内存地址的编号（别名",{"_index":1454,"title":{},"body":{"1015843":{}}}],["在编译器（vc6）中有自带的rtti，我们可以在projeç",{"_index":209,"title":{},"body":{"1015822":{}}}],["在编辑框中写入a.lib，多个lib文件以空格隔开",{"_index":8307,"title":{},"body":{"1015833":{}}}],["在计算机中二进制和十六进制的对应关系如下",{"_index":5066,"title":{},"body":{"1015825":{}}}],["在设置断点时，我们需要将要断点的线性地址写入dr0",{"_index":4926,"title":{},"body":{"3440657":{}}}],["在该结构体中",{"_index":4884,"title":{},"body":{"3440657":{}}}],["在调用完plus1函数后，plus函数会有这样一个汇编代码",{"_index":1504,"title":{},"body":{"1015843":{}}}],["在调用门描述符中找到它存储的另外一个代码段的段选择子",{"_index":9194,"title":{},"body":{"1015831":{}}}],["在调试循环事件等待中，我们是通过结构体debug_event在waitfordebugevent函数中获取调试事件的，该结构体的定义如下",{"_index":4672,"title":{},"body":{"3440657":{}}}],["在过滤表达式部分，我们可以直接写常量值，也可以写表达式或调用的函数，但无论什么方式，这里最终的值只能为0、1",{"_index":4415,"title":{},"body":{"2949166":{}}}],["在这1024个表中有一张特殊的表，就是页目录表（pdt",{"_index":9477,"title":{},"body":{"1015831":{}}}],["在这一节我们可以暂时得出结论：无符号数存储在计算机内就是其本身的值",{"_index":5104,"title":{},"body":{"1015825":{}}}],["在这个函数中，其参数列表有x和y，它们我们可以理解为是一个占位符，当我们想要调用函数的时候，可以使用真正的数据替换这两个占位符。（注：占位符也需要指定其数据大小，也就是数据宽度；不可以直接写作x",{"_index":1424,"title":{},"body":{"1015843":{}}}],["在这个函数内就会去使用getmessage函数去判断有没有消息，由于我们之前是已经判断过了才进的这个函数，所以这里会立即返回",{"_index":579,"title":{},"body":{"1015822":{}}}],["在这个函数里，我们可以看见它在函数内又调用了一个导入表的函数halbeginsysteminterrupt和halendsysteminterrup",{"_index":11212,"title":{},"body":{"1703937":{}}}],["在这些编码里，连在ascii里本来就有的数字、标点、字母都统统编了两个字节长的编码，这就是常说的”全角“字符，而原来在127号以下的那些就叫”半角“字符了，上述编码规则就是gb2312或gb2312",{"_index":1693,"title":{},"body":{"1015843":{}}}],["在这些领域下会用到pe文件格式",{"_index":5978,"title":{},"body":{"1015828":{}}}],["在这开始添加0x800字节的空间",{"_index":6441,"title":{},"body":{"1015828":{}}}],["在这我们在当前类中不想具体实现，所以使用纯虚函数去表示，而后在cmywinapp类中去实现",{"_index":186,"title":{},"body":{"1015822":{}}}],["在这种情况下，如果我们使用事件对象来控制线程的同步就相当的困难，效率也相对较低。例如我们使用同步类型的事件对象，由于事件对象的signalstate的值只能为0或者1，所以同一时间只有一个消费者线程可以获得资源，此时效率就很低；如果使用通知类型的事件对象，通知类型对象唤醒的线程，在进入kewaitforsingleobject的关键循环后，不会修改signalstate的值，所以5个消费者线程都会被唤醒，又由于此时仅生产了3个资源，所以会造成性能的浪费",{"_index":10691,"title":{},"body":{"2424889":{}}}],["在这边我们需要通过手动查看任务管理器的方式找到进程id，然后在调试器中输入，以达到附加进程调试的目的",{"_index":4764,"title":{},"body":{"3440657":{}}}],["在这里'a'存储的时候变成了0x41，这是为什么？因为它是一个字符，这里需要注意在变量定义赋值时，赋值字符需要加上单引号",{"_index":1649,"title":{},"body":{"1015843":{}}}],["在这里之所以能成功，是因为我们在编译atl项目的时候就自动注册了这个com组件（如果你编译项目失败，可以尝试使用管理员权限打开v",{"_index":3122,"title":{},"body":{"1015823":{}}}],["在这里也就对应着如下图中的0xf0（因为当前系统和文件都是64位的",{"_index":6016,"title":{},"body":{"1015828":{}}}],["在这里使用取地址符可以直接获取每个变量、结构体的地址，但是这种格式可能跟我们之前看到的8位不一样，前面少了2个0，这时候可以将%x占位符替换为%p来打印显示",{"_index":2097,"title":{},"body":{"1015843":{}}}],["在这里就是将页面空间的0,0映射到设备空间的100,100，也就表示我们后续画圆从100,100开始也就是从设备空间的200开始",{"_index":695,"title":{},"body":{"1015822":{}}}],["在这里我也没改写，所以进入的就是cwnd::onwndmsg",{"_index":523,"title":{},"body":{"1015822":{}}}],["在这里我们一个简化的模拟代码就完成了，执行顺序如下图",{"_index":190,"title":{},"body":{"1015822":{}}}],["在这里我们使用的是寄存器传递参数，但实际上还可以使用堆栈传参数，下一章节我们会介绍",{"_index":5373,"title":{},"body":{"1015825":{}}}],["在这里我们可以使用lordpe来查看我们这个dll文件的导出表（涉及中级班课程暂时可以略过），我们只要知道在这个导出表中有这个dll声明的函数",{"_index":8325,"title":{},"body":{"1015833":{}}}],["在这里我们可以看见2b存储在了内存地址0012ffc4，1a存储在了内存地址0012ffc5。（在这里内存地址是依次是从左到右的",{"_index":5232,"title":{},"body":{"1015825":{}}}],["在这里我们就可以很清晰的看见使用的字体，窗口名字之类的信息，当然这些信息我们也可以通过vc6直接去看",{"_index":1036,"title":{},"body":{"1015822":{}}}],["在这里我们简单的来定义一个全局变量",{"_index":1471,"title":{},"body":{"1015843":{}}}],["在这里我们需要关注bmanualreset和binitialstate两个参数，binitialstate参数决定了初始化的信号状态，如果该值为false则事件对象的_dispatcher_header.signalstate值为0，反之则为1。如下图所示，我们可以发现确实如此，初始化信号状态为true时，没有等待直接就执行了下面的代码，而为false时则一直处于等待状态，没有执行代码",{"_index":10675,"title":{},"body":{"2424889":{}}}],["在这里指令中，0x12345678就是有效地址，根据之前段的学习，我们知道这段指令真正读取的地址是ds.base+0x12345678，这个地址就是线性地址（有效地址+段寄存器的base）。有了线性地址之后cpu会将其转为物理地址，这样才能找到真正的数据",{"_index":9387,"title":{},"body":{"1015831":{}}}],["在这里看到汇编代码，我们就应该知道它要干什么了，就要通过ebp进行寻址，关于这一块，在学习汇编时也有了解到，所以还是建议各位在学习本课程时候先去学习汇编",{"_index":1439,"title":{},"body":{"1015843":{}}}],["在这里，我们使用wireshark这个抓包工具，下载地址：https://www.wireshark.orgu",{"_index":9905,"title":{},"body":{"1015818":{}}}],["在这里，我们可以借助ultraedit软件打开一个exe文件",{"_index":5064,"title":{},"body":{"1015825":{}}}],["在这里，我们还是下断点一步一步跟进，然后画堆栈图分析即可，如下是堆栈图及其对应汇编代码（这不是整个函数执行完后的堆栈图",{"_index":1488,"title":{},"body":{"1015843":{}}}],["在这里，我们需要观察堆栈来观察程序的本质，这里可以借助excel工具画堆栈图便于理解，我们可以选中一列然后将其边框都填上",{"_index":1428,"title":{},"body":{"1015843":{}}}],["在这里，这个函数实际上就是kernel32.dll模块中的baseprocessstart函数，在该函数内调用了另外一个函数_seh_prolog，它的作用就是添加seh到链表上",{"_index":4482,"title":{},"body":{"2949166":{}}}],["在进程a的0x12345678内存地址中存入一个值，在进程b的0x12345678内存地址中也存入一个值，两者并不会冲突，而是各自存放各自的",{"_index":7890,"title":{},"body":{"1015833":{}}}],["在面向过程(没有对象的概念，用函数)中的statiç",{"_index":3733,"title":{},"body":{"1015840":{}}}],["在驱动入口处我们将该计算的地址，以及指令都填充好即可",{"_index":5942,"title":{},"body":{"1015847":{}}}],["在驱动对象中有一个成员majorfunction，它是一个具有28个成员的数组，对应着就是28种irp类型",{"_index":5705,"title":{},"body":{"1015847":{}}}],["地址",{"_index":2482,"title":{},"body":{"1015828":{},"1015846":{}}}],["地址宽度前缀指令，硬编码：67，其用来改变地址宽度，你可以与操作数宽度前缀指令一样去理解（双向改变），例如在32位模式下寻址默认是32位的地址宽度，但是当你在硬编码之前加上67之后，寻址就按照16位的地址宽度进行了",{"_index":11812,"title":{},"body":{"1015817":{}}}],["地址，来一层一层找到所有的节点",{"_index":6708,"title":{},"body":{"2949228":{}}}],["场景与优点",{"_index":3194,"title":{},"body":{"1015823":{}}}],["垮段不提权",{"_index":9169,"title":{},"body":{"1015831":{}}}],["垮段并提权",{"_index":9176,"title":{},"body":{"1015831":{}}}],["基于mfc的窗口程序必须也只能有一个由从cwinapp派生的对象",{"_index":158,"title":{},"body":{"1015822":{}}}],["基于vc6手动编写mfc程序需要注意的事项",{"_index":80,"title":{},"body":{"1015822":{}}}],["基于页目录表基址，我们可以访问某个线性地址的pdt，但是这样仅仅可以操控pdt表的内容（pde），并不能操控pte，也就是无法访问ptt表",{"_index":9462,"title":{},"body":{"1015831":{}}}],["基本了解进制后，我们需要了解进制间是如何运算的，八进制的10+4=？10",{"_index":5000,"title":{},"body":{"1015825":{}}}],["基本数据类型的使用",{"_index":5513,"title":{},"body":{"1015847":{}}}],["基本概念了解之后，我们来看下插入的代码，就是如下这个弹窗功能",{"_index":6345,"title":{},"body":{"1015828":{}}}],["基本概念扫盲",{"_index":9630,"title":{},"body":{"1015818":{}}}],["基本的语法和概念了解之后，我们先来看一下为什么互斥体可以重入，互斥体有一个成员ownerthread，它就是解决重入的关键。若一个互斥体被创建时，它的ownerthread字段不为空，创建它的线程即为互斥体的所属线程。此时，初始化的互斥体signalstate字段被设置为0，也就是没有信号，这个时候别的线程是没法使用这个互斥体的。但是创建它的线程仍然可以使用，并且可以重复使用0x8000000次，这也是为什么互斥体可以重入的原因，因为创建它的线程可以在没有信号的情况下使用互斥体，至于为何创建它的线程在互斥体没有信号的情况下也可以使用",{"_index":10744,"title":{},"body":{"2424889":{}}}],["基本类型：整数、浮点",{"_index":1518,"title":{},"body":{"1015843":{}}}],["基础优先级或最低优先级，它的初始值就是所属进程的结构体的basepriority值，如果你想要修改可以通过kesetbaseprioritythread函数进行重新设定",{"_index":11030,"title":{},"body":{"1703937":{}}}],["基础优先级或最低优先级，规定了该进程中所有线程最基本的优先级",{"_index":10961,"title":{},"body":{"1703937":{}}}],["基础内容",{"_index":5506,"title":{},"body":{"1015847":{}}}],["基础概念",{"_index":595,"title":{},"body":{"1015822":{}}}],["基础知识",{"_index":8685,"title":{},"body":{"1015850":{},"1933378":{}}}],["堆、栈，我们之前所讲的就是栈，从本章开始要严格区分",{"_index":3448,"title":{},"body":{"1015840":{}}}],["堆与栈",{"_index":6762,"title":{},"body":{"1015833":{},"2949228":{}}}],["堆栈传参",{"_index":5374,"title":{},"body":{"1015825":{}}}],["堆栈图如下",{"_index":1944,"title":{},"body":{"1015843":{}}}],["堆栈对应也就发生了变化，如下图所示为堆栈对应结构体成员",{"_index":4438,"title":{},"body":{"2949166":{}}}],["堆栈平衡",{"_index":5378,"title":{},"body":{"1015825":{}}}],["堆栈的地址使用是从大用到小的（高位地址到低位地址），这个我们也可以从dtdebug的堆栈窗口中得出",{"_index":5328,"title":{},"body":{"1015825":{}}}],["堆栈相关指令",{"_index":5320,"title":{},"body":{"1015825":{}}}],["堆栈讲究先入后出的概念，也就是当我们先放a数据到堆栈中，再放b数据到堆栈中，当我们不使用这些数据时候就要“清理”，那么数据b就是先处理的，数据a就是后处理的",{"_index":5329,"title":{},"body":{"1015825":{}}}],["填充表格(flot",{"_index":1612,"title":{},"body":{"1015843":{}}}],["声明变量的格式",{"_index":1455,"title":{},"body":{"1015843":{}}}],["声明：声明创建内部类需要使用格式",{"_index":3717,"title":{},"body":{"1015840":{}}}],["处理用户apc要比内核apc复杂的多，因为用户apc函数要在用户空间执行的，这里涉及到大量栈的切换操作",{"_index":10918,"title":{},"body":{"2424869":{}}}],["处理窗口关闭",{"_index":7808,"title":{},"body":{"1015833":{}}}],["处理键盘按下",{"_index":7814,"title":{},"body":{"1015833":{}}}],["备份完成之后，我们不可能一直让_context结构体存于当前的内核空间中，如下图代码所示，会将原3环的esp按4字节对齐，然后提升栈顶，提升的高度正好是_context结构体加4个apc执行所需参数的大小，接着将提升后的esp暂存至内核空间栈中，最后通过循环指令将_context结构体成员逐个复制到3环的栈中。处理好_context结构体之后，就可以对trap_frame的值进行修改了",{"_index":10928,"title":{},"body":{"2424869":{}}}],["备用",{"_index":6969,"title":{},"body":{"2949228":{}}}],["备用apc队列",{"_index":10793,"title":{},"body":{"2424869":{}}}],["备用线程",{"_index":11232,"title":{},"body":{"1703937":{}}}],["复制代码的编写原则",{"_index":8606,"title":{},"body":{"1015833":{}}}],["外挂和反外挂",{"_index":5980,"title":{},"body":{"1015828":{}}}],["多com类",{"_index":3175,"title":{},"body":{"1015823":{}}}],["多接口",{"_index":3138,"title":{},"body":{"1015823":{}}}],["多核同步",{"_index":6623,"title":{"1933380":{}},"body":{"1015827":{},"1015832":{}}}],["多种形态的表现，我们就已经在如上例子中说么了",{"_index":3573,"title":{},"body":{"1015840":{}}}],["多线程解决方案",{"_index":9995,"title":{},"body":{"1015818":{}}}],["多维数组",{"_index":1946,"title":{},"body":{"1015843":{}}}],["多维数组是什么？假设我们现在需要定义一个班级有2个组，每个组有2个人，数组可以这样定义",{"_index":1947,"title":{},"body":{"1015843":{}}}],["多维数组的读写也很容易理解，举例说明一年有12个月，每个月都有一个平均气温，存储5年的数据",{"_index":1964,"title":{},"body":{"1015843":{}}}],["多行声明时，回车换行前要加上字符'\\'，注意字符'\\'后要紧跟回车键，中间不能有空格或其他字符",{"_index":2372,"title":{},"body":{"1015843":{}}}],["多行定义",{"_index":2354,"title":{},"body":{"1015843":{}}}],["多行指令同步",{"_index":6655,"title":{},"body":{"1933380":{}}}],["多进程共享一个内核对象",{"_index":7311,"title":{},"body":{"1015833":{}}}],["多连接之select模型",{"_index":10006,"title":{},"body":{"1015818":{}}}],["多连接之多线程解决方案",{"_index":9987,"title":{},"body":{"1015818":{}}}],["多连接就是解决单连接所面临的窘境，使得多个客户端可以同时跟一个服务器进行通信",{"_index":9992,"title":{},"body":{"1015818":{}}}],["多连接所面临的问题",{"_index":9993,"title":{},"body":{"1015818":{}}}],["多连接解决了多客户端与服务器通信排队的问题，但同样也会出现新的问题，当多个客户端连接过来时，服务器应该先给谁回复？这时候就会有一个顺序逻辑的问题",{"_index":9994,"title":{},"body":{"1015818":{}}}],["多连接需求使用多线程的方式去满足，但是同样也造成了当客户端连接数量到达一定程度，就会导致占用系统资源太过于严重，所以我们可以使用select模型解决方案处理多连接，并节省系统资源",{"_index":10007,"title":{},"body":{"1015818":{}}}],["大于",{"_index":1747,"title":{},"body":{"1015843":{}}}],["大于等于",{"_index":1748,"title":{},"body":{"1015843":{}}}],["大多数api通过该dll进入内核（0环",{"_index":2418,"title":{},"body":{"1015846":{}}}],["大家都知道在c++中对象的私有成员，外部是无法访问的，这在面向对象中是很正常的，如果你想访问按照正常的逻辑你应该在类中声明成员函数去增删改查这个私有成员",{"_index":3701,"title":{},"body":{"1015840":{}}}],["大家都知道在c语言当中，代码就是按照入口函数体内从上到下的顺序开始执行的，我们想要控制执行的顺序可以使用分支语句、循环语句进行控制，本节课我们就来学习一下分支语句",{"_index":1783,"title":{},"body":{"1015843":{}}}],["大家都知道，我们使用指针的时候是可以修改指针本身的，这会存在一定的风险，而c++中提供了引用类型，不可以修改引用本身，我们可以修改被引用的值，当我们不想其他人修改引用类型对应引用的值，可以使用const这个关键词，这种方式我们称之为常引用",{"_index":3521,"title":{},"body":{"1015840":{}}}],["大小",{"_index":5080,"title":{},"body":{"1015825":{}}}],["大小：当前类和其内部类不存在包含关系，不会影响当前类的大小",{"_index":3715,"title":{},"body":{"1015840":{}}}],["大概了解一下即可，我们主要关注几个重要字段",{"_index":10287,"title":{},"body":{"1015818":{}}}],["大端模式：数据高位在低位地址中，数据低位在高位地址中",{"_index":5220,"title":{},"body":{"1015825":{}}}],["大部分内核函数的返回值都是ntstatus类型，它本质是一个宏，里面包含的类型有很多，如下三个就是常见的返回值",{"_index":5520,"title":{},"body":{"1015847":{}}}],["头文件",{"_index":8333,"title":{},"body":{"1015833":{}}}],["头文件<algorithm>是所有stl头文件中最大的一个，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、反转、排序、合并等",{"_index":11602,"title":{},"body":{"1015814":{}}}],["头文件<functional>中则定义了一些模板类，用于声明函数对象",{"_index":11604,"title":{},"body":{"1015814":{}}}],["头文件<numeric>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作",{"_index":11603,"title":{},"body":{"1015814":{}}}],["头文件可以关注一下有几个有意思的东西，首先是在派生类中需要声明q_object宏，其次需要添加一个界面集成管理的成员用于所有子控件的集中管理",{"_index":4194,"title":{},"body":{"1015820":{}}}],["头文件路径：c:\\progr",{"_index":8303,"title":{},"body":{"1015833":{}}}],["头文件，包含了派生类mywidget的声明",{"_index":4187,"title":{},"body":{"1015820":{}}}],["头文件：stdafx.h",{"_index":90,"title":{},"body":{"1015822":{}}}],["奇偶标志位：【pf】—当运算结果（指的是低8位）中1的个数为偶数时，pf=1，否则pf=0。该标志位主要用于检测数据在传输过程中是否出错",{"_index":5413,"title":{},"body":{"1015825":{}}}],["好的编程习惯：定义与实现分开写，提升代码可读性",{"_index":3417,"title":{},"body":{"1015840":{}}}],["如上x、y两个全局变量，char类型数据宽度是一个字节，所以假设其内存地址是0x0，那么全局变量y的内存地址是0x1，这是我们的猜想，但实际并不是这样，通过反汇编来看一下",{"_index":2019,"title":{},"body":{"1015843":{}}}],["如上两张图所示，我们可以知道mfc的消息映射是静态的，这样做其实相对来说较为死板，无法动态的往消息映射表中添加和卸载，qt的信号和槽正是为了解决这种问题而诞生的，如下图所示消息变成了信号，消息事件函数变成了槽",{"_index":4135,"title":{},"body":{"1015820":{}}}],["如上代码中fun函数为什么会被调用？我们可以通过反汇编代码+堆栈图来理解",{"_index":1943,"title":{},"body":{"1015843":{}}}],["如上代码中plus函数的参数是一个引用类型，当我们把变量i传递进去，i就会自增1，而实际上也就修改变量i本身的值；换一种说法就是，我们之前函数参数传递的是值，而这里传递的是变量的地址",{"_index":3508,"title":{},"body":{"1015840":{}}}],["如上代码中win32",{"_index":609,"title":{},"body":{"1015822":{}}}],["如上代码中可以看见，teacher类与person类都存在着相同的2个成员age和sex，那么这就相当于重复编写了，我们可以通过继承的方式避免这样重复的编写（当前类名称:要继承的类名称",{"_index":3378,"title":{},"body":{"1015840":{}}}],["如上代码中文名可以看见在该宏中包含了declare_dynamic宏，也就是说动态创建是支持rtti的，代码中改写",{"_index":336,"title":{},"body":{"1015822":{}}}],["如上代码中的{30df3430",{"_index":2755,"title":{},"body":{"1015823":{}}}],["如上代码中，当客户调用cogetclassobject函数加载com组件后，就会自动去调用dllgetclassobject函数生成类工厂指针，然后我们通过类工厂指针再调用createinstance函数生成类实例，返回接口指针",{"_index":2802,"title":{},"body":{"1015823":{}}}],["如上代码中，我们发现了存在一个函数，这个函数没有返回类型并且与结构体名称一样，那这段函数在什么时候执行呢",{"_index":3345,"title":{},"body":{"1015840":{}}}],["如上代码中，我们向",{"_index":8954,"title":{},"body":{"1015831":{}}}],["如上代码也就解释了为什么有的时候程序卡死，但鼠标仍然可以移动，这是因为鼠标操作运行在独立的线程中",{"_index":3955,"title":{},"body":{"3440655":{}}}],["如上代码仅仅是为了解决这种问题而举例的，所以代码严谨性可以忽略",{"_index":3564,"title":{},"body":{"1015840":{}}}],["如上代码变量x最终值是多少？相信很多人都知道答案了，是1，原封不动",{"_index":2124,"title":{},"body":{"1015843":{}}}],["如上代码就是输出一个字符a，这样我们就了解了这个函数的运行本质：将对应数从ascii表中查出画在(打印)控制台上；需要注意该函数一次只能打印一个字符",{"_index":1657,"title":{},"body":{"1015843":{}}}],["如上代码我们来运行则会出现这种错误",{"_index":1934,"title":{},"body":{"1015843":{}}}],["如上代码我们的本意就是创建一个myclass类的对象，但是c++是无法创建的",{"_index":310,"title":{},"body":{"1015822":{}}}],["如上代码所示我们仅仅是告诉编译器，我们定义的类型是什么样的，这段代码本身并不会占用内存空间",{"_index":1986,"title":{},"body":{"1015843":{}}}],["如上代码所示，定义结构体时是分配内存的，因为不仅定义了新的类型，还定义了三个变量",{"_index":2011,"title":{},"body":{"1015843":{}}}],["如上代码是通过#prag",{"_index":2031,"title":{},"body":{"1015843":{}}}],["如上代码编译并运行不会有任何报错，因为我们将eax寄存器值写入到的实际地址是",{"_index":8949,"title":{},"body":{"1015831":{}}}],["如上代码转换完成之后就可以很清晰的知道使用宏的时候鼠标左键按下必须使用onlbuttondown这个函数名是因为这里是写死在代码中的，没办法改变；我们还可以很清晰的看见_messageentries这个数组就是存放着我们的消息，这就是一个消息映射的表格，而这个数组是一个结构体数组，所以我们来看一下afx_msgmap_entry这个结构体",{"_index":402,"title":{},"body":{"1015822":{}}}],["如上代码，我们可以看下反汇编",{"_index":1553,"title":{},"body":{"1015843":{}}}],["如上代码，我们的需求是输出0",{"_index":1852,"title":{},"body":{"1015843":{}}}],["如上代码，调用teacher创建对象，我们想通过构造函数赋值age和sex该怎么办？第一时间想到的时候使用this调用，但是这里是继承父类的，肯定不行",{"_index":3544,"title":{},"body":{"1015840":{}}}],["如上反汇编代码可以看的出来，虽然我们c语言写的是x>y，但是jle这个指令实际意义是当小于等于则跳转到0040d73d这个执行地址，我们没有必要去记住c语言对应的反汇编代码的结构，也不需要去记住，因为实际环境很有可能不是这样实现的，只要了解一个大概即可",{"_index":1789,"title":{},"body":{"1015843":{}}}],["如上反汇编代码我们可以看出switch在一开始就直接将变量x与3进行比较，ja指令则表示大于则跳转，但这变量x明显等于3，所以将值赋予edx，最后jmp跳到堆栈地址2*4+40d896（40d896+8），也就是0x40d89e对应的值",{"_index":1816,"title":{},"body":{"1015843":{}}}],["如上反汇编代码，可以很清楚的看见当我们不使用那种方法还是会调用一遍父类无参的构造函数，接着手动添加的构造函数，编译器会把堆栈中临时分的对象赋值，但是当我们这段构造函数执行完成之后就没了，所以没有任何意义",{"_index":3551,"title":{},"body":{"1015840":{}}}],["如上反汇编代码，我们可以清楚的看见首先0x1给了局部变量（ebp",{"_index":2115,"title":{},"body":{"1015843":{}}}],["如上图中我们可以知道ip地址分成了网络号和主机号两部分，通过子网掩码可以从ip地址中区分出网络号，其运算规则是：网络号",{"_index":9663,"title":{},"body":{"1015818":{}}}],["如上图中，最左边的800开头的就是地址，右边的就是表中的数据",{"_index":8993,"title":{},"body":{"1015831":{}}}],["如上图代码所示，我们想要知道第二组的第二个人，可以这样调用",{"_index":1954,"title":{},"body":{"1015843":{}}}],["如上图反汇编代码便可说明我们的猜测是正确的",{"_index":1743,"title":{},"body":{"1015843":{}}}],["如上图就是打开a.exe的创建过程图，进程是空间上的概念，只用于提供代码和数据资源等等...而想要使用这些资源的是线程，每个进程至少需要一个线程",{"_index":7205,"title":{},"body":{"1015833":{}}}],["如上图我们可以得知，insertitem函数实际上插入的数据就是一行，而其第一个参数0则表示在第1行的第1列添加一个数据，所以我们使用setitemtext函数根据对应返回值去添加数据则可以选择添加其他列的数据",{"_index":1209,"title":{},"body":{"1015822":{}}}],["如上图所示两个成员中值最大的为sizeofrawdata，sizeofrawdata是按照文件对齐的，在这里我们还需要将sizeofrawdata的值按内存对齐，首先来看下内存对齐（sectionalignment）和文件对齐（filealignment）的值",{"_index":6376,"title":{},"body":{"1015828":{}}}],["如上图所示代码，首先我定义了进程路径、进程命令行参数，其次创建了si、pi两个结构体，然后使用zeromemory函数用0填充结构体数据，再给si.cb成员赋值当前结构体大小（为什么需要？这是因为windows会有很多个版本，便于未来更新换代）；最后createprocess函数创建进程，由于createprocess函数本身返回值是布尔类型的，所以使用if来判断，如果出问题则使用getlasterror函数来获取问题编号，具体编号对应什么内容可以参考百度百科：https://baike.baidu.com/item/getlasterror/4278820?fr=al",{"_index":7259,"title":{},"body":{"1015833":{}}}],["如上图所示众可以发现pe文件有很多结构，其结构格式图可以见附件",{"_index":5989,"title":{},"body":{"1015828":{}}}],["如上图所示内存对齐就是0x1000，接着找到节表成员，将其对应成员属性按如下公式代入计算",{"_index":6421,"title":{},"body":{"1015828":{}}}],["如上图所示受限我们需要使用idispatch接口的getidsofnames函数去获取函数序号，接着再使用invoke函数根据序号获取函数的地址然后执行，这样下来执行效率是比较低的，所以atl从效率出发，实现了一种叫双接口(dual)的接口模式，我们来了解一下",{"_index":3190,"title":{},"body":{"1015823":{}}}],["如上图所示实现算术1+2，首先将1、2依次压入堆栈，call指令也会将其下一行指令地址压入堆栈，所以堆栈地址[esp+8]为第一个压入的数据，堆栈地址[esp+4]为第二个压入的数据",{"_index":5377,"title":{},"body":{"1015825":{}}}],["如上图所示我么久可以看到其挂钩子的函数是setwindowshookex（其第一个参数是wh_cbt，这是一个宏，其就是一个钩子，其表示可以监听窗口激活、产生、释放（关闭）、最小化、最大化或改变；那么在这些事件之前使用的函数就是_afxcbtfilterhook，也就是第二个参数），相当于安装了一个wh_cbt类型的钩子函数_afxcbtfilterhook，通过它将默认的窗口过程处理函数替换成了afxwndproc，这一段通过调试是没办法看见的，我们需要去寻找_afxcbtfilterhook函数的定义，代码很长我们简化一下",{"_index":495,"title":{},"body":{"1015822":{}}}],["如上图所示我们可以使用mov指令对段寄存器进行读写，但是这2个段寄存器：ldtr、tr，它们是不可以使用mov指令进行读写的",{"_index":8919,"title":{},"body":{"1015831":{}}}],["如上图所示我们可以很清晰的看见cframewnd类使用了declare_dyncreate宏，也就表示其支持动态创建",{"_index":329,"title":{},"body":{"1015822":{}}}],["如上图所示我们可以清晰的看见多维数组在内存中的分布是怎么样的，跟一维数组存储一点区别都没有",{"_index":1960,"title":{},"body":{"1015843":{}}}],["如上图所示我们可以看见该函数的实现很简单，一共只有5行汇编指令，我们逐行来分析一下",{"_index":6647,"title":{},"body":{"1933380":{}}}],["如上图所示我们通过判断当前类是否是基于cwinapp类派生的，不是则返回fal",{"_index":228,"title":{},"body":{"1015822":{}}}],["如上图所示的这个内存地址，很明显就是一个全局区的地址（这也就表示相同变量只能申请一次，不再接受第二次申请，也就表示全局变量应用场景，你可以用这个关键词来实现",{"_index":3738,"title":{},"body":{"1015840":{}}}],["如上图所示，我们可以清晰的看见参数在内存中的位置就是ebp+8、ebp+c...以此类推；局部变量则位于我们之前所说的缓冲区，也就是ebp",{"_index":1489,"title":{},"body":{"1015843":{}}}],["如上图所示，我们的ip帧就在其他数据中，我们根据mac帧的最后2字节推断出其他数据中的帧对应什么帧",{"_index":10267,"title":{},"body":{"1015818":{}}}],["如上图所示，按下a之后输出的虚拟键码是0x41，所以我们可以根据这个来进行判断",{"_index":7821,"title":{},"body":{"1015833":{}}}],["如上图所示，赋值运算符是可以复制父类的",{"_index":3695,"title":{},"body":{"1015840":{}}}],["如上就是自加、自减的用法，注意自加、自减的都是1，但其符号为什么可以在变量前或变量后？既然可以这样，其二者区别是什么？我们可以来看一下反汇编代码",{"_index":1739,"title":{},"body":{"1015843":{}}}],["如上所示是一个简单的c++类",{"_index":2588,"title":{},"body":{"1015823":{}}}],["如上所示，我们是通过拷贝析构函数在内存中创建了一个新的对象，而如果该类本身有一个父类，父类会被拷贝吗？我们写一段代码来论证一下",{"_index":3672,"title":{},"body":{"1015840":{}}}],["如上所示，调用函数的格式为：函数名(传入参数);，这是c语言调用函数的方法，我们之前也了解过汇编如何调用函数",{"_index":1363,"title":{},"body":{"1015843":{}}}],["如上所述中我们可以了解到通过pe指纹的方式识别pe文件，但是我又是如何知道这是否是一个pe文件的呢？这是因为pe文件结构有一个规范和定义，如下图所示就是pe文件的整体结构",{"_index":5988,"title":{},"body":{"1015828":{}}}],["如上所述，我们就能理清楚virtualalloc函数申请内存的过程了，它会在进程低2g还没有使用的内存空间中，分配一个指定大小的私有内存空间，然后将其对应的_mmvad结构体添加到对应进程的vad树中",{"_index":6761,"title":{},"body":{"2949228":{}}}],["如上是引用类型作用在各个类型下的例子，那么引用类型是如何实现的呢？其本质是什么？我们可以看下反汇编代码",{"_index":3497,"title":{},"body":{"1015840":{}}}],["如上示例中也直接将bstr有关的函数给列出来了",{"_index":2936,"title":{},"body":{"1015823":{}}}],["如上示例中我使用的是exe后缀的文件，但即使不是exe后缀的文件，例如.sys、.dll后缀的文件，实际上你通过这种方式会发现它们也是pe文件，所以我们不要只看后缀名来认定是不是pe文件，而要具体去看文件中的指纹",{"_index":5986,"title":{},"body":{"1015828":{}}}],["如上示例中的filter_value，就是当内核程序出现异常时决定程序如何执行的，一般有这三种情况",{"_index":5540,"title":{},"body":{"1015847":{}}}],["如上表格这些属性值都可以在调试器的寄存器窗口中找到",{"_index":8931,"title":{},"body":{"1015831":{}}}],["如下为改写后的代码",{"_index":986,"title":{},"body":{"1015822":{}}}],["如下代码",{"_index":2081,"title":{},"body":{"1015843":{}}}],["如下代码则表示申请2个物理页，占用线性地址并分配物理内存，该内存可读写",{"_index":7931,"title":{},"body":{"1015833":{}}}],["如下代码创建了一个简单的窗口程序",{"_index":7730,"title":{},"body":{"1015833":{}}}],["如下代码尝试获取",{"_index":7473,"title":{},"body":{"1015833":{}}}],["如下代码就是使用取值运算符",{"_index":2112,"title":{},"body":{"1015843":{}}}],["如下代码就是使用结构体指针",{"_index":2190,"title":{},"body":{"1015843":{}}}],["如下代码就是入口函数",{"_index":1346,"title":{},"body":{"1015843":{}}}],["如下代码就是在桌面中进行绘画，具体代码意思都在注释中了，不了解的可以在msdn",{"_index":7659,"title":{},"body":{"1015833":{}}}],["如下代码就比较简单了，将3环的ebp、eip、3环传参指针存入trap_frame结构体调试相关的成员当中，判断当前线程是否开启了调试状态，如果开启则进行跳转，跳转过去之后实际上也是填充trap_frame结构体中的调试相关的成员",{"_index":2538,"title":{},"body":{"1015846":{}}}],["如下代码我们写了一个读取文件最开始第一个字节的值",{"_index":8230,"title":{},"body":{"1015833":{}}}],["如下代码我们可以构建连接点绘制一个正方形",{"_index":732,"title":{},"body":{"1015822":{}}}],["如下代码所示我们构建一个除零异常，直接执行的话，正常流程就会进入_except分支执行代码",{"_index":4779,"title":{},"body":{"3440657":{}}}],["如下代码所示，我们使用les指令，它的意思是将buffer的高2个字节（段选择子）给到es段寄存器，低4个字节给到ecx寄存器",{"_index":9013,"title":{},"body":{"1015831":{}}}],["如下代码所示，我们创建了一个简易调试器，首先创建一个调试进程（createprocess函数第6个参数表示创建进程的标志，用于指定创建进程的行为和属性，这里的值为debug_proç",{"_index":4624,"title":{},"body":{"3440657":{}}}],["如下代码所示，我通过pid打开进程（openprocess函数），拥有所有权，不继承句柄表，当openprocess函数执行完成之后，我就获得一个句柄，通过这个句柄我就可以终止进程",{"_index":7353,"title":{},"body":{"1015833":{}}}],["如下代码是iunknown的定义，由此我们可以清楚其本质上就是一个含有纯虚函数的抽象类",{"_index":2823,"title":{},"body":{"1015823":{}}}],["如下代码是创建两个按钮，pressed信号（按钮按下）链接了pwidget控件的close方法和showfullscreen方法",{"_index":4159,"title":{},"body":{"1015820":{}}}],["如下代码是继承的例子",{"_index":3524,"title":{},"body":{"1015840":{}}}],["如下代码，student这个类的所有成员我们都可以调用，但是我们不想让被人调用print1这个方法该怎么",{"_index":3418,"title":{},"body":{"1015840":{}}}],["如下代码，一个结构体，有两个成员函数，一个是比较返回最大的数，一个则是最小的数",{"_index":3643,"title":{},"body":{"1015840":{}}}],["如下代码，我们使用亮灰色画刷来填充矩形",{"_index":780,"title":{},"body":{"1015822":{}}}],["如下代码，我们创建一个200x200的矩形，其左边与上边的颜色为绿色，右边和下边的颜色为红色",{"_index":791,"title":{},"body":{"1015822":{}}}],["如下代码，我们可以借助3d立体化让我们的矩形看起来像一个按钮，然后在左键按下事件中添加对应的弹框，实现一个简单的按钮单击触发功能",{"_index":800,"title":{},"body":{"1015822":{}}}],["如下图中所示，内存地址从小到大；我们知道每一个内存地址可以存储8位，也就是一个字节，当我们使用mov指令写入数据到内存中时指定宽度为byte存储数据会存储在一个内存地址中，而当我们指定数据宽度为word、dword呢",{"_index":5222,"title":{},"body":{"1015825":{}}}],["如下图中有其对应解释和相关的宏",{"_index":948,"title":{},"body":{"1015822":{}}}],["如下图就是ip帧结构，图中多次出现的位，表示的是bit位",{"_index":10269,"title":{},"body":{"1015818":{}}}],["如下图就是客户/服务模型",{"_index":2829,"title":{},"body":{"1015823":{}}}],["如下图我们可以很清晰的看见内存的结构，当我们形容子类b内存结构的时候，一定是有三个成员的，而不是一个成员z，当我们创建a*指针的时候指向的是子类对象的首地址，通过这个指针可以访问x、y，刚好子类对象b的开始位置是父类类型对象的第一个成员，所以我们可以使用父类类型的指针指向子类类型对象；但是反之（子类类型的指针指向父类类型的对象）我们却不可以，这是因为使用父类类型的指针指向子类类型对象有一个弊端，那就是没法访问子类类型的z，反过来的话，父类类型对象的成员只有x、y没有z，所以我们通过子类类型指针访问的时候是可以访问到三个成员的：x、y、z，但实际上父类对象是没有z的，那么在访问的过程中就会存在问题",{"_index":3562,"title":{},"body":{"1015840":{}}}],["如下图所示",{"_index":4136,"title":{},"body":{"1015820":{}}}],["如下图所示50、52之类的硬编码实际上就是定长指令，但并不表示定长指令就只有一个字节；同样，如00d4、0034c3之类的硬编码就是变长指令",{"_index":11819,"title":{},"body":{"1015817":{}}}],["如下图所示为dc设备描述表的一些属性",{"_index":619,"title":{},"body":{"1015822":{}}}],["如下图所示为dtdebug中的段寄存器位置",{"_index":11805,"title":{},"body":{"1015817":{}}}],["如下图所示代码，我们最终获取到的就是一个十六进制的d，在msdn",{"_index":7990,"title":{},"body":{"1015833":{}}}],["如下图所示就整个程序的目录结构，target32/64目录下的文件就是根据虚拟机操作系统的类型选择并复制进虚拟机的，vmmon64.exe就是主程序，直接实体机打开",{"_index":5487,"title":{},"body":{"1015847":{}}}],["如下图所示就是2",{"_index":9521,"title":{},"body":{"1015831":{}}}],["如下图所示就是tlb的结构（tlb中存储的成员结构，不同的cpu下，tlb表的大小是不一样的），线性地址、物理地址我们都知道",{"_index":9553,"title":{},"body":{"1015831":{}}}],["如下图所示就是tss段描述符的结构，tss段描述符也属于系统段描述符的一种，所以高4字节的第12位为0，当type位为1001或1011就表示当前是tss段描述符，前者表示当前段描述符没有被加载到tr寄存器中，后者则反之",{"_index":9297,"title":{},"body":{"1015831":{}}}],["如下图所示就是段选择子的结构及对应位的属性说明",{"_index":9007,"title":{},"body":{"1015831":{}}}],["如下图所示就是硬编码的结构，其有6个部分，我们现在所要了解的就是前缀指令，也就是第一部分",{"_index":11789,"title":{},"body":{"1015817":{}}}],["如下图所示就是这个结构体，我们可以看出，实际上他是有俩个成员都是链表，一个是每个网卡对应的next成员指针，一个是每个网卡对应的addresses成员指针的next成员",{"_index":10126,"title":{},"body":{"1015818":{}}}],["如下图所示展开到「a.3",{"_index":11823,"title":{},"body":{"1015817":{}}}],["如下图所示我们使用纯净版的ollydbg调试该程序就没法执行正常的代码，如果我们使用带插件版的od，如吾爱破解的od则可以直接绕过反调试",{"_index":4514,"title":{},"body":{"2949166":{}}}],["如下图所示我们可以直接在界面中去操作添加",{"_index":4202,"title":{},"body":{"1015820":{}}}],["如下图所示我可以获取所有逻辑驱动器的字符串，那么很清晰的可以看见逻辑驱动器的字符串就是盘符加上冒号和反斜杠",{"_index":8003,"title":{},"body":{"1015833":{}}}],["如下图所示是我们的运行结果，这也就说明了我们mfc多页面的设计也是基于这个标签页",{"_index":1323,"title":{},"body":{"1015822":{}}}],["如下图所示标记出的内容，就是一个非一致的代码段描述符（s位=1",{"_index":9129,"title":{},"body":{"1015831":{}}}],["如下图所示的伪代码，首先赋予eax为1，接着通过交换相加的方式，将全局变量的值加1，将原全局变量的值0给到eax，而后判断eax的值是否为0：如果是0则可以进入临界区，执行完原子操作之后，离开临界区将全局变量的值减1；如果不是则将全局变量的值减1，调用sleep函数进入线程等待，一段时间后，在跳回进入临界区的地方重新判断",{"_index":6663,"title":{},"body":{"1933380":{}}}],["如下图所示的则是一级指针（一个星号）和多级指针（多个星号",{"_index":2162,"title":{},"body":{"1015843":{}}}],["如下图所示简单用一下typeid，我们定一个了一个类canimal并创建了一个对象panimal，使用typeid进行比较发现两者都属于同一个类",{"_index":212,"title":{},"body":{"1015822":{}}}],["如下图所示这个对应关系就很容易理解了，其他的以此类推即可",{"_index":9004,"title":{},"body":{"1015831":{}}}],["如下图所示随便找个程序放大od里都可以找到回调函数表，回调函数实现的功能我们也可以推测出个大概，从argument中取窗口过程函数地址，再将其他几个参数作为传参调用窗口过程函数",{"_index":4077,"title":{},"body":{"3440655":{}}}],["如下图所示（句柄表是有三列的，分别是句柄值、内核结构体地址、句柄是否可以被继承），比如说我们在a进程（父进程）创建了4个内核对象",{"_index":7317,"title":{},"body":{"1015833":{}}}],["如下图所示（只介绍与本章节相关的信息",{"_index":8540,"title":{},"body":{"1015833":{}}}],["如下图所示，a、b、c三个不同地域的主机要想进行通信不是凭空就可以通信的，而是需要基于互联网进行互相连接、通信",{"_index":9632,"title":{},"body":{"1015818":{}}}],["如下图所示，a和b基于tcp协议进行传输控制，该协议可以控制协议传输或者说保证传输过程中的数据是正确的",{"_index":9709,"title":{},"body":{"1015818":{}}}],["如下图所示，a进程通过createprocess函数创建了一个内核对象；b进程通过openprocess函数可以打开别人创建好的一个进程，也就是可以操作其的内核对象；a进程想要操作内核对象就通过其对应的句柄表的句柄（索引）来操作；b进程操作这个内核对象也是通过它自己的句柄表的句柄（索引）来操作内核对象。（需要注意的是：句柄表是一个私有的，句柄值就是进程自己句柄表的索引",{"_index":7312,"title":{},"body":{"1015833":{}}}],["如下图所示，之间通过硬编码地址调用的机器码就没法注入执行，因为目标进程不可能会有目标地址内存给你进行使用",{"_index":8605,"title":{},"body":{"1015833":{}}}],["如下图所示，发送断开连接就是先发送fin包，等待对方发送ack包回应",{"_index":9924,"title":{},"body":{"1015818":{}}}],["如下图所示，在打开了三个窗口的情况下，当鼠标进行点击和移动操作时，操作系统是如何准确地将消息发送给不同窗口所对应的消息队列呢",{"_index":3957,"title":{},"body":{"3440655":{}}}],["如下图所示，客户端和服务器端基于tcp进行传输通信，首先客户端要跟服务器端说（发送请求）我要跟你进行连接，其次服务器端要回应（发送请求）允许客户端进行连接，而后客户端才会在发送一个请求正式连接，这就是三次握手的特点",{"_index":9712,"title":{},"body":{"1015818":{}}}],["如下图所示，就意味着线程级别为30、29的链表中是有线程的，其他链表中没有线程",{"_index":11262,"title":{},"body":{"1703937":{}}}],["如下图所示，我们一共抓到了三个包",{"_index":9910,"title":{},"body":{"1015818":{}}}],["如下图所示，我们会发现，在_dispatcher_header结构体的0x8偏移位成员是一个waitlisthead，这是一个链表，该链表指向的就是当前等待对象_kevent对应线程的等待块（若包含多个等待块，也就表示有多个线程在等待一个等待对象，则会将这些等待块依次插入链表中）。接着我们会发现在当前线程等待块的第一个成员waitlistentry中存储的就是waitlisthead的值，这样我们就完全明白了等待快与等待对象之间的关联",{"_index":10593,"title":{},"body":{"2424889":{}}}],["如下图所示，我们可以在windbg中查看该全局数组指针（0x81086000），当前这个地址就对应了一个_mmpfn结构体（用于描述物理页的信息），该结构体大小为0x1c（操作系统版本决定），该结构体本身并没有记录描述信息的归属",{"_index":6930,"title":{},"body":{"2949228":{}}}],["如下图所示，我们可以看见dispatchmessage函数与getmessage函数（ntusergetmessage函数）一样，最终都是调用keusermodecallback的回调函数进入3环，再去调用窗口过程函数",{"_index":4023,"title":{},"body":{"3440655":{}}}],["如下图所示，我们可以通过vc++6.0的工具spy++用于捕捉窗口接收到的消息。当鼠标在窗口上移动、点击或键盘敲击时，就会产生消息",{"_index":3926,"title":{},"body":{"3440655":{}}}],["如下图所示，我们可以验证该结论",{"_index":10683,"title":{},"body":{"2424889":{}}}],["如下图所示，我们的消息发送程序使用sendmessage函数发送消息，当窗口程序的处理没有结束，即弹窗没有关闭，则消息发送程序一直停留在哪里，也不会关闭",{"_index":4013,"title":{},"body":{"3440655":{}}}],["如下图所示，我们的计算机网络也有很多协议，下面是分为五层，如果你了解过计算机网络协议应该会知道七层模型、五层模型，但本章节不讲七层模型而是选择五层模型，因为七层模型是一种理想化的模型，实际应用我们用到的是五层模型",{"_index":9638,"title":{},"body":{"1015818":{}}}],["如下图所示，我们获取的函数地址表地址与windbg展示的是一直的，因此这里我们成功通过ssdt获取了系统服务表",{"_index":5826,"title":{},"body":{"1015847":{}}}],["如下图所示，我们获得getregister函数的函数地址0x0040b4b0",{"_index":9223,"title":{},"body":{"1015831":{}}}],["如下图所示，我们运行了代码，会发现两个线程都执行了，而如果是之前我们使用互斥体的话则线程a先执行然后线程b等待线程a归还令牌（执行结束）才会执行，这里我们在线程函数的最后使用了getchar()阻止了线程执行结束，但是两个线程还是都执行了",{"_index":7594,"title":{},"body":{"1015833":{}}}],["如下图所示，我将一个exe文件丢入dtdebug中，并找到它的cs中的段选择子0x001p",{"_index":9073,"title":{},"body":{"1015831":{}}}],["如下图所示，我获取了逻辑驱动器c的相关信息",{"_index":8053,"title":{},"body":{"1015833":{}}}],["如下图所示，我获取了逻辑驱动器c的类型",{"_index":8014,"title":{},"body":{"1015833":{}}}],["如下图所示，无论使用continue、break控制，还是return返回，亦或是触发异常，_finally块内的代码始终会被执行",{"_index":4467,"title":{},"body":{"2949166":{}}}],["如下图所示，是一个进程的vad树，有很多mapped类型内存，有具体的文件时我们可以称之为共享文件，没有具体文件则称之为共享物理页（即pagefil",{"_index":6783,"title":{},"body":{"2949228":{}}}],["如下图所示，是两个软件中打开着某个可执行文件（左",{"_index":11784,"title":{},"body":{"1015817":{}}}],["如下图所示，灰色部分为保留部分，不一定填0。接着我们来看下这个结构，第0位填1；pwt、pcd位需要等到之后的内容学完再学习；第9",{"_index":9528,"title":{},"body":{"1015831":{}}}],["如下图所示，用户空间是低2g，内核空间是高2g，对我们来说只能使用低2g的用户空间，高2g内核空间是所有进程共用的",{"_index":7895,"title":{},"body":{"1015833":{}}}],["如下图所示，红和蓝是联合攻打绿，它们以烽火为信号出动攻打绿，那么这时候就需要一个约定，比如红先点烽火，然后蓝看见了狼烟再点烽火，红看见了蓝的狼烟之后熄灭烽火，以此表示自己看见了，而蓝看见了红熄灭烽火之后也熄灭自己的烽火以此表示自己知道红看见了此信号，而后两人就需要再约定信号一起整顿出军以确保没有失误",{"_index":9634,"title":{},"body":{"1015818":{}}}],["如下图所示，路由器就是一个网关，网关就相当于是网络的一扇门，关内是一个网络，a、b、c、d都可以在这个网内进行通信，就不需要网关了，而如果a想跟e进行通信就需要通过网关将你的请求转发去通信，这是因为e不在关内",{"_index":9701,"title":{},"body":{"1015818":{}}}],["如下图所示，这是海东老师根据等待关系构造的一张等待网（这只是自定义的概念），我们可以看见所有处于等待状态的线程，线程对应的等待块，以及被等待对象，都会位于类似的等待网上",{"_index":10596,"title":{},"body":{"2424889":{}}}],["如下图所示，通过将页面空间的原点映射到设备空间的原点，再将设备空间的原点映射到物理设备上，通过一层层的转换才可以通过物理设备看最终显示的结果",{"_index":659,"title":{},"body":{"1015822":{}}}],["如下图是list容器的存储结构",{"_index":11404,"title":{},"body":{"1015814":{}}}],["如下图是各个循环语句的反汇编代码",{"_index":1898,"title":{},"body":{"1015843":{}}}],["如下图是硬编码的结构，第二部分的opcode是整个指令的灵魂，硬编码结构中的任何部分都可以没有，但是opcode是必须要有的",{"_index":11815,"title":{},"body":{"1015817":{}}}],["如下图是窗口程序创建执行流程",{"_index":7785,"title":{},"body":{"1015833":{}}}],["如下图是系统服务表的结构，它有四个成员分别是servicetable、count、servicelimit、argmenttable。servicetable里存储的是一个指针，指向了一张函数地址表，表内存储的是函数地址，表内的每个成员大小为4字节；count里存储的是当前系统服务表被调用的次数；servicelimit里存储这当前系统服务表内存储函数的个数；argmenttablee里存储的是一个指针，指向了函数参数表，表内存储的是函数参数的个数，它的单位是字节，表内的每个成员大小为1字节",{"_index":2544,"title":{},"body":{"1015846":{}}}],["如下就是tcp协议和udp协议的优缺点，我们可以根据实际场景情况，并根据两个协议的优缺点去选择适合当前场景的协议",{"_index":9965,"title":{},"body":{"1015818":{}}}],["如下就是系统时钟中断对应的信息，在windows操作系统中，每10~20毫秒便会触发一次时钟中断，要想获取当前版本windows时钟间隔值，可使用getsystemtimeadjustment函数",{"_index":11204,"title":{},"body":{"1703937":{}}}],["如下我们使用代码构造了一个完整的t",{"_index":9309,"title":{},"body":{"1015831":{}}}],["如下我们找到与fs寄存器有关系的代码段，可以看出它显示取出目标线程的teb地址，接着取出gdt表，并且向表中的成员写入值。我们知道fs在window",{"_index":11254,"title":{},"body":{"1703937":{}}}],["如下我们通过断链的方式实现了一个隐藏模块的函数",{"_index":8550,"title":{},"body":{"1015833":{}}}],["如下所示kthread结构体中，除了apcstate，还有4处与apc有关的成员，本章将会依次介绍这几个字段的含义，并学习一个新的知识，即备用apc队列",{"_index":10795,"title":{},"body":{"2424869":{}}}],["如下所示代码，我们写了一个线程函数，该函数的作用就是使用全局变量，模拟的功能就是售卖物品，全局变量countnumber表示该物品的总是，其值是10，而如果有多个地方（线程）去卖（使用）这个物品（全局变量），则会出现差错",{"_index":7490,"title":{},"body":{"1015833":{}}}],["如下所示代码，有一个全局变量dwval，在线程中执行的代码是对dwval的自增",{"_index":6633,"title":{},"body":{"1933380":{}}}],["如下所示就几个经典的变长指令",{"_index":11997,"title":{},"body":{"1015817":{}}}],["如下所示就活动进程双向链表的完整结构，psactiveprocesshead指向了该链表的表头位置",{"_index":11005,"title":{},"body":{"1703937":{}}}],["如下指令中段选择子ax指向的段描述符中的dpl为0，但是当前程序的cpl为3，那么该指令是无法执行成功的",{"_index":9081,"title":{},"body":{"1015831":{}}}],["如下指令中段选择子指向的是同一个段描述符，但是它们的rpl不一样",{"_index":9085,"title":{},"body":{"1015831":{}}}],["如下是dll文件的代码",{"_index":8488,"title":{},"body":{"1015833":{}}}],["如下是kifastsystemcall函数，我们可以看到它跟kiintsystemcall没睡眠区别，只是它进入0环的方式不是基于中断门，而是使用了sysenter指令",{"_index":2478,"title":{},"body":{"1015846":{}}}],["如下是传递参数进行远程注入代码的实现",{"_index":8616,"title":{},"body":{"1015833":{}}}],["如下是双接口示意图，我们可以看见他有三个部分，分别是iunknow、idispatch、自定义接口，所谓双接口，其实是在一个vtab的虚函数表中容纳了三个接口，因为任何接口都是从iunknown派生的，所以就不强调iunknown了，就称之为双接口",{"_index":3193,"title":{},"body":{"1015823":{}}}],["如下是节表成员的数据结构",{"_index":6372,"title":{},"body":{"1015828":{}}}],["如下格式举例中表示含义",{"_index":5236,"title":{},"body":{"1015825":{}}}],["如下汇编代码",{"_index":5418,"title":{},"body":{"1015825":{}}}],["如下用结构体来表示，有16位可见部分（selecter），16位属性，32位base和32位l",{"_index":8912,"title":{},"body":{"1015831":{}}}],["如下示例代码，定义一个char类型的变量，再赋值给一个int类型的变量",{"_index":1558,"title":{},"body":{"1015843":{}}}],["如下表所示是在不同场景下使用双接口、原因与使用结果",{"_index":3195,"title":{},"body":{"1015823":{}}}],["如下表所示，是我当前window",{"_index":8922,"title":{},"body":{"1015831":{}}}],["如下表格中就是一些鼠标消息的名称和其对应含义",{"_index":927,"title":{},"body":{"1015822":{}}}],["如下表格中的j就表示偏移量，宽度根据后面b或者d决定（具体可以看文档释义",{"_index":11956,"title":{},"body":{"1015817":{}}}],["如下这段汇编指令是向通过a进程的线程执行，获取b进程的0x12345678的值再存入到0x00401234，这样操作很明显是无意义的，因为你操作了半天都只是将数据存入到了b进程的0x00401234，而a进程的0x00401234对应值并没有数据",{"_index":11301,"title":{},"body":{"1703937":{}}}],["如何区分出网络号、主机号",{"_index":9662,"title":{},"body":{"1015818":{}}}],["如何区分指令是定长或变长",{"_index":11821,"title":{},"body":{"1015817":{}}}],["如何区分指令是定长或变长，这需要去根据官方的文档来看",{"_index":11822,"title":{},"body":{"1015817":{}}}],["如何在c++中拷贝构造函数，来看一下如下代码",{"_index":3667,"title":{},"body":{"1015840":{}}}],["如何定位互联网上的终端",{"_index":9639,"title":{},"body":{"1015818":{}}}],["如何执行代码",{"_index":8435,"title":{},"body":{"1015833":{}}}],["如何操作标志寄存器",{"_index":5423,"title":{},"body":{"1015825":{}}}],["如何添加一个消息",{"_index":361,"title":{},"body":{"1015822":{}}}],["如图，我们运行了代码，发现会出现重复售卖，并且到最后总数竟变成了",{"_index":7497,"title":{},"body":{"1015833":{}}}],["如果dl的值不为0，则会判断该kapc.kernelroutine是不是psexitspecialapc，如果是，则会把对应的apc挂入到队列中，之后跳回主代代码，这里有个细节需要注意，再挂入队列之前会将userapcpending的值设为1；如果不是，那么也会走下面的代码，将用户apc插入带对应的用户apc队列中，最后跳回主代码",{"_index":10890,"title":{},"body":{"2424869":{}}}],["如果n是右移得到的或n=0,则将n化为二进制后在左边加“0”补足七位，再各位求反，再放入第29到第23位",{"_index":1600,"title":{},"body":{"1015843":{}}}],["如果n是左移得到的，则n减去1后化为二进制，并在左边加“0”补足七位，放入第29到第23位",{"_index":1599,"title":{},"body":{"1015843":{}}}],["如果n是左移得到的，说明指数是正的，第30位放入“1”，如果n是右移得到的或n=0，则第30位放入“0",{"_index":1598,"title":{},"body":{"1015843":{}}}],["如果rtldispatchexception函数返回0，我们可以看见它又会去判断当前是否有内核调试器，和上面的流程一样，发现没有内核调试器，或者内核调试器函数返回结果为0的情况下，跳转至同一代码段，该代码段的作用就是蓝屏（kebugcheckex就是windows执行崩溃的函数，作用就是使计算机蓝屏",{"_index":4300,"title":{},"body":{"2949166":{}}}],["如果unhandledexceptionfilter函数返回为0，即exception_continue_search，那就真的是找不到对应的异常处理程序了，但这种情况如果你的程序在没有被调试的情况下是不会发生的，只有程序被调试时，才会存在未处理异常",{"_index":4497,"title":{},"body":{"2949166":{}}}],["如果unhandledexceptionfilter函数返回为0，即exception_continue_search，那就真的是找不到对应的异常处理程序了，这种情况下只有在程序被调试时才会存在",{"_index":4786,"title":{},"body":{"3440657":{}}}],["如果veh与seh都没有对异常进行处理，这种异常我们就称之为未处理异常。因为我们根据之前分析内核空间异常知道，当没有任何方法取处理异常时会调用kebugcheckex函数启用蓝屏，内核未处理异常的处理结果也很简单，因此本章节所学习的是用户空间的未处理异常",{"_index":4479,"title":{},"body":{"2949166":{}}}],["如果x和y类型不同，最终结果按照这个顺序进行结果类型转换：ch",{"_index":1708,"title":{},"body":{"1015843":{}}}],["如果一个成员使用了statiç",{"_index":219,"title":{},"body":{"1015822":{}}}],["如果一个线程不调用api，在代码中屏蔽中断（cli指令），并且不会出现异常，那么当前线程将永久占有cpu，单核占有率10",{"_index":11220,"title":{},"body":{"1703937":{}}}],["如果不是，判断rva位于哪个节",{"_index":6336,"title":{},"body":{"1015828":{}}}],["如果不重新编译，全局变量的内存地址永远都不会变",{"_index":1469,"title":{},"body":{"1015843":{}}}],["如果不需要深拷贝，就不要自己添加拷贝构造函数",{"_index":3687,"title":{},"body":{"1015840":{}}}],["如果传入的参数mysql是null指针，该函数将分配、初始化、并返回新对象，否则，将初始化对象，并返回对象的地址；如果mysql_init()分配了新的对象，当调用mysql_close()来关闭连接时，将释放该对象",{"_index":8868,"title":{},"body":{"1015850":{}}}],["如果你不想使用这种方式也可以通过getdlgitem函数来调用",{"_index":1099,"title":{},"body":{"1015822":{}}}],["如果你不想要使用这个函数来跨进程读取内存，自己实现的话就需要切换cr3后来关闭中断，并且在程序中不再使用导致线程切换的window",{"_index":11298,"title":{},"body":{"1703937":{}}}],["如果你不想这么复杂，我们可以使用polylineto函数",{"_index":741,"title":{},"body":{"1015822":{}}}],["如果你去官方下载的话是下载到的源码，需要自己去编译打包，和winpcap库一样，将对应路径填写到vc6的配置中去",{"_index":10458,"title":{},"body":{"1015818":{}}}],["如果你天假了拷贝构造函数，那么编译器将不再提供，所有的事情都需要由新添加的函数自己来处理",{"_index":3688,"title":{},"body":{"1015840":{}}}],["如果你学习过初级篇的课程，实际你就已经使用过段寄存器了，如下汇编代码",{"_index":8905,"title":{},"body":{"1015831":{}}}],["如果你希望修改可以立即生效，我们可以通过flushviewoffile函数来强制更新缓存，其语法格式如下",{"_index":8259,"title":{},"body":{"1015833":{}}}],["如果你希望在软件调试上有所突破，或者想了解如何通过异常进行反调试，或者想自己写一个调试器，那么就必须要深入了解异常，异常与调试是紧密相连的，异常是调试的基础",{"_index":4226,"title":{},"body":{"2949166":{}}}],["如果你总是以十进制为基础去考虑其他进制，包括在进制运算时，也是先考虑转为十进制再运算，这说明你不理解进制的本质，想要真正的理解进制，就要忘掉我们生活中常用的十进制，也要忘掉进制间的转换",{"_index":4987,"title":{},"body":{"1015825":{}}}],["如果你想一直等待的话，可以将第二参数的值设置为inf",{"_index":7437,"title":{},"body":{"1015833":{}}}],["如果你想使用其他段寄存器就可以在这段硬编码之前加入对应段前缀指令（在dtdebug中选中需要修改的然后按快捷键ctrl+e进行修改",{"_index":11807,"title":{},"body":{"1015817":{}}}],["如果你想创建一个非模态对话框可以使用我们之前写的cframewnd的方式，先执行create函数然后showwindow，但是这样是不行的，因为我们这样创建的是一个局部变量，虽然会创建这个窗口但是函数执行完，栈中就没有这个了",{"_index":1055,"title":{},"body":{"1015822":{}}}],["如果你想去打开一个文件，其存在就正常打开，不存在就创建的时候可以按如下图去写",{"_index":1256,"title":{},"body":{"1015822":{}}}],["如果你想在这个写入之后跟着去填写的话直接使用write函数是会被覆盖的，我们需要使用seektoend函数将写入位置指向文件末尾然后再使用write函数，最后记得要关闭这个文件",{"_index":1258,"title":{},"body":{"1015822":{}}}],["如果你想字体样式更花哨一点，例如支持斜体之类的，我们可以使用成员方法createpointfontindirect，其参数是一个logfont结构体",{"_index":863,"title":{},"body":{"1015822":{}}}],["如果你想支持节点自动排序的话可以使用样式tvi_s",{"_index":1238,"title":{},"body":{"1015822":{}}}],["如果你想看见具体的这些函数对应的代码，可以根据偏移地址找到对应的字节码，而后将其放入dtdebug之类的调试工具即可看见完整的代码，但是在这里编译器做了一下优化，加了一层jmp跳转，具体的就要跟下去了",{"_index":6501,"title":{},"body":{"1015828":{}}}],["如果你想获取其他的父节点，可以在此基础上使用函数getnextsibl",{"_index":1243,"title":{},"body":{"1015822":{}}}],["如果你想装更多的socket，可以通过在winsock2.h头文件前声明宏，给一个更大的值",{"_index":10046,"title":{},"body":{"1015818":{}}}],["如果你想要将variant进行数据类型的转换可以使用函数variantchangetyp",{"_index":3070,"title":{},"body":{"1015823":{}}}],["如果你想让自己的工程看起来规范化，可以替换一下progid、version，当前是1.0版本，可以变成2.0版本，progid的最后那个“.1”就表示版本号也可以替换一下",{"_index":3163,"title":{},"body":{"1015823":{}}}],["如果你想通过调试去看见这个过程的话，我们就需要借助消息处理函数，例如之前学习的onlbuttondown函数，在这下断点进行跟进即可（别忘记要左键按下触发事件才能跟进",{"_index":511,"title":{},"body":{"1015822":{}}}],["如果你按后者去写，在不同的平台上移植代码可能会导致数据宽度不同，要修改到相同宽度就需要修改代码，而按wdk的写法就可以减少这种不必要的情况",{"_index":5519,"title":{},"body":{"1015847":{}}}],["如果你的程序再次访问物理页的话，就会重新给你分配物理页，然后把数据从pagefile.sys文件中拿出来放到新的物理页中，这都是操作系统在操作的，写程序是感受不到这样的细节的",{"_index":7914,"title":{},"body":{"1015833":{}}}],["如果你要抓网络的包，首先你要知道你要处理的是哪个网卡，那么你就要知道这个网卡的相关信息，所以本章节就遍历物理网卡并获取相关信息",{"_index":10097,"title":{},"body":{"1015818":{}}}],["如果你觉得这样麻烦也可以考虑在vc6下面下断点跟进这个函数地址即可",{"_index":6352,"title":{},"body":{"1015828":{}}}],["如果你还清晰的记得保护模式相关的内容就会想到一个进程有4gb内存空间，低2g是自己的，高2g是共享的，就可以利用高2g的内存空间来存储数据",{"_index":11307,"title":{},"body":{"1703937":{}}}],["如果前面的#if给定条件不为真，当前条件为真，则编译下面代码",{"_index":2389,"title":{},"body":{"1015843":{}}}],["如果在时间片结束时进程还在运行，则cpu将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则cpu当即进行切换，这样就不会造成cpu资源浪费",{"_index":11226,"title":{},"body":{"1703937":{}}}],["如果它有多个等待块，在判断第二个等待块时，也会因为不符合激活条件，也要重新将自己挂到kiwaitlisthead上。也就是说，只有第一个获得cpu控制权，且只有一个等待块的线程，才能完全复活，别的临时复活的线程，要重新挂到等待链表上",{"_index":10665,"title":{},"body":{"2424889":{}}}],["如果宏已经定义，则编译下面代码",{"_index":2393,"title":{},"body":{"1015843":{}}}],["如果宏没有定义，则编译下面代码",{"_index":2395,"title":{},"body":{"1015843":{}}}],["如果实数是正的，则第31位放入“0”，否则放入",{"_index":1597,"title":{},"body":{"1015843":{}}}],["如果客户要使用的话，我们需要将这个文件提供给他",{"_index":2589,"title":{},"body":{"1015823":{}}}],["如果当前线程执行了waitforsingleobject函数，那么当前线程结构体中_kthread的waitblock成员就会记录等待的对象",{"_index":11031,"title":{},"body":{"1703937":{}}}],["如果想增大物理内存的访问范围，就需要增大pte，由于需要考虑对齐，所以增加到8个字节，这里增加的只是pte结构中的物理地址部分，属性部分并没有增加；那么这里一个页可以存储512个pte（也就是2的9次方），此时2",{"_index":9513,"title":{},"body":{"1015831":{}}}],["如果想提供一些通用的功能，而且这些功能并不会破坏内核数据，那么可以选择一致代码段，这样低级别的程序可以在不提升cpl权限等级的情况下访问",{"_index":9150,"title":{},"body":{"1015831":{}}}],["如果想访问普通代码段，只有通过调用门等提升cpl权限，才能访问",{"_index":9151,"title":{},"body":{"1015831":{}}}],["如果我们命名空间内的东西非常多，但是你要调用就必须要加上前缀，这时候你可以在代码的首行写",{"_index":3729,"title":{},"body":{"1015840":{}}}],["如果我们存储的数据宽度比变量的数据宽度大就会出现数据溢出，如下示例代码",{"_index":1534,"title":{},"body":{"1015843":{}}}],["如果我们想要在创建对象的时候，自定义初始化成员的值，就可以在析构函数上加上参数",{"_index":3349,"title":{},"body":{"1015840":{}}}],["如果我们想要在堆中申请数组，需要使用new[]、delete[]这两个关键词来创建和释放",{"_index":3471,"title":{},"body":{"1015840":{}}}],["如果我们想要找到它们对应的线程结构体需要在地址上减去0x60，因为这里记录的地址实际上是_ethread（_kthread）中的0x60偏移位成员waitlistentr",{"_index":11094,"title":{},"body":{"1703937":{}}}],["如果我们想要控制线程的行为，就需要提供给它一个函数，让它自己去调用，这个函数就是apc（asyncro",{"_index":10770,"title":{},"body":{"2424869":{}}}],["如果我们成功创建了一个进程，createprocess函数会给我们返回一个结构体，包含四个数据：进程编号（id）、进程句柄、线程编号（id）、线程句柄",{"_index":7331,"title":{},"body":{"1015833":{}}}],["如果我们自己想要判断是什么方式，可以选择使用cpuid指令，当eax=1时指向cpuid指令，处理器的特征信息就会存放在ecx和edx寄存器中，其中edx包含了一个sep位（第11位），该位为1则表示cpu支持sysenter、sysexit指令，为0则表示不支持",{"_index":2462,"title":{},"body":{"1015846":{}}}],["如果我们自己的程序执行时不希望cpu去处理这些中断，可以使用cli指令清空eflag寄存器中的if位，或使用sti指令设置eflag寄存器中的if位",{"_index":9581,"title":{},"body":{"1015831":{}}}],["如果我们需要给别人用的话那就需要a.lip",{"_index":8290,"title":{},"body":{"1015833":{}}}],["如果所属进程不是同一个，则会从进程结构体中找到cr3取出，最后进行cr3切换",{"_index":11276,"title":{},"body":{"1703937":{}}}],["如果是第一次执行，将当前线程的等待块挂到等待对象的链表（即_dispatcher_header.waitlisthead）中，此时进入了等待网",{"_index":10658,"title":{},"body":{"2424889":{}}}],["如果是，那么rva等于f",{"_index":6335,"title":{},"body":{"1015828":{}}}],["如果条件成立，跳转到当前指令地址",{"_index":11910,"title":{},"body":{"1015817":{}}}],["如果此时执行插入apc的代码（在内核中会使用keinsertqueueapc插入apc），在插入函数中会判断这个值的状态，如果为0则插入失败",{"_index":10821,"title":{},"body":{"2424869":{}}}],["如果没有被调试",{"_index":4501,"title":{},"body":{"2949166":{}}}],["如果没有通过setunhandledexceptionfilter注册处理函数，就会弹出窗口让用户选择终止程序还是启动即时调试器",{"_index":4503,"title":{},"body":{"2949166":{}}}],["如果注册失败了，有可能是非管理员权限的原因，可以使用管理员权限打开一个cmd然后运行命令",{"_index":2770,"title":{},"body":{"1015823":{}}}],["如果消息队列存在于用户空间，也就表示每个进程有一个独属于自己的消息队列，那么就需要有一个专用进程来对不同类型的消息进行分发",{"_index":3794,"title":{},"body":{"3440655":{}}}],["如果父类中的虚函数可以任何意义，那么可以定义成纯虚函数",{"_index":3577,"title":{},"body":{"1015840":{}}}],["如果用户没有启用即时调试器，那么该函数返回exception_execute_handl",{"_index":4504,"title":{},"body":{"2949166":{}}}],["如果相同，会先根据kapc.apcmode的值判断该apc为用户apc还是内核apc；若是用户apc，则会跳转并依次判断kthread.state，kthread.waitmode和kthread.alertable的值，其含义分别为判断线程状态是否为等待、判断是否是用户导致的等待以及判断是否可以唤醒线程",{"_index":10893,"title":{},"body":{"2424869":{}}}],["如果线性地址在vad树中不存在，操作系统将报告0xc0000005错误，表示访问违规。通过利用缺页异常的机制，操作系统能够动态地管理线性地址和物理页之间的映射关系，以提供有效的内存访问和保护机制",{"_index":7047,"title":{},"body":{"2949228":{}}}],["如果线性地址存在于vad树中，操作系统将为该线性地址分配一个物理页，并填写pte的12",{"_index":7044,"title":{},"body":{"2949228":{}}}],["如果给定条件为真，则编译下面代码",{"_index":2388,"title":{},"body":{"1015843":{}}}],["如果被调试，返回exception_continue_search，此时会进入第二轮分发",{"_index":4500,"title":{},"body":{"2949166":{}}}],["如果要创建一个新的文件，而不是打开一个现存文件，则需要在cfile::open函数或者cfile的构造函数的第二个参数包含一个cfile::modecreate标志",{"_index":1253,"title":{},"body":{"1015822":{}}}],["如果要实现深拷贝，我们就需要自己重写拷贝构造函数",{"_index":3676,"title":{},"body":{"1015840":{}}}],["如果要逆向分析操作系统内核代码，需要具备两个前置知识：1.段、页相关代码能够理解；2.至少要知道三个结构体：_eprocess、_ethread、_kpcr。因此本章节我们需要了解_kpcr结构体",{"_index":11048,"title":{},"body":{"1703937":{}}}],["如果要释放一个智能指针，直接给它赋null,这样内部才com接口指针会自动执行release操作，来减少应用计数",{"_index":3255,"title":{},"body":{"1015823":{}}}],["如果该值为",{"_index":11021,"title":{},"body":{"1703937":{}}}],["如果调用rtldispatchexception函数找不到veh链表，则会去寻找seh链表，seh链表是一个局部链表，存储在当前线程的栈中，因此不同的线程要通过seh来处理异常都需要在自己的堆栈中存放",{"_index":4380,"title":{},"body":{"2949166":{}}}],["如果这段代码可以执行则表示我们可以对段寄存器cs进行写入内容，反之则证明其attribute属性的真实性",{"_index":8939,"title":{},"body":{"1015831":{}}}],["如表格所示，type域是段描述符高位4字节的第8位至第11位，第11位为0则是数据段，为1则是代码段。在详细了解这张表格之前，我们先来根据实际的gdt表来找一下数据段/代码段的描述符",{"_index":9038,"title":{},"body":{"1015831":{}}}],["妯″潡",{"_index":7769,"title":{},"body":{"1015833":{}}}],["妯″潡鍔犺浇绫诲瀷淇℃伅",{"_index":4728,"title":{},"body":{"3440657":{}}}],["妯″潡鍗歌浇绫诲瀷淇℃伅",{"_index":4732,"title":{},"body":{"3440657":{}}}],["妯潃鐢伙紝x澧炲姞锛寉涓嶅彉",{"_index":726,"title":{},"body":{"1015822":{}}}],["姝ゅ杩斿洖琛ㄧず寮傚父宸插鐞",{"_index":4365,"title":{},"body":{"2949166":{}}}],["姝ゅ杩斿洖琛ㄧず寮傚父鏈鐞",{"_index":4366,"title":{},"body":{"2949166":{}}}],["姝ゅ涓篘ul",{"_index":5764,"title":{},"body":{"1015847":{}}}],["姝ゆ椂px鎸囬拡鎸囧悜",{"_index":2284,"title":{},"body":{"1015843":{}}}],["姝ゆ椂灏辨槸鏁扮粍{1,2,3}鏈韩",{"_index":2282,"title":{},"body":{"1015843":{}}}],["姝ゆ椂鐨",{"_index":2277,"title":{},"body":{"1015843":{}}}],["姝ラ1锛氬畾涔夊嚱鏁版寚閽�,濡傦細",{"_index":8341,"title":{},"body":{"1015833":{}}}],["姝ラ2锛氬０鏄庡嚱鏁版寚閽堝彉閲�,濡傦細",{"_index":8343,"title":{},"body":{"1015833":{}}}],["姝ラ3锛氬姩鎬佸姞杞絛ll鍒板唴瀛樹腑,濡傦細",{"_index":8346,"title":{},"body":{"1015833":{}}}],["姝ラ4锛氳幏鍙栧嚱鏁板湴鍧�,濡傦細",{"_index":8349,"title":{},"body":{"1015833":{}}}],["姝ラ5锛氳皟鐢ㄥ嚱鏁�,濡傦細",{"_index":8351,"title":{},"body":{"1015833":{}}}],["姝ラ6锛氶噴鏀惧姩鎬侀摼鎺ュ簱,濡傦細",{"_index":8353,"title":{},"body":{"1015833":{}}}],["姝ｅ父鍦烘櫙",{"_index":10813,"title":{},"body":{"2424869":{}}}],["姣忔绾跨▼琚叾浠栫嚎绋嬪敜閱掞紝閮借杩涘叆杩欎釜寰幆",{"_index":10629,"title":{},"body":{"2424889":{}}}],["姣旇緝s1鍜宻2锛屼竴鏍峰垯杩斿洖0锛屼笉涓�鏍疯繑鍥為潪0",{"_index":2154,"title":{},"body":{"1015843":{}}}],["娆℃暟",{"_index":7608,"title":{},"body":{"1015833":{}}}],["娈垫弿杩扮",{"_index":2530,"title":{},"body":{"1015846":{}}}],["娈垫弿杩扮鏃犳晥",{"_index":9023,"title":{},"body":{"1015831":{}}}],["娈垫弿杩扮鏈夋晥",{"_index":9022,"title":{},"body":{"1015831":{}}}],["娈甸�夋嫨瀛",{"_index":9219,"title":{},"body":{"1015831":{}}}],["娈甸�夋嫨瀛�:瑕佽烦杞殑鍦板潃",{"_index":9110,"title":{},"body":{"1015831":{}}}],["娉ㄥ唽",{"_index":4371,"title":{},"body":{"2949166":{}}}],["娉ㄥ唽娲鹃仯鍑芥暟",{"_index":5721,"title":{},"body":{"1015847":{}}}],["娉ㄥ唽涓�涓渶椤跺眰寮傚父澶勭悊鍑芥暟",{"_index":4508,"title":{},"body":{"2949166":{}}}],["娉ㄥ唽绐楀彛绫",{"_index":7748,"title":{},"body":{"1015833":{}}}],["娉ㄥ唽鐨勫洖璋冨嚱鏁",{"_index":4344,"title":{},"body":{"2949166":{}}}],["娉ㄥ唽鐨勭被鍚嶏紝浣跨敤button鍒欎负鎸夐挳",{"_index":7860,"title":{},"body":{"1015833":{}}}],["娉ㄥ唽鐨勭被鍚嶏紝浣跨敤edit鍒欎负缂栬緫妗",{"_index":7846,"title":{},"body":{"1015833":{}}}],["娉ㄦ剰锛氬湪浣跨敤鏁扮粍鏃讹紝鏂规嫭鍙穂]涓殑鍐呭鍙互浣跨敤琛ㄨ揪寮忥紝鑰屽苟闈炲己鍒惰姹備负甯搁噺銆",{"_index":1931,"title":{},"body":{"1015843":{}}}],["娉ㄦ剰锛氬湪鎴戜滑浣跨敤dtdebug璋冭瘯鐨勬椂鍊欙紝瑕佽窡杩汣all鎸囦护涓嶈兘浣跨敤f8瑕佹槸鐢‵7锛岃繖閲屾秹鍙婅皟璇曞櫒鐩稿叧鐨勭煡璇嗭紝鏆傛椂涓嶆繁鍏ヤ簡瑙",{"_index":5359,"title":{},"body":{"1015825":{}}}],["娑堟伅浜х敓鐨勬椂闂",{"_index":7794,"title":{},"body":{"1015833":{}}}],["娑堟伅绫诲瀷",{"_index":4027,"title":{},"body":{"3440655":{}}}],["娑堟伅绫诲瀷i",{"_index":405,"title":{},"body":{"1015822":{}}}],["娑堟伅绫诲瀷锛氱紪鍙",{"_index":7792,"title":{},"body":{"1015833":{}}}],["娑堟伅鍙傛暟",{"_index":4028,"title":{},"body":{"3440655":{}}}],["娑堟伅鏃堕棿鎴",{"_index":4029,"title":{},"body":{"3440655":{}}}],["娑堟伅鐨勫姩浣滄爣璇",{"_index":423,"title":{},"body":{"1015822":{}}}],["娑堣垂",{"_index":7621,"title":{},"body":{"1015833":{}}}],["娑堣垂鑰",{"_index":7619,"title":{},"body":{"1015833":{}}}],["娓呯",{"_index":3065,"title":{},"body":{"1015823":{}}}],["娓呯┖鍏冪礌",{"_index":11552,"title":{},"body":{"1015814":{}}}],["娓呴櫎鍗曟鏍囧織",{"_index":4956,"title":{},"body":{"3440657":{}}}],["娓呴櫎鏄剧ず鏂瑰紡浣",{"_index":1191,"title":{},"body":{"1015822":{}}}],["娣诲姞涓�涓瓧绗︿覆閫夐」锛屾斁鍒版渶鍚庨潰",{"_index":1153,"title":{},"body":{"1015822":{}}}],["娣诲姞鍏冪礌",{"_index":11544,"title":{},"body":{"1015814":{}}}],["娣诲姞鎸囧畾瀹瑰櫒鍖洪棿鐨勫",{"_index":11461,"title":{},"body":{"1015814":{}}}],["娣诲姞鎸囧畾鏁扮粍鍖洪棿鐨勫",{"_index":11458,"title":{},"body":{"1015814":{}}}],["娣诲姞鏂板瓧娈",{"_index":8835,"title":{},"body":{"1015850":{}}}],["娲鹃仯鍑芥暟鍚",{"_index":5708,"title":{},"body":{"1015847":{}}}],["婧怴ariant鐨勬寚閽",{"_index":3079,"title":{},"body":{"1015823":{}}}],["婵�娲绘潯浠讹細1.瓒呮椂锛�2.绛夊緟瀵硅薄鐨凷ignalstate鎴愬憳鍊煎ぇ浜�0",{"_index":10631,"title":{},"body":{"2424889":{}}}],["子窗口控件",{"_index":7828,"title":{},"body":{"1015833":{}}}],["子类与父类成员重名的问题我们可以通过这种方式解决，但是在实际应用中还是尽量避免这种问题比较好",{"_index":3402,"title":{},"body":{"1015840":{}}}],["子类没有重写时，虚表中则只有父类自己的成员函数地址，反之，当子类重写虚函数时候，虚表中则存在父类自己的成员函数地址与子类重写的成员函数地址",{"_index":3599,"title":{},"body":{"1015840":{}}}],["子网掩码",{"_index":9666,"title":{},"body":{"1015818":{}}}],["子网掩码本质上是32位的二进制，只不过是为了看着直观一些就转为了十进制，子网掩码1所对应的位为网络号位而0所对应的位为主机号位，其用来区分有几个子网，例如这里我们的255.255.255.0，转为二进制实际上前24位是网络位，后8位是主机位，那也就表示我们只有一个子网，在这里我们的子网地址范围就是：192.168.8.0",{"_index":9684,"title":{},"body":{"1015818":{}}}],["子表之间的关系",{"_index":6521,"title":{},"body":{"1015828":{}}}],["字体",{"_index":856,"title":{},"body":{"1015822":{}}}],["字体使用cfont类创建，我们可以通过其成员方法createpointfont去创建一个字体样式",{"_index":857,"title":{},"body":{"1015822":{}}}],["字符与字符串",{"_index":1642,"title":{},"body":{"1015843":{}}}],["字符串和文本类型",{"_index":8800,"title":{},"body":{"1015850":{}}}],["字符串复制",{"_index":5583,"title":{},"body":{"1015847":{}}}],["字符串成员的处理",{"_index":2061,"title":{},"body":{"1015843":{}}}],["字符串指针",{"_index":7167,"title":{},"body":{"1015833":{}}}],["字符串比较",{"_index":5586,"title":{},"body":{"1015847":{}}}],["字符串的几种表现形式",{"_index":2155,"title":{},"body":{"1015843":{}}}],["字符串的操作就是创建、复制、比较、转换，但由于编码问题在内核中也有不同的函数表达",{"_index":5575,"title":{},"body":{"1015847":{}}}],["字符序列",{"_index":2340,"title":{},"body":{"1015843":{}}}],["字符类型",{"_index":7163,"title":{},"body":{"1015833":{}}}],["字符编码",{"_index":7061,"title":{},"body":{"1015833":{}}}],["字节对齐",{"_index":2016,"title":{},"body":{"1015843":{}}}],["字节对齐就是：一个变量占用n个字节，则该变量的起始地址必须是n的整数倍，即：起始地址",{"_index":2021,"title":{},"body":{"1015843":{}}}],["字节数",{"_index":8771,"title":{},"body":{"1015850":{}}}],["字节码",{"_index":6502,"title":{},"body":{"1015828":{}}}],["字节（byt",{"_index":5083,"title":{},"body":{"1015825":{}}}],["字（wor",{"_index":5085,"title":{},"body":{"1015825":{}}}],["存储学会了，接下来就要从variant中读取存储的值了",{"_index":3066,"title":{},"body":{"1015823":{}}}],["存储模式（大、小端",{"_index":5218,"title":{},"body":{"1015825":{}}}],["学习mfc的cfile类",{"_index":1247,"title":{},"body":{"1015822":{}}}],["学习mfc的ctabctrl类和多页面的设计方式",{"_index":1317,"title":{},"body":{"1015822":{}}}],["学习mfc资源打包和输出的方法",{"_index":1248,"title":{},"body":{"1015822":{}}}],["学习「汇编语言」只是为了更好的去理解「高级语言」在计算机底层做了什么事情，更好的去理解计算机底层内容与「高级语言」的特性",{"_index":4984,"title":{},"body":{"1015825":{}}}],["学会使用类视图快速添加类",{"_index":169,"title":{},"body":{"1015822":{}}}],["学过win32的话应该了解到当我们打开一个进程的时候，会默认启用一个线程（每个进程至少需要一个线程），那么我们可以用这个线程作为主线程，负责监听客户端连接请求，再用之前学习到的createthread函数创建新的工作线程负责通信（收发信息",{"_index":10001,"title":{},"body":{"1015818":{}}}],["它有很多成员，但我们并不需要去深入的理解每个成员的含义和作用，这是因为这个结构体是给16位平台看的，而我们现在的环境大部分都是32位和64位的，所以现在的平台不再需要这个完整的结构体了，只需要其中的两个成员e_magic和e_lfanew",{"_index":6078,"title":{},"body":{"1015828":{}}}],["它的0x120偏移位指向的是另外一个结构体_kprcb，我们可以理解为它是一个扩展的kpcr",{"_index":2517,"title":{},"body":{"1015846":{}}}],["它的name成员就是：0x0001d5d8，接着找到这个地址查看模块名字，这里也是一个ascii字符串，所以从这个地址开始，遇见0x00停止寻找",{"_index":6556,"title":{},"body":{"1015828":{}}}],["它的内存分配是这样的",{"_index":2036,"title":{},"body":{"1015843":{}}}],["它的汇编代码如下",{"_index":3348,"title":{},"body":{"1015840":{}}}],["它的第一个成员也是一个结构体_kthread，我们同样可以在windbg中查看该结构体",{"_index":2506,"title":{},"body":{"1015846":{}}}],["它的第二个参数lpprocname可以是函数名也可以是序号，而它的原理也正可以表示导出表中的三张子表之间的关系",{"_index":6528,"title":{},"body":{"1015828":{}}}],["它表示着afx_pmsg",{"_index":438,"title":{},"body":{"1015822":{}}}],["它装载类型库就认识了ixxx接口",{"_index":3205,"title":{},"body":{"1015823":{}}}],["它认识idispatch接口",{"_index":3203,"title":{},"body":{"1015823":{}}}],["安装与配置",{"_index":10457,"title":{},"body":{"1015818":{}}}],["安装包依次打开，就找到了与sdk对应版本的wdk安装包，接着按步骤安装即可",{"_index":5453,"title":{},"body":{"1015847":{}}}],["安装好开发环境之后我们打开vs2017，新建项目并选择vc++下的wimdow",{"_index":5455,"title":{},"body":{"1015847":{}}}],["安装完成之后接着在windbg中按如下图所示填入符号表的目录即可加载",{"_index":9357,"title":{},"body":{"1015831":{}}}],["完成了这些之后别忘记还有一个cdb对象本身也需要释放，所以需要增加一个方法",{"_index":2612,"title":{},"body":{"1015823":{}}}],["完整代码",{"_index":5895,"title":{},"body":{"1015847":{}}}],["完整版算法见：http://en.cppreference.com/w/cpp/algorith",{"_index":11612,"title":{},"body":{"1015814":{}}}],["宏名标识符与左圆括号之前不允许有空白符，应紧接在一起",{"_index":2370,"title":{},"body":{"1015843":{}}}],["宏名称",{"_index":5521,"title":{},"body":{"1015847":{}}}],["宏定义",{"_index":2337,"title":{},"body":{"1015843":{}}}],["宏定义的注意事项",{"_index":2368,"title":{},"body":{"1015843":{}}}],["定义一个函数，其返回类型、函数名是必须要有的，参数列表是可有可无的，定义函数在函数体的最后一定需要使用return返回对应数据类型的数据",{"_index":1354,"title":{},"body":{"1015843":{}}}],["定义一个容器类的迭代器的方法有2种",{"_index":11705,"title":{},"body":{"1015814":{}}}],["定义了指向addvectorexceptionhandler函数的函数指针，因为veh异常处理在xp之前的系统中并没有，也就不存在这个函数，因此为了代码兼容性，我们不直接通过库调用，而是以动态加载dll的方式来获取函数地址，然后用定义的函数指针指向它，再调用函数指针就可以使用相应功能了",{"_index":4346,"title":{},"body":{"2949166":{}}}],["定义好函数之后，我们需要知道如何调用函数（使用函数），假设现在我们需要做一个加减法的程序，可以这样写",{"_index":1359,"title":{},"body":{"1015843":{}}}],["定义宏",{"_index":2385,"title":{},"body":{"1015843":{}}}],["定义异常处理函数vectexcephandler，根据其参数exceptioninfo.exceptionrecord.exceptioncode来获取异常状态码，如果是除0异常则通过两种方式来处理异常，一是通过exceptioninfo.contextrecord.eip来修改返回3环时的地址，以此来跳过异常处理的代码（eip+2是因为idi",{"_index":4347,"title":{},"body":{"2949166":{}}}],["定义新的类型（char",{"_index":2110,"title":{},"body":{"1015843":{}}}],["定义结构体类型的时候，直接定义变量",{"_index":2003,"title":{},"body":{"1015843":{}}}],["定位导出表",{"_index":6452,"title":{},"body":{"1015828":{}}}],["定长指令",{"_index":11842,"title":{},"body":{"1015817":{}}}],["定长指令与变长指令",{"_index":11814,"title":{},"body":{"1015817":{}}}],["实例化对象",{"_index":1027,"title":{},"body":{"1015822":{}}}],["实战分析",{"_index":2569,"title":{},"body":{"1015846":{}}}],["实操",{"_index":4145,"title":{},"body":{"1015820":{}}}],["实现readprocessmemory函数",{"_index":2426,"title":{},"body":{"1015846":{}}}],["实现临界区",{"_index":7502,"title":{},"body":{"1015833":{}}}],["实现临界区：进入",{"_index":7509,"title":{},"body":{"1015833":{}}}],["实现代码如下",{"_index":9839,"title":{},"body":{"1015818":{}}}],["实现任务切换",{"_index":9302,"title":{},"body":{"1015831":{}}}],["实现多接口",{"_index":3139,"title":{},"body":{"1015823":{}}}],["实现多接口需要手动去做一些改造，首先我们需要在idl文件中加入接口相关的信息，例如这里我加入一个检测的接口，并且接口函数只有一个检测功能",{"_index":3141,"title":{},"body":{"1015823":{}}}],["实现好接口函数之后你只需要编译即可",{"_index":3213,"title":{},"body":{"1015823":{}}}],["实现按钮功能",{"_index":799,"title":{},"body":{"1015822":{}}}],["实现端对端互相收发",{"_index":9973,"title":{},"body":{"1015818":{}}}],["实现类工厂对象",{"_index":2882,"title":{},"body":{"1015823":{}}}],["实现自动卸载",{"_index":2899,"title":{},"body":{"1015823":{}}}],["实现自动注册",{"_index":2894,"title":{},"body":{"1015823":{}}}],["实现自注册组件必须提供两个导出函数",{"_index":2896,"title":{},"body":{"1015823":{}}}],["实质上，createwindow只是一个3环的接口，最终调用的是位于win32k.sys中的0环函数。在0环中，会为窗口创建一个名为_window_object的结构体，每个窗口都有一个这样的结构体",{"_index":3971,"title":{},"body":{"3440655":{}}}],["实际上我们通过其他根据来看，例如下图所示的ce，对应地址处的指令确实变成了",{"_index":4798,"title":{},"body":{"3440657":{}}}],["实际上是限制扩展有效范围，大致如下",{"_index":9062,"title":{},"body":{"1015831":{}}}],["实际代码如下",{"_index":9940,"title":{},"body":{"1015818":{}}}],["实际代码编写",{"_index":10000,"title":{},"body":{"1015818":{}}}],["实际使用",{"_index":1254,"title":{},"body":{"1015822":{}}}],["实际使用也没有本质差别",{"_index":958,"title":{},"body":{"1015822":{}}}],["实际值",{"_index":5522,"title":{},"body":{"1015847":{}}}],["实际场景",{"_index":5372,"title":{},"body":{"1015825":{}}}],["实际物理内存",{"_index":6875,"title":{},"body":{"2949228":{}}}],["实际编写代码如下，在编写代码的过程中不要忘记偏移量+14再获取ip报文的信息",{"_index":10295,"title":{},"body":{"1015818":{}}}],["实际运行测试，发现我们可以很顺畅的在3环与0环进行通信",{"_index":5800,"title":{},"body":{"1015847":{}}}],["实验",{"_index":6771,"title":{},"body":{"1015831":{},"2949228":{}}}],["实验代码",{"_index":4810,"title":{},"body":{"3440657":{}}}],["客户/服务模型",{"_index":2828,"title":{},"body":{"1015823":{}}}],["客户与所有的组件交互方式不统一（如果组件进行了更新，就需要改代码",{"_index":2630,"title":{},"body":{"1015823":{}}}],["客户使用",{"_index":2765,"title":{},"body":{"1015823":{}}}],["客户使用多接口",{"_index":3164,"title":{},"body":{"1015823":{}}}],["客户使用属性",{"_index":3136,"title":{},"body":{"1015823":{}}}],["客户区坐标",{"_index":698,"title":{},"body":{"1015822":{}}}],["客户区域坐标",{"_index":625,"title":{},"body":{"1015822":{}}}],["客户区鼠标消息",{"_index":926,"title":{},"body":{"1015822":{}}}],["客户得到对象接口指针后，可以用指针调用接口的成员函数，还可以获得其他接口的指针，从而得到com对象的所有服务",{"_index":2910,"title":{},"body":{"1015823":{}}}],["客户端编程框架",{"_index":9863,"title":{},"body":{"1015818":{}}}],["客户端编程框架的步骤就简单了一些，只有六个步骤",{"_index":9864,"title":{},"body":{"1015818":{}}}],["客户通过com创建函数获取到com库，com库再通过dllgetclassobject获取组件，再通过组件获取类工厂对象接口指针，并用这个指针来调用各个方法",{"_index":2830,"title":{},"body":{"1015823":{}}}],["宸插簾寮",{"_index":4590,"title":{},"body":{"3440657":{}}}],["宸茬粡瀛樺湪鐨勬枃浠",{"_index":8176,"title":{},"body":{"1015833":{}}}],["容器",{"_index":11742,"title":{},"body":{"1015814":{}}}],["容器中各个元素的前后顺序是靠指针来维系的，每个元素都配备了",{"_index":11406,"title":{},"body":{"1015814":{}}}],["容器所支持的迭代器类别",{"_index":11741,"title":{},"body":{"1015814":{}}}],["容器：可容纳各种数据类型的数据结构",{"_index":11319,"title":{},"body":{"1015814":{}}}],["宽度",{"_index":11957,"title":{},"body":{"1015817":{}}}],["宽度（字节",{"_index":5995,"title":{},"body":{"1015828":{}}}],["寮傚父",{"_index":4576,"title":{},"body":{"3440657":{}}}],["寮傚父澶勭悊瀹屾瘯锛屾仮澶嶆墽琛",{"_index":4325,"title":{},"body":{"2949166":{}}}],["寮傚父澶勭悊绋嬪簭鐨勫湴鍧",{"_index":4446,"title":{},"body":{"2949166":{}}}],["寮傚父璁板綍",{"_index":4318,"title":{},"body":{"2949166":{}}}],["寮傚父璁板綍缁撴瀯浣",{"_index":4271,"title":{},"body":{"2949166":{}}}],["寮傚父绫诲瀷淇℃伅",{"_index":4701,"title":{},"body":{"3440657":{}}}],["寮傚父鍙戠敓鍦板潃锛岃〃绀哄紓甯稿彂鐢熸椂鐨勪綅缃",{"_index":4240,"title":{},"body":{"2949166":{}}}],["寮傚父鍙戠敓鏃剁殑绾跨▼涓婁笅鏂囩幆澧",{"_index":4320,"title":{},"body":{"2949166":{}}}],["寮傚父鏈澶勭悊锛岀户缁悳绱",{"_index":4323,"title":{},"body":{"2949166":{}}}],["寮傚父鐘舵�佺爜锛屽湪windows涓瘡涓�绉嶇姸鎬侊紙鍖呮嫭寮傚父锛夐兘鏈変竴涓姸鎬佺爜",{"_index":4234,"title":{},"body":{"2949166":{}}}],["寮傚父鐘舵�侊紝0琛ㄧずcpu寮傚父锛�1琛ㄧず杞欢妯℃嫙寮傚父锛�8琛ㄧず鍫嗘爤寮傚父",{"_index":4236,"title":{},"body":{"2949166":{}}}],["寮哄埗杞寲鐨勬帶鍒剁",{"_index":3081,"title":{},"body":{"1015823":{}}}],["寮�濮嬪鍒",{"_index":8672,"title":{},"body":{"1015833":{}}}],["寮�濮嬬敾绾",{"_index":7684,"title":{},"body":{"1015833":{}}}],["寰呭鐞嗚繛鎺ラ槦鍒楃殑鏈�澶ч暱搴︼細琛ㄧず闃熷垪涓渶澶氬悓鏃舵湁澶氬皯涓繛鎺ヨ姹",{"_index":9795,"title":{},"body":{"1015818":{}}}],["寰楀埌瀵硅薄id瀵瑰簲鐨勬帴鍙",{"_index":2797,"title":{},"body":{"1015823":{}}}],["寰楀埌褰撳墠妯″潡鐩綍锛屽綋鍓峞xe鎵�鍦ㄧ殑璺緞锛屽寘鍚玡xe鏂囦欢鍚",{"_index":7371,"title":{},"body":{"1015833":{}}}],["寰幆",{"_index":9858,"title":{},"body":{"1015818":{}}}],["寰幆閬嶅巻锛屽鏋滃湴鍧�涓�鑷村垯琛ㄧず鎵惧埌瀵瑰簲妯″潡鏉ワ紝灏辫繘琛屾柇閾",{"_index":8570,"title":{},"body":{"1015833":{}}}],["对cframwnd有个初步的认识",{"_index":35,"title":{},"body":{"1015822":{}}}],["对cs段的影响",{"_index":9049,"title":{},"body":{"1015831":{}}}],["对cwinapp有个初步的认识",{"_index":34,"title":{},"body":{"1015822":{}}}],["对gdi和dc有一定的理解",{"_index":590,"title":{},"body":{"1015822":{}}}],["对gdi的常用绘图函数有一个基本的了解",{"_index":701,"title":{},"body":{"1015822":{}}}],["对ss段的影响",{"_index":9052,"title":{},"body":{"1015831":{}}}],["对不可屏蔽中断没有影响",{"_index":9283,"title":{},"body":{"1015831":{}}}],["对于0环程序，如果wp=0，可以读写任意用户级物理页，只要线性地址有效",{"_index":9611,"title":{},"body":{"1015831":{}}}],["对于0环程序，如果wp=1，可以读取任意用户级物理页，但对于只读的物理页，则不能写",{"_index":9612,"title":{},"body":{"1015831":{}}}],["对于map容器来说返回的0就是不存在，1就是存在，单对于multimap容器来说返回0为不存在，返回大于0则表示存在",{"_index":11532,"title":{},"body":{"1015814":{}}}],["对于set容器来说返回的0就是不存在，1就是存在，单对于multiset容器来说返回0为不存在，返回大于0则表示存在",{"_index":11486,"title":{},"body":{"1015814":{}}}],["对于第一种情况我们可以在函数内使用完堆栈后，pop释放数据；对于第二种堆栈传参导致的堆栈不平衡，我们可以使用外平栈、内平栈的方法",{"_index":5389,"title":{},"body":{"1015825":{}}}],["对于软件断点，可以使用crc校验来进行检测；对于内存断点，可以创建一个线程来不断刷新pte的属性，以防止其被修改。而本篇要介绍的硬件断点比较难以防范，因为其不依赖于修改被调试进程的数据，所以也值得我们深入学习",{"_index":4909,"title":{},"body":{"3440657":{}}}],["对向导生成的对话框工程进行结构分析",{"_index":1022,"title":{},"body":{"1015822":{}}}],["对回车、换行设置特殊进程（仅用于派生类",{"_index":1285,"title":{},"body":{"1015822":{}}}],["对外提供的函数或者变量，定义成public，不能随意改动",{"_index":3424,"title":{},"body":{"1015840":{}}}],["对存入有响应的socket数组处理",{"_index":10016,"title":{},"body":{"1015818":{}}}],["对应",{"_index":6809,"title":{},"body":{"2949228":{}}}],["对应关系如下",{"_index":7119,"title":{},"body":{"1015833":{}}}],["对应反编码代码为",{"_index":1710,"title":{},"body":{"1015843":{}}}],["对应的全局链表",{"_index":6960,"title":{},"body":{"2949228":{}}}],["对引用做运算，就是对其指向的变量做运算，而不是对引用本身做运算",{"_index":3504,"title":{},"body":{"1015840":{}}}],["对引用赋值，是对其指向的变量赋值，而不是修改引用本身的值",{"_index":3503,"title":{},"body":{"1015840":{}}}],["对抓包来说比较重要的字段如下",{"_index":10375,"title":{},"body":{"1015818":{}}}],["对称加密：加密方和解密方使用同一个密钥；优点：加密解密过程简单，高效；缺点：有一方泄密了，则整个加密就失去了意义",{"_index":10424,"title":{},"body":{"1015818":{}}}],["对话框",{"_index":1020,"title":{},"body":{"1015822":{}}}],["对话框实际上就是一个窗口，它不仅可以接收消息，而且还可以被移动、关闭和在它的客户区域进行绘图；我们可以把它看成是一个大容器，在它上面能够放置各种各样的控件，使程序支持用户输入的手段更丰富",{"_index":1021,"title":{},"body":{"1015822":{}}}],["对象/库模块中添加xxxx.lib，最后就可以像使用c语言库一样使用它了",{"_index":8302,"title":{},"body":{"1015833":{}}}],["对象创建函数",{"_index":2836,"title":{},"body":{"1015823":{}}}],["对象拷贝",{"_index":3664,"title":{},"body":{"1015840":{}}}],["寻找物理地址",{"_index":9394,"title":{},"body":{"1015831":{}}}],["导入表",{"_index":6537,"title":{},"body":{"1015828":{}}}],["导入表与导出表不同，导出表只有一张，而导入表有很多张，每一张表对应着不同的依赖模块，导入表的结构如下，它一共有20字节",{"_index":6539,"title":{},"body":{"1015828":{}}}],["导入表的每张表之后都跟着另外一张表，直到遇见20个0x00结束，如下图所示，一共有10张表",{"_index":6552,"title":{},"body":{"1015828":{}}}],["导出表",{"_index":6450,"title":{},"body":{"1015828":{}}}],["封装",{"_index":3293,"title":{},"body":{"1015840":{}}}],["将",{"_index":8361,"title":{},"body":{"1015833":{}}}],["将.dll和.lib放到项目目录下",{"_index":8360,"title":{},"body":{"1015833":{}}}],["将0x11223344存入edi指定的内存地址中",{"_index":5299,"title":{},"body":{"1015825":{}}}],["将0xc0300000按10",{"_index":9456,"title":{},"body":{"1015831":{}}}],["将ap中的高2位赋值给cs，低4位直接赋值给eip",{"_index":11982,"title":{},"body":{"1015817":{}}}],["将c++对象变成com对象",{"_index":2633,"title":{},"body":{"1015823":{}}}],["将c++对象打包到dll中",{"_index":2591,"title":{},"body":{"1015823":{}}}],["将c++对象打包到dll中，使用的还是之前的代码，不过我们需要改造一下，如下图所示（创建win32项目的时候选择dll项目",{"_index":2593,"title":{},"body":{"1015823":{}}}],["将c++对象改为com对象，需要调用com库创建对象，实现接口的引用计数，类工厂需要使用标准的iclassfactory接口来实现dll的动态卸载和对象自注册",{"_index":2634,"title":{},"body":{"1015823":{}}}],["将c盘下的test文件夹重命名为test1，也可以理解为以新的名称移动到新的目录下",{"_index":8087,"title":{},"body":{"1015833":{}}}],["将eax的值设为1",{"_index":6649,"title":{},"body":{"1933380":{}}}],["将thread.servicetable指向keservicedescriptortableshadow，此时两个表都可见",{"_index":3918,"title":{},"body":{"3440655":{}}}],["将一个float型转化为内存存储格式的步骤",{"_index":1593,"title":{},"body":{"1015843":{}}}],["将一系列点用线段连接起来",{"_index":710,"title":{},"body":{"1015822":{}}}],["将两个值填入我们的excel表格中，再将其用颜色标记一下即可",{"_index":1431,"title":{},"body":{"1015843":{}}}],["将代码进行编译执行，由于使用了getchar函数所以程序会先停止，通过windbg来看一下vad树，然后再回到程序，回车一下，再来看vad树",{"_index":6758,"title":{},"body":{"2949228":{}}}],["将函数放在结构体内，就不需要我们再去写传参、再去使用指针的调用方式了，因为这些工作编译器帮我们完成了，而本质上这与指针调用没有区别",{"_index":3311,"title":{},"body":{"1015840":{}}}],["将创建的映射对象映射到调用进程的地址空间（物理页与线性地址进行关联），执行成功返回共享映射对象的首地址指针",{"_index":6821,"title":{},"body":{"2949228":{}}}],["将原始数据包通过网络发送出去",{"_index":10107,"title":{},"body":{"1015818":{}}}],["将客户端socket集合清零",{"_index":10052,"title":{},"body":{"1015818":{}}}],["将成员函数声明为",{"_index":3654,"title":{},"body":{"1015840":{}}}],["将所有的socket装进一个数组中",{"_index":10014,"title":{},"body":{"1015818":{}}}],["将所需的内存数据映射到当前进程的地址空间中",{"_index":3919,"title":{},"body":{"3440655":{}}}],["将段选择子拆分：0x20",{"_index":9113,"title":{},"body":{"1015831":{}}}],["将等待对象的地址作为传参，调用kewaitforsingleobject函数，进入关键循环",{"_index":10604,"title":{},"body":{"2424889":{}}}],["将编译好的驱动程序、kdmmanager、debugview拖到xp虚拟机中（在虚拟机中去调试驱动比实体机中方便），使用kdmmanager加载驱动，按下图所示步骤依次进行，于此同时也要打开debugview，同时开启监听内核的选项",{"_index":5480,"title":{},"body":{"1015847":{}}}],["将该值代入函数地址表对应索引，获得函数地址",{"_index":6536,"title":{},"body":{"1015828":{}}}],["将这两个文件夹存放好，在vc6中打开tol",{"_index":10113,"title":{},"body":{"1015818":{}}}],["将这个二进制格式的实数的小数点左移或者右移n位，直到小数点移动到第一个有效数字的右边",{"_index":1595,"title":{},"body":{"1015843":{}}}],["将这个结果给到第一个节表成员的characteristics即可。最后因为所有节合并为一了，所以我们要修改numberofsections的值为1",{"_index":6448,"title":{},"body":{"1015828":{}}}],["将这几个dword类型的成员打印一下看看，通过getstartupinfo函数来获取信息",{"_index":7285,"title":{},"body":{"1015833":{}}}],["将页面空间转到设备空间，就是通过映射模式，在设备空间里的单位是像素，而在逻辑坐标内则是我们自定义，这取决于映射模式",{"_index":660,"title":{},"body":{"1015822":{}}}],["小于",{"_index":1745,"title":{},"body":{"1015843":{}}}],["小于等于",{"_index":1746,"title":{},"body":{"1015843":{}}}],["小值(对齐参数",{"_index":2039,"title":{},"body":{"1015843":{}}}],["小技巧",{"_index":8256,"title":{},"body":{"1015833":{}}}],["小数部分0.25不断的乘以2，直到结果小数点为0，例如：1.0，而如果大于1.0则二进制位也为1，其余都是0，这里我们以0.4为例子",{"_index":1590,"title":{},"body":{"1015843":{}}}],["小端模式：数据低位在低位地址中，数据高位在高位地址中",{"_index":5221,"title":{},"body":{"1015825":{}}}],["尖括号，自己定义的文件用",{"_index":2401,"title":{},"body":{"1015843":{}}}],["就是",{"_index":230,"title":{},"body":{"1015822":{}}}],["尾数直接从前往后放所以尾数是：00",{"_index":1623,"title":{},"body":{"1015843":{}}}],["尾数部分(23",{"_index":1615,"title":{},"body":{"1015843":{}}}],["尾数部分：经过第一步转换后",{"_index":1621,"title":{},"body":{"1015843":{}}}],["局部变量",{"_index":1477,"title":{},"body":{"1015843":{}}}],["局部变量在使用前必须要赋值，因为系统不会初始化它，而只有在其赋值时才会分配内存",{"_index":1483,"title":{},"body":{"1015843":{}}}],["局部变量的内存是在堆栈中分配的，程序执行时才分配，不执行则不会分配，我们无法预知程序何时执行，也就意味着我们无法知道局部变量的内存地址",{"_index":1479,"title":{},"body":{"1015843":{}}}],["屏幕坐标",{"_index":626,"title":{},"body":{"1015822":{}}}],["属性",{"_index":1261,"title":{},"body":{"1015822":{},"1015831":{}}}],["属性探测",{"_index":8920,"title":{},"body":{"1015831":{}}}],["属性（attr）是pdpe、pde、pte三个属性进行and运算出来的结果，如果是10",{"_index":9554,"title":{},"body":{"1015831":{}}}],["工程的创建及第一个程序",{"_index":4108,"title":{},"body":{"1015820":{}}}],["左移",{"_index":1769,"title":{},"body":{"1015843":{}}}],["左移了三次，指数为3,3的二进制是11，但是这里要减去1",{"_index":1631,"title":{},"body":{"1015843":{}}}],["左移：各二进制位全部左移若干位，高位丢弃，低位补0",{"_index":5126,"title":{},"body":{"1015825":{}}}],["差异",{"_index":10554,"title":{},"body":{"2424889":{}}}],["已修改但不写出",{"_index":6976,"title":{},"body":{"2949228":{}}}],["已知的注入方式",{"_index":8426,"title":{},"body":{"1015833":{}}}],["带\"*\"号的变量我们称之为指针类型，例如",{"_index":2075,"title":{},"body":{"1015843":{}}}],["带参数的宏：#def",{"_index":2350,"title":{},"body":{"1015843":{}}}],["常用函数",{"_index":8862,"title":{},"body":{"1015850":{}}}],["常用功能",{"_index":10103,"title":{},"body":{"1015818":{}}}],["常用汇编指令",{"_index":5234,"title":{},"body":{"1015825":{}}}],["常用的内核内存函数",{"_index":5544,"title":{},"body":{"1015847":{}}}],["常用的加密方式",{"_index":10423,"title":{},"body":{"1015818":{}}}],["常用的数据类型在win32中都重新起了名字",{"_index":7161,"title":{},"body":{"1015833":{}}}],["常用的方法",{"_index":1151,"title":{},"body":{"1015822":{}}}],["常用的绘图函数",{"_index":703,"title":{},"body":{"1015822":{}}}],["常见的irp类型与其对应的3环下的函数及作用如下所示",{"_index":5682,"title":{},"body":{"1015847":{}}}],["常见的几种调用约定",{"_index":2293,"title":{},"body":{"1015843":{}}}],["常见的异常处理程序如下",{"_index":9592,"title":{},"body":{"1015831":{}}}],["平衡堆栈",{"_index":2295,"title":{},"body":{"1015843":{}}}],["平衡堆栈有两个方法",{"_index":5386,"title":{},"body":{"1015825":{}}}],["平衡堆栈返回",{"_index":6653,"title":{},"body":{"1933380":{}}}],["并且在windbg中查看nt!ntopenprocess函数，也可以看到它的指令被我们成功覆盖",{"_index":5967,"title":{},"body":{"1015847":{}}}],["并且它可以详细的记录使用了dll中的哪些函数",{"_index":8375,"title":{},"body":{"1015833":{}}}],["并且我们会发现即使dispatchmessage函数的唯一参数msg结构体，发挥了巨大的作用，该结构体里有窗口句柄、消息类型、消息参数等内容，具体的我们看如下定义",{"_index":4024,"title":{},"body":{"3440655":{}}}],["并且我们可以看见在执行return语句之前，调用了一个名为_local_unwind2的函数（这个函数翻译成中文就是局部展开的意思，没有别的含义）。我们可以继续跟进_local_unwind2，会发现它调用了一个函数，即[ebx+esi*4+8]，通过寄存器的值计算，我们查看对应地址为_finally块中的代码地址，这也就解释了为什么可以在return之前执行_finally块中的地址了（即_finally块中的代码一定得到执行",{"_index":4469,"title":{},"body":{"2949166":{}}}],["并且我们可以跟进eip，你就会发现sysenter指令进入0环执行的就是内核模块的kifastcallentry函数",{"_index":2490,"title":{},"body":{"1015846":{}}}],["并且我们继续使用上面的汇编指令去运行就会发现直接出错了",{"_index":9142,"title":{},"body":{"1015831":{}}}],["并且我们观察栈的内容，会发现确实是如我们之前所看的长调用权限提升的栈图一样，将ss、esp、cs、返回地址压入栈中",{"_index":9230,"title":{},"body":{"1015831":{}}}],["并且我们通过代码可以看见这就是一个u_long类型的地址，我们可以使用函数inet_addr来按照网络字节序转换",{"_index":9778,"title":{},"body":{"1015818":{}}}],["并其提供了所有类型赋值运算符的重载，可以采用下面方式直接赋值",{"_index":3235,"title":{},"body":{"1015823":{}}}],["并发与同步",{"_index":6630,"title":{},"body":{"1933380":{}}}],["并非所有线程都需要消息队列，只有gui线程才会拥有消息队列",{"_index":3921,"title":{},"body":{"3440655":{}}}],["序列号",{"_index":10369,"title":{},"body":{"1015818":{}}}],["应用",{"_index":5546,"title":{},"body":{"1015847":{}}}],["应用与驱动通信",{"_index":5632,"title":{},"body":{"1015847":{}}}],["应用场景",{"_index":2377,"title":{},"body":{"1015843":{}}}],["建立调试关系：创建进程",{"_index":4623,"title":{},"body":{"3440657":{}}}],["建立调试关系：附加进程",{"_index":4758,"title":{},"body":{"3440657":{}}}],["建议赋值方式",{"_index":1575,"title":{},"body":{"1015843":{}}}],["开发环境",{"_index":5441,"title":{},"body":{"1015847":{}}}],["开头几个判断就是判读你的消息类型，当都没有的情况下则表示这是一个标准消息",{"_index":524,"title":{},"body":{"1015822":{}}}],["异常",{"_index":4225,"title":{"2949166":{}},"body":{"1015827":{},"1015831":{},"1015832":{}}}],["异常产生后，首先是要记录异常信息（异常的类型、异常发生的位置等），然后要寻找异常的处理函数，我们称为异常的分发，最后找到异常处理函数并调用，我们称为异常处理。我们后续的学习，也是围绕异常的、分发、处理",{"_index":4227,"title":{},"body":{"2949166":{}}}],["异常分发与处理",{"_index":4266,"title":{},"body":{"2949166":{}}}],["异常可以发生在用户空间，也可以发生在内核空间。无论是cpu异常还是模拟异常，无论是用户空间异常还是内核空间异常，最终都要通过kidispatchexception函数进行分发，理解这个函数是学好异常的关键，这个函数比较复杂，我们以内核、用户两个角度来分析学习",{"_index":4267,"title":{},"body":{"2949166":{}}}],["异常可以简单分为2类，即cpu产生的异常和软件模拟产生的异常，如下两张图所示，我们可以看见第一张图中进行了除法运算，cpu检测到除数为0，就产生了异常；第二张图中使用了throw关键词，通过软件模拟主动产生了异常",{"_index":4229,"title":{},"body":{"2949166":{}}}],["异常处理",{"_index":9590,"title":{},"body":{"1015831":{}}}],["异常处理函数会查找进程的vad树，并发现该文件的内存保护属性为写拷贝",{"_index":7054,"title":{},"body":{"2949228":{}}}],["异常处理（缺页、in",{"_index":11219,"title":{},"body":{"1703937":{}}}],["异常如果发生在内核层，处理起来比较简单，因为异常处理函数也在0环，不用切换堆栈，但是如果异常发生在3环，就意味着必须要切换堆栈，回到3环执行异常处理函数。这个堆栈切换的处理方式与用户apc的执行过程几乎是一样的，惟一的区别就是执行用户apc时返回3环后执行的函数是kiuserapcdispatcher，而异常处理时返回3环后执行的函数是kiuserexceptiondispatcher。因此本章节不再对堆栈的切换进行了解，可以自行复习一下用户apc执行过程的笔记",{"_index":4302,"title":{},"body":{"2949166":{}}}],["异常来自于cpu本身，是cpu主动产生的",{"_index":9587,"title":{},"body":{"1015831":{}}}],["异常的处理流程",{"_index":4775,"title":{},"body":{"3440657":{}}}],["异常记录",{"_index":4228,"title":{},"body":{"2949166":{}}}],["异常通常是cpu在执行指令时检测到的某些错误，比如除0、访问无效页面等",{"_index":9584,"title":{},"body":{"1015831":{}}}],["异或",{"_index":1772,"title":{},"body":{"1015843":{}}}],["异或运算：不一样时则为1",{"_index":5124,"title":{},"body":{"1015825":{}}}],["引用必须赋初始值，且只能指向一个变量，从一而终（专一",{"_index":3502,"title":{},"body":{"1015840":{}}}],["引用类型",{"_index":3484,"title":{},"body":{"1015840":{}}}],["引用类型就是一个弱化了的指针；个人理解：引用类型就是一个*p",{"_index":3505,"title":{},"body":{"1015840":{}}}],["引用类型就是变量的别名，其在初始化时必须要赋值",{"_index":3485,"title":{},"body":{"1015840":{}}}],["弹框调用如下",{"_index":7178,"title":{},"body":{"1015833":{}}}],["当",{"_index":11962,"title":{},"body":{"1015817":{}}}],["当a进程的1线程挂靠b进程后，apc队列中存储的却仍然是原来的apc，那么如果某个apc函数要读取一个地址为0x12345678的数据，读到的将是b进程的地址空间，这样逻辑就错误了",{"_index":10807,"title":{},"body":{"2424869":{}}}],["当cf位为0（[ecx]为1）则跳转，当cf位为1（[ecx]为0）则返回",{"_index":6674,"title":{},"body":{"1933380":{}}}],["当cpu访问某个无效页时，会产生缺页异常，此时cpu会将引起异常的线性地址存放至cr2寄存器中，以便操作系统处理完缺页异常后，返回到原本执行的位置继续执行",{"_index":9614,"title":{},"body":{"1015831":{}}}],["当g位的值为0时，limit最大值就是0xfffff，按32位书写就是0x000fffff；当g位的值为1时，limit的单位就是4kb，它的取值公式就是：（根据段描述符中拼接出来的limit值（20位",{"_index":9027,"title":{},"body":{"1015831":{}}}],["当i<=a进入第一层while循环，j<=i进入第二层while循环，在这里进入第二层循环时实际上如果没有break，则会输出1遍0",{"_index":1864,"title":{},"body":{"1015843":{}}}],["当p位为0时（下图中的第二个结构），第35",{"_index":9537,"title":{},"body":{"1015831":{}}}],["当ret指令之后，栈顶指针无法回到传参前的值",{"_index":5385,"title":{},"body":{"1015825":{}}}],["当s位的值为1时表示当前为代码或数据段描述符，那么type域的值就是如下这张表格",{"_index":9037,"title":{},"body":{"1015831":{}}}],["当t.ag",{"_index":3529,"title":{},"body":{"1015840":{}}}],["当veh处理异常结束之后，我们可以注销veh，即如下这个函数",{"_index":4342,"title":{},"body":{"2949166":{}}}],["当zf位为1（[ecx]为0）则跳转，zf位为0（[ecx]为1）则使用降温指令（pause），短时间内让cpu功率降低",{"_index":6676,"title":{},"body":{"1933380":{}}}],["当一个变量是int类型的，而我们引用类型却是一个其他类型的，会怎么样呢",{"_index":3518,"title":{},"body":{"1015840":{}}}],["当一个新的线程开始执行，初始化程序会给_kthread结构体的quantum成员赋予初始值，该值的大小由_kprocess结构体的threadquantum成员决定。如下图所示我们找一个进程来看下结构体的threadquantum成员，它的值为6，也就表示当该进程的线程开始执行，初始化程序会将该值赋予_kthread结构体的quantum成员，该值就表示当前线程时间片的大小",{"_index":11227,"title":{},"body":{"1703937":{}}}],["当一个消息产生时，肯定是需要通过消息监控来知道由消息产生了，然后再由监控的程序存储到窗口对应线程的消息队列中",{"_index":3929,"title":{},"body":{"3440655":{}}}],["当一个进程创建或者打开一个内核对象，都会获得一个句柄，通过句柄我们可以访问到内核对象，也就表示我们这里学习的句柄是对应一个内核对象的，并不是我们之前所了解的窗口之类的3环句柄",{"_index":8686,"title":{},"body":{"1933378":{}}}],["当一个进程试图修改映射文件时，如果该文件的内存保护属性是execute_writecopy，操作系统会使该进程指向一个新的物理页，该物理页保存着映射文件的副本，这样进程对映射文件的修改不会影响真正的映射文件，这种保护机制可用于防止对系统函数进行hook等操作",{"_index":6864,"title":{},"body":{"2949228":{}}}],["当一个进程试图对受到写拷贝保护的文件进行写操作时，操作系统会检查pte的r/w属性",{"_index":7051,"title":{},"body":{"2949228":{}}}],["当不可屏蔽中断产生时，cpu会在idt表中找到下标为0x2的门，通过这个门就可以找到中断处理程序；不可屏蔽中断不受eflag寄存器中的if位的影响，当产生时，cpu必须处理",{"_index":9571,"title":{},"body":{"1015831":{}}}],["当你准备好环境之后，设置window",{"_index":8968,"title":{},"body":{"1015831":{}}}],["当你想要使用这个地址去寻找pdt表时，与之前10",{"_index":9531,"title":{},"body":{"1015831":{}}}],["当你手动解析某一个指令的时候发现出现如下这三种情况，有",{"_index":12050,"title":{},"body":{"1015817":{}}}],["当你执行call指令时，它首先会向栈中压入当前call指令的下一行地址，这个地址也称之为返回地址",{"_index":9161,"title":{},"body":{"1015831":{}}}],["当你添加的时候你就会发发型，这个方法名会自动赋予id，这个你可以自定义，也可以不用管它",{"_index":3212,"title":{},"body":{"1015823":{}}}],["当你调用的内核函数返回结果不是status_success，那就说明函数在执行时遇到了问题，具体的问题可以根据返回值在ntstatus.h头文件中去寻找",{"_index":5531,"title":{},"body":{"1015847":{}}}],["当你配置好之后，可以创建你的第一个qt应用并直接启动它",{"_index":4107,"title":{},"body":{"1015820":{}}}],["当内容发生变化就会触发",{"_index":1121,"title":{},"body":{"1015822":{}}}],["当函数执行完成之后我们需要将之前压入堆栈的寄存器还原，分别pop",{"_index":1446,"title":{},"body":{"1015843":{}}}],["当函数有很多参数的时候，不止8个，那我们使用通用寄存器去传参，明显不够用，所以我们需要使用堆栈帮助我们传递参数",{"_index":5375,"title":{},"body":{"1015825":{}}}],["当初的物理内存比较小，4个字节的pte成员就够了，页的大小是4kb，所以一个页能存储1024个pte（也就是2的10次方），此时10",{"_index":9506,"title":{},"body":{"1015831":{}}}],["当前参数指针【父类指针",{"_index":3588,"title":{},"body":{"1015840":{}}}],["当前指令长度",{"_index":11911,"title":{},"body":{"1015817":{}}}],["当前进程的名字",{"_index":10996,"title":{},"body":{"1703937":{}}}],["当前进程的活动线程数量",{"_index":10999,"title":{},"body":{"1703937":{}}}],["当发生这种缺页异常时，异常处理程序（例如e号中断）会根据pte的描述（即12",{"_index":7029,"title":{},"body":{"2949228":{}}}],["当可屏蔽中断产生时，cpu会在idt表中找到下标为0x30/0x31",{"_index":9579,"title":{},"body":{"1015831":{}}}],["当学习完这部分的内容之后，我们对10",{"_index":9474,"title":{},"body":{"1015831":{}}}],["当定时器启用时，第四个等待块的nextwaitblock成员就会指向第一个等待块的地址，同样第一个等待块的nextwaitblock成员就会指向第四个等待块的地址",{"_index":10622,"title":{},"body":{"2424889":{}}}],["当客户端和服务器端连起来之后，才是会进入传输",{"_index":9713,"title":{},"body":{"1015818":{}}}],["当对智能指针取地址时(&运算符操作)，要确保智能指针为null，因为&是要返回内部的com接口指针的，如果不为null，则旧的com接口指针将没有执行release而直接赋值了一个旧的com接口指针",{"_index":3256,"title":{},"body":{"1015823":{}}}],["当对象在main函数（堆栈）中创建，在return之前调用执行；当对象在全局变量区，则会在应用程序退出之前调用",{"_index":3373,"title":{},"body":{"1015840":{}}}],["当异常触发之后，调试器会收到异常调试事件，因此就需要判断调试事件的类型，异常类型的调试事件结构体为_exception_debug_info（调试循环时即可获取：_debug_event.u.exception），该结构体的第一个成员为exceptionrecord，其也是一个结构体exception_reç",{"_index":4882,"title":{},"body":{"3440657":{}}}],["当我们使用waitforsingleobject函数时，进入内核函数ntwaitforsingleobject，这个内核函数会通过3环用户提供的句柄找到等待对象的内核地址；然后判断等待对象的第一个成员是否是_dispatcher_header，如果是的话则直接使用；如果不是的话，则去等待对象中找到嵌入的_dispatcher_header对象。最后再将找到的对象地址作为参数调用kewaitforsingleobject函数，该函数核心功能会在后续章节中学习",{"_index":10556,"title":{},"body":{"2424889":{}}}],["当我们使用如下图所示的函数创建时，会在内核层创建一个结构体，而我们该如何管理这些结构体呢？或者说如何使用这些结构体呢？其实很好解决，我们可以通过内核结构体地址来管理，但是这样做存在问题：应用层很有可能操作不当导致修改啦内核结构体的地址，我们写应用层代码都知道访问到一个不存在的内存地址就会报错，而如果访问到一个内核地址是错误的，微软系统下则直接会蓝屏",{"_index":7306,"title":{},"body":{"1015833":{}}}],["当我们使用该函数来设置了画笔，我们还需要保存一个原来的画笔，在使用完之后恢复原画笔（只要你使用了selectobject方法就一定要保存原内容最后还原），这是因为",{"_index":840,"title":{},"body":{"1015822":{}}}],["当我们依次进行注册、运行、停止、卸载，可以清晰的在debugview中观察到我们驱动程序所输出的内容，并且我们也知道了函数执行的流程：当点击run按钮时进入驱动程序入口函数，当点击stop按钮时进入自定义的驱动程序卸载函数",{"_index":5481,"title":{},"body":{"1015847":{}}}],["当我们创建一个控制台进程时，会发现子进程和父进程都在同一个命令行控制台中",{"_index":7361,"title":{},"body":{"1015833":{}}}],["当我们创建对象调用的时候却无法编译",{"_index":3432,"title":{},"body":{"1015840":{}}}],["当我们去调用一个dll文件，使用其中的方法，需要使用到getprocaddress函数去获取函数的地址然后调用",{"_index":6522,"title":{},"body":{"1015828":{}}}],["当我们存储数据的时候，需要知道自己存储的数据的数据宽度是什么，假设你要存储一个1，要存入字节中，那么以二进制的表示即为：000",{"_index":5089,"title":{},"body":{"1015825":{}}}],["当我们将context结构体的contextflags成员的值设置为context_integer时则可以获取edi、esi、ebx、edx、ecx、eax这些寄存器的值",{"_index":7472,"title":{},"body":{"1015833":{}}}],["当我们想用variant来保存long类型的时候可以这样写",{"_index":3058,"title":{},"body":{"1015823":{}}}],["当我们想要打印一个变量、结构体等等的数据宽度该怎么办？这里我们需要使用到一个关键词sizeof，其使用方法如下",{"_index":2025,"title":{},"body":{"1015843":{}}}],["当我们执行mov类似指令时，cpu会根据段选择子的值选择gdt、ldt这两张表中的一张表进行查询，在表中查询出段描述符给到段寄存器，但是我们知道段描述符只有64位，而除了段选择子本身的值外，段寄存器还需要80位，所以这里64位是如何变成80位的呢？这就需要我们去了解段描述符的相关属性",{"_index":9019,"title":{},"body":{"1015831":{}}}],["当我们执行如上类似指令时，cpu会根据ax的值选择gdt、ldt这两张表中的一张表进行查询，在表中查询出对应的信息给到段寄存器",{"_index":8961,"title":{},"body":{"1015831":{}}}],["当我们把鼠标点击左边窗口关闭按钮，为什么它会关闭，这个关闭（坐标、左右键...）操作系统会封装到结构体里（消息），那么这个消息如何精确的传递给对应进程的线程呢",{"_index":7697,"title":{},"body":{"1015833":{}}}],["当我们点击鼠标的时候，或者当我们按下键盘的时候，操作系统都要把这些动作记录下来，存储到一个结构体中，这个结构体就是消息",{"_index":7693,"title":{},"body":{"1015833":{}}}],["当我们设置为该熟悉时，则多进程之间读取的是同一块物理页，但是当进程a写入的时候则会将这份物理页拷贝为一个新的物理页进行写",{"_index":8282,"title":{},"body":{"1015833":{}}}],["当我们调用print1的时候就会发现无法编译",{"_index":3422,"title":{},"body":{"1015840":{}}}],["当我们进入ntdebugactiveprocess函数时，我们可以观察到在将被调试进程与调试对象关联之前，会调用一个名为_dbgkppostfakeprocesscreatemessages的函数",{"_index":4769,"title":{},"body":{"3440657":{}}}],["当我们进入这个函数后，我们发现它调用了另一个同名函数，位于ntdll.dll模块中",{"_index":4531,"title":{},"body":{"3440657":{}}}],["当我们配置好驱动开发环境及项目之后，可以创建代码文件，但需要注意的是我们在学习阶段时候建议代码文件使用c语言，这样编译器就不会进行太多的优化，也便于我们调试",{"_index":5463,"title":{},"body":{"1015847":{}}}],["当执行完内核apc函数时，则会将kernelapcinprogress设为0，然后再进行判断是否有下一个需要内核apc，如果有的话就重复上面的步骤",{"_index":10912,"title":{},"body":{"2424869":{}}}],["当找到中断门描述符后，cpu还是会通过中断门描述符里的段选择子，去gdt表中找到对应的段描述符，段描述符的基址加上当前中断门描述符的段内偏移就是需要跳转代码段的地址。所以说中断门的执行会查找两张表，先查找idt表，再查找gdt表",{"_index":9268,"title":{},"body":{"1015831":{}}}],["当指令中出现内存操作对象的时候，就需要在操作码后面附加一个字节来进行补充说明，这个字节被称为modr/m，其只有一个字节宽度，但如果你看pdf官方文档中那个表的话就会发现其有两个参数，这也正是它复杂的地方",{"_index":11996,"title":{},"body":{"1015817":{}}}],["当操作系统将物理页上的数据保存到硬盘上时，也将该线性地址对应物理页的pte的属性位p位设位了0。一旦该线性地址再次被访问，由于p位为0，则会触发缺页异常。那么操作系统是如何处理的呢？当p位为0时，此时的pte被称作无效pte，有以下四种情形",{"_index":7024,"title":{},"body":{"2949228":{}}}],["当操作系统检测到进程尝试向只读的物理页写入数据时，会触发异常并跳转到异常处理函数",{"_index":7053,"title":{},"body":{"2949228":{}}}],["当文件过大时，使用内存映射文件的方式，性能相对于普通i/o的访问要好很多",{"_index":8227,"title":{},"body":{"1015833":{}}}],["当有多个veh时，这些veh的_veh_registration结构体串联组成一个双向链表。在ntdll.dll模块中，全局变量rtlpcalloutentrylist指向该链表的链表头（在0环中，则是通过fs:[0]找到exceptionlist再找到seh的链表头",{"_index":4341,"title":{},"body":{"2949166":{}}}],["当满足rva地址大于等于节.virtualaddress和rva地址小雨等于节.virtualaddress加上当前节内存对齐后的大小时，就表示rva地址在该节中",{"_index":6337,"title":{},"body":{"1015828":{}}}],["当然了，在这里我们的是局部变量，你可以不使用close函数去释放这个，这是因为在当前函数执行完之后析构函数会帮我们释放，而如果你是在堆中去创建的话就一定要手动的去写",{"_index":1259,"title":{},"body":{"1015822":{}}}],["当然除了嵌套分支语句也可以嵌套循环语句，具体怎么玩还是看你具体需求，例如我这段代码",{"_index":1860,"title":{},"body":{"1015843":{}}}],["当然，你也可以安装phpstudy等集成环境",{"_index":8748,"title":{},"body":{"1015850":{}}}],["当然，你创建一个新的文件肯定不能就结束了，是要写东西进去的，可以使用write函数去写入",{"_index":1257,"title":{},"body":{"1015822":{}}}],["当用户单击或双击鼠标时通知父窗口",{"_index":1144,"title":{},"body":{"1015822":{}}}],["当直接使用函数名去寻找时，它的步骤是这样的",{"_index":6530,"title":{},"body":{"1015828":{}}}],["当直接使用序号去寻找时，它的步骤是这样的",{"_index":6534,"title":{},"body":{"1015828":{}}}],["当窗口关闭的时候程序都会调用一个虚函数cmainwodw:postncdestroy，这个函数是cframewnd的，其默认就是一个del",{"_index":585,"title":{},"body":{"1015822":{}}}],["当线程从用户层进入内核层时，要保留原来的运行环境，比如各种寄存器，栈的位置等等（trap_frame），然后切换成内核的栈，如果正常返回，恢复栈环境即可",{"_index":10919,"title":{},"body":{"2424869":{}}}],["当线程将自己挂入等待队列后，需要等待另一个线程将自己唤醒（设置等待对象信号signalstate>0），此时这个线程会根据其设置的等待对象waitlisthead链着的等待块，给所有等待块的所属线程一次临时复活的机会；这个临时复活意思是将这些线程从等待链表上摘除，但是依旧挂在等待网上，所以被称作临时复活",{"_index":10660,"title":{},"body":{"2424889":{}}}],["当线程调用win32k.sys提供的图形界面函数时，线程结构体_kthread中的成员win32thread会指向一个名为_threadinfo的结构体。在该结构体中有一个成员messagequeue，即消息队列，其中包含7组队列（仅适用于旧版reactos），用于处理不同类型的消息。如下3个是比较常见的消息队列",{"_index":3973,"title":{},"body":{"3440655":{}}}],["当线程进入0环时，fs:[0]指向的就不再是teb了，而变成了_kpcr；每个cpu（每核）都有一个_kpcr结构体，该结构体中存储了cpu本身需要用到的一些重要数据：如gdt、idt以及线程相关的一些信息",{"_index":11050,"title":{},"body":{"1703937":{}}}],["当该值不为空的情况下，则表示当前内存为mapped类型，即映射了其他类型的文件（dll、exe等）在内存中，我们就可以跟进对应的结构体_file_object，通过其成员filename知道映射文件的描述信息",{"_index":6714,"title":{},"body":{"2949228":{}}}],["当选择发生变化时防止列表框被更新，可发送消息改变该风格",{"_index":1150,"title":{},"body":{"1015822":{}}}],["当通过门，权限不变时，只会push两个值：cs和返回地址，新的cs的值由调用门决定",{"_index":9248,"title":{},"body":{"1015831":{}}}],["当通过门，权限改变的时候，会push四个值：ss，esp，cs，返回地址，新的cs由调用门决定，新的ss和esp由tss提供（后面会讲",{"_index":9249,"title":{},"body":{"1015831":{}}}],["当需要一个容器能够存储100个2个字节的数据，你会怎么做",{"_index":1977,"title":{},"body":{"1015843":{}}}],["当需要一个容器能够存储1个字节，你会怎么做？使用char",{"_index":1974,"title":{},"body":{"1015843":{}}}],["当需要一个容器能够存储4个字节，你会怎么做",{"_index":1975,"title":{},"body":{"1015843":{}}}],["当需要一个容器能够存储5个数据，这5个数据中有1字节的，2字节的有10字节的...你会怎么做",{"_index":1979,"title":{},"body":{"1015843":{}}}],["形式一：立即数",{"_index":5200,"title":{},"body":{"1015825":{}}}],["形式三：[寄存器+立即数",{"_index":5210,"title":{},"body":{"1015825":{}}}],["形式二：[寄存器",{"_index":5204,"title":{},"body":{"1015825":{}}}],["形式五：[寄存器+寄存器*{1,2,4,8}+立即数",{"_index":5216,"title":{},"body":{"1015825":{}}}],["形式四：[寄存器+寄存器*{1,2,4,8",{"_index":5213,"title":{},"body":{"1015825":{}}}],["往下继续看，这里就是获取当前进程结构体地址与被调试进程结构体地址进行对比，即判断是否存在自己调试自己的情况，如果存在则跳转走。以及判断了被调试进程是否是初始化系统进程，如果是的话也跳转走。这里其实也就说明了两种无法继续调试的条件",{"_index":4540,"title":{},"body":{"3440657":{}}}],["很多人对win32的认识是错误的，他们认为win32就是画界面，都已经学mfc了还学什么win32",{"_index":7059,"title":{},"body":{"1015833":{}}}],["很明显这里多态的情况下会根据edx间接调用，而非多态则会直接调用",{"_index":3584,"title":{},"body":{"1015840":{}}}],["得出9的二进制为1001，得出结论：所有的整数一定可以完整的转换为二进制",{"_index":1588,"title":{},"body":{"1015843":{}}}],["得到了所需要调用的指令地址0x77d5050b，我们还需要知道要填充代码位置的地址，也就是imagebase加上当前地址（由于现代编译器编译的文件不区分文件、内存对齐，所以不考虑这些），根据扩展pe头可以知道当前imagebase为0x4000",{"_index":6353,"title":{},"body":{"1015828":{}}}],["得到地址为0xbab63000，然后在windbg中使用!proç",{"_index":5594,"title":{},"body":{"1015847":{}}}],["得到该clsid的类厂对象",{"_index":2908,"title":{},"body":{"1015823":{}}}],["循环",{"_index":1845,"title":{},"body":{"1015843":{}}}],["循环语句",{"_index":1829,"title":{},"body":{"1015843":{}}}],["循环语句不具备特殊性，我们也可以在循环语句内嵌套分支语句，例如打印1",{"_index":1855,"title":{},"body":{"1015843":{}}}],["循环语句有这几种",{"_index":1844,"title":{},"body":{"1015843":{}}}],["循环语句的反汇编",{"_index":1897,"title":{},"body":{"1015843":{}}}],["微软为了避免这种情况的发生，所以其不会讲内核结构体的地址暴露给应用层，也就是说没法通过这种方式来直接管理",{"_index":7307,"title":{},"body":{"1015833":{}}}],["微软使用了一种很巧妙的方式来找到结构体的归属物理页：mmnumberofphysicalpages存储的值表示物理页的总数，每个_mmpfn结构体用来描述一个物理页，因此就让每个物理页与全局数组中每个_mmpfn结构体按顺序对应",{"_index":6931,"title":{},"body":{"2949228":{}}}],["快照：createtoolhelp32snapsh",{"_index":7388,"title":{},"body":{"1015833":{}}}],["思考一下",{"_index":1973,"title":{},"body":{"1015843":{}}}],["思考在数组数据读时候，可以越界读取使用么？如果可以结果是什么？我们可以做个小实验",{"_index":1932,"title":{},"body":{"1015843":{}}}],["思考：in",{"_index":2230,"title":{},"body":{"1015843":{}}}],["思考：二维数组指针可以访问一维数组吗",{"_index":2287,"title":{},"body":{"1015843":{}}}],["性能",{"_index":7019,"title":{},"body":{"2949228":{}}}],["总体流程可以参考下图",{"_index":4809,"title":{},"body":{"3440657":{}}}],["总结",{"_index":157,"title":{},"body":{"1015822":{},"1015831":{},"1015840":{},"1015843":{},"1015846":{},"1703937":{},"1933380":{},"3440655":{},"3440657":{}}}],["总结：函数名本质上就是编译器给内存地址起的名字",{"_index":1374,"title":{},"body":{"1015843":{}}}],["总长度",{"_index":10290,"title":{},"body":{"1015818":{}}}],["总长度字节数：该字段表示整个ip报文的长度，这里的长度也表示有多少个单位，1个单位是1字节，能表示的最大字节为2^16",{"_index":10276,"title":{},"body":{"1015818":{}}}],["想要实现单步步入有很多种方式，例如我们可以将每一行要执行的指令下一地址的指令中设为in",{"_index":4962,"title":{},"body":{"3440657":{}}}],["想要实现单步步过，可以通过两种方式：硬件断点、软件断点。实现的原理是在遇到call指令（包括多种类型）后，计算当前指令的长度，并在当前eip+当前指令长度的位置设置断点，即call指令的下一行，然后继续执行，从而实现单步步过的效果",{"_index":4970,"title":{},"body":{"3440657":{}}}],["想要知道这是为什么，我们可以通过od来打开被调试进程，在这之前我们可以先设置一下打开时的暂停断点，由winmain变成sy",{"_index":4749,"title":{},"body":{"3440657":{}}}],["想要解决线程安全问题，就需要引伸出一个概念：临界资源，临界资源表示对该资源的访问一次只能有一个线程；访问临界资源的那一段程序，我们称之为临界区",{"_index":7500,"title":{},"body":{"1015833":{}}}],["想要证明事件和互斥体最本质的区别，我们可以使用生产者与消费者模型来举例子，那么这个模型是什么意思呢",{"_index":7603,"title":{},"body":{"1015833":{}}}],["想象一下，如果你想通过逆向的方式改变一个全局变量的初始值，该怎么做？首先我们可以写一个程序，输出一个全局变量的地址和值",{"_index":6327,"title":{},"body":{"1015828":{}}}],["慢、低效、流程繁琐",{"_index":9969,"title":{},"body":{"1015818":{}}}],["成功",{"_index":5524,"title":{},"body":{"1015847":{}}}],["成功创建mfc项目（mfc画窗口是可视化拖动控件，直接点击右边的controls然后在窗口中创建对应的控件即可",{"_index":18,"title":{},"body":{"1015822":{}}}],["成功执行并控制了进程a",{"_index":8531,"title":{},"body":{"1015833":{}}}],["成员",{"_index":10944,"title":{},"body":{"1703937":{}}}],["成员addressofentrypoint表示当前程序入口的地址，这个成员要与成员imagebase相加才能得出真正的入口地址，成员imagebase用来表示内存镜像基址，也就是pe文件在内存中按内存对齐展开后的首地址，我们可以在实际pe文件中看下，如下图所示就是pe文件静态状态下的两个成员值，addressofentrypoint为0x739d，imagebase为0x1000000，那么最终的程序在内存中的入口地址就是0x100739",{"_index":6186,"title":{},"body":{"1015828":{}}}],["成员apclisthead有2个apc队列，本质上就是双向链表，在双向链表内存储的就是给线程提供的apc函数，你想让线程做什么事情，就给给它提供一个apc函数挂进这个双向链表内，挂进去之后线程在某一时刻会去检查这个链表，当发现链表内有函数就会去调用，因此你可以在提供的apc函数中来控制线程的行为，当线程去检查列表且执行就会进行设定的行为",{"_index":10787,"title":{},"body":{"2424869":{}}}],["成员checksum表示校验和，是用来判断文件是否被修改的，它的计算方法就是文件的两个字节与两个字节相加，最终的值（不考虑溢出情况）就是校验和",{"_index":6190,"title":{},"body":{"1015828":{}}}],["成员filealignment、sectionalignment和sizeofheader在之前的章节中已经了解过了，这里不再赘述",{"_index":6188,"title":{},"body":{"1015828":{}}}],["成员magic表示当前pe文件是32位还是64位，32位时该值对应0x10b，64位时该值对应0x20p",{"_index":6185,"title":{},"body":{"1015828":{}}}],["成员process表示当前线程所属或者所挂靠的进程，如果当前线程没有所挂靠的进程，那么该成员的值与ethread结构体0x220偏移位成员的值一致",{"_index":10788,"title":{},"body":{"2424869":{}}}],["成员sizeofimage表示在内存中整个pe文件映射的大小，可比实际的值大（内存对齐之后的大小，也就表示必须是sectionalignment的整数倍",{"_index":6189,"title":{},"body":{"1015828":{}}}],["成员函数",{"_index":51,"title":{},"body":{"1015822":{}}}],["成员函数语法格式如下",{"_index":52,"title":{},"body":{"1015822":{}}}],["成员函数都有this指针，无论是否使用",{"_index":3338,"title":{},"body":{"1015840":{}}}],["成员函数：结构体里的函数，称为成员函数",{"_index":3315,"title":{},"body":{"1015840":{}}}],["我们f12跟进afxwinmain函数然后下个断点来跟一下",{"_index":562,"title":{},"body":{"1015822":{}}}],["我们一直认为当参数值为mem_commit时，申请内存就会给我们物理页，但事实并非如此，我们可以写一段代码来论证",{"_index":7036,"title":{},"body":{"2949228":{}}}],["我们上述所学习的是单行指令下通过lock来锁定内存，但是在多行指令的情况下并不能每行都使用这个指令，我们来看一下如下的多行指令",{"_index":6656,"title":{},"body":{"1933380":{}}}],["我们不需要死记硬背，需要的时候自己查下就可以，具体含义网上很多，这里不过多赘述",{"_index":9661,"title":{},"body":{"1015818":{}}}],["我们主要了解一下float类型的存储格式即可，其他类型举一反三都可以进行推演",{"_index":1581,"title":{},"body":{"1015843":{}}}],["我们举个例子（虚构",{"_index":7083,"title":{},"body":{"1015833":{}}}],["我们之前也说到表达式是没有限制的，最终你只需要给一个结果到循环语句即可（决定循环语句是否循环执行的是表达式2，所以在这最终只需要将结果给到表达式2，其余可以不需要），所以for循环语句我们可以这样写",{"_index":1879,"title":{},"body":{"1015843":{}}}],["我们之前使用drawtext函数输出文本，其参数较多，我们可以通过textout函数来省略一些参数，但同时我们还需要使用settextalign函数来设置文本对齐",{"_index":849,"title":{},"body":{"1015822":{}}}],["我们之前写的com组件，只有一个类并且只有一个接口，但是我们完全可以让一个com类提供多个接口",{"_index":3140,"title":{},"body":{"1015823":{}}}],["我们之前在了解段寄存器的时候提到，当你以如下这种汇编指令去向地址写值时，实际上写入的地址是段寄存器的base属性加上0x123456",{"_index":8942,"title":{},"body":{"1015831":{}}}],["我们之前就已经使用过鼠标左键按下这个消息了，只要了解鼠标就知道对应的消息是什么了",{"_index":945,"title":{},"body":{"1015822":{}}}],["我们之前已经了解到了api函数遍历模块就是查看peb那个链表，所以我们要想办法让它在查询的时候断链",{"_index":8548,"title":{},"body":{"1015833":{}}}],["我们之前所知道当向段寄存器写入时，cpu会根据段选择子去查表，并将对应内容进行检查并填入到就寄存器中，这里面就涉及到段权限检查",{"_index":9065,"title":{},"body":{"1015831":{}}}],["我们之前提到这是mfc原来使用的初始化函数，在现在已经过时了，所以不推荐使用，我们可以忽略，继续跟进",{"_index":568,"title":{},"body":{"1015822":{}}}],["我们之前画的矩形都没有任何颜色，默认的就是一共跟底色一样的颜色，所以我们可以通过fillrect函数指定画刷来填充矩形",{"_index":773,"title":{},"body":{"1015822":{}}}],["我们之前编写驱动程序的时候必须要写好两个函数，一个是入口函数，一个是卸载函数。在入口函数中，有两个形参，分别是pdriver_object、punicode_str",{"_index":5599,"title":{},"body":{"1015847":{}}}],["我们之前进行双机调试配置时候设置了c:\\boot.ini这个文件，在写入的内容中有一个参数，如下图所示，当该参数为execute时则表示当前的分页机制就是10",{"_index":9391,"title":{},"body":{"1015831":{}}}],["我们也可以使用ccomqiptr，这个智能指针可以直接赋值而不需要使用queryinterface方法",{"_index":3270,"title":{},"body":{"1015823":{}}}],["我们也可以利用driversection指向的结构体获取其他内核模块的信息，因为它指向的是_ldr_data_table_entry结构体，在该结构体内有一个成员inloadorderlinks是双链表，它记录着前一个和后一个内核模块的_ldr_data_table_entry结构体地址",{"_index":5631,"title":{},"body":{"1015847":{}}}],["我们也可以对比下长调用前后的寄存器信息，发现ss、esp、cs寄存器都发生了变化",{"_index":9229,"title":{},"body":{"1015831":{}}}],["我们也可以手动给创建的这个按钮添加一个处理函数（还是那一套流程",{"_index":1096,"title":{},"body":{"1015822":{}}}],["我们也可以通过ida来看这个地址对应的函数，即basethreadstart，它确实也调用了一个_seh_prolog函数用于添加seh至链表上",{"_index":4490,"title":{},"body":{"2949166":{}}}],["我们也由图得知，!d",{"_index":9466,"title":{},"body":{"1015831":{}}}],["我们也知道在汇编中的call指令大多是用于调用函数的，而在每个函数调用完之后都会有一个ret指令，它的作用就是跳转回call指令的下一行地址，并pop",{"_index":9165,"title":{},"body":{"1015831":{}}}],["我们也通过函数指针绕过调试器断点，假设有攻击者要破解你的程序，它在messagebox下断点，你正常的代码就会被成功断点，但是如果你使用函数指针的方式就可以绕过",{"_index":2324,"title":{},"body":{"1015843":{}}}],["我们了解了sstd表后，也就知道了系统服务表的具体成员值，可以根据系统调用号自己来找一下内核函数。如我们之前分析的readprocessmemory函数，它的系统调用号就是0xp",{"_index":2570,"title":{},"body":{"1015846":{}}}],["我们了解了客户区消息之后，就需要了解一下非客户区，非客户区就是如下图所示红框之外的区域就是非客户区，我们这章所使用的实际上是基于窗口的非客户区，也就是紫框和红框中间那一部分",{"_index":953,"title":{},"body":{"1015822":{}}}],["我们了解到所有物理页都记录在一个全局数组中，每个物理页对应一个_mmpfn物理页描述结构，空闲的物理页有6种状态，并分别对应一个全局链表。现在我们将把这些知识点联系在一起，并通过一个实验来巩固所学。我们以零化链表为例，来查询该链表上的所有物理页",{"_index":6992,"title":{},"body":{"2949228":{}}}],["我们了解基本逻辑之后就可以明白，假设某台计算机只有1核的cpu，我们将该成员值设为大于1的数值，那么该进程就没法运行了",{"_index":10958,"title":{},"body":{"1703937":{}}}],["我们从mfc的角度来看qt，你会发现，其实两者并没有什么不同，但从代码量以及整体结构的上来看，qt显得更加简洁",{"_index":4129,"title":{},"body":{"1015820":{}}}],["我们从这两个结构体的定义就可以看到他们的结构是一样的，我们去读写字符串时就可以根据buffer+length这两个成员精确的读取字符串，避免出现读取越界导致蓝屏的问题",{"_index":5573,"title":{},"body":{"1015847":{}}}],["我们以32位的pte为例，属性位p位标识当前页面是否有效，当cpu访问一个地址，其pte的p位为0，此时就会产生缺页异常",{"_index":7011,"title":{},"body":{"2949228":{}}}],["我们以return的代码为例，来看一下反汇编，如下图所示，我们可以看见_try_finally程序块时，扩展seh结构体中的scopetable成员与_try_except不一样，首先是它的lpfnfilter过滤函数地址是空的，因此我们可以通过这个成员来判断当前是否是_finally块，其次是它的lpfnhandler异常处理函数地址指向的是_finally块中的代码地址",{"_index":4468,"title":{},"body":{"2949166":{}}}],["我们会发现中断门描述符与调用门描述符差别不是很大，其中它多了一个d位，该值为0时表示16位中断门，为1时表示32位中断门，其他的都一样",{"_index":9261,"title":{},"body":{"1015831":{}}}],["我们会发现创建窗口最终还是会通过系统调用到0环去，根据系统调用号（从0位开始，第12位为1）我们就知道它最终调用的就是win32k.sys提供的服务",{"_index":3964,"title":{},"body":{"3440655":{}}}],["我们会经常接触到各种各样的字符编码，本章节就来讲解一下常见的编码",{"_index":7062,"title":{},"body":{"1015833":{}}}],["我们使用cpaintdc类需要注意：1",{"_index":612,"title":{},"body":{"1015822":{}}}],["我们使用事件的方式就可以更加完美的解决这一需求",{"_index":7626,"title":{},"body":{"1015833":{}}}],["我们使用如下指令将标记的段描述符放入gdt表中的空白部分（因为如果我们直接使用现有的值去测试，看起来不够直观",{"_index":9131,"title":{},"body":{"1015831":{}}}],["我们使用指针优化过的代码，实际上还是存在小缺陷的，当结构体成员很多的时候，我们在plus函数体内就要用指针的调用方式，一堆成员相加",{"_index":3308,"title":{},"body":{"1015840":{}}}],["我们依旧需要写两端代码，第一段用于创建并映射共享文件",{"_index":6847,"title":{},"body":{"2949228":{}}}],["我们修改下创建事件函数的参数为互斥，来看一下，那么互斥和通知类型的区别一下就很明显的展示出来了",{"_index":7595,"title":{},"body":{"1015833":{}}}],["我们先不使用之前学习的方法去调用，直接创建一个对象，这时候会发现该函数就直接执行了",{"_index":3346,"title":{},"body":{"1015840":{}}}],["我们先了解一个结构体_exception_record，它的格式及每个成员的意义如下",{"_index":4231,"title":{},"body":{"2949166":{}}}],["我们先使用一段代码来测试一下",{"_index":2018,"title":{},"body":{"1015843":{}}}],["我们先来看一下_dispatcher_header结构体的各个成员含义",{"_index":10643,"title":{},"body":{"2424889":{}}}],["我们先来看一下return之前的汇编代码：首先压入ebp到堆栈中，然后提升栈底（ebp）到栈顶（esp）的位置，再将栈顶（esp）提升0x40（十进制则表示64，堆栈图中也就是16个格子，这一块区域我们称之为缓冲区），后将ebx、esi、edi分别压入堆栈（此处是保存现场，为了函数执行完后恢复），而后lea指令是将ebp",{"_index":1440,"title":{},"body":{"1015843":{}}}],["我们先来看一下事件类型，事件对象可以通过createevent函数进行创建，它的语法如下",{"_index":10670,"title":{},"body":{"2424889":{}}}],["我们先用insertitem函数添加一个父节点，然后根据这个函数返回的句柄去创建子节点",{"_index":1237,"title":{},"body":{"1015822":{}}}],["我们再换个思路，在数组作为参数传递的时候，可以换一种形式，直接传入地址也是可以打印的，也就是使用指针来操作数组",{"_index":2139,"title":{},"body":{"1015843":{}}}],["我们再来看2",{"_index":9510,"title":{},"body":{"1015831":{}}}],["我们再来看一下loadlibrary函数的语法格式",{"_index":8431,"title":{},"body":{"1015833":{}}}],["我们再来看一下mapped类型内存，其实我们通过查看vad树就会发现一个进程的mapped类型内存是多于私有内存的，mapped类型内存会出现与其他进程共享物理页的情况",{"_index":6782,"title":{},"body":{"2949228":{}}}],["我们再来看一下消息的转换，即translatemessage函数，该函数是针对键盘类消息的一种优化。如果没有使用它，键盘消息将属于wm_keydown类型，并以ascii对应的十进制值打印出来。但是，通过使用它，键盘消息将被转换为wm_char类型，并打印出按下的键盘符号。因此，translatemessage函数的使用与否对结果影响不大，它只是对消息类型进行转换",{"_index":4016,"title":{},"body":{"3440655":{}}}],["我们再来看看修改按钮的名称，跟编辑框是一样的使用setwindowtext函数就可以，但是这里我们的m_btn1没法直接用因为它是创建在局部变量里的，我们可以把它放到类的声明里面",{"_index":1097,"title":{},"body":{"1015822":{}}}],["我们再来跟下malloc函数的调用步骤",{"_index":3460,"title":{},"body":{"1015840":{}}}],["我们再通过od来调试会发现，即使我们忽略了除零异常，也仍然会在异常处断点。这是因为在第一次的异常分发时veh、seh、调试器都没有处理异常，最后一道防线中进入unhandledexceptionfilter函数，在该函数内检测到此时存在调试器，就会进行第二次的异常分发，也就是给到调试器",{"_index":4788,"title":{},"body":{"3440657":{}}}],["我们准备好了要替换的函数，接着就是修改函数地址表的地址，直接修改是不可行的，因为系统服务表所在的物理页是只读的，如果要修改物理页的内容，就需要先修改页属性为可写",{"_index":5853,"title":{},"body":{"1015847":{}}}],["我们创建def文件将接口导出，以便外部引用",{"_index":2758,"title":{},"body":{"1015823":{}}}],["我们创建一个线程，就是创建结构体，接着我们初始化线程，就是要准备内存空间，并将结构体成员的值填充好，如下代码就完成了这些操作",{"_index":11120,"title":{},"body":{"1703937":{}}}],["我们创建了一个printperson函数来调用person的print函数，但是在这里如果我们想要打印teacher的成员呢？那就需要创建2个打印函数了，也就是违背了面向对象的初衷，重复造轮子了",{"_index":3558,"title":{},"body":{"1015840":{}}}],["我们创建第一个c程序的顺序为（以下键盘快捷方式基于vc6",{"_index":1338,"title":{},"body":{"1015843":{}}}],["我们去了解ip包的时候，是从mac包出发的，那么同样我们了解tcp包也需要去从ip包出发，首先我们知道整个整个ip包包含的数据中就有tcp/udp包，想知道这个数据是属于什么协议，就要通过ip帧结构的协议字段，想要知道tcp/udp包数据的大小，就要通过总长度减去首部长度获取",{"_index":10363,"title":{},"body":{"1015818":{}}}],["我们发现在主动调用、时间片到期的情况下导致的线程切换，它们所用到的api都会通过kifindreadythread函数来找到下一个要切换的线程，那么这时候就抛出了一个问题：该函数是根据什么样的条件取寻找下一个切换的线程呢",{"_index":11259,"title":{},"body":{"1703937":{}}}],["我们发现如上所说的两种方案，都是由于等待条件的不成熟，所产生的局限",{"_index":10546,"title":{},"body":{"2424889":{}}}],["我们发现它的代码很简单，首先将当前参数的指针存储到edx寄存器中（系统调用号在eax寄存器中），然后使用中断门进入0环（所有的api使用中断门进内核时，使用的中断号（idt表中索引值）都是0x2",{"_index":2470,"title":{},"body":{"1015846":{}}}],["我们只需要关注前三个成员即可，最后一个不用管，可以看见ip地址又是一个结构体，我们接着看看in_addr结构体",{"_index":9754,"title":{},"body":{"1015818":{}}}],["我们只需要在扩展pe头中修改addressofentrypoint成员为0xfe0即可",{"_index":6365,"title":{},"body":{"1015828":{}}}],["我们可以从0x77d5057d开始执行，通过汇编代码可以知道这个函数需要5个参数，并且最后的retn则表示内平栈则使用__stdcall，所以我们函数指针（操作系统api返回通常是4字节）可以这样写",{"_index":2328,"title":{},"body":{"1015843":{}}}],["我们可以从左边拖拽控件到界面上，对名字和显示文本进行修改",{"_index":4197,"title":{},"body":{"1015820":{}}}],["我们可以以上面所示的结构体代码举例，来打印一下看",{"_index":2026,"title":{},"body":{"1015843":{}}}],["我们可以使用lordpe来查看一下",{"_index":8374,"title":{},"body":{"1015833":{}}}],["我们可以使用mov指令取使用通用寄存器：mov",{"_index":5154,"title":{},"body":{"1015825":{}}}],["我们可以使用ssdt",{"_index":5906,"title":{},"body":{"1015847":{}}}],["我们可以使用windbg去查看gdt表的一些信息，在windbg中使用如下指令去查看gdt表相关的属性",{"_index":8985,"title":{},"body":{"1015831":{}}}],["我们可以使用windbg来查看该结构体",{"_index":10939,"title":{},"body":{"1703937":{}}}],["我们可以使用一个关键词去解决这个问题，那就是在父类的print函数类型前面加上virtual，则表示这是一个虚函数（其作用：当你printperson函数传入的对象是子类就调用子类的，是父类就调用父类的",{"_index":3571,"title":{},"body":{"1015840":{}}}],["我们可以使用一个新的方法for_each去打印set容器，这个方法就是stl的一个算法",{"_index":11445,"title":{},"body":{"1015814":{}}}],["我们可以使用取值运算符，也可以使用数组的方式，因为其本质都是一样的，我们来看下反汇编代码",{"_index":2166,"title":{},"body":{"1015843":{}}}],["我们可以使用这个风格，在oninitdialog函数中去设置",{"_index":1204,"title":{},"body":{"1015822":{}}}],["我们可以修改段描述符，将其变为一致代码段描述符，也就是修改type域中的c位=1",{"_index":9145,"title":{},"body":{"1015831":{}}}],["我们可以做个实验来论证这些观点，随便启动一个程序找到它的pdt表",{"_index":9455,"title":{},"body":{"1015831":{}}}],["我们可以先定义好createfile和closehandle的派遣函数（实际测试发现是必须要定义，否则无法打开设备",{"_index":5720,"title":{},"body":{"1015847":{}}}],["我们可以先实现一个鼠标画线的需求，要求鼠标左键按下为起点直到鼠标抬起为终点，两点一条直线",{"_index":974,"title":{},"body":{"1015822":{}}}],["我们可以先找到messageboxa这个函数地址，在win32的时候也了解过这个函数是技术是windows操作系统的user32.dll提供的，我们可以在dtdebug中打开一个文件按如下图所示，找到对应的dll文件，双击进去按ctrl+n快捷键找到messageboxa函数的地址",{"_index":6351,"title":{},"body":{"1015828":{}}}],["我们可以先编写一个驱动程序，主要作用是定义一个全局变量，然后运行时输出其地址",{"_index":5592,"title":{},"body":{"1015847":{}}}],["我们可以具体来调试看一下该结构体，如下所示我们使用了1个单独的_try_except代码块和1个嵌套的_try_except代码块",{"_index":4447,"title":{},"body":{"2949166":{}}}],["我们可以写一段代码，结合vad树来证实一下我们上面的内容",{"_index":6772,"title":{},"body":{"2949228":{}}}],["我们可以分别在32位、64位系统上提取notepad.exe进行对比来看看这个成员（010",{"_index":6114,"title":{},"body":{"1015828":{}}}],["我们可以创建一个对象来看一下对应的宽度和反汇编代码",{"_index":3384,"title":{},"body":{"1015840":{}}}],["我们可以加载驱动，来看一下实际效果，如下图所示我们成功进行了ho",{"_index":5966,"title":{},"body":{"1015847":{}}}],["我们可以双击某个控件然后创建控件事件函数",{"_index":20,"title":{},"body":{"1015822":{}}}],["我们可以在dtdebug中写入这段汇编指令，然后f7一下你就会发现这时候程序成功跳转到0x004010cc位置，并且eip和cs段寄存器的值都发生了改变",{"_index":9139,"title":{},"body":{"1015831":{}}}],["我们可以在dtdebug中找到前缀指令，如下图所示在硬编码的区域在前缀指令之后有一个\":\"冒号，这是为了方便使用者使用",{"_index":11790,"title":{},"body":{"1015817":{}}}],["我们可以在ida的imports导入表窗口中找到该导入函数对应的模块，也就是如下图所示的hal模块",{"_index":11213,"title":{},"body":{"1703937":{}}}],["我们可以在od里执行一下cpuid指令",{"_index":2463,"title":{},"body":{"1015846":{}}}],["我们可以在resource里添加一个图标，然后在数据开头添加这个图标上去",{"_index":1214,"title":{},"body":{"1015822":{}}}],["我们可以在vs中调试一下观察内存，可以很清楚的看见在hello前面记录了字符串的长度0x14，也就是20",{"_index":2935,"title":{},"body":{"1015823":{}}}],["我们可以在windbg下直接查看这张表，这张表里一共有4个成员，每个成员都是一个系统服务表，所以ssdt的数据宽度为64字节，但是我们知道window",{"_index":2565,"title":{},"body":{"1015846":{}}}],["我们可以在windbg中使用eq指令覆盖gdt表中没有被用到的段描述符（都为0",{"_index":9208,"title":{},"body":{"1015831":{}}}],["我们可以在windbg中查看表头，并对应找到其指向的进程结构体",{"_index":11006,"title":{},"body":{"1703937":{}}}],["我们可以在window",{"_index":7016,"title":{},"body":{"2949228":{}}}],["我们可以在上述的简易调试器调试循环判断异常类型的调试事件，将异常发生的地址打印，然后运行代码，就会发现一个被调试进程一切都正常运行，但是产生了一个异常调试事件",{"_index":4745,"title":{},"body":{"3440657":{}}}],["我们可以在什么地方创建对象",{"_index":3444,"title":{},"body":{"1015840":{}}}],["我们可以在代码中，将translatemessage和dispatchmessage注释掉，来看一下没有这个两个函数进行消息的转换和分发，我们的窗口过程函数windowproc是否仍然可以执行，接着另外一个程序发送消息",{"_index":3996,"title":{},"body":{"3440655":{}}}],["我们可以在函数地址表中找到它，即0x805cac46",{"_index":5829,"title":{},"body":{"1015847":{}}}],["我们可以在左下角使用d",{"_index":8544,"title":{},"body":{"1015833":{}}}],["我们可以在自己的类中去重写一下，在delete之前做一些别的操作",{"_index":586,"title":{},"body":{"1015822":{}}}],["我们可以在虚拟机中打开一个计算器，然后循环10次打开计算器的进程，这样我们就可以在句柄表中找到着10个被我们使用的内核对象信息，实验可以通过如下代码进行",{"_index":8691,"title":{},"body":{"1933378":{}}}],["我们可以在该pe文件中看一下有多少个image_section_header结构体，如下图用不同颜色标记的就是每个节，其实通过编辑器右边的内容你就可以大致知道每个节的表示什么类型了",{"_index":6024,"title":{},"body":{"1015828":{}}}],["我们可以在通过这个路径：右键我的电脑",{"_index":9575,"title":{},"body":{"1015831":{}}}],["我们可以在项目中创建一个文件扩展名为.def的文件，在该文件中使用如下格式来声明",{"_index":8328,"title":{},"body":{"1015833":{}}}],["我们可以基于”一个线程等待一个对象“的代码例子来查看下该成员。如下图所示，我们可以看见4个等待块的空间中，第一个和第四个都已经被挂入了等待块，第一个是_kevent等待对象，而第四个实际上是固定的，它是一个定时器。在当前的环境中，我们可以看见第四个等待块并没有被使用（nextwaitblock成员值为空），这是因为在我们使用waitforsingleobject函数时，超时时间参数设置为了",{"_index":10620,"title":{},"body":{"2424889":{}}}],["我们可以基于表格添加一个右键菜单，首先是创建控件、添加选项",{"_index":1216,"title":{},"body":{"1015822":{}}}],["我们可以多次继承么，或者说继承仅仅局限于子、父关系么？如下代码，b继承了a，c继承了b，c是否只继承了b的v和",{"_index":3403,"title":{},"body":{"1015840":{}}}],["我们可以实际观察一下在内存中的pe文件，首先打开记事本，然后在winhex中这样选择",{"_index":6032,"title":{},"body":{"1015828":{}}}],["我们可以将使用到的几个宏转换为原来的代码然后看一下本质，首先是declare_dy",{"_index":257,"title":{},"body":{"1015822":{}}}],["我们可以将客户区和非客户区做一个转换以此实现在客户区也可以拖动窗口",{"_index":965,"title":{},"body":{"1015822":{}}}],["我们可以将第一级、第二级理解为是一个目录，通过目录找到物理页（内容），而目录的索引就是10",{"_index":9396,"title":{},"body":{"1015831":{}}}],["我们可以将自定义函数复制到目标进程中，这样目标进程就可以执行我们想要执行的代码了，这就是注入代码的思路",{"_index":8597,"title":{},"body":{"1015833":{}}}],["我们可以将这个最后一道防线执行过程总结为如下的伪代码，当程序有异常发生时，若原先堆栈的seh均未处理，那么这个函数一定会执行",{"_index":4492,"title":{},"body":{"2949166":{}}}],["我们可以尝试使用工具dtdebug去查看pe文件运行时所要依赖的模块",{"_index":6558,"title":{},"body":{"1015828":{}}}],["我们可以尝试使用汇编指令写入数据到内存中",{"_index":5227,"title":{},"body":{"1015825":{}}}],["我们可以尝试修改eax，然后再获取",{"_index":7482,"title":{},"body":{"1015833":{}}}],["我们可以很清晰的在右边看见8个32位通用寄存器及其对应的值，这里表示出来是以十六进制形式，所以值一共有八个，一个表示4位，2个表示一个字节",{"_index":5172,"title":{},"body":{"1015825":{}}}],["我们可以很清晰的看见区别从运算到赋值都不一样，指针运算到赋值改变的是指针本身，而不是指针指向的那个地址，而引用则不一样其从运算到赋值改变的是所引用的变量，我们得出这几个结论",{"_index":3501,"title":{},"body":{"1015840":{}}}],["我们可以很清楚的看见了几个值在调试工具中打开发生变化：si.dwxsiz",{"_index":7296,"title":{},"body":{"1015833":{}}}],["我们可以手动来看一下加载的段描述符到底是谁，首先拆分段选择子取第3至第15位作为索引，接着按索引在gdt表中找到段描述符",{"_index":2523,"title":{},"body":{"1015846":{}}}],["我们可以来实际使用一下这个消息，首先在消息映射表中加入该消息的映射，其次在类中声明对应消息处理函数，而后实现该函数即可",{"_index":964,"title":{},"body":{"1015822":{}}}],["我们可以来实际的看一下new、delete这两个关键词主要做了什么",{"_index":3451,"title":{},"body":{"1015840":{}}}],["我们可以来打印一下c的数据宽度",{"_index":3407,"title":{},"body":{"1015840":{}}}],["我们可以来看一下这两个方法的调用链，也就表示无论是malloc和new，其实都是heapalloç",{"_index":6764,"title":{},"body":{"2949228":{}}}],["我们可以来看下tcp建立连接、通信、断开连接全貌",{"_index":9925,"title":{},"body":{"1015818":{}}}],["我们可以来论证一下如上所述的概念，首先a进程打开ie浏览器，然后获取进程id和句柄",{"_index":7336,"title":{},"body":{"1015833":{}}}],["我们可以根据扩展pe头先找到导入表的相关信息",{"_index":6548,"title":{},"body":{"1015828":{}}}],["我们可以模拟一下操作资源然后创建",{"_index":7536,"title":{},"body":{"1015833":{}}}],["我们可以注释如下图所示的代码，并且在窗口过程函数中加入一个输出，再编译运行窗口会发现，即使没有getmessage、dispatchmessage函数，窗口过程函数仍然会被执行",{"_index":4047,"title":{},"body":{"3440655":{}}}],["我们可以添加对wm_keydown、wm_char消息的处理，并且注释掉translatemessage函数和不注释掉进行对比，就会发现这一特征，需要主要的是在实际使用过程中如果你使用了translatemessage函数就只需要添加对wm_keydown消息的处理，不需要再对wm_char消息进行处理，否则就会造成重复处理",{"_index":4017,"title":{},"body":{"3440655":{}}}],["我们可以清晰的看见结果并不是我们想要的，生产一次消费一次的有序进行，甚至还出现了先消费后生产的情况，这个问题我们可以去修改代码解决",{"_index":7624,"title":{},"body":{"1015833":{}}}],["我们可以直接按照ida将kernel32和ntdll的反汇编代码整合一下，如下代码，其中提升栈顶的sub指令是因为在window",{"_index":2429,"title":{},"body":{"1015846":{}}}],["我们可以看一下这个idl文件，其具体含义可以见如下图注释",{"_index":3104,"title":{},"body":{"1015823":{}}}],["我们可以看下反汇编代码，查看函数printp",{"_index":3569,"title":{},"body":{"1015840":{}}}],["我们可以看下结果",{"_index":1327,"title":{},"body":{"1015822":{}}}],["我们可以看见如下图，假设服务器端和客户端是两个相亲相爱的恋人，客户端提出要跟服务器端分手，需要得到服务器端的确认，而不仅仅是单方面的分手，服务器端也要提出跟客户端分手，客户端也要确认。那么为什么需要这样呢",{"_index":9918,"title":{},"body":{"1015818":{}}}],["我们可以看见它的主要作用就是调用导入表的ntreadvirtualmemory函数，我们可以在ida的imports窗口里找到该函数（ctrl+f搜索），并且能知道它来自ntdll.dll模块",{"_index":2422,"title":{},"body":{"1015846":{}}}],["我们可以看见它继承了iunknown接口，并且多了两个成员函数：createinstance、lockserv",{"_index":2891,"title":{},"body":{"1015823":{}}}],["我们可以看见当多核模式下，a线程（1核）执行该函数之后获得了自旋锁，此时b线程（2核）加入执行，那么b线程就需要原地等待在那转一会，等待自旋锁被释放，也就是为空闲状态。因此，自旋锁只对多核有意义，自旋锁与临界区、事件、互斥体一样，都是一种同步机制，都可以让当前线程处于等待状态，区别在于自旋锁不用切换线程，更加轻量",{"_index":6677,"title":{},"body":{"1933380":{}}}],["我们可以看见消息是通过windowproc函数的，这个函数是一个虚函数，也就表示我们可以在类中改写这个函数，但是这里我们没有改写其调用的就是cwnd::windowproç",{"_index":521,"title":{},"body":{"1015822":{}}}],["我们可以看见除了读取的表现形式不一样，实际上汇编代码是一模一样的；但是指针类型是可以重新赋值并运算的，而引用类型不可以",{"_index":3517,"title":{},"body":{"1015840":{}}}],["我们可以简单看下反汇编，观察数组在汇编中是如何体现的",{"_index":1912,"title":{},"body":{"1015843":{}}}],["我们可以编写一个驱动程序输出对应驱动对象的地址来看下这几个成员",{"_index":5626,"title":{},"body":{"1015847":{}}}],["我们可以自己编写、发布一个dll，导出表这样写",{"_index":6454,"title":{},"body":{"1015828":{}}}],["我们可以让句柄被继承，但也仅仅是可以，要真正完成继承，或者说我们允许子进程继承父进程的句柄，这时候就需要另外一个参数了",{"_index":7325,"title":{},"body":{"1015833":{}}}],["我们可以调出内存窗口查看一下",{"_index":3595,"title":{},"body":{"1015840":{}}}],["我们可以调用隐藏kernel32.dll这个模块，然后用dtdebug来查看一下",{"_index":8580,"title":{},"body":{"1015833":{}}}],["我们可以跟进cframwnd类、cwinapp类来看一下谁支持动态创建，也就是谁使用了相关的宏",{"_index":328,"title":{},"body":{"1015822":{}}}],["我们可以跟进kernel32!7c816d4f，最终就会发现它在这一层将seh挂到链表上，也就说实际上在入口程序部分，也给我们加了一道异常处理的防线。因此main函数如果发生异常，且在它的seh链表中未能查找到能够处理异常的异常处理函数，那么_except_handler3函数则会通过previoustrylevel查找最外层的异常处理函数，也就是在这挂上去的seh结构体中的异常处理函数",{"_index":4481,"title":{},"body":{"2949166":{}}}],["我们可以跟进看一下这个参数，它就是一个结构体",{"_index":7320,"title":{},"body":{"1015833":{}}}],["我们可以跟进（f12）一下hmodule和lpctstr这两个宏的定义，就会发现其实都是4字节宽度",{"_index":8433,"title":{},"body":{"1015833":{}}}],["我们可以运行两个进程来看一下互斥体的作用",{"_index":7546,"title":{},"body":{"1015833":{}}}],["我们可以运行该程序，然后去查看vad树，成功创建并映射了我们要共享的数据",{"_index":6841,"title":{},"body":{"2949228":{}}}],["我们可以选中multiline然后选中horizo",{"_index":1117,"title":{},"body":{"1015822":{}}}],["我们可以通过cpl（curr",{"_index":9071,"title":{},"body":{"1015831":{}}}],["我们可以通过ida打开c:/windows/system32/ntoskrnl.exe文件，在函数列表中找到_kisystemservice函数",{"_index":2520,"title":{},"body":{"1015846":{}}}],["我们可以通过ida打开ntoskrnl.exe内核模块找到该函数，来看一下它的作用，根据反汇编我们可以看见，该函数一开始就是保存当前线程所使用的寄存器，然后根据_kpcr取出_kthread结构体，并且从父函数传递的参数ecx中拿到要切换的线程结构体地址，将该地址替换至_kpcr结构体中用于当前线程的_kthread结构体成员的位置",{"_index":11197,"title":{},"body":{"1703937":{}}}],["我们可以通过ida打开ntoskrnl.exe内核模块，找到idt表中0x30中断号对应的处理函数，也就是_kistartunexpectedrange函数",{"_index":11210,"title":{},"body":{"1703937":{}}}],["我们可以通过ida来分析一下swapcontext函数，重点关注tss部分，首先是取出tss然后将eax给到tss的esp0",{"_index":11247,"title":{},"body":{"1703937":{}}}],["我们可以通过ida来看一下_kifastcallentry函数，它先通过_kpcr找到tss，而后通过tss的esp0得到0环的堆栈",{"_index":11242,"title":{},"body":{"1703937":{}}}],["我们可以通过ida来看一下readprocessmemory在dll文件中的体现。找到kernel32.dll文件，用ida打开，在functions窗口使用ctrl+f快捷键搜索函数",{"_index":2420,"title":{},"body":{"1015846":{}}}],["我们可以通过ida来看一下，该函数最开始有两个判断，第一个判断是kapc.inserted的值是否为0，如果不为0就说明已经挂入到队列中，那就进行跳转，最终ret；第二个判断是kapc.apcstateindex的值是否为3，如果为3则表示当前在插入apc时的环境（也就是执行kiinsertqueueapc时的环境），就会跳转进一块代码，将当前线程的apcstateindex赋值给dl，然后再通过dl赋值给kapc.apcstateindex",{"_index":10888,"title":{},"body":{"2424869":{}}}],["我们可以通过ida看见，在keacquirespinlockatdpclevel函数内的指令很简单",{"_index":6672,"title":{},"body":{"1933380":{}}}],["我们可以通过insertitem函数去添加标签",{"_index":1321,"title":{},"body":{"1015822":{}}}],["我们可以通过insertitem函数去添加表格的数据",{"_index":1206,"title":{},"body":{"1015822":{}}}],["我们可以通过jmp",{"_index":9153,"title":{},"body":{"1015831":{}}}],["我们可以通过properties去修改文本内容、样式",{"_index":1106,"title":{},"body":{"1015822":{}}}],["我们可以通过setwindoworg函数来更改窗口的原点，所以呈现给我们的100,100那一部分实际上就是一个缺失的",{"_index":692,"title":{},"body":{"1015822":{}}}],["我们可以通过windbg实现查找全局句柄表中的进程内核对象，首先在windows上打开一个计算器，在任务管理器中找到它的p",{"_index":8731,"title":{},"body":{"1933378":{}}}],["我们可以通过windbg打开任意一个pe文件，然后找到kiintsystemcall函数",{"_index":2469,"title":{},"body":{"1015846":{}}}],["我们可以通过wireshark去抓包，随便选择一个包展开就可以看到这样的一个结构",{"_index":10263,"title":{},"body":{"1015818":{}}}],["我们可以通过任务管理器来查看实际的物理内存",{"_index":6876,"title":{},"body":{"2949228":{}}}],["我们可以通过修改建议调试器代码中的部分代码，即createprocess函数的逻辑修改为debugactiveprocess函数的逻辑，这样就可以实现以附加进程的方式来建立调试关系",{"_index":4759,"title":{},"body":{"3440657":{}}}],["我们可以通过双击界面文件或选择左边菜单栏的设计进行界面的设计",{"_index":4196,"title":{},"body":{"1015820":{}}}],["我们可以通过反汇编来看一下使用_try_except的背后到底干了什么，如下图所示，我们可以看见与我们手动挂入链表类似，保存原fs:[0]，将其作为下一seh结构体地址，然后将fs:[0]指向当前seh结构体的地址，并且在这里的异常处理函数为_except_handler3",{"_index":4428,"title":{},"body":{"2949166":{}}}],["我们可以通过命名发现其将老的窗口过程处理函数替换为了afxwndproc，也就是函数afxgetafxwndproc，我们继续跟进这段代码",{"_index":509,"title":{},"body":{"1015822":{}}}],["我们可以通过如下函数根据pid、cid来获得进程、线程的内核对象，它们所查询的内核对象就是来自全局句柄表（psdç",{"_index":8725,"title":{},"body":{"1933378":{}}}],["我们可以通过如下指令在windbg中查看kpcr相关的信息",{"_index":2509,"title":{},"body":{"1015846":{}}}],["我们可以通过如下汇编指令来修改cr3寄存器的值",{"_index":11280,"title":{},"body":{"1703937":{}}}],["我们可以通过指令：!proc",{"_index":6694,"title":{},"body":{"2949228":{}}}],["我们可以通过获取适配器上的原始数据包，在最开始的位置找到mac帧结构，这是因为我们可以直接从网络模型看出网络协议的层级，这种数据包应该是按照层级一层一层的追加的，所以mac帧结构应该在最开始的位置",{"_index":10261,"title":{},"body":{"1015818":{}}}],["我们可以通过设备对象的flags成员设置交换数据的方式",{"_index":5668,"title":{},"body":{"1015847":{}}}],["我们可以通过遍历句柄表的方式来查看是否有程序加载自己，以此来达到反调试的目的；除此之外我们还可以通过句柄表来遍历进程列表",{"_index":8722,"title":{},"body":{"1933378":{}}}],["我们可以随便起一个进程然后找到cr3来查看，如下图所示我们看到它没有物理页",{"_index":9423,"title":{},"body":{"1015831":{}}}],["我们同样可以在windbg中查看_kpcr结构体",{"_index":11051,"title":{},"body":{"1703937":{}}}],["我们向apc队列中挂入的函数，准确来说不能称之为函数，而是一个apc结构体。这个结构看着有些复杂，在本章节我们只需要知道0x1c偏移位成员normalroutine，该成员的作用就是可以帮助我们找到提供的apc函数地址",{"_index":10790,"title":{},"body":{"2424869":{}}}],["我们回过头来再看type域的表格，除了第11位外，第8、9、10位在代码和数据段中都有不同的意义",{"_index":9043,"title":{},"body":{"1015831":{}}}],["我们在onlbuttondown函数中写一个当鼠标左键按下则画一个圆形的功能",{"_index":686,"title":{},"body":{"1015822":{}}}],["我们在上一章学习的是windows自带的原生seh，除此之外实际上编译器还另外扩展了seh，这是因为使用原生seh实际上非常麻烦，需要自己构建结构体、异常处理函数、写入fs:[0]等等操作",{"_index":4413,"title":{},"body":{"2949166":{}}}],["我们在之前内核异常分发学习中知道rtldispatchexception函数调用了rtlpgetregistrationhead函数来查找一个异常链表，这个异常链表也可以称之为seh链表，而在用户异常分发的rtldispatchexception函数中首先调用了rtlpexecutehandlerforexception函数来寻找veh链表，如果有的话则遍历该链表找到对应的异常处理函数，如果没有则继续使用rtlpgetregistrationhead函数来寻找seh链表",{"_index":4311,"title":{},"body":{"2949166":{}}}],["我们在之前的初级篇中了解到c语言可以使用malloc、c++语言可以使用new的方式来“申请内存”，为什么在这里我们不以它两为例呢",{"_index":6763,"title":{},"body":{"2949228":{}}}],["我们在之前的文件分析过程中实际上所看到的是静态的内容，其大小是要根据filealignment的值进行文件对齐的，但是在运行时则整体按照扩展pe头的成员sectionalignment的值进行内存对齐，默认情况下该值为0x10",{"_index":6031,"title":{},"body":{"1015828":{}}}],["我们在之前的课程里面了解了如何自己实现临界区以及什么是windows自旋锁，这两种同步方案在线程无法进入临界区时都会让当前线程进入等待状态",{"_index":10542,"title":{},"body":{"2424889":{}}}],["我们在代码中写了变量c，但是它最终存储进去的是啥呢？我们看下反汇编",{"_index":1648,"title":{},"body":{"1015843":{}}}],["我们在使用inl",{"_index":6627,"title":{},"body":{"1933380":{}}}],["我们在使用依赖模块的函数时，实际上是间接调用，如下图所示，调用messagebox，汇编指令去调用并不是直接call地址，而是间接的，从内存中找到地址再去cal",{"_index":6593,"title":{},"body":{"1015828":{}}}],["我们在初级班对于win32",{"_index":3745,"title":{},"body":{"3440655":{}}}],["我们在学习会变的时候都知道无法通过mov、add之类的指令去修改eip，所以要修改eip需要借助jcc、call、jmp之类的指令进行，接下来我们学习的硬编码就跟这些指令有关的",{"_index":11907,"title":{},"body":{"1015817":{}}}],["我们在开发窗口应用程序时，消息被封装成一个结构体msg，在开发内核驱动程序时，消息被封装成另外一个结构体irp（i/",{"_index":5635,"title":{},"body":{"1015847":{}}}],["我们在新线程的代码中下断点，查看调用栈，回溯跟踪过去，会发现也会给它一个seh挂入异常链表中",{"_index":4489,"title":{},"body":{"2949166":{}}}],["我们在日常使用中最常用的就是float、double类型；会有人好奇，为什么在这里要在数据最后加上f或l？就以float举例，如果不加上f，编译器默认会认为这个值是double，然后再转换赋值给fl",{"_index":1579,"title":{},"body":{"1015843":{}}}],["我们在窗口创建后需要使用getmessage、translatemessage和dispatchmessage来获取、转换和分发消息。如下代码所示，我们通常会这样去写",{"_index":3978,"title":{},"body":{"3440655":{}}}],["我们在窗口程序中想要输出信息就不可以使用printf了，我们可以使用另外一个函数outputdebugstring，其语法格式如下",{"_index":7718,"title":{},"body":{"1015833":{}}}],["我们在结构体的成员函数内使用this这个关键词就可以调用了，如上代码所示",{"_index":3328,"title":{},"body":{"1015840":{}}}],["我们在进程a的代码下断点找到线程函数地址",{"_index":8419,"title":{},"body":{"1015833":{}}}],["我们如何去获取这个teb结构体呢？我们可以随便找一个exe拖进dtdebug，然后来看一下fs寄存器（目前你只需要知道teb的地址就存储在fs寄存器中即可，具体细节在中级课程中",{"_index":8543,"title":{},"body":{"1015833":{}}}],["我们将其写在了执行地址0x00460a32中，想要调用这个函数，需要使用jmp、call指令来调用",{"_index":5366,"title":{},"body":{"1015825":{}}}],["我们尝试创建一个线程执行for循环，如下图",{"_index":7408,"title":{},"body":{"1015833":{}}}],["我们就可以理解为生产者生产一个物品，将其放进容器里，然后消费者从容器中取物品进行消费，就这样“按部就班”下去",{"_index":7605,"title":{},"body":{"1015833":{}}}],["我们就可以这样改写之前的售卖物品的代码",{"_index":7513,"title":{},"body":{"1015833":{}}}],["我们已经了解api在3环的体现，并且可以手动的去封装一个在3环的应用api。但我们并不知道3环进0环的具体细节，本章节就来一探究竟",{"_index":2455,"title":{},"body":{"1015846":{}}}],["我们已经了解了基本的函数，接下来我们写两段代码",{"_index":6833,"title":{},"body":{"2949228":{}}}],["我们已经了解层次结构所以直接在最高一层去定义，也就是cwinthread这个类中去定义即可",{"_index":185,"title":{},"body":{"1015822":{}}}],["我们已经掌握了函数、函数调用、变量、参数、返回值等相关的一些概念，本借口我们从内存的角度来分析参数在内存中的位置、局部变量在内存中的位置、返回值是如何返回和使用的",{"_index":1485,"title":{},"body":{"1015843":{}}}],["我们已经知道window",{"_index":2427,"title":{},"body":{"1015846":{}}}],["我们已经知道了，在udp中不存在客户端和服务端着两个概念，所有传输都是端对端的，不会区分，现在我们实现端对端互相收发数据，并且在发出或收到数据内容为close的时候关闭连接",{"_index":9974,"title":{},"body":{"1015818":{}}}],["我们常用的汇编指令有：mov、add、sub、and、or、xor、",{"_index":5235,"title":{},"body":{"1015825":{}}}],["我们往下走两步完成赋值",{"_index":5419,"title":{},"body":{"1015825":{}}}],["我们必须覆盖cwinapp的虚函数initinstance在里面创建窗口，并把窗口对象保存在它的成员变量m_pmainw",{"_index":159,"title":{},"body":{"1015822":{}}}],["我们总结一下其（构造函数）特点",{"_index":3356,"title":{},"body":{"1015840":{}}}],["我们总结（析构函数）一下",{"_index":3367,"title":{},"body":{"1015840":{}}}],["我们想使用char类型来存储字符串，就需要用到数组，例如",{"_index":1682,"title":{},"body":{"1015843":{}}}],["我们想使用子窗口控件可以使用createwindow函数来创建，创建位置我们可以选在窗口函数中，当窗口创建则开始创建子窗口控件",{"_index":7834,"title":{},"body":{"1015833":{}}}],["我们想打印数组不仅要知道数组是什么，也要获取数组的长度，所以需要两个参数（实际上我们也有其他方法获取长度，这里先不多说",{"_index":2134,"title":{},"body":{"1015843":{}}}],["我们想要了解其本质，还是要去跟一下汇编代码，这里跟一下new关键词的执行流程看看其分别调用的函数（跟进cal",{"_index":3454,"title":{},"body":{"1015840":{}}}],["我们想要了解程序的本质，就需要追踪每一行到底是如何运作的，如下代码我们来进行跟踪分析plus函数是如何运行的",{"_index":1426,"title":{},"body":{"1015843":{}}}],["我们想要使用这个类型的话需要包含一个头文件",{"_index":2919,"title":{},"body":{"1015823":{}}}],["我们想要关注自己想要关注的消息类型，首先可以在窗口函数中打印消息类型来看看都有什么消息类型",{"_index":7803,"title":{},"body":{"1015833":{}}}],["我们想要合并节，首先要考虑到当前pe文件的文件对齐和内存对齐是否一致，在当前pe文件来看是不一致的，所以直接合并肯定是不行的，我们需要先将节进行内存对齐展开。首先，需要知道当前pe文件的内存对齐的值",{"_index":6420,"title":{},"body":{"1015828":{}}}],["我们想要当submit按钮被按下从而改变textlable的内容为输入框的内容，这时候需要编写代码，首先由于这个动作是我们自定义的，所以在头文件中需要声明一个私有的槽方法",{"_index":4204,"title":{},"body":{"1015820":{}}}],["我们想要往堆栈中压入数据就需要使用一个当前没有使用的堆栈地址避免覆盖了其他数据，也就是我们先存入数据，然后告诉堆栈当前用到了哪（提升栈顶指针esp），在之前的章节中我们学习了使用mov指令向内存中存储数据，在这里就可以借助mov指令去压入数据",{"_index":5330,"title":{},"body":{"1015825":{}}}],["我们想要扩大节就需要修改这几个部分：sizeofrawdata、virtualsize。接下来我们就来扩大节，首先需要分配一块新的空间，这块空间的大小取决你所需要的代码大小，在这里就定位0x1000，也就是4096字节，如下图所示使用010",{"_index":6373,"title":{},"body":{"1015828":{}}}],["我们想要画一个正常的原就需要在画圆的时候指定坐标",{"_index":693,"title":{},"body":{"1015822":{}}}],["我们想要真正的解决这类问题，就需要使用lock指令，如下所示",{"_index":6642,"title":{},"body":{"1933380":{}}}],["我们想要解决这个问题就需要重写一个赋值运算符，自己来实现深拷贝",{"_index":3697,"title":{},"body":{"1015840":{}}}],["我们想读写tr段寄存器的话不能使用mov指令，需要使用到ltr、str指令",{"_index":9299,"title":{},"body":{"1015831":{}}}],["我们打印结构体指针的宽度，最终结果是4，这时候我们需要知道不论你是什么类型的指针，其特性就是我们之前说的指针的特性，并不会改变",{"_index":2189,"title":{},"body":{"1015843":{}}}],["我们执行这段代码会发现，windbg确实有反应，并且提示我们在这个地址中断了",{"_index":9228,"title":{},"body":{"1015831":{}}}],["我们执行这段程序发现确实可以通过这种方式获取到传递的参数值",{"_index":9243,"title":{},"body":{"1015831":{}}}],["我们按结构图的方式从高位开始构建调用门描述符，首先我们不确定要去的地方是哪，所以偏移31:16先填上0，接着我们之前知道p位必须为1才表示这是一个有效的段描述符，dpl必须为3因为我们要从3环使用长调用指令，s位必须为0，type域为1100，后面的第5、6、7位默认为0，第0到第4位这里写0即可，因为我们当前不需要传参，所以我们得出高32位为",{"_index":9201,"title":{},"body":{"1015831":{}}}],["我们接着使用ida打开ntdll.dll来看一下该函数，它给了eax一个值（我们可以理解为是一个编号，也可以称之为系统调用号），并且给了edx一个内存地址，该内存地址就是一个函数，也就是进入0环的关键",{"_index":2423,"title":{},"body":{"1015846":{}}}],["我们接着向下看代码，就会发现它会将trap_frame.eip修改为kiuserapcdispatcher函数地址，也就是修改了返回3环时的地址，然后将执行apc所需要的4个参数依次填充到3环的栈内，这里的步骤我们就可以理解为下移栈顶然后填入内容，由于当前是在0环空间因此只可以使用mov+add指令来下移栈顶，依次复制到栈中",{"_index":10929,"title":{},"body":{"2424869":{}}}],["我们接着在windbg中找到全局句柄表，通过第一个指令找到全局句柄表的地址，然后使用结构体形式展示全局句柄表，找到它的tablecode，低2位为1，则表示这是多级的全局句柄表",{"_index":8732,"title":{},"body":{"1933378":{}}}],["我们接着来分析一下rtldispatchexception函数，以验证上述的一些观点。如下图所示在该函数内找不到veh链表后，会去调用两个函数",{"_index":4384,"title":{},"body":{"2949166":{}}}],["我们接着来到跳转后的代码，发现它会先判断signalstate的值是否与0x80000000相等，只要不等于0x80000000，就可以继续执行，执行到蓝色方框的时候，会给signalstate的值减去1。这里要分两种情况",{"_index":10746,"title":{},"body":{"2424889":{}}}],["我们接着来看kideliverapc函数，该函数处理用户apc时，会先处理内核apc，然后回来取用户apc队列，判断队列是否为空，不为空则进行跳转处理",{"_index":10921,"title":{},"body":{"2424869":{}}}],["我们接着来看一下kidispatchexception函数是如何对用户空间的异常进行分发处理的，还是开头的那几步：保存trap_frame至_context，判断先前模式如果为1则表示来当前异常来自用户空间，跳转到对应代码段，接着判断是否是第一次分发，判断内核调试器，调用内核调试器",{"_index":4303,"title":{},"body":{"2949166":{}}}],["我们接着来看一下throw关键词触发的软件模拟异常记录过程，在关键词处下断点，然后运行通过反汇编代码我们可以知道它调用的就是cxxthrowexception函数",{"_index":4261,"title":{},"body":{"2949166":{}}}],["我们接着来看下面这段代码，它有三层_try，外层是_try_except，第二、三层都是_try_finally，发生异常的代码处于第三层，按照我们之前所学习的内容来看，一旦触发异常，except_handler3函数会根据当前trylevel的值找到对应的结构体并寻找异常处理函数lpfnfilter，从内至外，从第三层开始找，通过previoustrylevel来逐层向上寻找，但由于三层、二层都是_finally块，因此过滤函数地址那一块的值是0，最终会找到第一层，也就是最外层的_except块，此时过滤表达式为1，_except块内的代码得到执行，然后就会返回",{"_index":4470,"title":{},"body":{"2949166":{}}}],["我们接着来看这段反汇编，首先将ebp压入扩展结构体，然后将ebp提升至esp位置，再压入trylevel，初始值就是",{"_index":4460,"title":{},"body":{"2949166":{}}}],["我们是通过getmessage函数接收消息的，其第一个参数就是接收的消息（结构体），所以可以在之前的代码中选中msg然后f12跟进看一下消息结构体的定义",{"_index":7790,"title":{},"body":{"1015833":{}}}],["我们有了cpl、dpl实际上已经完成了最基本的段权限检查，为什么还需要rpl呢？我们以文件读写为例，我们可以对一个文件进行读写，但是为了避免出错，在大多情况下，如果你只需要读取权限，那么你默认会使用只读模式去打开文件。因此，在这里也是同样的道理，你有高权限并不代表你一定需要使用高权限，为了稳定性、安全性，以最小权限原则满足对应场景即可",{"_index":9099,"title":{},"body":{"1015831":{}}}],["我们来举例说明二进制：010",{"_index":5096,"title":{},"body":{"1015825":{}}}],["我们来了解一下结构体指针，如下代码",{"_index":2186,"title":{},"body":{"1015843":{}}}],["我们来了解一下这个sdk常用的函数",{"_index":8863,"title":{},"body":{"1015850":{}}}],["我们来做一个实验，首先将eax置为0，然后cf、pf位为1，这时候我们调用lahf将标志寄存器送入ah会得到怎样的数据呢",{"_index":5433,"title":{},"body":{"1015825":{}}}],["我们来分析kiinitializeuserapc函数，就会发现备份功能是由其子函数kecontextfromkframes来完成的",{"_index":10927,"title":{},"body":{"2424869":{}}}],["我们来实际使用一下virtualalloc函数，便于我们更加清晰的了解私有内存",{"_index":6739,"title":{},"body":{"2949228":{}}}],["我们来尝试一下修改映射模式，然后画一个圆，首先我们看下正常的映射模式",{"_index":662,"title":{},"body":{"1015822":{}}}],["我们来手动分析一下in",{"_index":2472,"title":{},"body":{"1015846":{}}}],["我们来手动分析一下，先将第一张系统服务表按成员结构进行拆分",{"_index":2571,"title":{},"body":{"1015846":{}}}],["我们来看一下pdriver_object，它是一个结构体，我们称之为驱动对象，可以通过vs或者windbg去查看这个结构体的成员",{"_index":5600,"title":{},"body":{"1015847":{}}}],["我们来看一下再原有seh结构体上新增的3个成员，首先是_ebp这个成员就是栈底，其次是scopetable，它是一个结构体指针，指向了scopetable_entry结构体，该结构体及成员含义如下",{"_index":4439,"title":{},"body":{"2949166":{}}}],["我们来看一下这个结构体最终的宽度是多少",{"_index":2034,"title":{},"body":{"1015843":{}}}],["我们来看下几个主要的标志位",{"_index":9600,"title":{},"body":{"1015831":{}}}],["我们来看下函数指针的反汇编代码",{"_index":2321,"title":{},"body":{"1015843":{}}}],["我们来看下反汇编代码，看看数组是否和基本类型一样传入的是值",{"_index":2135,"title":{},"body":{"1015843":{}}}],["我们来看下汇编代码",{"_index":1493,"title":{},"body":{"1015843":{}}}],["我们查看自己本机的ip地址和子网掩码来计算",{"_index":9667,"title":{},"body":{"1015818":{}}}],["我们熟知的数字，也就是数学上的数字，理论来说只要你能写、纸张足够多，那么你是可以写任意大小数字的；但在计算机中，因为受到硬件的制约，数据是有长度限制的，我们一般称之为「数据宽度」，超出最多宽度的数据会被丢弃掉",{"_index":5078,"title":{},"body":{"1015825":{}}}],["我们现在再看一下调试对象的每个成员，应该能更好理解一些，在调用dbgkpqueuemessage函数将调试事件添加到链表后，_debug_object.eventspresent状态会被修改，调试器会判断这个状态，当状态改变后从eventlist链表中提取调试事件",{"_index":4619,"title":{},"body":{"3440657":{}}}],["我们现在所模拟的是一个db的com组件，而现在我们要添加一个db连接的状态，这时候就需要通过atl来添加属性了，如下图所示操作，当你添加一个属性之后在头文件中就会多出两个成员函数的声明以及在实现文件中多出对应的代码实现，最后在idl文件中也可以看见接口函数列表也多出了这些内容",{"_index":3126,"title":{},"body":{"1015823":{}}}],["我们的控制台程序入口是main函数，而dll文件的入口函数是dllmain函数（dllmain函数可能会执行很多次，不像我们的main函数只执行一次），其语法格式如下",{"_index":8379,"title":{},"body":{"1015833":{}}}],["我们目前虚拟机是单核配置，想要获取多核情况下内核文件，就需要重新设置虚拟机的处理器核的数量，通过vmware进行配置即可",{"_index":6668,"title":{},"body":{"1933380":{}}}],["我们看下反汇编代码，发现指针依然会传递过来",{"_index":3324,"title":{},"body":{"1015840":{}}}],["我们看下反汇编，变量a最终的值是什么",{"_index":1780,"title":{},"body":{"1015843":{}}}],["我们知道3环api的本质就是调用0环的函数，那么操作系统是如何根据系统调用号找到要执行的内核函数的，这就需要我们来了解一下系统服务表",{"_index":2542,"title":{},"body":{"1015846":{}}}],["我们知道gdt表的位置之后就可以使用如下指令去找到这张表",{"_index":8991,"title":{},"body":{"1015831":{}}}],["我们知道getmessage函数再处理sentmessageslisthead消息队列中的消息时，以及dispatchmessage在处理其他消息队列中的消息时，都会调用窗口过程函数。除此之外内核代码也会调用窗口过程函数",{"_index":4046,"title":{},"body":{"3440655":{}}}],["我们知道limit表示当前段的整个长度，fs段寄存器的limit属性值为0xfff，因此我们可以设定一个超出长度的值去写入来探测limit属性",{"_index":8952,"title":{},"body":{"1015831":{}}}],["我们知道utf",{"_index":7087,"title":{},"body":{"1015833":{}}}],["我们知道了environment值为2时的作用，当该值为3表示插入apc时的当前环境，我们就需要来分析插入apc的函数，即kiinsertqueueapc。该函数使用方法很简单，只有2个参数",{"_index":10883,"title":{},"body":{"2424869":{}}}],["我们知道了内存映射文件可以共享，但是这样也有弊端，如下图所示，实际上我们程序调用的user32.dll这类dll文件，也是通过这种方式进行调用的，如果我们进场a修改了某个dll，就会导致进程b出问题",{"_index":8279,"title":{},"body":{"1015833":{}}}],["我们知道了无论什么点触发apc的执行，最终都会通过kideliverapc函数来执行apc，因此我们分析该函数就可以了解执行的过程",{"_index":10908,"title":{},"body":{"2424869":{}}}],["我们知道了进程在使用虚拟内存时，就会分配一块物理内存（物理页），但是有那么多程序，很快就会占满物理页，操作系统不会这样设计，而是会去看你的程序是否需要频繁的使用物理页，如果不是很频繁就会将你存储在物理页的内容放在pagefile.sys文件中，然后将这个物理页分配给其他需要的进程",{"_index":7913,"title":{},"body":{"1015833":{}}}],["我们知道在3环下fs:[0]指向的是teb，而在0环下fs:[0]指向的是_kpcr。在系统中同时会有很多个线程运行，这就意味着fs:[0]需要存储的不同线程的相关信息，但是在实际的使用中发现3环下不同线程的fs寄存器（段选择子）都是一样的值，那么到底是什么样的一个实现能让同一个寄存器指向多个不同的teb呢，要了解其中的细节我们还是需要来分析swapcontext这个函数的代码",{"_index":11253,"title":{},"body":{"1703937":{}}}],["我们知道在mfc中要使用消息映射机制，首先要在类中声明declare_message_map宏，通用在qt中你要使用信号与槽，需要声明q_object宏",{"_index":4137,"title":{},"body":{"1015820":{}}}],["我们知道在中断门进入0环时会先压入ss、esp、eflags、cs、eip，也就是将这些值填充到trap_frame结构体，所以在_kisystemservice函数执行第一行指令之前是在trap_frame结构体的0x68偏移位，但是某些中断情况下如缺页异常就会除了这5个值以外压入第6个值，即trap_frame结构体中的errcode，所以为了使得堆栈平衡，在_kisystemservice函数第一行指令就压入了一个0x0来对齐，这时候我们就处于0x64偏移位，接着就是依次压入ebp、ebx、esi、edi、f",{"_index":2521,"title":{},"body":{"1015846":{}}}],["我们知道如何构建调用门了，接下来我们使用调用门，如下代码所示，我们使用长调用指令，给的段选择子为0x48，这是因为它拆分出来对应的gdt表的描述符正好是我们上面写入的调用门描述符，由于eip是废弃没用过的，所以我们随便赋值",{"_index":9212,"title":{},"body":{"1015831":{}}}],["我们知道当执行函数调用call指令的时候，会把call指令下一条指令的内存地址压入堆栈（esp值减4）；在函数内我们可以随意使用堆栈，比如push指令压入堆栈，使用堆栈传参等",{"_index":5379,"title":{},"body":{"1015825":{}}}],["我们知道无论是进程的入口线程还是另起的线程，都会被添加的异常处理函数给处理掉，这是因为操作系统添加了一道最后的防线，其伪代码如下",{"_index":4785,"title":{},"body":{"3440657":{}}}],["我们知道用户apc时normalroutine表示的是用户apc函数的总入口，那么为什么直接调用就可以了呢，这是因为当用户在3环调用queueuserapc函数来插入apc时，不需要提供normalroutine，这个参数是在queueuserapc内部指定的basedispatchapc，通过这个入口，内部会调用真正的用户apc函数执行，用户调用时只需要提供函数和参数即可",{"_index":10934,"title":{},"body":{"2424869":{}}}],["我们知道线程有三种不同的状态，这些不同状态的线程根据优先级存储在不同的链表里，在这里我们模拟的没有那么复杂，只使用一个链表来存储所有状态的线程",{"_index":11116,"title":{},"body":{"1703937":{}}}],["我们简单了解一下它的几个成员",{"_index":11011,"title":{},"body":{"1703937":{}}}],["我们简单梳理一下，系统时钟中断的执行流程图如下",{"_index":11216,"title":{},"body":{"1703937":{}}}],["我们继承两个类cwinapp、cframewnd，这两个类的层次结构如下",{"_index":174,"title":{},"body":{"1015822":{}}}],["我们继续跟进precreatewindow函数，我们可以看见如果窗口名称为空则帮我去注册一个默认的窗口类",{"_index":491,"title":{},"body":{"1015822":{}}}],["我们继续跟进就会发现ntdll.dll模块中的dbguiconnecttodbg函数，我们可以看见它先获取fs:[0x18]，也就是_teb.nttib.self，其实就是_teb的地址本身，然后通过它来获取fs:[0xf24]，即_teb.dbgssreserved[1]（该成员是一个指针数组，可以存储2个，它是一个保留成员，专门给调试器使用，调试器可以使用该字段来存储自己），用它作为参数给到了_zwcreatedebugobject函数，最终该函数执行的返回结果就是eax，也就表示将返回信息存储到了_teb.dbgssreserved[1]中",{"_index":4532,"title":{},"body":{"3440657":{}}}],["我们要了解apc挂入过程，先要了解kapc这个数据结构，知道它每个成员的作用。如下所示，我们可以从注释中了解每个成员的作用和含义",{"_index":10825,"title":{},"body":{"2424869":{}}}],["我们要了解自旋锁需要根据内核文件去分析，在windows操作系统下不同版本有着不同的内核文件",{"_index":6666,"title":{},"body":{"1933380":{}}}],["我们要在自己的类中构建rtti就需要使用这两个宏（注意：宏单独使用的时候，结尾不加分号）：declare_dynamic、implement_dy",{"_index":223,"title":{},"body":{"1015822":{}}}],["我们要想分清楚ax、al、ah分别代表着eax的哪一部分，可以使用mov指令来看",{"_index":5173,"title":{},"body":{"1015825":{}}}],["我们要想在windbg中调试驱动程序就需要这个pdb文件，但是在这之前我们需要先在驱动代码内写上内联汇编，用于断点",{"_index":5503,"title":{},"body":{"1015847":{}}}],["我们要想知道采集函数做了什么就需要跟进流程，来看它的代码逻辑。这里我们以创建进程、线程，和退出线程、进程为例来跟进分析一下",{"_index":4597,"title":{},"body":{"3440657":{}}}],["我们要想访问ptt表就需要页表基址，页表基址就是0xc0000000，与页目录表基址做的实验一样，我们先找到某个线性地址的ptt表",{"_index":9463,"title":{},"body":{"1015831":{}}}],["我们要知道内核apc函数在哪个执行点执行，第一个执行点就是线程切换，在swapcontext函数内判断是否有内核apc，在kideliverapc函数内执行内核apc函数",{"_index":10901,"title":{},"body":{"2424869":{}}}],["我们要继续跟进0环，也就是ntoskrnl.exe模块，找同名函数_ntdebugactiveprocess即可。如下图所示，我们可以看见最开始部分就是调用了_obreferenceobjectbyhandle函数，该函数的作用就是通过句柄来获取对象，它有6个参数，第5个参数就是用于存储函数获取的进程对象地址，在这里是通过被调试进程的句柄（参数1）获取_psprocesstype（参数3）类型的对象，也就是_eproç",{"_index":4539,"title":{},"body":{"3440657":{}}}],["我们跟进_dbgkpqueuemessage函数，在该函数内部发现代码逻辑执行到一半时，它先从自身进程的_eprocess结构体中获取调试对象（调试对象不为空）。然后从调试对象中取出eventlist成员的首地址（0x30偏移位），并将保存在ebx中的节点插入到eventlist的第一个位置，也就表示这里的ebx为处理好的调试事件。至此，我们的调试事件就挂入了链表中，可以使得调试器进行处理了",{"_index":4613,"title":{},"body":{"3440657":{}}}],["我们跟进eip，就会发现它是一个内核模块的函数kisystemservice，至此我们就大致了解了中断门进0环的简单流程",{"_index":2476,"title":{},"body":{"1015846":{}}}],["我们跟进看一下反汇编代码",{"_index":1475,"title":{},"body":{"1015843":{}}}],["我们跟进这个函数发现有两个跳转，先是走到_kiendunexpectedrange函数，最终是走到了_kiunexpectedinterrupttail函数",{"_index":11211,"title":{},"body":{"1703937":{}}}],["我们运行程序可以看见相应的值，那么我们可以是否可以在文件中直接搜索对应的值然后修改呢？这种方法没有毛病，但是文件中也许会存在很多个0x12345678，你无法准确的知道哪一个才是全局变量；那么，又是否可以通过已经给出的这个地址0x42ba30直接去寻找呢？当然也是不行的，因为在之前章节的学习中我们了解到，pe文件有2种状态（动静态），在这2种状态下，文件的对齐方式会发生变化，所以当前的地址是pe文件运行时（动态）的地址，你需要转换成在磁盘上（静态）的地址",{"_index":6331,"title":{},"body":{"1015828":{}}}],["我们运行这个窗口程序后再运行发送消息的程序，会发现窗口成功接收到了消息，并执行了对应的处理函数",{"_index":3997,"title":{},"body":{"3440655":{}}}],["我们还是以createprocess函数举例，其有一个参数bol",{"_index":7326,"title":{},"body":{"1015833":{}}}],["我们进行按位与运算，结果就是",{"_index":9671,"title":{},"body":{"1015818":{}}}],["我们通常存储对象，都用数组、列表之类的来存储，那如下所示我们使用数组来存储对象，但是在工作中发现这个数组不够用了，就需要一个更大的数据，但我们重新创建一个数组还需要把原来的数据复制过来；在c语言中可以使用函数来进行拷贝，直接拷贝内存，在c++中实际上跟c语言要做的事情是一样的，在c++中就称之为对象拷贝",{"_index":3665,"title":{},"body":{"1015840":{}}}],["我们通过gdtl寄存器知道当前gdt表的大小，但是使用dq/dd指令去查看表的时候很明显，它展示出来的数据并没有那么多，所以我们可以在之后加上参数来自定义我们返回数据大小",{"_index":8995,"title":{},"body":{"1015831":{}}}],["我们通过ida来分析debugactiveprocess函数的执行流程，首先，我们进入kernel32.dll中的debugactiveprocess函数，在函数的最前面，我们可以注意到一个值得关注的函数，名为dbguiconnecttodbgu",{"_index":4530,"title":{},"body":{"3440657":{}}}],["我们通过windbg可以看到进程结构体_eprocess有很多个成员，目前我们只需要了解一些比较重要的成员，其他的可以等用到时再了解",{"_index":10941,"title":{},"body":{"1703937":{}}}],["我们通过windbg可以看到进程结构体_ethread有很多个成员，目前我们只需要了解一些比较重要的成员，其他的可以等用到时再了解",{"_index":11009,"title":{},"body":{"1703937":{}}}],["我们都用过360或者qq管家，它一般会有个悬浮的窗口，然后实时的显示当前的上下行网速，我们就通过学习的知识来实现这个功能",{"_index":10394,"title":{},"body":{"1015818":{}}}],["我们都知道中断门进0环需要提供新的cs、ss、esp、eip，cs和eip在idt表中，而ss和esp都在tss中，这就需要去查内存了，速度相对来说会很慢。所以在这里cpu提供了sysenter指令，在执行该指令前操作系统会提前将cs、ss、esp、eip的值存储在msr寄存器中，该指令执行时cpu会将msr寄存器中的值直接写入到相关寄存器，就减去了读取内存的过程，提升了调用的速度，因此我们可以称之为快速调用",{"_index":2479,"title":{},"body":{"1015846":{}}}],["我们都知道在windows操作系统上，我们没有办法直接去操作硬件层的东西，因为这就涉及到驱动内核了，我们想要去用的话就需要通过windows系统封装好的库，在这里我们使用到的就winpcap库",{"_index":10098,"title":{},"body":{"1015818":{}}}],["我们都知道通过一个线性地址访问一个物理页，在10",{"_index":9547,"title":{},"body":{"1015831":{}}}],["我们除了可以处理窗口关闭，处理键盘按下也是没问题的，键盘按下的宏是wm_keydown，但是我们想要按下a这个键之后才处理该怎么办？首先我们需要查阅一下",{"_index":7815,"title":{},"body":{"1015833":{}}}],["我们需要使用的是getrootitem函数，其返回值为一个句柄，我们可以通过该句柄去获取对应节点的信息，例如节点名字",{"_index":1241,"title":{},"body":{"1015822":{}}}],["我们需要保证，在函数调用结束的时候（即执行ret指令之前，要把esp栈顶指针的值修改为执行call指令压入堆栈或堆栈传参压入堆栈前的那个esp栈顶指针的值），保证函数运行前与运行后esp栈顶指针的值不变，这个我们称之为堆栈平衡",{"_index":5380,"title":{},"body":{"1015825":{}}}],["我们需要借助rsa库在代码上实现加密与解密，这个库是openssl",{"_index":10456,"title":{},"body":{"1015818":{}}}],["我们需要关注一下导入表结构体的其他成员，如下图所示，第四个成员很好理解就是指向的依赖的模块名，而第一个成员与第二成员都分别指向了不同的表，分别是int（imp",{"_index":6562,"title":{},"body":{"1015828":{}}}],["我们需要关注的是filepointer成员，当这个值为空的时候，这块内存就是private类型，也就是进程自己申请的内存",{"_index":6713,"title":{},"body":{"2949228":{}}}],["我们需要知道任何进程都是别的进程创建的，当我们在windows下双击打开一个文件，实际上就是explore.exe这个进程创建的我们打开文件的进程，其使用的方法就是：createproç",{"_index":7196,"title":{},"body":{"1015833":{}}}],["我们需要重点的是网络字节序，其顾名思义就是网络上的字节序，比如说一个数据在你电脑上存储的是小端存储，而可能在网络传输的时候就是大端模式，所以你就需要将你电脑上的存储的数据转换",{"_index":9902,"title":{},"body":{"1015818":{}}}],["我们首先了解一下共享内存所需的三个函数：createfilemapping、openfilemapping、mapviewoffil",{"_index":6787,"title":{},"body":{"2949228":{}}}],["我们首先编写一个简单的代码，启动一下，看它的调用栈，我们可以看见，程序启动时并不是直接从main函数开始执行的，它的上层有maincrtstartup、kernel32!7c816d4f",{"_index":4480,"title":{},"body":{"2949166":{}}}],["我可以来到waitforsingleobject看一下，如下图所示，会先判断等待对象类型，若是互斥体，继续执行；接着会判断signalstate的值，即是否有信号，如果有信号，就跳转；如果没有信号，判断当前线程与互斥体所属线程是否相同，如果相同，就会跳到和有信号时一样的地方，即使没有信号，互斥体也可以被它的所属线程使用，这样，对于拥有互斥体的线程，就可以重入该互斥体",{"_index":10745,"title":{},"body":{"2424889":{}}}],["我的虚拟机系统是window",{"_index":5488,"title":{},"body":{"1015847":{}}}],["或",{"_index":1771,"title":{},"body":{"1015843":{},"2949228":{}}}],["或运算：只要有一个为1就为1",{"_index":5123,"title":{},"body":{"1015825":{}}}],["所以call指令也可也分解成这2个指令",{"_index":9163,"title":{},"body":{"1015831":{}}}],["所以delete的本质就是析构函数+fr",{"_index":3470,"title":{},"body":{"1015840":{}}}],["所以rtldispatchexception的作用就是遍历异常链表，调用异常处理函数，如果异常被正确处理了，该函数返回1；如果当前异常处理函数不能处理该异常，就调用下一个，以此类推到最后也没有异常处理函数处理这个异常，则该函数返回0",{"_index":4299,"title":{},"body":{"2949166":{}}}],["所以一个好的习惯：当你写一个类的时候，就应该写一个无参的构造函数",{"_index":3541,"title":{},"body":{"1015840":{}}}],["所以也可以得出一个结论就是in",{"_index":1961,"title":{},"body":{"1015843":{}}}],["所以从本质上来看mfc和qt都是对win32中的消息及其处理函数进行了封装，但是qt信号和槽相比较mfc的消息机制，使用起来更方便",{"_index":4144,"title":{},"body":{"1015820":{}}}],["所以使用方法也是一样的，如下代码",{"_index":765,"title":{},"body":{"1015822":{}}}],["所以只能借助于内核代码来调用回调函数，这里实际上就是createwindow发挥的作用，其进入0环调用的ntusercreatewindowex函数，该函数在窗口创建之前通过调用内核回调函数向窗口发送消息，这些消息不会进入消息队列，而是直接发送给窗口过程函数，消息类型为wm_cr",{"_index":4049,"title":{},"body":{"3440655":{}}}],["所以在代码中我们就可以分别使用0x8、0xc、0x10偏移量去将参数取出来",{"_index":9247,"title":{},"body":{"1015831":{}}}],["所以在内部就可以通过uin",{"_index":440,"title":{},"body":{"1015822":{}}}],["所以在当前cpu下，_kuser_shared_data结构体的0x300偏移位存储的就是ntdll!kifastsystemcall函数的地址",{"_index":2465,"title":{},"body":{"1015846":{}}}],["所以在这里我们需要重写cobject、ccmdtarget、cwinthread、cwnd、cwinapp、cframewnd这几个类",{"_index":175,"title":{},"body":{"1015822":{}}}],["所以堆、栈的本质就是私有内存，也就是通过virtualalloc函数申请的",{"_index":7944,"title":{},"body":{"1015833":{}}}],["所以如下图所示中，绿色框标记的部分就是dos块",{"_index":6012,"title":{},"body":{"1015828":{}}}],["所以如果对大小写很严谨的话可以使用wm_char消息以及其对应消息处理函数来获取，换而言之，wm_char消息就是专门来处理这种字符键的",{"_index":1019,"title":{},"body":{"1015822":{}}}],["所以我们可以利用互斥体来防止程序进行多开",{"_index":7555,"title":{},"body":{"1015833":{}}}],["所以我们可以只保留printperson函数，而不再去重复造轮子",{"_index":3563,"title":{},"body":{"1015840":{}}}],["所以我们可以在其派生的cmainwindow类也使用动态创建，这里宏的使用和rtti宏的使用是一样的",{"_index":330,"title":{},"body":{"1015822":{}}}],["所以我们可以在判断中去替换一下使用",{"_index":233,"title":{},"body":{"1015822":{}}}],["所以我们可以将调用门描述符按格式重新写入gdt表中",{"_index":9224,"title":{},"body":{"1015831":{}}}],["所以我们可以根据这个来判断该键有没有松开",{"_index":1016,"title":{},"body":{"1015822":{}}}],["所以我们可以根据这几个值来判断从而进行反调试",{"_index":7297,"title":{},"body":{"1015833":{}}}],["所以我们可以给之前构建的调用门描述符添加上参数个数3",{"_index":9234,"title":{},"body":{"1015831":{}}}],["所以我们可以通过段选择子的ti位知道查询gdt还是ldt表（注意，在window",{"_index":9008,"title":{},"body":{"1015831":{}}}],["所以我们在初始化线程的代码中，向堆栈中随便压入了一个值，用于平衡堆栈，这样就可以确保当执行该函数时能顺利的通过[ebp+8]的方式来取到线程结构体，然后再找到对应的成员函数、函数参数进行调用",{"_index":11191,"title":{},"body":{"1703937":{}}}],["所以我们在重写initinstance函数直接使用m_ncmdshow变量实际上使用的就是自己的成员",{"_index":565,"title":{},"body":{"1015822":{}}}],["所以我们就完成长跳转实验，接着我们可以来验证一下权限检查部分是否真的按流程所说那样，需要满足cpl==dpl&&rpl<=dpl，可以将之前写入的段寄存器值修改一下（修改了dpl位的值",{"_index":9140,"title":{},"body":{"1015831":{}}}],["所以我们得出最终结论：父类的私有成员是可以被继承的，但是也不能直接访问",{"_index":3442,"title":{},"body":{"1015840":{}}}],["所以我们得出结论：数组参数传递时，传入的是数组第一个值的地址，而不是值；换而言之，我们在printarray函数中修改传入的数组，也就修改了数组本身",{"_index":2138,"title":{},"body":{"1015843":{}}}],["所以我们想注册某个irp类型对应的派遣函数时候可以使用如下格式",{"_index":5706,"title":{},"body":{"1015847":{}}}],["所以我们想要调用某个函数时可以将地址赋值给pfun即可，并且在定义时写好对应的参数列表即可；也就是说函数指针通常用来使用别人写好的函数",{"_index":2323,"title":{},"body":{"1015843":{}}}],["所以我们想要释放物理内存，释放线性地址就写如下代码",{"_index":7939,"title":{},"body":{"1015833":{}}}],["所以我们拷贝过去的应该是机器码",{"_index":8603,"title":{},"body":{"1015833":{}}}],["所以我们根据b",{"_index":9074,"title":{},"body":{"1015831":{}}}],["所以我们知道蓝和红之间的通信不能保证100%成功，但是要尽量保证没有失误的话就需要一遍又一遍的去确认，而这些一次又一次的确定就是双方定下的协议；由此我们可以清楚的认识到我们在网络通信中是必须要有协议的存在的",{"_index":9635,"title":{},"body":{"1015818":{}}}],["所以我们要使用createprocess函数创建进程的话，如果需要提供命令行参数则需要填写第二个参数lpcommandl",{"_index":7243,"title":{},"body":{"1015833":{}}}],["所以我们试想一下当a线程去执行自增代码时，走到了add指令，这时候发生了线程的切换，b线程执行完自增代码，此时dwval的值就是1，线程在切换回a，a线程将值填过去，dwval的值仍然是1，但从代码实现的本意上来看，自增执行了两次那dwval的值就应该是2",{"_index":6637,"title":{},"body":{"1933380":{}}}],["所以我们需要在堆中创建，使用new关键词就可以了",{"_index":1061,"title":{},"body":{"1015822":{}}}],["所以我们需要明白一个事情，无论是什么调用方式进入0环都是要通过tss来切换堆栈的",{"_index":11243,"title":{},"body":{"1703937":{}}}],["所以指数部分为",{"_index":1632,"title":{},"body":{"1015843":{}}}],["所以按照流程来，我们需要先构建tss段描述符，这里与任务段实验一样，不过为了论证之前所说的通过任务门找到tss段描述符就不检查权限这个说法，我们需要将tss段描述符中的dpl位修改为0，所以得出tss段描述符为：00008912`fd780068，在windbg中写入gdt表",{"_index":9374,"title":{},"body":{"1015831":{}}}],["所以排除子表，我们的结构体就只有40字节，接着我们从第4个成员，逐步解析",{"_index":6484,"title":{},"body":{"1015828":{}}}],["所以最终我们变成了这样的指令：an",{"_index":12042,"title":{},"body":{"1015817":{}}}],["所以此时ss的值也会发生改变；除此之外，因为发生了提权，栈从3环的栈变为了0环的栈，因此esp也会发生改变。所以为了保证我们长调用完成之后还可以恢复，就将ss、esp、cs、返回地址压入栈中",{"_index":9182,"title":{},"body":{"1015831":{}}}],["所以短调用影响的寄存器是：esp、eip",{"_index":9167,"title":{},"body":{"1015831":{}}}],["所以系统文件用",{"_index":2400,"title":{},"body":{"1015843":{}}}],["所以至此我们也可以得出结论，大部分window",{"_index":2424,"title":{},"body":{"1015846":{}}}],["所以跨段不提权的长调用影响的寄存器就是：esp、eip、ç",{"_index":9175,"title":{},"body":{"1015831":{}}}],["所以跨段并提权的长调用影响的寄存器就是：ss、esp、cs、eip",{"_index":9184,"title":{},"body":{"1015831":{}}}],["所以这个还是无法满足我们的实际需求，那我们想不改变原有printperson函数的情况下，只有在子类中重写print函数才能到达需求（函数重写",{"_index":3566,"title":{},"body":{"1015840":{}}}],["所以这种拷贝方式，我们可以称之为浅拷贝；而如果可以做到能够复制成员的情况下，还可以将指针指向的内存地址复制过来，并自动申请一块新的内存提供，这种方式我们称之为深拷贝",{"_index":3675,"title":{},"body":{"1015840":{}}}],["所以除了在switch中可以使用到break，可以在循环语句中使用到break，简单来说它在这里就是跳出一层循环",{"_index":1867,"title":{},"body":{"1015843":{}}}],["所以，我们可以将不想被外界访问的成员隐藏起来，也就是使用private关键词",{"_index":3531,"title":{},"body":{"1015840":{}}}],["所以，我们添加数据的时候先应该有insertitem函数，而后再是setitemtext函数",{"_index":1210,"title":{},"body":{"1015822":{}}}],["所有与计算机底层相关的行业都需要深入学习、了解硬编码，例如病毒行业的shellcode，反病毒行业的特征码，加密与破解行业的指令壳、vmp，外挂行业的hook以及反外挂行业的提串都离不开硬编码的学习",{"_index":11787,"title":{},"body":{"1015817":{}}}],["所有的面向对象的编程语言在设计的时候都是为了解决一个问题，那就是避免重复造轮子，也就是避免写2遍重复的代码，我们也可以称之为代码复用，其体现方式有2种：1.继承；2.共用相同的函数",{"_index":3554,"title":{},"body":{"1015840":{}}}],["所有迭代器：前后自增（p",{"_index":11729,"title":{},"body":{"1015814":{}}}],["所谓10",{"_index":9398,"title":{},"body":{"1015831":{}}}],["所谓创建线程，本质就是创建一个结构体，然后将结构体存到这个结构体数组中，我们可以根据线程结构体的flags成员来判断线程的状态",{"_index":11117,"title":{},"body":{"1703937":{}}}],["所谓单步步入和步过，实际上就是od调试器的快捷键f7和f8，单步步入是可以每一行指令进行单步执行，单步步过也是如此，不同的是单步步过不会进入调用函数的内部（call指令",{"_index":4960,"title":{},"body":{"3440657":{}}}],["所谓可等待对象就是结构体，如下是一些结构体，我们可以在windbg中查看这些结构体",{"_index":10550,"title":{},"body":{"2424889":{}}}],["所谓注入就是在第三方进程不知道或者不允许的情况下将模块或者代码写入对方进程空间，并设法执行的技术",{"_index":8424,"title":{},"body":{"1015833":{}}}],["所谓消息的分发，核心点在于dispatchmessage函数，它会根据窗口句柄调用相关的窗口过程函数。在上一节的学习中我们了解到getmessage函数除了接收消息还会处理sendmessage发送过来的消息，也就是sentmessageslisthead消息队列中的消息",{"_index":4019,"title":{},"body":{"3440655":{}}}],["所谓等待链表，即当线程调用了sleep、waitforsingleobject等函数时，就会被链入该表",{"_index":11092,"title":{},"body":{"1703937":{}}}],["所谓调试，其实就是在被调试进程中想法设法的去触发异常，当异常产生后，由调试器来接管异常。有三种触发异常的方法：软件断点、内存断点、硬件断点",{"_index":4792,"title":{},"body":{"3440657":{}}}],["手动合并节",{"_index":6444,"title":{},"body":{"1015828":{}}}],["手动新建一个按钮控件，基于create函数即可",{"_index":1095,"title":{},"body":{"1015822":{}}}],["手动编写mfc程序",{"_index":79,"title":{},"body":{"1015822":{}}}],["手动解析指令",{"_index":12013,"title":{},"body":{"1015817":{}}}],["打印浮点数",{"_index":1677,"title":{},"body":{"1015843":{}}}],["打开一看，为什么这里没有显示二进制0和1呢？是因为二进制使用、阅读都比较麻烦，所以如上图所示，展示出来的是十六进制，这里我们也可以称之为二进制的简写方式",{"_index":5065,"title":{},"body":{"1015825":{}}}],["打开文件的方法",{"_index":1250,"title":{},"body":{"1015822":{}}}],["打开文件，禁止其它进程件",{"_index":1277,"title":{},"body":{"1015822":{}}}],["打开文件，禁止其它进程写此文件",{"_index":1279,"title":{},"body":{"1015822":{}}}],["打开设备",{"_index":5688,"title":{},"body":{"1015847":{}}}],["执行下一条（步入内部）：f1",{"_index":1420,"title":{},"body":{"1015843":{}}}],["执行下一条：f10",{"_index":1419,"title":{},"body":{"1015843":{}}}],["执行中断门的指令：in",{"_index":9265,"title":{},"body":{"1015831":{}}}],["执行之后我们可以看下edx的第11位，它确实为1，也就表示cpu支持sysenter、sysexit指令",{"_index":2464,"title":{},"body":{"1015846":{}}}],["执行代码，在第一个getchar停留，来到windbg查看进程的cr3，使用指令：!vtop",{"_index":7038,"title":{},"body":{"2949228":{}}}],["执行完成在第二个getchar停留，再来看一下vad树，我们会发现没有多出子节点，并且无论是全局变量、局部变量、堆，都是在已使用的内存地址区间去申请使用的，全局变量是编译时就会打包在文件里的，所以它的地址就在mapped类型内存地址区间中（即当前进程的vatest.exe文件",{"_index":6779,"title":{},"body":{"2949228":{}}}],["执行成功",{"_index":6790,"title":{},"body":{"2949228":{}}}],["执行流程",{"_index":4610,"title":{},"body":{"1703937":{},"3440657":{}}}],["执行流程就只有这个差别，当cpu通过n这个索引在idt表中找到了中断门描述符后，执行的步骤就和调用门的步骤完全一样了，可以参考调用门的执行流程",{"_index":9267,"title":{},"body":{"1015831":{}}}],["执行点",{"_index":10899,"title":{},"body":{"2424869":{}}}],["执行结果如下图",{"_index":8355,"title":{},"body":{"1015833":{}}}],["执行调用门的指令：cal",{"_index":9263,"title":{},"body":{"1015831":{}}}],["执行这个多行指令，线程a在对0x12345678地址上的值进行修改时，发生了线程切换，切换到了线程b，虽然线程b不能对0x12345678上的值进行修改，但是线程b可以对0x23456789地址上的值进行修改，如果修改时、又发生线程切换，切回线程a，线程b就锁住了0x23456789地址，不让线程a去修改0x23456789地址处的值，那么这样就还是没有办法保证多行指令的同步，因此我们就需要学习一个新的概念：临界区",{"_index":6659,"title":{},"body":{"1933380":{}}}],["扩大节",{"_index":6370,"title":{},"body":{"1015828":{}}}],["扩展pe头",{"_index":6121,"title":{},"body":{"1015828":{}}}],["扩展pe头之所以数据宽度较大，是因为其有一个成员是结构体数组",{"_index":6018,"title":{},"body":{"1015828":{}}}],["扩展pe头在32位和64位环境下是不一样的，在本章节中只介绍32位扩展pe头。如下结构体就是32位的扩展pe头",{"_index":6122,"title":{},"body":{"1015828":{}}}],["扩展pe头的成员有很多，但我们不需要每个都记住，大概的了解一下即可，重点关注如下这几个成员",{"_index":6184,"title":{},"body":{"1015828":{}}}],["扩展内核栈大小为64kb，因为普通内核栈只有12kb大小",{"_index":3916,"title":{},"body":{"3440655":{}}}],["扩展键标志",{"_index":1005,"title":{},"body":{"1015822":{}}}],["找不到com类的addref、release、queryinterface函数的实现",{"_index":3097,"title":{},"body":{"1015823":{}}}],["找不到类厂的定义和实现",{"_index":3098,"title":{},"body":{"1015823":{}}}],["找到导入表之后，我们可以根据它的第四个成员name知道当前pe文件所依赖的模块名字，先看第一张表",{"_index":6555,"title":{},"body":{"1015828":{}}}],["找到段选择子指向的段，真正要执行的地址就是指向的段,bas",{"_index":9195,"title":{},"body":{"1015831":{}}}],["技巧）16位寄存器名称就是去掉了32位寄存器的e、8位就是32位中间的字母加上l和h",{"_index":5170,"title":{},"body":{"1015825":{}}}],["把要操作的全局变量的地址取出，给到ecx，后续就可以通过[ecx]来访问全局变量的值",{"_index":6648,"title":{},"body":{"1933380":{}}}],["抓包分析",{"_index":9926,"title":{},"body":{"1015818":{}}}],["抽象基类很好理解，就是将成员方法变成纯虚函数即可，然后子类继承这个抽象类，如下图所示",{"_index":2627,"title":{},"body":{"1015823":{}}}],["抽象类不能实例化（创建对象",{"_index":3660,"title":{},"body":{"1015840":{}}}],["抽象类也可以包含普通的函数",{"_index":3659,"title":{},"body":{"1015840":{}}}],["抽象类有这几种特征",{"_index":3657,"title":{},"body":{"1015840":{}}}],["拆分0xc0000000为三部分，带入查找物理页",{"_index":9464,"title":{},"body":{"1015831":{}}}],["拓展操作",{"_index":3123,"title":{},"body":{"1015823":{}}}],["拓展结构体",{"_index":11081,"title":{},"body":{"1703937":{}}}],["拷贝构造函数",{"_index":3666,"title":{},"body":{"1015840":{}}}],["拷贝构造函数是编译器已经提供的，其已经非常成熟了，通常情况下是不建议自己写拷贝构造函数的，除非出现类中包含指针类型的成员，这种情况是需要自己重些拷贝构造函数的，因为拷贝构造函数只是会拷贝当前指针成员的值，并不会拷贝指针成员指向的内容",{"_index":3674,"title":{},"body":{"1015840":{}}}],["挂入流程",{"_index":10857,"title":{},"body":{"2424869":{}}}],["指令",{"_index":2383,"title":{},"body":{"1015843":{}}}],["指令中参数的释义如下所示",{"_index":12003,"title":{},"body":{"1015817":{}}}],["指令的格式取决于你的cpu类型：x86、x64、arm...而所谓的硬编码就是机器码、指令，本章节主要讲解的格式就是x86的指令格式",{"_index":11783,"title":{},"body":{"1015817":{}}}],["指向当前线程所属进程的_eprocess结构体地址",{"_index":11046,"title":{},"body":{"1703937":{}}}],["指向系统服务表的基址",{"_index":11032,"title":{},"body":{"1703937":{}}}],["指定一个水平滚动的多列列表框",{"_index":1137,"title":{},"body":{"1015822":{}}}],["指定当前选中的项目总是被加亮，默认下失去输入焦点时加亮显示会被取消",{"_index":1232,"title":{},"body":{"1015822":{}}}],["指数:110",{"_index":1607,"title":{},"body":{"1015843":{}}}],["指数:2100",{"_index":1609,"title":{},"body":{"1015843":{}}}],["指数:3",{"_index":1611,"title":{},"body":{"1015843":{}}}],["指数部分",{"_index":1624,"title":{},"body":{"1015843":{}}}],["指数部分(8",{"_index":1614,"title":{},"body":{"1015843":{}}}],["指数部分简单方法",{"_index":1627,"title":{},"body":{"1015843":{}}}],["指针与字符串",{"_index":2141,"title":{},"body":{"1015843":{}}}],["指针函数（本质就是函数，只不过函数的返回类型是某一类型的指针",{"_index":2160,"title":{},"body":{"1015843":{}}}],["指针取值有两种方式，如下代码",{"_index":2164,"title":{},"body":{"1015843":{}}}],["指针取值的两种方式",{"_index":2161,"title":{},"body":{"1015843":{}}}],["指针变量的赋值格式如下",{"_index":2078,"title":{},"body":{"1015843":{}}}],["指针数组与数组指针",{"_index":2204,"title":{},"body":{"1015843":{}}}],["指针数组和数组指针，这两个是完全不一样的东西，指针数组的定义",{"_index":2205,"title":{},"body":{"1015843":{}}}],["指针数组的赋值方式",{"_index":2206,"title":{},"body":{"1015843":{}}}],["指针类型",{"_index":1520,"title":{},"body":{"1015843":{}}}],["指针类型变量",{"_index":2089,"title":{},"body":{"1015843":{}}}],["指针类型和其他数据类型是一样的，也可以做自增、自减，但与其他数据类型不一样的是，指针类型自增、自减是加、减去掉一个星号后的宽度",{"_index":2080,"title":{},"body":{"1015843":{}}}],["指针类型的变量宽度永远是4字节，无论类型是什么，无论有几个星号",{"_index":2079,"title":{},"body":{"1015843":{}}}],["按10",{"_index":9401,"title":{},"body":{"1015831":{}}}],["按位与",{"_index":9665,"title":{},"body":{"1015818":{}}}],["按公式得出的结果替换原先的sizeofrawdata、misç",{"_index":6436,"title":{},"body":{"1015828":{}}}],["按内存对齐展开",{"_index":6418,"title":{},"body":{"1015828":{}}}],["按如下图所示创建对话框工程即可",{"_index":1024,"title":{},"body":{"1015822":{}}}],["按扭",{"_index":1077,"title":{},"body":{"1015822":{}}}],["按照select模型逻辑编写代码即可",{"_index":10064,"title":{},"body":{"1015818":{}}}],["按照公式获取公开模数：n",{"_index":10433,"title":{},"body":{"1015818":{}}}],["按照公式获取：g",{"_index":10435,"title":{},"body":{"1015818":{}}}],["按照我们正常对于进程创建的理解，在创建进程后就已经完成了dll加载，为什么在附加时又进行了dll的加载呢？为了解决这个问题，我们需要来看一下ntoskrnl模块中的ntdebugactiveprocess函数",{"_index":4767,"title":{},"body":{"3440657":{}}}],["按照这样的层级结构我们创建了这些类，并使用上一章的代码去继承模拟实现一个mfc程序",{"_index":177,"title":{},"body":{"1015822":{}}}],["按照这样的格式我们想添加什么消息处理都可以，但是因为是宏，使用简单，但不利于我们去了解基本原理，例如这个左键按下的消息处理函数onlbuttondown，这个函数名为什么要这样写？不这么写可不可以？所以我们还需要通过转换宏去了解本质",{"_index":370,"title":{},"body":{"1015822":{}}}],["按照这样的步骤以此类推将所有的节全部按照内存对齐的方式进行修正（由于sizeofimage本身就是按内存对齐之后的大小，所以其的值会比实际值大，我们这里添加的空间从理论上来说也不会超出这个值，甚至我们所添加之后的大小是等于这个值的，也就无需更改",{"_index":6443,"title":{},"body":{"1015828":{}}}],["按照这种方式修改如下",{"_index":8332,"title":{},"body":{"1015833":{}}}],["按这个拆分的出来的偏移找到物理页，我们就会发现这里找到的物理页内容与上面的pdt表内容是一致的，并且你抛开偏移也会发现，它们的基址都是一样的，所以也就论证了这个物理页既是页目录表也是页表",{"_index":9460,"title":{},"body":{"1015831":{}}}],["按钮控件还有很多方法，比如说你可以通过enablewindow方法让一个按钮变灰（true就是启用按钮，false就是不启用",{"_index":1102,"title":{},"body":{"1015822":{}}}],["按顺序编写代码",{"_index":9724,"title":{},"body":{"1015818":{}}}],["捕获原始数据包，无论它是发往某台机器的，还是在其他设备(共享媒介)上进行交换的",{"_index":10105,"title":{},"body":{"1015818":{}}}],["损坏",{"_index":6979,"title":{},"body":{"2949228":{}}}],["换句话说，在当前的逻辑里，等待的线程临时复活，会接着执行并重新进入循环，如果它只有一个等待块，那么这个线程会符合激活条件，并退出循环。但又因为它退出循环之前，修改了signalstate的值，导致后面获得cpu控制权的线程（同样在等待该对象）不符合激活条件，并将重新挂到kiwaitlisthead等待链表上",{"_index":10664,"title":{},"body":{"2424889":{}}}],["换而言之，我们这个消息的结构体实际上就是传递给了窗口函数，其四个参数对应着消息结构体的前四个成员",{"_index":7802,"title":{},"body":{"1015833":{}}}],["掌握了2个表基址，就相当于掌握了一共进程所有的物理内存读写权限，你可以通过如下公式去访问页目录表、页表",{"_index":9479,"title":{},"body":{"1015831":{}}}],["排序算法",{"_index":11611,"title":{},"body":{"1015814":{}}}],["排序算法是指可以对指定容器进行排序的算法，下函数",{"_index":11687,"title":{},"body":{"1015814":{}}}],["探测attribu",{"_index":8934,"title":{},"body":{"1015831":{}}}],["探测bas",{"_index":8941,"title":{},"body":{"1015831":{}}}],["探测li",{"_index":8951,"title":{},"body":{"1015831":{}}}],["接下我们看一下互斥体是如何解决等待对象被遗弃的问题，在处理等待对象遗弃的情况时会用到互斥体的两个成员，即mutantlistentry和abandoned。当一个线程异常",{"_index":10750,"title":{},"body":{"2424889":{}}}],["接下来就是编写irp类型对应的派遣函数了，在这之前我们回顾一下窗口程序的消息流程，当你单击鼠标会产生msg消息，该消息发送给窗口对象，在窗口对象内会根据消息序号找到对应的处理函数进行处理。同理，在驱动程序中，当你在3环使用了某个函数就会产生irp消息，该消息发送给设备对象，在设备对象内会根据消息类型选择对应的派遣函数处理",{"_index":5681,"title":{},"body":{"1015847":{}}}],["接下来我们了解一下list容器独有的函数，push_front和pop_front函数在deque容器中已经了解了这里也不再重复",{"_index":11414,"title":{},"body":{"1015814":{}}}],["接下来我们使用两台机器作为服务器端和客户端，在客户端机器上安装wireshark软件进行抓包，如下图（左服务器端，右客户端",{"_index":9906,"title":{},"body":{"1015818":{}}}],["接下来我们依次来看一下项目创建的几个文件",{"_index":4183,"title":{},"body":{"1015820":{}}}],["接下来我们分析windows提供的原子函数interlockedincrement，来理解一下windows是如何实现多核同步的，通过ida打开kernel32.dll，直接在函数列表搜索interlockedincrement即可找到",{"_index":6646,"title":{},"body":{"1933380":{}}}],["接下来我们可以使用qt",{"_index":4180,"title":{},"body":{"1015820":{}}}],["接下来我们可以使用如下代码去使用参数，通过push压入参数，调用时根据esp寻址获取参数，有个细节需要注意这里由于我们压入了3个参数，导致栈发生了变化，所以使用retf指令时候需要加上0xc，这样执行完代码后才能保持栈平衡",{"_index":9236,"title":{},"body":{"1015831":{}}}],["接下来我们可以手动做实验来从线性地址寻找到物理地址，首先打开一个记事本输入一段内容，然后打开ce软件找到该进程，搜索我们输入的内容，找到该字符串对应的线性地址，如下图所示线性地址即为0x000aaff8",{"_index":9400,"title":{},"body":{"1015831":{}}}],["接下来我们学习一下如何存入、读取数组的数据（方括号[]内由0开始",{"_index":1924,"title":{},"body":{"1015843":{}}}],["接下来我们就可以去使用create、showwindow函数创建窗口了，但是仅仅这样是不够的，我们还需要设置一个当前页面的父类（我们要显示在标签页里所以这里就写标签页），使用setparent函数",{"_index":1326,"title":{},"body":{"1015822":{}}}],["接下来我们就可以按照程序执行顺序来进行跟进了，我们来看一下汇编代码",{"_index":1432,"title":{},"body":{"1015843":{}}}],["接下来我们就可以查找资源、获取资源、加载资源、读取数据",{"_index":1291,"title":{},"body":{"1015822":{}}}],["接下来我们就要使用这个扩展库去遍历获取物理网卡的相关信息，首先我们需要包含头文件和库文件",{"_index":10115,"title":{},"body":{"1015818":{}}}],["接下来我们就需要在c++源文件中使用纯代码的方式创建qt应用",{"_index":4113,"title":{},"body":{"1015820":{}}}],["接下来我们的就需要绑定套接字，使用函数bind，其语法如下",{"_index":9736,"title":{},"body":{"1015818":{}}}],["接下来我们要学习的是数组指针，数组指针在实际应用很少用到，数组指针是最难学的",{"_index":2217,"title":{},"body":{"1015843":{}}}],["接下来我们要进行qt开发环境的配置，我们需要下载与安装三个东西",{"_index":4084,"title":{},"body":{"1015820":{}}}],["接下来我们需要定位ip帧结构",{"_index":10265,"title":{},"body":{"1015818":{}}}],["接下来我们需要知道返回值是如何返回和使用的，在c语言中使用返回值就需要一个容器来存储这个返回值，这个容器我们也称之为变量，如下示例代码",{"_index":1492,"title":{},"body":{"1015843":{}}}],["接下来我们需要计算出所有节的大小，这里我们可以使用sizeofimage减去sizeofheaders内存对齐之后的大小，得出的结果0x12000就是所有节的大小（你也可以选择计算所有节展开后的大小和，这时候你就会发现这里的大小是一模一样的",{"_index":6445,"title":{},"body":{"1015828":{}}}],["接下来是remove函数，如下图所示当使用这个函数的时候就会删除与指定值相等的元素",{"_index":11416,"title":{},"body":{"1015814":{}}}],["接下来给只需要将dll文件、接口头文件、以及对应的com对象和com接口的gu",{"_index":2766,"title":{},"body":{"1015823":{}}}],["接下来继续跟进就是run函数，该函数实现的就是我们win32里面的消息循环",{"_index":571,"title":{},"body":{"1015822":{}}}],["接着你需要在oninitdialog函数内去切换接口，这需要使用到queryinterface方法，你需要传递两个参数，一个是接口的iid，一个是接口指针的地址；接口的iid可以通过com组件项目的“xxx_i.c”文件找到，这是idl生成的，所以需要你编译之后才有内容，接着将midl_define_guid的宏定义以及对应接口的宏调用复制过来，iid_idbconnectchk就是最终的接口对应的",{"_index":3166,"title":{},"body":{"1015823":{}}}],["接着你需要在wdk的下载地址中选择对应系统的安装包，由于我当前是window",{"_index":5451,"title":{},"body":{"1015847":{}}}],["接着使用dt",{"_index":8698,"title":{},"body":{"1933378":{}}}],["接着保存运行即可",{"_index":6404,"title":{},"body":{"1015828":{}}}],["接着修改添加的节表成员的属性：名字、真实大小（0x1000）、文件对齐之后的大小（0x1000）、内存中的偏移（第4个节的偏移地址0x23000+其数据大小0x4000）、文件中的偏移",{"_index":6411,"title":{},"body":{"1015828":{}}}],["接着再执行加法",{"_index":6651,"title":{},"body":{"1933380":{}}}],["接着向下可以看到，该中断处理函数直至执行结束都没有对异常进行处理（微软在设计时，希望程序员自己能够对异常进行处理，因此在中断处理函数中并没有对异常进行处理），反而是有多处的跳转，调用了另一个函数commondispatchexcep",{"_index":4257,"title":{},"body":{"2949166":{}}}],["接着向下看就会发现一个注释写着在这里添加额外的初始化代码，也就是chellodialogdlg::oninitdialog函数",{"_index":1032,"title":{},"body":{"1015822":{}}}],["接着在ie浏览器中打开这个html页面，并允许阻止的内容，单击即可调用接口函数",{"_index":3228,"title":{},"body":{"1015823":{}}}],["接着在oninitdialog初始化的时候去初始化com，根据progid创建com对象",{"_index":3115,"title":{},"body":{"1015823":{}}}],["接着在构造函数中使用connect连接信号和槽",{"_index":4214,"title":{},"body":{"1015820":{}}}],["接着在虚拟机中用kdmmanager加载并运行驱动程序，运行时（kdmmanager软件中点击run按钮）就会在windbg中断下来，如下图在windbg中新建了一个窗口（左边的窗口）展示当前驱动程序断点的位置，并且都是以源代码形式展示给我们的，这种效果与我们在调试应用程序时用vs是一样的",{"_index":5505,"title":{},"body":{"1015847":{}}}],["接着它做了第二件事情，将对应的调试事件打包成一个结构体，跳转到如下片段代码，最终会调用_dbgkpsendapimessage函数。这个函数的第一个参数就是之前打包好的调试事件的结构体",{"_index":4603,"title":{},"body":{"3440657":{}}}],["接着客户端按如下示例代码进行编写调用即可",{"_index":2771,"title":{},"body":{"1015823":{}}}],["接着将自己挂入等待链表（kiwaitlisthead）中，当线程自己把自己挂入等待链表以后，就相当于交出去cpu控制权，并进行线程切换；此时循环才执行到一半，并未执行完，自己就被切换出去了",{"_index":10659,"title":{},"body":{"2424889":{}}}],["接着就是写自己的加密函数，解密函数同理可得",{"_index":10518,"title":{},"body":{"1015818":{}}}],["接着就是服务器端编程框架",{"_index":9939,"title":{},"body":{"1015818":{}}}],["接着我们以线程结构体的方式代入线程地址查看，找到0x5c偏移位成员，即等待块",{"_index":10566,"title":{},"body":{"2424889":{}}}],["接着我们使用eq指令在windbg中向gdt表中写入我们构造好的tss段描述符",{"_index":9336,"title":{},"body":{"1015831":{}}}],["接着我们使用下标替换函数地址的代码即可",{"_index":5891,"title":{},"body":{"1015847":{}}}],["接着我们使用同样的汇编指令进行执行",{"_index":9147,"title":{},"body":{"1015831":{}}}],["接着我们再来看一下跟进的函数对应的汇编代码",{"_index":1438,"title":{},"body":{"1015843":{}}}],["接着我们去实现这两个方法即可",{"_index":3128,"title":{},"body":{"1015823":{}}}],["接着我们只要通过指令：d",{"_index":6995,"title":{},"body":{"2949228":{}}}],["接着我们可以在hook前先保存这个地址，这样当卸载驱动时便于还原",{"_index":5830,"title":{},"body":{"1015847":{}}}],["接着我们可以手动去定位一下导出表的位置，先找到扩展pe头的最后一个成员结构体数组",{"_index":6458,"title":{},"body":{"1015828":{}}}],["接着我们可以来驱动入口函数输出函数地址表的地址，来判断我们获取的是否正确",{"_index":5823,"title":{},"body":{"1015847":{}}}],["接着我们可以看见它会去判断先前模式，如果先前模式为1则进入用户空间的异常处理逻辑，为0则接着向下判断firstchance，即当前异常是否为第一次分发，如果是第一次则继续向下判断当前是否有内核调试器，如果没有内核调试器则跳转，有内核调试器的话优先调用内核调试器函数",{"_index":4285,"title":{},"body":{"2949166":{}}}],["接着我们可以通过od来调试该可执行文件，这里需要注意的是我们需要将od设置中的忽略除零异常给取消勾选，如果勾选上，od调试器就会在遇到除零异常时执行continuedebugevent，使得被调试进程继续执行",{"_index":4781,"title":{},"body":{"3440657":{}}}],["接着我们可以通过除0的例子来看一下cpu的异常记录过程，它的大致过程就是：cpu指令检测到异常→查idt表执行中断处理函数→执行commondispatchexception→执行kidispatchexception。我们可以通过ida打开ntoskrnl.exe先找到idt表，通过alt+t快捷键全局搜索_idt，找到idt表",{"_index":4254,"title":{},"body":{"2949166":{}}}],["接着我们向下看代码流程，首先是判断kapc.normalroutine是为0，不为0则跳转，跳转之后又做了一个判断，判断dl的值，也就kapc.apcnode的值是否为0，如果为0也就表示当前要插入的为内核apc，然后进行跳转，将apc插入到对应的内核apc队列中，最后跳回主代码",{"_index":10889,"title":{},"body":{"2424869":{}}}],["接着我们向下看当al值为1，跟随跳转，就会去将eax的值清0，然后传递给kideliverapc函数，该函数的作用就是根据参数1的值，来判断执行哪个空间的apc函数",{"_index":10904,"title":{},"body":{"2424869":{}}}],["接着我们向下看，会发现没有内核调试器，或者内核调试器函数返回结果为0的情况下，都会跳转至同一代码段；这里需要说明下内核调试器函数返回结果为0则表示异常未被处理，为1则表示异常被处理了，然后会将_context转换成trap_frame返还，异常处理过程结束，退出kidispatchexception函数",{"_index":4286,"title":{},"body":{"2949166":{}}}],["接着我们回到kiswapcontext，向下走就会发现真正的线程切换是在swapcontext函数内，跟进该函数我们可以先忽略其他的一些细节，关注最重要的堆栈切换那一部分，我们可以清晰的看见这里的操作与之前的模拟线程切换一样，将当前的esp存入当前线程的结构体中，并且将要切换线程的kernelstatck成员给到当前esp",{"_index":11199,"title":{},"body":{"1703937":{}}}],["接着我们回到程序按回车键，在第二个getchar停留，此时已经向申请的线性地址写入了0x12345678，再使用上述指令在windbg中查看，此时pte有值，且成功算出了物理地址",{"_index":7042,"title":{},"body":{"2949228":{}}}],["接着我们在windbg中使用!proç",{"_index":8696,"title":{},"body":{"1933378":{}}}],["接着我们在代码中加入in",{"_index":9376,"title":{},"body":{"1015831":{}}}],["接着我们在扩展pe头之后找到节表，我们可以看见在这个节表之后有40字节的空白区让我们添加新的节表成员，我们可以选择复制一份\".text\"节表成员作为新增的成员，这是因为我们要在节数据中添加代码，而\".text\"就是存放代码的，所以我们直接复制过来就不需要修改节属性了",{"_index":6408,"title":{},"body":{"1015828":{}}}],["接着我们在虚拟机中运行该驱动程序获取全局变量的地址",{"_index":5593,"title":{},"body":{"1015847":{}}}],["接着我们对照着表来进行解析就得出了汇编代码：mov",{"_index":12021,"title":{},"body":{"1015817":{}}}],["接着我们将该值添加到0x0地址对应的pte中",{"_index":9433,"title":{},"body":{"1015831":{}}}],["接着我们将项目代码的警告配置修改一下",{"_index":5464,"title":{},"body":{"1015847":{}}}],["接着我们就需要处理内存断点了，如下代码所示，这里的逻辑跟软件断点的处理逻辑差不多，唯一的区别就是第一步获取异常信息，在exceptionrecord结构体中，有一个数组exceptioninformation，根据",{"_index":4895,"title":{},"body":{"3440657":{}}}],["接着我们就需要按照顺序去编写代码，首先第一步是创建套接字，这个需要用到一个函数socket，其语法如下",{"_index":9727,"title":{},"body":{"1015818":{}}}],["接着我们想要在javascript中去调用这个com组件，编写代码",{"_index":3215,"title":{},"body":{"1015823":{}}}],["接着我们找到pte的值为0x25d97867",{"_index":9432,"title":{},"body":{"1015831":{}}}],["接着我们找到该记事本进程的cr3寄存器值：0x16bcf000，使用dd指令（dd前需要加上感叹号）加上第一部分的值在第一级页找到第二级页地址",{"_index":9408,"title":{},"body":{"1015831":{}}}],["接着我们按开发文档上zwopenprocess的格式自定义一个函数，并且定义好ntopenprocess的函数指针在自定义的函数内最终调用原函数",{"_index":5835,"title":{},"body":{"1015847":{}}}],["接着我们按照流程来，获取到当前程序的cr3值0x219cd000，并且输入到程序中",{"_index":9358,"title":{},"body":{"1015831":{}}}],["接着我们来了解一下_eprocess的其他几个成员",{"_index":10963,"title":{},"body":{"1703937":{}}}],["接着我们来理一下这段伪代码的流程",{"_index":10654,"title":{},"body":{"2424889":{}}}],["接着我们来看一下中断门的执行流程，实际上和调用门差别不是很大，可以类比的来看",{"_index":9262,"title":{},"body":{"1015831":{}}}],["接着我们来看一下这两个函数：sendmessage与postmessage，这两者都是用于发送消息的，但不同之处在于前者是同步发送消息，后者是异步发送消息",{"_index":4011,"title":{},"body":{"3440655":{}}}],["接着我们来看下导出表的结构，你会发现我们实际上找到的导出表，其整体大小是大于如下结构（40字节），这是因为在这张表中还包含了3个子表，也就是如下结构体的最后三个成员",{"_index":6464,"title":{},"body":{"1015828":{}}}],["接着我们来看线程切换的函数switchcontext，一开始进行堆栈的提升然后将当前线程用到的寄存器入栈，接着分别给esi、edi存入当前和要切换的线程结构体地址，并将当前的栈顶即esp寄存器给到当前线程结构体的kernelstack成员，然后就是经典的线程切换操作，将当前的栈顶指向要切换的线程结构体成员kernelstack，再将其对应存入的结构体进行弹出，最后ret指令最为精巧，将启动线程的函数地址给到eip，这样下一次要执行的函数就是启动线程的函数",{"_index":11173,"title":{},"body":{"1703937":{}}}],["接着我们来调试，当调试器断点到除零异常时，就会发现无论我们怎么f9，断点依然停留在这里，这是因为调试器并没有处理这个异常",{"_index":4782,"title":{},"body":{"3440657":{}}}],["接着我们根据段描述符的base，即0xffdff000，它指向的就是当前cpu的kpcr结构",{"_index":2532,"title":{},"body":{"1015846":{}}}],["接着我们看kapc.normalroutine的值为0，以及链表为空的情况下的情况，向下走就直接将当前apc挂入到对应的队列中",{"_index":10891,"title":{},"body":{"2424869":{}}}],["接着我们看下发数据，使用函数send，其语法如下",{"_index":9818,"title":{},"body":{"1015818":{}}}],["接着我们要拆分modr/m为三个部分，先将其转为2进制：00",{"_index":12017,"title":{},"body":{"1015817":{}}}],["接着我们要拆分modr/m为三个部分，先将其转为2进制：0110",{"_index":12038,"title":{},"body":{"1015817":{}}}],["接着我们跟进raiseexception函数发现，正是这几个传参填充了_exception_record结构体，在这里我们会发现两个比较关键成员的值都与cpu异常记录时的赋值内容不一致，首先是exceptioncode，它的值很明显是一个windows异常状态码中没有的（即0xe06d7363），这是因为在软件模拟产生的异常场景下，exceptioncode的值是根据不同的编译环境而生成的；其次是exceptionaddress，如下图中我们可以看见，它的值是rasieexception函数的首地址，而并不是真正产生异常的那段地址",{"_index":4263,"title":{},"body":{"2949166":{}}}],["接着我们还需要去ho",{"_index":6683,"title":{},"body":{"1933380":{}}}],["接着我们进入_ldrpinitializeprocess函数，这个函数的内容太多，我们只看关键的点。首先，通过将peb的地址存储到ebx寄存器中。接下来检查peb结构体中偏移为0x2的位置，即beingdebugged的值是否为0。如果不等于0，将跳转并调用函数dbgbreakpoint。dbgbreakpoint函数就是执行了",{"_index":4755,"title":{},"body":{"3440657":{}}}],["接着我们需要一个in",{"_index":4821,"title":{},"body":{"3440657":{}}}],["接着我们需要分析一下kewaitforsingleobject函数，来看下它对不同的事件对象类型做的不同处理，通过ida打开ntoskrnl.exe即可。如下图所示，我们可以看见当事件对象的type为0时（即通知类型事件对象），waitforsingleobject函数在处理时并不会修改signalstate，因此每个等待该对象的进程都可以从等待网中摘除，从而唤醒线程继续执行代码；当事件对象的type为1时（即同步类型事件对象），waitforsingleobject函数在处理时修改signalstate为0，因此只有一个线程能够得到执行",{"_index":10684,"title":{},"body":{"2424889":{}}}],["接着我们需要在dbconnect头文件中声明接口和接口函数",{"_index":3143,"title":{},"body":{"1015823":{}}}],["接着我们需要将内存对齐后的值减去原sizeofrawdata的值，得出一个差值",{"_index":6437,"title":{},"body":{"1015828":{}}}],["接着我们需要找到合适的hook点，也就是我们代码流程切换指令替换的位置，这里我们选择比较方便的push、ret指令，也就是要找一个非全局变量相关的位置，如上图标红所示即一个比较不错的hook点，接着我们来编写自定义函数的代码，__declspec(naked)用于表示这是一个裸函数这样编译器就不会为该函数的结尾加入ret指令",{"_index":5908,"title":{},"body":{"1015847":{}}}],["接着我们需要构造一下修改的指令，即push、ret指令，直接使用硬编码的方式即可",{"_index":5926,"title":{},"body":{"1015847":{}}}],["接着我们需要运行程序，然后在windbg中断点输入!proç",{"_index":9354,"title":{},"body":{"1015831":{}}}],["接着我们需要通过封装好的函数pcap_findalldevs去获取物理网卡信息，其语法如下（参考官方手册：https://www.winpcap.org/docs/docs_412/html",{"_index":10118,"title":{},"body":{"1015818":{}}}],["接着找到你物理机上的windbg（x86）文件，并发送快捷方式到桌面，修改快捷方式的目标值为",{"_index":8977,"title":{},"body":{"1015831":{}}}],["接着是dos块，这个大小是不固定的，但是在上文中，我们了解到可以根据某个值定位到pe文件头，我们可以先找到pe文件头，这样夹在他们之间的就是dos块了，在这里就是image_dos_header结构体的e_lfanew成员，如上图所示这里对应的值是0xf8",{"_index":6011,"title":{},"body":{"1015828":{}}}],["接着是unique函数，如下图所示当使用这个函数的时候就会删除所有和前一个元素相同的元素，需要注意这里并不是删除所有重复的而是相邻的，如果你想删除所有重复的完全可以搭配sort函数一起使用",{"_index":11417,"title":{},"body":{"1015814":{}}}],["接着服务器端响应该请求，返回了syn+ack（确认字符）包表示允许连接，同样也有一个seq=0，并且多出了一个ack=1，同样这里的seq是随机表示的，而ack则是由第一个包的seq=0这个值+1的结果",{"_index":9913,"title":{},"body":{"1015818":{}}}],["接着来看pe文件头，其第一个是pe文件头标志，这里占4字节，也就是上文图中所示的0x4550（pe标识是不能修改的），所以在这不赘述了；pe文件头第二部分就是pe文件表头image_file_header结构，这个结构占20字节，我们也称之为标准pe头",{"_index":6014,"title":{},"body":{"1015828":{}}}],["接着构建任务门描述符，根据tss段描述符的位置得出选择子带入并结合门描述符的结构，最终得出任务门描述符为：0000e500`004b0000，在windbg中写入idt表",{"_index":9375,"title":{},"body":{"1015831":{}}}],["接着查tabl",{"_index":12073,"title":{},"body":{"1015817":{}}}],["接着根据函数地址表地址带入系统调用号找到内核函数的地址，如下图所示我们就找到了readprocessmemory最终调用的内核函数ntreadvirtualmemory，它的汇编代码我们也一清二楚",{"_index":2576,"title":{},"body":{"1015846":{}}}],["接着添加方法即可",{"_index":3211,"title":{},"body":{"1015823":{}}}],["接着看下面的代码，首先提升堆栈至trap_frame结构体顶部，也就是指向了结构体的第一个成员，然后将3环原来cs的值即trap_frame+0x6c+arg_0(0x4)给到ebx，在将cs和1进行与运算判断调用0环函数的来源权限，也就是cpl，然后将与运算的结果给到结构体_kthread的先前模式previousmode，这样做的意义是因为有些内核函数可以被3环、0环调用，但由于权限的不同所以执行的内容也不一样，因此需要通过先前模式来决定执行的内容。再接下来就是将栈底指向栈顶的位置，也就是都指向trap_frame结构体的第一个成员位置，再将_kthread中的trap_frame结构体地址取出，临时存放至当前trap_frame结构体的0x3c偏移位，由于trap_frame的内容发生了变化，最后再把当前最新的trap_frame结构体地址存入_kthread中的trap_frame结构体位置（即0x134偏移位",{"_index":2537,"title":{},"body":{"1015846":{}}}],["接着第二段代码用于读取共享的数据，我们需要在原有进程不关闭的情况下另起一个进程",{"_index":6842,"title":{},"body":{"2949228":{}}}],["接着要在对象创建的时候去初始化这个值，在atl中初始化的话，你可以在头文件中找到finalconstruct方法，并在该方法体中去初始化",{"_index":3135,"title":{},"body":{"1015823":{}}}],["接着调用即可",{"_index":3260,"title":{},"body":{"1015823":{}}}],["接着跟进跳转，我们可以看见获取到kapc的首地址，将几个成员kernelroutine、normalroutine、normalcontext、systemargument1、systemargument1取出，分别压入栈中，便于后续的使用，在这操作之间有一层判断，判断normalroutine是否为0，即表示当前内核apc函数是否为空，不为空则表示存在apc函数，就会进行跳转",{"_index":10910,"title":{},"body":{"2424869":{}}}],["接着跟进这个地址就可以找到导出表了",{"_index":6463,"title":{},"body":{"1015828":{}}}],["接着需要知道哪个控件接收这个信号",{"_index":4141,"title":{},"body":{"1015820":{}}}],["接着，如果你要让这个节中存放代码并且需要执行的话，就需要修改节的属性；然后我们需要去修改扩展pe头中的sizeofimage成员，该成员表示在内存中整个pe文件映射的大小，如下图是当前的值",{"_index":6384,"title":{},"body":{"1015828":{}}}],["接着，我们只需要添加自己的指令进去即可，这边还是套用在空白区时所使用的指令messageboxa（0x77d5050b），并计算出偏移量",{"_index":6390,"title":{},"body":{"1015828":{}}}],["接着，我们可以看一下创建窗口的api到底是怎么调用的：createwindow",{"_index":3959,"title":{},"body":{"3440655":{}}}],["接着，我们就按照顺序逐步去编写代码即可",{"_index":10200,"title":{},"body":{"1015818":{}}}],["接着，我们还需要修改入口函数的地址为当前地址，这样当前程序运行的时候才会先执行我们的代码，执行完成我们插入的代码后就会jmp回入口函数",{"_index":6364,"title":{},"body":{"1015828":{}}}],["控件",{"_index":1128,"title":{},"body":{"1015822":{}}}],["控件会自己处理消息，并在自己状态发生改变时通知父窗口",{"_index":7831,"title":{},"body":{"1015833":{}}}],["控件类型",{"_index":1074,"title":{},"body":{"1015822":{}}}],["控制cpu的运行方式和工作状态",{"_index":5406,"title":{},"body":{"1015825":{}}}],["控制台程序是从main函数为入口开始执行的，而win32窗口程序是从winmain函数开始执行的",{"_index":7704,"title":{},"body":{"1015833":{}}}],["控制寄存器",{"_index":9595,"title":{},"body":{"1015831":{}}}],["控制寄存器主要用于控制和确定cpu的操作模式，一共由5个控制寄存器，分别是cr0",{"_index":9596,"title":{},"body":{"1015831":{}}}],["控制标志位：df、if、tf",{"_index":5405,"title":{},"body":{"1015825":{}}}],["描述符",{"_index":9366,"title":{},"body":{"1015831":{}}}],["描述符与选择子",{"_index":8956,"title":{},"body":{"1015831":{}}}],["描述符表gdt",{"_index":11074,"title":{},"body":{"1703937":{}}}],["提供对数据的只写访问",{"_index":11720,"title":{},"body":{"1015814":{}}}],["提供对数据的只读访问",{"_index":11718,"title":{},"body":{"1015814":{}}}],["提供读写操作，并能向前和向后操作",{"_index":11724,"title":{},"body":{"1015814":{}}}],["提供读写操作，并能向前推进迭代器",{"_index":11722,"title":{},"body":{"1015814":{}}}],["提供读写操作，并能在数据中随机移动",{"_index":11726,"title":{},"body":{"1015814":{}}}],["提供面向对象的精简包装，mfc6.0中大约封装了200个类，分别封装了wi",{"_index":9,"title":{},"body":{"1015822":{}}}],["提问：1+1=3成立吗",{"_index":4998,"title":{},"body":{"1015825":{}}}],["提问：结构体指针一定要指向结构体吗？如下代码就是最好的解释",{"_index":2201,"title":{},"body":{"1015843":{}}}],["插入代码执行",{"_index":6386,"title":{},"body":{"1015828":{}}}],["搴忓彿",{"_index":6571,"title":{},"body":{"1015828":{}}}],["搴熷純",{"_index":9216,"title":{},"body":{"1015831":{}}}],["操作宏",{"_index":10049,"title":{},"body":{"1015818":{}}}],["操作数宽度前缀指令，硬编码：66，其是用来改变操作数的宽度，这种改变是双向的，例如你当前操作数的宽度是32位的，当你在硬编码之前加上66，则操作数的宽度变成16位，反之如果你当前操作数的宽度是16位的，加上之后就会变成32位",{"_index":11808,"title":{},"body":{"1015817":{}}}],["操作系统会创建一个新的物理页，并将源文件的内容拷贝到新的物理页中",{"_index":7055,"title":{},"body":{"2949228":{}}}],["操作系统内核程序，有这么多消息要处理，所以操作系统会将所有消息区分类别，每个消息都有独一无二的编号",{"_index":7800,"title":{},"body":{"1015833":{}}}],["操作系统限制",{"_index":6871,"title":{},"body":{"2949228":{}}}],["操作结果码(0",{"_index":2858,"title":{},"body":{"1015823":{}}}],["支持多重选择",{"_index":1135,"title":{},"body":{"1015822":{}}}],["支持多重选择，列表项的选择状态随着用户对该项单击或双击鼠标而翻转",{"_index":1142,"title":{},"body":{"1015822":{}}}],["收集并统计网络流量信息",{"_index":10108,"title":{},"body":{"1015818":{}}}],["改变",{"_index":9179,"title":{},"body":{"1015831":{}}}],["数据",{"_index":10286,"title":{},"body":{"1015818":{}}}],["数据交换配置",{"_index":5663,"title":{},"body":{"1015847":{}}}],["数据宽度",{"_index":1523,"title":{},"body":{"1015825":{},"1015843":{}}}],["数据宽度也有自己的单位",{"_index":5079,"title":{},"body":{"1015825":{}}}],["数据库",{"_index":4975,"title":{"1015850":{}},"body":{"1015826":{},"1015827":{}}}],["数据库和表操作",{"_index":8755,"title":{},"body":{"1015850":{}}}],["数据库安装",{"_index":8737,"title":{},"body":{"1015850":{}}}],["数据库应用程序：通过数据库管理系统提供的接口与之通信，访问和管理数据的应用程序",{"_index":8741,"title":{},"body":{"1015850":{}}}],["数据库的层次",{"_index":8750,"title":{},"body":{"1015850":{}}}],["数据库的操作",{"_index":8756,"title":{},"body":{"1015850":{}}}],["数据库管理系统：专门用于创建和管理数据库的统一软件，介于应用和操作系统之间。比如mysql、sql",{"_index":8739,"title":{},"body":{"1015850":{}}}],["数据库：数据库就是一个用来存储各种数据的容器",{"_index":8738,"title":{},"body":{"1015850":{}}}],["数据段的权限检查",{"_index":9088,"title":{},"body":{"1015831":{}}}],["数据类型",{"_index":1904,"title":{},"body":{"1015843":{},"1015850":{}}}],["数据类型bstr是com中的字符串类型，bstr*也就是其的指针；bstr是指向的是宽字符串的指针，是一个带有字符计数值的字符串，且这个计数值是保存在字符数组的开头的4字节中",{"_index":2921,"title":{},"body":{"1015823":{}}}],["数据类型variant_bool的定义如下，其本质就是一个short类型",{"_index":2918,"title":{},"body":{"1015823":{}}}],["数据结构",{"_index":4976,"title":{},"body":{"1015826":{}}}],["数据范围",{"_index":1524,"title":{},"body":{"1015843":{}}}],["数据表的操作",{"_index":8814,"title":{},"body":{"1015850":{}}}],["数据，可以有多个数据库，每个数据库中也有多个表，每个表中也有多个列，所有列查询出一行数据（数据是有多行的",{"_index":8754,"title":{},"body":{"1015850":{}}}],["数组",{"_index":1900,"title":{},"body":{"1015843":{}}}],["数组也是可以作为参数传递，我们想要传入一个数组，然后打印数组的值（定义数组参数时方括号中不要写入常量",{"_index":2126,"title":{},"body":{"1015843":{}}}],["数组内有两个成员",{"_index":10811,"title":{},"body":{"2424869":{}}}],["数组参数传递",{"_index":2121,"title":{},"body":{"1015843":{}}}],["数组指针的使用",{"_index":2258,"title":{},"body":{"1015843":{}}}],["数组指针的宽度和赋值",{"_index":2234,"title":{},"body":{"1015843":{}}}],["数组指针的运算",{"_index":2248,"title":{},"body":{"1015843":{}}}],["数组是c语言中非常重要的一个概念，学习c语言主要就是两个知识点：数组、指针，学好这两个，那么你的c语言一定也会很好",{"_index":1901,"title":{},"body":{"1015843":{}}}],["数组的定义格式如下",{"_index":1903,"title":{},"body":{"1015843":{}}}],["数组索引，举例说明",{"_index":6934,"title":{},"body":{"2949228":{}}}],["整个代码转换下来，流程也清楚了，最后就是iskindof函数的原理了，我们可以下断点跟进",{"_index":287,"title":{},"body":{"1015822":{}}}],["整数的存储格式如下",{"_index":1541,"title":{},"body":{"1015843":{}}}],["整数类型",{"_index":1515,"title":{},"body":{"1015843":{}}}],["文件分析",{"_index":6004,"title":{},"body":{"1015828":{}}}],["文件包含",{"_index":2397,"title":{},"body":{"1015843":{}}}],["文件包含可能会存在重复包含的情况，我们可以使用条件编译、前置声明的方式避免",{"_index":2403,"title":{},"body":{"1015843":{}}}],["文件包含有两种格式，分别是",{"_index":2398,"title":{},"body":{"1015843":{}}}],["文件我们用之前写的test1.exe即可，将编译好的dll和test1.exe放在同一个目录并打开test1.ex",{"_index":8442,"title":{},"body":{"1015833":{}}}],["文件相关ap",{"_index":8106,"title":{},"body":{"1015833":{}}}],["文件系统",{"_index":7981,"title":{},"body":{"1015833":{}}}],["文件系统是操作系统用于管理磁盘上文件的方法和数据结构；简单点说就是在磁盘上如何组织文件的方法",{"_index":7982,"title":{},"body":{"1015833":{}}}],["断点类型（r/wx）：00（执行断点），01（写入断点），11（访问断点",{"_index":4922,"title":{},"body":{"3440657":{}}}],["断点长度（lenx）：00（1字节），01（2字节），11（4字节",{"_index":4921,"title":{},"body":{"3440657":{}}}],["断链实现代码",{"_index":8549,"title":{},"body":{"1015833":{}}}],["新增节",{"_index":6405,"title":{},"body":{"1015828":{}}}],["新增节，首先判断是否有足够的空间可以添加一个节表成员（40字节），我们可以找到一个pe文件来看一下它的节表部分是否有足够多的空白区，首先我们根据标准pe头的第二个成员（numberofsections）知道有4个节",{"_index":6407,"title":{},"body":{"1015828":{}}}],["新建windows窗口程序项目",{"_index":7701,"title":{},"body":{"1015833":{}}}],["新建的项目里的头文件已经把需要用到的windows.h头文件包含了",{"_index":7705,"title":{},"body":{"1015833":{}}}],["新建项目，选择mfc",{"_index":13,"title":{},"body":{"1015822":{}}}],["无任何参数",{"_index":3370,"title":{},"body":{"1015840":{}}}],["无参数",{"_index":9211,"title":{},"body":{"1015831":{}}}],["无源码的情况下修改功能、汉化软件",{"_index":5982,"title":{},"body":{"1015828":{}}}],["无符号形式打印",{"_index":1674,"title":{},"body":{"1015843":{}}}],["无符号数",{"_index":5098,"title":{},"body":{"1015825":{}}}],["无符号数、有符号数",{"_index":5094,"title":{},"body":{"1015825":{}}}],["无符号数则不需要如此",{"_index":1564,"title":{},"body":{"1015843":{}}}],["无符号数和有符号数，你不需要去弄清楚这两个名词的意思，只需要了解其不同点与相同点",{"_index":5095,"title":{},"body":{"1015825":{}}}],["无符号：无负数的领域，如年龄",{"_index":1552,"title":{},"body":{"1015843":{}}}],["无论你是跨段提权或不提权的长调用指令，本质上都是要通过调用门去进行的，长调用指令执行流程",{"_index":9192,"title":{},"body":{"1015831":{}}}],["无论可等待对象是何种类型，线程都是通过waitforsingleobject、waitformultipleobjects函数进入等待状态的，这两个函数是理解线程等待与唤醒机制的核心。本章节，我们以waitforsingleobject函数为例，进行分析，来了解线程等待与唤醒机制的本质",{"_index":10599,"title":{},"body":{"2424889":{}}}],["无论堆内存还是栈内存，都是操作系统启动时操作系统使用virtualalloc函数替我们申请好的",{"_index":7943,"title":{},"body":{"1015833":{}}}],["无论我的窗口有多大都是同等比例去缩放的，并且都是一个正圆形",{"_index":682,"title":{},"body":{"1015822":{}}}],["无论是od还是windbg，都需要符号文件的加持才能在逆向时获得到更多的信息，例如你用od去调试程序时经常可以看到一些window",{"_index":5500,"title":{},"body":{"1015847":{}}}],["无论是正常场景，还是挂靠场景，我们使用apcstatepointer[apcstateindex]的组合方式，都可以获取到apcstate，即线程当前使用的apc信息",{"_index":10819,"title":{},"body":{"2424869":{}}}],["无论是正常状态还是挂靠状态，都有两个apc队列，一个是内核队列，一个是用户队列。每当要挂入一个apc时，不管是内核空间还是用户空间的函数，内核都要准备一个kapc的数据结构，并将这个结构挂到相应的apc队列中",{"_index":10823,"title":{},"body":{"2424869":{}}}],["无论是由硬件设备触发的中断请求还是由cpu产生的异常，处理程序都在idt表中",{"_index":9591,"title":{},"body":{"1015831":{}}}],["无返回值",{"_index":3369,"title":{},"body":{"1015840":{}}}],["既然com可以多接口，那也同样可以多个com类，这个的操作步骤在atl中都已经了解过了，不过多赘述",{"_index":3176,"title":{},"body":{"1015823":{}}}],["既然this指针会作为参数传递，我们是否也可以直接使用这个指针呢？答案是可以的",{"_index":3326,"title":{},"body":{"1015840":{}}}],["既然单行代码会存在问题，那么我们尝试将其变成单行汇编指令是否就可以避免这个问题呢？如下汇编所示",{"_index":6638,"title":{},"body":{"1933380":{}}}],["既然可以创建节点，我们还可以去获取节点，例如我可以去获取一个父节点，也就是最顶层的那个节点",{"_index":1240,"title":{},"body":{"1015822":{}}}],["既然有索引，也就表示肯定有张表，可以通过索引在表中找到回到3环的落脚点。这张表就叫做回调函数表，其包含多个回调函数，根据不同的索引值routineindex，keusermodecallback就可以调用表内不同的回调函数",{"_index":4074,"title":{},"body":{"3440655":{}}}],["既然进程给线程提供了环境信息，线程也要能找到进程才能知道这些信息，因此在线程结构体中实际上也有成员是指向了进程结构体的",{"_index":11272,"title":{},"body":{"1703937":{}}}],["日期格式",{"_index":8781,"title":{},"body":{"1015850":{}}}],["早期，要开发一个图形软件，我需要知道输出设备的显卡，然后根据厂家提供的不同地接口去编写，所以我们开发软件就会非常困难；在windows里面通过对驱动程序的统一管理，将设备接口细节隐藏在系统内部，我们不需要去管那么多东西，我们在编写图形软件的时候用一个公用的虚拟设备即可，这个虚拟设备就是dç",{"_index":600,"title":{},"body":{"1015822":{}}}],["时代是在进步的，技术也是。伟大的前辈在基于「汇编语言」的基础上，又发明了一类语言，我们称之为「高级语言」，例如c语言，其特点就是更加贴近人类的思维、表达方式，但与「汇编语言」一样的是：「高级语言」也需要编译器将其转为计算机能读懂的机器语言。所以综上所述，不是语言变得强大了，而是编译器变得越来越强大",{"_index":4983,"title":{},"body":{"1015825":{}}}],["时跳转到当前指令地址",{"_index":11965,"title":{},"body":{"1015817":{}}}],["时钟中断",{"_index":11209,"title":{},"body":{"1703937":{}}}],["时钟中断切换",{"_index":11202,"title":{},"body":{"1703937":{}}}],["时钟中断导致线程进行切换也是有前置条件的，第一是当前的线程cpu时间片到期，第二是有备用的线程（即_kpcr.prcbdata.nextthread存储了另外的线程地址），以上两种情况时候发生的时间中断才会进行线程切换",{"_index":11223,"title":{},"body":{"1703937":{}}}],["时间日期类型",{"_index":8780,"title":{},"body":{"1015850":{}}}],["时间片就是cpu分配给各个程序的时间，每个进程被分配一个时间段，称作它的时间片，表示该进程允许运行的时间，使各个程序从表面上看是同时进行的",{"_index":11225,"title":{},"body":{"1703937":{}}}],["时间片管理与备用线程",{"_index":11222,"title":{},"body":{"1703937":{}}}],["时，系统会调用内核函数mmunloadsystemimage处理后事，它会根据",{"_index":10752,"title":{},"body":{"2424889":{}}}],["映射dll（ntdll.ldrinitializeth",{"_index":7203,"title":{},"body":{"1015833":{}}}],["映射exe文件（低2gi",{"_index":7198,"title":{},"body":{"1015833":{}}}],["映射模式",{"_index":631,"title":{},"body":{"1015822":{}}}],["映射模式是设备描述表的属性，用于确定逻辑坐标值到设备坐标值的转换，传送给cdc输出函数的是逻辑坐标值，设备坐标值是指窗口中相应的像素位置",{"_index":629,"title":{},"body":{"1015822":{}}}],["映射系统dll（ntdll.dl",{"_index":7200,"title":{},"body":{"1015833":{}}}],["是可以的，因为*px实际上就是int[2][2]，我们之前学过多维数组，int[2][2]也就等于int[4]，所以{1,2,3,4}就给了int[2][2]，也就是{{1,2",{"_index":2289,"title":{},"body":{"1015843":{}}}],["显示一列带有小图标的选项",{"_index":1180,"title":{},"body":{"1015822":{}}}],["显示反汇编代码，在常规调试器中，能够实时查看程序的反汇编代码至关重要。因此，在触发断点后，至少要显示断点周围的反汇编代码。用户知道的信息越多自然对调试就越有帮助",{"_index":4829,"title":{},"body":{"3440657":{}}}],["显示断点地址，便于使用者更清晰的知道当前行为所在位置",{"_index":4825,"title":{},"body":{"3440657":{}}}],["显示选项详细资料，并且其会创建一个表头，这也是我们用的最多的一个风格",{"_index":1182,"title":{},"body":{"1015822":{}}}],["智能指针不能执行addref与release操作，因为智能指针封装了com接口指针的addref与release操作，会智能判断何时内部调用com接口的addref，何时调用com接口的rel",{"_index":3252,"title":{},"body":{"1015823":{}}}],["智能指针与接口指针的比较如下",{"_index":3247,"title":{},"body":{"1015823":{}}}],["智能指针使用的注意点",{"_index":3253,"title":{},"body":{"1015823":{}}}],["智能指针已经保证了addref和release的正确调用，所以不需要，也不能够再调用addref和rel",{"_index":3254,"title":{},"body":{"1015823":{}}}],["智能类型",{"_index":3229,"title":{},"body":{"1015823":{}}}],["更多可以参考如下",{"_index":6217,"title":{},"body":{"1015828":{}}}],["更改",{"_index":7022,"title":{},"body":{"2949228":{}}}],["更改原点",{"_index":691,"title":{},"body":{"1015822":{}}}],["最",{"_index":2038,"title":{},"body":{"1015843":{}}}],["最后一个问题，假设我们把utf",{"_index":7112,"title":{},"body":{"1015833":{}}}],["最后一个问题：私有成员是否会被继承",{"_index":3436,"title":{},"body":{"1015840":{}}}],["最后一个需要我们了解的成员是dllcharacteristics，它用来表示pe文件的特性，但不要被名字所迷惑，它不是针对dll文件的；它的数据宽度是16位（4字节），其每一数据位对应的属性如下所示",{"_index":6191,"title":{},"body":{"1015828":{}}}],["最后一道防线与二次分发",{"_index":4784,"title":{},"body":{"3440657":{}}}],["最后交给调试器来处理",{"_index":4871,"title":{},"body":{"3440657":{}}}],["最后你只需要编译一下，在项目debug目录可以找到tlb文件",{"_index":3106,"title":{},"body":{"1015823":{}}}],["最后使用iskindof函数去判断当前是否继承某个类，其语法格式如下所示",{"_index":226,"title":{},"body":{"1015822":{}}}],["最后别忘记在卸载函数时还原指令以及一些细节上的调整，最终完整代码如下",{"_index":5952,"title":{},"body":{"1015847":{}}}],["最后在文件末尾添加对应节的数据（0x100",{"_index":6413,"title":{},"body":{"1015828":{}}}],["最后客户端收到确认请求，回应服务器端的请求表示连接成功，发送了ack包，seq我们就不用管了，这里ack的值也是第二个包的seq=0这个值+1的结果",{"_index":9914,"title":{},"body":{"1015818":{}}}],["最后就是reverse函数，如下图所示当使用这个函数的时候就会颠倒链表",{"_index":11419,"title":{},"body":{"1015814":{}}}],["最后我们再来看一下kiuserexceptiondispatcher函数，它首先会调用rtldispatchexception，这个函数包括了对veh、seh的查找，以及查看是否存在顶层函数，以及是否被调试。全部都判断完了以后，返回一个布尔值，返回为真，调用zwcontinue再进入0环，返回为假，调用zwraiseexception进行第二轮异常分发",{"_index":4516,"title":{},"body":{"2949166":{}}}],["最后我们只需要调用接口函数即可",{"_index":3170,"title":{},"body":{"1015823":{}}}],["最后我们就可以了解整个异常分发、处理的过程了，如下图所示",{"_index":4517,"title":{},"body":{"2949166":{}}}],["最后我们来看一下写拷贝的原理，pte是与物理内存相关的，而vad树则与线性地址有关，写拷贝实现就利用了这两者的属性",{"_index":7049,"title":{},"body":{"2949228":{}}}],["最后我们来看一下结构体数组的内存结构，如下代码",{"_index":2070,"title":{},"body":{"1015843":{}}}],["最后我们来看下type域名的值，按表格所示，它的值也就是0x0",{"_index":9040,"title":{},"body":{"1015831":{}}}],["最后我们编译一下即可生成",{"_index":2620,"title":{},"body":{"1015823":{}}}],["最后我们编译代码，在项目的debug目录下找到.sys文件，这就是我们编译出来的驱动程序",{"_index":5478,"title":{},"body":{"1015847":{}}}],["最后我们需要修改一下oep（这里的oep是",{"_index":6402,"title":{},"body":{"1015828":{}}}],["最后打开qt",{"_index":4103,"title":{},"body":{"1015820":{}}}],["最后执行，我们就可以很清晰的看见执行流程了",{"_index":178,"title":{},"body":{"1015822":{}}}],["最后结论",{"_index":1481,"title":{},"body":{"1015843":{}}}],["最后进入调试模式，管道连接上会自动打开windbg程序",{"_index":5498,"title":{},"body":{"1015847":{}}}],["最后需要注意的是idl生成的两个文件可以直接被引用，这样你就可以不用去引入类型库文件（tlb文件）了",{"_index":3174,"title":{},"body":{"1015823":{}}}],["最后需要知道这个信号应该调用什么功能函数（槽函数，与信号接收的控件绑定",{"_index":4142,"title":{},"body":{"1015820":{}}}],["最后，如果你不使用了这个扩展就需要使用wsacleanup函数去终止使用；建议在实际编程过程中，应该将函数的返回值存储下来并做判断",{"_index":9862,"title":{},"body":{"1015818":{}}}],["最后，我们可以简单总结一下",{"_index":10913,"title":{},"body":{"2424869":{}}}],["最后，我们在按钮左键单击事件中去调用接口函数即可",{"_index":3121,"title":{},"body":{"1015823":{}}}],["最后，我们来总结一下",{"_index":1450,"title":{},"body":{"1015843":{}}}],["最后，来使用wireshark抓包测试一下看看这个全貌",{"_index":9928,"title":{},"body":{"1015818":{}}}],["最后：在一般情况下，我们通常会去使用if语句而不是switch，因为if语句在编程时更加得心应手，所以我们可以暂且忽视效率而去选择更加便利的编写方式",{"_index":1828,"title":{},"body":{"1015843":{}}}],["最后：指针类型是可以做比较的",{"_index":2092,"title":{},"body":{"1015843":{}}}],["最后：注意，以上所述特性适合于除了线程以外的所有内核对象，创建进程，同时也会创建线程，如果你想把线程关闭，首先需要closehandle函数要让其计数器为0，其次需要有人将其关闭，所以假设我们创建了一个ie进程打开了一个网站，如果我们只是在代码中使用了closehandle函数，这样ie浏览器并不会关闭，需要我们手动点击窗口的关闭按钮才行（只有线程关闭了，进程才会关闭",{"_index":7314,"title":{},"body":{"1015833":{}}}],["最后：继承的类a和继承的类b的顺序，谁在前，谁就在内存分布中的前面；不推荐使用多重继承，这会增加程序的复杂度",{"_index":3414,"title":{},"body":{"1015840":{}}}],["最大数据宽度)的倍数",{"_index":2040,"title":{},"body":{"1015843":{}}}],["最大物理内存",{"_index":6868,"title":{},"body":{"2949228":{}}}],["最好的隐藏是无模块注入，也就是代码注入，将我们想要执行的代码注入进去",{"_index":8595,"title":{},"body":{"1015833":{}}}],["最核心的功能模块，如管理内存、进程和线程",{"_index":2412,"title":{},"body":{"1015846":{}}}],["最简单的分支语句就是：if，示例代码如下",{"_index":1784,"title":{},"body":{"1015843":{}}}],["最终值为0，那么可以得出这样一个结论：1>2为表达式，表达式成立则执行问号后面的内容，不成立则执行冒号后面的内容",{"_index":1781,"title":{},"body":{"1015843":{}}}],["最终将所有代码调优一下细节即可，完整代码如下",{"_index":5896,"title":{},"body":{"1015847":{}}}],["最终得出线性地址为：0xc0001000，那么根据这个规律我们就知道在0xc0000000的基础上每递增0x1000，即表示获取下一个ptt，0x1000正好是4096字节（一个页的大小4kb",{"_index":9473,"title":{},"body":{"1015831":{}}}],["最终我们实现了服务器端的功能，完整代码如下",{"_index":9844,"title":{},"body":{"1015818":{}}}],["最终我们得出按内存对齐的值为0x8000，然后我们要将sizeofrawdata和virtualsize成员的值修改为0x9000（0x8000+0x10",{"_index":6383,"title":{},"body":{"1015828":{}}}],["最终我们得出调用门描述符为",{"_index":9206,"title":{},"body":{"1015831":{}}}],["最终我们得到一个结论，那就是双接口即满足脚本语言的使用方便，又满足编译语言的使用高效性，这就是它的优点",{"_index":3207,"title":{},"body":{"1015823":{}}}],["最终指令就是：mov",{"_index":12075,"title":{},"body":{"1015817":{}}}],["最终结果如上所示，我们看到在dbgview.exe进程的内存空间中，其地址0xbab63000内容存储着我们驱动程序定义的内容，也就证实了4gb空间中高2g是共享的，这高2g的空间就是的内核空间",{"_index":5596,"title":{},"body":{"1015847":{}}}],["最终结果如下图所示，我们可以看到查找出来的物理页内容与上图中的ptt表内容是一致的",{"_index":9465,"title":{},"body":{"1015831":{}}}],["最终结果我们知道了其主机号为0.0.0.117",{"_index":9683,"title":{},"body":{"1015818":{}}}],["最终跳转到0x0040d80c，打印出了c",{"_index":1817,"title":{},"body":{"1015843":{}}}],["最终，我们在赋值的时候还是要选择某个成员去赋值，代码实现如下（需要注意的是，这里的ip地址是不可以乱写的需要通过命令行或其他方式获取本机的ip地址",{"_index":9780,"title":{},"body":{"1015818":{}}}],["有2个函数可以添加元素，第一个push_back函数",{"_index":11347,"title":{},"body":{"1015814":{}}}],["有三种方法来构造框架窗口",{"_index":45,"title":{},"body":{"1015822":{}}}],["有些人就疑问了，为什么这种写法不可以呢",{"_index":3548,"title":{},"body":{"1015840":{}}}],["有几个线程就表示着有几个代码在执行，但是它们并不一定是同时执行，例如单核的cpu情况下是不存在多线程的，线程的执行是有时间顺序的，但是cpu切换的非常快，所以给我们的感觉和多核cpu没什么区别",{"_index":7394,"title":{},"body":{"1015833":{}}}],["有参数",{"_index":9231,"title":{},"body":{"1015831":{}}}],["有很多人可能会好奇为什么连接4个点需要5组x",{"_index":739,"title":{},"body":{"1015822":{}}}],["有心之人可能会发现在使用printf函数时，有好几个百分号的东西，这就叫做占位符，一共分为如下这几种",{"_index":1672,"title":{},"body":{"1015843":{}}}],["有心人会在「汇编学习环境搭建」章节看见dtdebug的图，堆栈的位置在软件的右下方",{"_index":5322,"title":{},"body":{"1015825":{}}}],["有符号数",{"_index":5099,"title":{},"body":{"1015825":{}}}],["有符号数与无符号数存储数据是没有区别的，只有在扩展与比较时才会存在区别",{"_index":1557,"title":{},"body":{"1015843":{}}}],["有符号数形式打印",{"_index":1673,"title":{},"body":{"1015843":{}}}],["有符号：涉及负数的领域，如炒股",{"_index":1551,"title":{},"body":{"1015843":{}}}],["有这么多限制该怎么办？假设我们要将代码进程的代码拷贝过去，这段代码的作用就是创建文件，那么它得流程可以如下图所示",{"_index":8612,"title":{},"body":{"1015833":{}}}],["服务器端编程框架",{"_index":9714,"title":{},"body":{"1015818":{}}}],["服务类型（tos）：该字段用8位表示，该字段一般情况下不使用",{"_index":10275,"title":{},"body":{"1015818":{}}}],["未处理异常",{"_index":4478,"title":{},"body":{"2949166":{}}}],["未导出函数的使用",{"_index":5511,"title":{},"body":{"1015847":{}}}],["末尾不需要分号",{"_index":2373,"title":{},"body":{"1015843":{}}}],["本次实验我们只对第一张系统服务表的函数进行修改，所以我们可以先根据keservicedescriptortable需要获取系统服务表的地址。如下代码所示，我们按成员结构体定义好系统服务表和ssdt，并且导出keservicedescript",{"_index":5804,"title":{},"body":{"1015847":{}}}],["本章主要是学习如何进行gdi编程，但是我们在日常的工作中是不需要用到的，并且没有什么实际意义（需要的都有现成的），我们学习它就是为了来了解窗口的本质、消息机制的本质",{"_index":7652,"title":{},"body":{"1015833":{}}}],["本章主要是讲解在c语言中如何使用上一章所述的编码格式表示字符串",{"_index":7121,"title":{},"body":{"1015833":{}}}],["本章我们主要了解在正常的开发中r3应用是如何与r0驱动进行通信的，在这之前我们需要先学习一些新的概念来补全前置内容",{"_index":5633,"title":{},"body":{"1015847":{}}}],["本章我们主要分析内核异常是如何分发，如何处理的。首先我们需要来了解一下kidispatchexception函数的格式，及每个参数的作用",{"_index":4269,"title":{},"body":{"2949166":{}}}],["本章我们只需要了解cwinapp、cframw",{"_index":40,"title":{},"body":{"1015822":{}}}],["本章节主要了解一下jmp",{"_index":9105,"title":{},"body":{"1015831":{}}}],["本章节对createprocess函数的了解就是前2个参数和后2个参数，前两个参数：lpapplicationname、lpcommandline，第一个是需要启动的进程文件路径，第二个是命令行参数，如果你启动的进程有参数的可以可以传入",{"_index":7237,"title":{},"body":{"1015833":{}}}],["本章节我们所要学的就是mysql，你可以通过以下链接去下载安装",{"_index":8744,"title":{},"body":{"1015850":{}}}],["本章节我们来学习隐式链接，通过隐式链接我们只需要一次配置，之后就会非常的方便",{"_index":8358,"title":{},"body":{"1015833":{}}}],["本章节所学习的算法内容主要是第一个头文件<algorithm>，第二和第三个只要有所概念即可，无需深究",{"_index":11606,"title":{},"body":{"1015814":{}}}],["本章课程需要具备汇编语言基础，若无汇编语言基础是无法去理解课程中所讲的一些知识点和技术细节的；同时也表示本课程是以汇编语言来理解c语言，透过本质理解高级语言",{"_index":1334,"title":{},"body":{"1015843":{}}}],["本章通过代码来模拟mfc的初始化过程",{"_index":167,"title":{},"body":{"1015822":{}}}],["本节课需要掌握的知识点",{"_index":356,"title":{},"body":{"1015822":{}}}],["本节需要掌握的内容）2.使用loadframe直接构造它（后续课程讲解）3.使用文档模板间接构建它",{"_index":47,"title":{},"body":{"1015822":{}}}],["本节需要掌握的是知识点",{"_index":532,"title":{},"body":{"1015822":{}}}],["本节需要掌握的知识点",{"_index":26,"title":{},"body":{"1015822":{}}}],["术语概念",{"_index":9385,"title":{},"body":{"1015831":{}}}],["术语：线性地址就是虚拟内存的地址",{"_index":7897,"title":{},"body":{"1015833":{}}}],["机器码",{"_index":8601,"title":{},"body":{"1015833":{}}}],["权限检查",{"_index":9064,"title":{},"body":{"1015831":{}}}],["权限检查：根据代码段是否一致来做权限检查（xpl数值比较），如果是非一致代码段则要求cpl==dpl&&rpl<=dpl，如果是一致代码段则要求cpl>=dpl",{"_index":9117,"title":{},"body":{"1015831":{}}}],["权限：如果你的内部类不想外部创建对象，那就定义到private内即可；而如果你用到这个内部类的情况非常的少，例如你只有一个成员函数需要使用到，那么完全可以定义到这个函数内",{"_index":3719,"title":{},"body":{"1015840":{}}}],["杈撳叆杈撳嚭鍏辩敤鍙傛暟锛堝彲閫夛紝鎴戜滑鍙互鐩存帴鍐橬ull锛夛紝sockaddr缁撴瀯浣撶殑澶у皬锛屾敞鎰忚繖閲岄渶瑕佷紶鍏ュ疄闄呯殑澶у皬",{"_index":9954,"title":{},"body":{"1015818":{}}}],["杈撳叆杈撳嚭鍏辩敤鍙傛暟锛屾鏌�/杈撳嚭socket涓婄殑寮傚父閿欒",{"_index":10027,"title":{},"body":{"1015818":{}}}],["杈撳叆杈撳嚭鍏辩敤鍙傛暟锛屾鏌�/杈撳嚭鍙啓鐨剆oc",{"_index":10025,"title":{},"body":{"1015818":{}}}],["杈撳叆杈撳嚭鍏辩敤鍙傛暟锛屾鏌�/杈撳嚭鍙鐨剆oc",{"_index":10023,"title":{},"body":{"1015818":{}}}],["杈撳叆绫诲瀷锛屽垱寤鸿缃",{"_index":8398,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屽嵎鍚嶉暱搴",{"_index":8041,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屽爢澶у皬",{"_index":8395,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屽畨鍏ㄥ睘鎬э紝鍖呭惈瀹夊叏鎻忚堪绗",{"_index":8394,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屾悳绱㈠彞鏌",{"_index":8205,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屾枃浠剁郴缁熷悕绉扮殑闀垮害",{"_index":8052,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屾枃浠舵垨鐩綍鐨勫悕绉",{"_index":8147,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屾枃浠跺彞鏌",{"_index":8132,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛屾枃浠跺悕",{"_index":8198,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛岀嚎绋嬪嚱鏁帮紝绾跨▼鍑芥暟鍦板潃搴旇鏄湪鍒殑杩涚▼涓瓨鍦ㄧ殑",{"_index":8396,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛岃幏鍙栧綋鍓嶇洰褰曞悕鐨勫ぇ灏",{"_index":8094,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛岃繖涓彧鏈塆etfileexinfostandard涓�涓",{"_index":8150,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛岃繘绋嬪彞鏌",{"_index":8393,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛岃鑾峰彇瀛楃涓茬殑澶у皬",{"_index":8001,"title":{},"body":{"1015833":{}}}],["杈撳叆绫诲瀷锛岄┍鍔ㄥ櫒瀛楃涓",{"_index":8036,"title":{},"body":{"1015833":{}}}],["杈撳叆缂撳啿鍖哄湴鍧",{"_index":5758,"title":{},"body":{"1015847":{}}}],["杈撳叆缂撳啿鍖洪暱搴",{"_index":5759,"title":{},"body":{"1015847":{}}}],["杈撳嚭澧炲姞鍓嶇殑鏁伴噺",{"_index":10711,"title":{},"body":{"2424889":{}}}],["杈撳嚭瀵勫瓨鍣ㄧ殑鍊艰瘉鏄庡畬鎴愪簡浠诲姟鍒囨崲",{"_index":9352,"title":{},"body":{"1015831":{}}}],["杈撳嚭绫诲瀷锛學in32_find_data缁撴瀯浣撴寚閽堬紝瀛樻斁鎵惧埌鐨勬枃浠舵暟鎹",{"_index":8206,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛學in32_find_data缁撴瀯浣撴寚閽堬紝鎵惧埌鐨勬枃浠舵暟鎹",{"_index":8201,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屼笌鎸囧畾鏂囦欢绯荤粺鐩稿叧鐨勬爣蹇",{"_index":8048,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屽嵎瀹楀簭鍒楀彿",{"_index":8044,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屽皢鑾峰彇鐨勫瓧绗︿覆鏀惧埌璇ュ弬鏁颁腑",{"_index":8002,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屽綋鍓嶇洰褰曞悕绉",{"_index":8095,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屾寚瀹氭枃浠剁郴缁熸敮鎸佺殑鏂囦欢鍚嶇粍浠剁殑鏈�澶ч暱搴",{"_index":8046,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屾暟鎹斁鍝",{"_index":8161,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屾枃浠剁郴缁燂紙濡侳at鎴朜tfs锛夊悕绉",{"_index":8050,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛屾枃浠跺睘鎬у拰淇℃伅鐨勭粨鏋",{"_index":8152,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛岀嚎绋媔d",{"_index":8399,"title":{},"body":{"1015833":{}}}],["杈撳嚭绫诲瀷锛岃繑鍥炲嵎鍚",{"_index":8039,"title":{},"body":{"1015833":{}}}],["杈撳嚭缂撳啿鍖哄湴鍧",{"_index":5760,"title":{},"body":{"1015847":{}}}],["杈撳嚭缂撳啿鍖洪暱搴",{"_index":5761,"title":{},"body":{"1015847":{}}}],["杈撳嚭鍙傛暟锛堝彲閫夛紝鎴戜滑鍙互鐩存帴鍐橬ull锛夛紝sockaddr缁撴瀯浣",{"_index":9952,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛屽姞瀵嗗悗鐨勪俊鎭",{"_index":10498,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛屾墽琛屽け璐ョ殑閿欒淇℃伅瀛樻斁鐨勭紦鍐插尯",{"_index":10124,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛屾帴鏀舵暟鎹殑缂撳啿鍖",{"_index":9950,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛屾暟鎹紦鍐插尯锛屾帴鏀跺埌鐨勬暟鎹",{"_index":9811,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛岃в瀵嗗悗鐨勪俊鎭",{"_index":10507,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛岃繖鏄竴涓簩绾ф寚閽堬紝瀹冨疄闄呬笂鏄竴涓摼琛",{"_index":10122,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛岄渶瑕佷紶鍏ヤ竴涓猻ockaddr缁撴瀯浣撶殑鍦板潃",{"_index":9799,"title":{},"body":{"1015818":{}}}],["杈撳嚭鍙傛暟锛岄渶瑕佷紶鍏ヤ竴涓猻ockaddr缁撴瀯浣撻暱搴︾殑鍦板潃",{"_index":9801,"title":{},"body":{"1015818":{}}}],["杞崲娑堟伅",{"_index":3983,"title":{},"body":{"1015833":{},"3440655":{}}}],["杞欢鏂偣锛堝紓甯告柇鐐癸級",{"_index":4889,"title":{},"body":{"3440657":{}}}],["条件标志位",{"_index":5407,"title":{},"body":{"1015825":{}}}],["条件标志位：sf、zf、of、cf、af、pf",{"_index":5403,"title":{},"body":{"1015825":{}}}],["条件编译与文件包含",{"_index":2374,"title":{},"body":{"1015843":{}}}],["条件编译，就是当满足条件时才会要求编译器进行编译；如下代码当if成立则变异printf，否则就不编译",{"_index":2375,"title":{},"body":{"1015843":{}}}],["条件跳转，后跟一个字节立即数的偏移(有符号)，共两个字节",{"_index":11909,"title":{},"body":{"1015817":{}}}],["条件跳转，后跟四个字节立即数的偏移(有符号)，共五个字节。如果条件成立，跳转到当前指令地址",{"_index":11942,"title":{},"body":{"1015817":{}}}],["条件运算符",{"_index":1777,"title":{},"body":{"1015843":{}}}],["条件运算符又称为三元运算符，由问号、分号组成，示例代码如下",{"_index":1778,"title":{},"body":{"1015843":{}}}],["来找到链表头索引",{"_index":6994,"title":{},"body":{"2949228":{}}}],["来源函数",{"_index":5684,"title":{},"body":{"1015847":{}}}],["来设置每列的宽度",{"_index":1140,"title":{},"body":{"1015822":{}}}],["杩囨护鍑芥暟鐨勮捣濮嬪湴鍧",{"_index":4444,"title":{},"body":{"2949166":{}}}],["杩囨护鏉′欢",{"_index":3992,"title":{},"body":{"3440655":{}}}],["杩囨护鏉′欢锛氭寚瀹氭帴鏀舵秷鎭殑绐楀彛",{"_index":3990,"title":{},"body":{"3440655":{}}}],["杩愯绋嬪簭",{"_index":4128,"title":{},"body":{"1015820":{}}}],["杩愯鎵�闇�瀛愮郴缁熺増鏈彿",{"_index":6155,"title":{},"body":{"1015828":{}}}],["杩斿洖",{"_index":286,"title":{},"body":{"1015822":{},"1015833":{}}}],["杩斿洖浠庨槦鍒椾腑鑾峰彇鐨勬秷鎭",{"_index":3989,"title":{},"body":{"3440655":{}}}],["杩斿洖涓�涓彞鏌",{"_index":1300,"title":{},"body":{"1015822":{}}}],["杩斿洖绫诲瀷",{"_index":1349,"title":{},"body":{"1015833":{},"1015840":{},"1015843":{}}}],["杩斿洖绫诲瀷瀵瑰簲鐨勬暟鎹",{"_index":1352,"title":{},"body":{"1015843":{}}}],["杩斿洖绫诲瀷鏄瓧绗︿覆s鐨勯暱搴︼紝涓嶅寘鍚粨鏉熺鍙穃0",{"_index":2144,"title":{},"body":{"1015843":{}}}],["杩斿洖缁勫悎妗嗘垨鑰呭垪琛ㄦ绗竴涓彲瑙侀」鐨勪笅鏍囷紝鐩稿簲鐨勪篃鏈夎缃笅鏍囩殑",{"_index":1169,"title":{},"body":{"1015822":{}}}],["杩斿洖缁�3鐜灏戞暟鎹紝娌℃湁鍒欏～0",{"_index":5718,"title":{},"body":{"1015847":{}}}],["杩斿洖褰撳墠绾跨▼i",{"_index":7406,"title":{},"body":{"1015833":{}}}],["杩斿洖鍊",{"_index":74,"title":{},"body":{"1015822":{},"1015833":{}}}],["杩斿洖鍊兼槸涓�涓狣owrd锛屾病鏈夊弬鏁",{"_index":7989,"title":{},"body":{"1015833":{}}}],["杩斿洖鍊兼槸绾跨▼鍙ユ焺",{"_index":7396,"title":{},"body":{"1015833":{}}}],["杩斿洖鑷冲嚭閿欎綅缃噸鏂版墽琛",{"_index":4420,"title":{},"body":{"2949166":{}}}],["杩斿洖闃熷垪澶撮儴(鏈�澶х殑鍏冪礌)鐨勫紩鐢紝浣嗕笉绉婚櫎",{"_index":11596,"title":{},"body":{"1015814":{}}}],["杩樺師瀵勫瓨鍣",{"_index":5919,"title":{},"body":{"1015847":{}}}],["杩樺師鏇挎崲鎸囦护",{"_index":5964,"title":{},"body":{"1015847":{}}}],["杩欎釜浠呰兘鑾峰彇灞炴",{"_index":8143,"title":{},"body":{"1015833":{}}}],["杩欎釜鍊间笌kthread缁撴瀯浣撶殑0x165鍋忕щ浣嶆垚鍛樹竴鏍凤紝浣嗕笉鍚岀殑鏄繖閲岀殑杩欎釜鎴愬憳鏈�4涓�硷細0銆�1銆�2銆�3",{"_index":10851,"title":{},"body":{"2424869":{}}}],["杩欎釜鍑芥暟灏咰wnd鐨勫鎴峰尯鐨勫鎴峰潗鏍囨嫹璐濆埌鎸囧悜鐨勭粨鏋勪腑",{"_index":672,"title":{},"body":{"1015822":{}}}],["杩欎釜鍖呯殑闀垮害",{"_index":10193,"title":{},"body":{"1015818":{}}}],["杩欎釜鍙傛暟",{"_index":7360,"title":{},"body":{"1015833":{}}}],["杩欎釜鍙互鑾峰彇灞炴�с�佷俊鎭",{"_index":8146,"title":{},"body":{"1015833":{}}}],["杩欏彲纭繚灏嗙浉鍚岀殑瀹夊叏璁剧疆搴旂敤鍒拌澶囩殑鍛藉悕绌洪棿涓殑浠讳綍鎵撳紑鐨勮姹",{"_index":5655,"title":{},"body":{"1015847":{}}}],["杩欓噷浣跨敤static鍏抽敭璇嶆槸涓轰簡閬垮厤閲嶅鍒濆鍖",{"_index":10399,"title":{},"body":{"1015818":{}}}],["杩欓噷浣跨敤浜唃ets鍑芥暟鏇挎崲浜唖canf鍑芥暟锛屾槸鍥犱负scanf鍑芥暟鍦ㄨ幏鍙栨暟鎹殑鏃跺�欓亣鍒颁簡绌烘牸锛屽氨涓嶄細鍐嶅幓绠＄┖鏍煎悗闈㈢殑鏁版嵁浜嗭紝鐩稿綋浜庢埅鏂簡",{"_index":9980,"title":{},"body":{"1015818":{}}}],["杩欓噷瀹炵幇浜咺unknow鐨勪笁涓嚱鏁",{"_index":3147,"title":{},"body":{"1015823":{}}}],["杩欓噷灏辨槸璁剧疆浣犵殑閫傞厤鍣ㄦā寮忥紝鎴戜滑闇�瑕佹姄鍖呯殑璇濆氨瑕佽缃垚娣峰悎妯″紡锛屽啓1鎴栬�卼rue閮藉彲浠",{"_index":10163,"title":{},"body":{"1015818":{}}}],["杩欓噷鎵撳嵃鐨勫氨鏄",{"_index":2286,"title":{},"body":{"1015843":{}}}],["杩欓噷鐢熸垚浜嗙被宸ュ巶",{"_index":3150,"title":{},"body":{"1015823":{}}}],["杩欓噷鐨勬垚鍛榣val灏辫〃绀虹潃long锛岃繖涓彲浠ュ湪variant缁撴瀯浣撶殑瀹氫箟涓壘鍒",{"_index":3063,"title":{},"body":{"1015823":{}}}],["杩涚▼i",{"_index":7352,"title":{},"body":{"1015833":{}}}],["杩涚▼鍒涘缓绫诲瀷淇℃伅",{"_index":4712,"title":{},"body":{"3440657":{}}}],["杩涚▼鍙ユ焺",{"_index":7216,"title":{},"body":{"1015833":{}}}],["杩涚▼鍚嶏紙瀹屾暣鏂囦欢璺緞锛",{"_index":7210,"title":{},"body":{"1015833":{}}}],["杩涚▼閫�鍑",{"_index":4584,"title":{},"body":{"3440657":{}}}],["杩涚▼閫�鍑虹被鍨嬩俊鎭",{"_index":4725,"title":{},"body":{"3440657":{}}}],["杩滅▼鍒涘缓鏂囦欢",{"_index":8631,"title":{},"body":{"1015833":{}}}],["杩炴帴com缁勪欢",{"_index":2789,"title":{},"body":{"1015823":{}}}],["杩炴帴鎴愪竴涓鏂瑰舰",{"_index":749,"title":{},"body":{"1015822":{}}}],["杩炴帴鎴愪竴涓鏂瑰舰锛",{"_index":738,"title":{},"body":{"1015822":{}}}],["杩炴帴鏈嶅姟鍣",{"_index":9865,"title":{},"body":{"1015818":{}}}],["杩唬鍣ㄥ彉閲忓悕",{"_index":11713,"title":{},"body":{"1015814":{}}}],["极端例子",{"_index":2346,"title":{},"body":{"1015843":{}}}],["构建执行：ctrl",{"_index":1417,"title":{},"body":{"1015843":{}}}],["构建：f7",{"_index":1415,"title":{},"body":{"1015843":{}}}],["构造tss段描述符",{"_index":9305,"title":{},"body":{"1015831":{}}}],["构造一个没有初始化的cfile对象，对象调用cfile::open函数",{"_index":1251,"title":{},"body":{"1015822":{}}}],["构造函数",{"_index":3343,"title":{},"body":{"1015840":{}}}],["构造函数与析构函数",{"_index":3342,"title":{},"body":{"1015840":{}}}],["构造函数名称与类名一样",{"_index":3357,"title":{},"body":{"1015840":{}}}],["构造完整的t",{"_index":9304,"title":{},"body":{"1015831":{}}}],["构造新文件，如果文件存在，则长度变为0",{"_index":1263,"title":{},"body":{"1015822":{}}}],["构造类型：数组、结构体、共用体（联合",{"_index":1519,"title":{},"body":{"1015843":{}}}],["构造调用门",{"_index":9199,"title":{},"body":{"1015831":{}}}],["析构函数",{"_index":3362,"title":{},"body":{"1015840":{}}}],["析构函数函数是在对象销毁前执行，那么对象会在什么时候销毁呢？可以看下反汇编代码",{"_index":3364,"title":{},"body":{"1015840":{}}}],["析构函数函数的语法跟构造函数很像，其区别就是：析构函数需要在函数名前面加一个波浪号、析构函数只能有一个、析构函数函数不可以写参数、构造函数是创建对象的时候执行，但是析构函数函数是在对象销毁前执行",{"_index":3363,"title":{},"body":{"1015840":{}}}],["查idt表找到对应的中断处理函数（这里是0x01号中断",{"_index":4932,"title":{},"body":{"3440657":{}}}],["查idt表找到对应的中断处理函数（这里页异常是0x0e号中断",{"_index":4867,"title":{},"body":{"3440657":{}}}],["查idt表，找到任务门描述符",{"_index":9370,"title":{},"body":{"1015831":{}}}],["查找元素",{"_index":11476,"title":{},"body":{"1015814":{}}}],["查找元素可以使用find函数",{"_index":11477,"title":{},"body":{"1015814":{}}}],["查找全局句柄表",{"_index":8730,"title":{},"body":{"1933378":{}}}],["查找文件",{"_index":8195,"title":{},"body":{"1015833":{}}}],["查询socket是否在集合中，不存在返回0，存在返回非0",{"_index":10062,"title":{},"body":{"1015818":{}}}],["查询是否通过setunhandledexceptionfilter注册处理函数，如果有就调用",{"_index":4502,"title":{},"body":{"2949166":{}}}],["查询链表实验",{"_index":6991,"title":{},"body":{"2949228":{}}}],["标准pe头",{"_index":6095,"title":{},"body":{"1015828":{}}}],["标准pe头是pe头的第二个成员，它是如下所示的结构体",{"_index":6096,"title":{},"body":{"1015828":{}}}],["标志寄存器",{"_index":5400,"title":{},"body":{"1015825":{}}}],["标志符号：【sf】—运算结果最高位为1，sf=1，否则sf=0。有符号数用最高有效位表示数据的符号，最高有效位是标志符号的状态",{"_index":5412,"title":{},"body":{"1015825":{}}}],["标志：该字段是与ip分段有关的，其中有三位，但只有两位是有效的，分别为mf、df、mf；mf表示后面是否还有分段，为1时，表示后面还有分段；df表示是否能分段，为0表示可以分段",{"_index":10279,"title":{},"body":{"1015818":{}}}],["标识了用户空间（低2g）有哪些地址没被占用",{"_index":10994,"title":{},"body":{"1703937":{}}}],["标识符",{"_index":2339,"title":{},"body":{"1015843":{}}}],["标识符(参数表",{"_index":2351,"title":{},"body":{"1015843":{}}}],["标识：该字段是ip软件实现的时候自动产生的，该字段的目的不是为了接受方的按序接受而设置的，而是在ip分段以后，用来标识同一段分段的，方便ip分段的重组",{"_index":10278,"title":{},"body":{"1015818":{}}}],["标题中的erx就表示eax、ecx、edx等等32位的寄存器",{"_index":11839,"title":{},"body":{"1015817":{}}}],["标题里的id，i我们都知道是立即数了，再来看一下官方文档的",{"_index":11892,"title":{},"body":{"1015817":{}}}],["标题里的rb表示着8位寄存器，ib表示着是8位立即数，这些都可以通过之前的pdf文档查阅得知（1字节等于8位",{"_index":11884,"title":{},"body":{"1015817":{}}}],["栈",{"_index":6769,"title":{},"body":{"2949228":{}}}],["栈其实和堆一样，也是预先分配好的内存，但是栈不需要heapalloc这种api来进行分配，可以直接使用，例如我们声明一个局部变量就会使用到栈",{"_index":6770,"title":{},"body":{"2949228":{}}}],["栈顶：0x00130000，栈底：0x0012d000，也就是说我们可以从0x0012d000用到0x0013000",{"_index":5326,"title":{},"body":{"1015825":{}}}],["树形视图控件treectrl",{"_index":1219,"title":{},"body":{"1015822":{}}}],["根据cs的值查gdt表，找到对应的段描述符，这个描述符是一个调用门描述符",{"_index":9193,"title":{},"body":{"1015831":{}}}],["根据msdn",{"_index":7460,"title":{},"body":{"1015833":{}}}],["根据ssdt获取系统服务表",{"_index":5803,"title":{},"body":{"1015847":{}}}],["根据tss段描述符的结构构造描述符，首先获取tss的地址，在代码中下断点然后查看地址即可",{"_index":9334,"title":{},"body":{"1015831":{}}}],["根据virtualaddress找到第一张导入表",{"_index":6551,"title":{},"body":{"1015828":{}}}],["根据上一章中找到的第一张导入表信息",{"_index":6578,"title":{},"body":{"1015828":{}}}],["根据下图所示的中断描述符表我们可以知道除0异常对应的0号中断处理函数，因此我们就可以在ida中进入对应的处理函数",{"_index":4255,"title":{},"body":{"2949166":{}}}],["根据之前的了解我们可以知道modr/m字段是用来进行内存寻址的，可当地址形如ds:[eax",{"_index":12047,"title":{},"body":{"1015817":{}}}],["根据之前的学习，我们知道在0环的fs:[0]指向的是_kpcr结构体，_kpcr的第一个成员是nttib，而nttib的第一个字段是exceptionlist，exceptionlist这个字段是一个指针，它指向了一个结构体_exception_registration_record，该结构体有2个成员，第一个成员next指向下一个_exception_registration_record结构体地址（如果没有下一个结构体，则该值为",{"_index":4289,"title":{},"body":{"2949166":{}}}],["根据函数名称取得函数序号，为调用",{"_index":3186,"title":{},"body":{"1015823":{}}}],["根据函数名称表对应的索引去查函数序号表对应索引的序号",{"_index":6532,"title":{},"body":{"1015828":{}}}],["根据函数序号表对应索引的序号查询函数地址表对应索引的地址",{"_index":6533,"title":{},"body":{"1015828":{}}}],["根据列出的二叉树结构体，我们知道成员startingvpn、endingvpn用于表达线性地址区间，因此我们可以通过遍历所有子树的这两个成员，只要不在线性地址区间内的线性地址就可以被我们使用的",{"_index":6709,"title":{},"body":{"2949228":{}}}],["根据地址就可以找到对应的函数名（字符串见0x00即止",{"_index":6514,"title":{},"body":{"1015828":{}}}],["根据序号，执行函数",{"_index":3189,"title":{},"body":{"1015823":{}}}],["根据栈我们知道我们传递的参数是夹在调用者esp和调用者cs中间的，也就是如下图展示的这样",{"_index":9246,"title":{},"body":{"1015831":{}}}],["根据段选择子查表获取段描述符：因为ti=0，所以查gdt表，又根据index=4找到对应的段描述符，如果段描述符为代码段、系统段（调用门、tss任务段、任务门），那么该指令是允许跳转的",{"_index":9116,"title":{},"body":{"1015831":{}}}],["根据注释可以非常清晰的看见每个参数的意义，主要说下后两个参数，afx_pmsg",{"_index":434,"title":{},"body":{"1015822":{}}}],["根据窗口句柄找到窗口对象_window_object；（usergetwindowobject函数",{"_index":4021,"title":{},"body":{"3440655":{}}}],["根据窗口对象获取窗口过程函数，并通过0环发起调用",{"_index":4022,"title":{},"body":{"3440655":{}}}],["根据调用门结构我们知道它的高32位第0位至4位表示的就是参数数量，也就是你要传递的参数的个数",{"_index":9233,"title":{},"body":{"1015831":{}}}],["根据这段公式，我们的rpl值并不小于等于dpl，因此我们所执行的向段寄存器写值指令是无法执行成功的",{"_index":9096,"title":{},"body":{"1015831":{}}}],["根节点地址，该指令可以列出所在进程内线性地址的记录情况（包含了结构体地址、节点层级、线性地址区间、内存类型、内存属性等",{"_index":6711,"title":{},"body":{"2949228":{}}}],["棣栧厛闇�瑕佽幏鍙栧嚱鏁扮殑鍦板潃",{"_index":8490,"title":{},"body":{"1015833":{}}}],["棣栭儴闀垮害",{"_index":10317,"title":{},"body":{"1015818":{}}}],["椤哄簭鎸夌収鍏堢敓浜у悗娑堣垂锛屾墍浠ヤ簨浠禔璁剧疆淇″彿锛屼簨浠禕闇�瑕侀�氳繃鐢熶骇鑰呯嚎绋嬫潵璁剧疆淇″彿",{"_index":7638,"title":{},"body":{"1015833":{}}}],["椤惧悕鎬濅箟灏辨槸缃戠粶涓婄殑瀛楄妭搴",{"_index":9901,"title":{},"body":{"1015818":{}}}],["椤靛尯鍩熷ぇ灏",{"_index":4858,"title":{},"body":{"3440657":{}}}],["椹卞姩瀵硅薄鍦板潃",{"_index":5630,"title":{},"body":{"1015847":{}}}],["椹卞姩绋嬪簭鍏ュ彛鍑芥暟",{"_index":5472,"title":{},"body":{"1015847":{}}}],["楂�32浣嶏紝鍦�32浣嶈绠楁満閲岄�氬父璁剧疆涓虹",{"_index":7955,"title":{},"body":{"1015833":{}}}],["概述",{"_index":3291,"title":{},"body":{"1015840":{}}}],["榛樿鏈夊垵濮嬪�硷紝鍙笉鍐",{"_index":4157,"title":{},"body":{"1015820":{}}}],["榧犳爣宸﹂敭鎸変笅鎶捣鐨勬秷鎭鐞嗗嚱鏁帮紝moveto绉诲姩璧峰浣嶇疆鍒皌estpoint鐨勫潗鏍囷紝鑰屽悗lineto鐢荤嚎涓洪紶鏍囧乏閿姮璧风殑浣嶇疆",{"_index":978,"title":{},"body":{"1015822":{}}}],["榧犳爣宸﹂敭鎸変笅鐨勬秷鎭鐞嗗嚱鏁帮紝缁欏叏灞�鐨凜point璧嬪",{"_index":977,"title":{},"body":{"1015822":{}}}],["榧犳爣杈撳叆绾跨▼锛歁ousethre",{"_index":3947,"title":{},"body":{"3440655":{}}}],["榧犳爣鍧愭爣",{"_index":4031,"title":{},"body":{"3440655":{}}}],["模仿360/qq管家获取网速",{"_index":10393,"title":{},"body":{"1015818":{}}}],["模块目录与工作目录",{"_index":7366,"title":{},"body":{"1015833":{}}}],["模块隐藏",{"_index":8532,"title":{},"body":{"1015833":{}}}],["模块隐藏之pe指纹",{"_index":8584,"title":{},"body":{"1015833":{}}}],["模块隐藏之vad树",{"_index":8592,"title":{},"body":{"1015833":{}}}],["模块隐藏之断链",{"_index":8534,"title":{},"body":{"1015833":{}}}],["模态对话框有一个特点，当我们调用了一个新的对话框之后，我们是没法再去点击第一个对话框的，只能等新的对话框结束才可以",{"_index":1054,"title":{},"body":{"1015822":{}}}],["模态对话框的意思：是指在用户想要对对话框以外的应用程序进行操作时，必须首先对该对话框进行响应，如单击【确定】或【取消】按钮之后，将该对话框关闭",{"_index":1052,"title":{},"body":{"1015822":{}}}],["模拟代码的第一部分就是要模拟线程结构体，我们保留最重要的成员进行模拟",{"_index":11101,"title":{},"body":{"1703937":{}}}],["模拟线程切换",{"_index":11098,"title":{},"body":{"1703937":{}}}],["模拟线程结构体",{"_index":11100,"title":{},"body":{"1703937":{}}}],["模板除了可以在函数中使用也可以在结构体（类）中使用模板，其格式如下所示",{"_index":3641,"title":{},"body":{"1015840":{}}}],["模版",{"_index":3623,"title":{},"body":{"1015840":{}}}],["正向迭代器：上面全部",{"_index":11733,"title":{},"body":{"1015814":{}}}],["正向：forw",{"_index":11721,"title":{},"body":{"1015814":{}}}],["正常情况下，cr3的值是由_ethread.tcb.apcstate.process提供，但cr3的值也可以改成和当前线程毫不相干的其他进程的directorytablebase，这样的手法我们称之为进程挂靠",{"_index":11279,"title":{},"body":{"1703937":{}}}],["正常情况下，一个设备对象是对应一个设备的，如：鼠标、键盘。但是设备对象也可以是一个抽象的概念，不对应到具体某个硬件，也就是我们可以使用如下代码去创建一个设备对象",{"_index":5640,"title":{},"body":{"1015847":{}}}],["正常情况下，当前线程使用的cr3是由其所属进程提供的（_ethread，0x44偏移位指定的_eprocess），正是因为如此，a进程中的线程只能访问a的内存。如果要让a进程中的线程能够访问b进程的内存，就必须要修改cr3的值为b进程的页目录表基址（b.directorytablebase），这就是所谓的进程挂靠",{"_index":11299,"title":{},"body":{"1703937":{}}}],["正常打开（p1）和在dtdebug调试工具（p2）中打开",{"_index":7295,"title":{},"body":{"1015833":{}}}],["正常画是没有问题的，但是我们鼠标按下之后在非客户区抬起，这样就不会有一条直线出现",{"_index":984,"title":{},"body":{"1015822":{}}}],["此刻我们是可以看见kernel32.dll模块的，但是当我们回车一下再来看就消失了",{"_index":8583,"title":{},"body":{"1015833":{}}}],["此时就会有个问题，在内层的_finally块代码是否会得到执行呢？我们可以实际运行下代码，如下图所示我们可以看见，_finally块的代码都得到了执行",{"_index":4476,"title":{},"body":{"2949166":{}}}],["此模式在32位mfc中无效，此模式在使用cfile::open时被映射为cfile::shareexclus",{"_index":1283,"title":{},"body":{"1015822":{}}}],["步入",{"_index":4961,"title":{},"body":{"3440657":{}}}],["步过",{"_index":4969,"title":{},"body":{"3440657":{}}}],["步骤四的结果还需要判断是否存在进位（与运算）：步骤二的结果与左移一位的步骤三结果",{"_index":5139,"title":{},"body":{"1015825":{}}}],["死亡",{"_index":10751,"title":{},"body":{"2424889":{}}}],["死亡线程",{"_index":10753,"title":{},"body":{"2424889":{}}}],["段",{"_index":8903,"title":{},"body":{"1015831":{}}}],["段偏移：该字段是与ip分段后，相应的ip段在总的ip段的位置",{"_index":10280,"title":{},"body":{"1015818":{}}}],["段前缀指令",{"_index":11797,"title":{},"body":{"1015817":{}}}],["段寄存器",{"_index":8904,"title":{},"body":{"1015831":{}}}],["段寄存器一共有8个：es、cs、ss、ds、fs、gs、ldtr、tr",{"_index":8908,"title":{},"body":{"1015831":{}}}],["段寄存器的结构与我们之前所了解的通用寄存器结构是不一样的，通用寄存器有32位（4字节）宽度，但是段寄存器却有96位（12字节）宽度",{"_index":8910,"title":{},"body":{"1015831":{}}}],["段寄存器的结构如下图所示，虽然它有96位宽度，但我们可见的部分只有16位",{"_index":8911,"title":{},"body":{"1015831":{}}}],["段描述符",{"_index":9000,"title":{},"body":{"1015831":{}}}],["段描述符的属性",{"_index":9018,"title":{},"body":{"1015831":{}}}],["段权限",{"_index":9063,"title":{},"body":{"1015831":{}}}],["段选择子",{"_index":9005,"title":{},"body":{"1015831":{}}}],["段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符。之前我们所举例的ax寄存器就可以称之为段选择子",{"_index":9006,"title":{},"body":{"1015831":{}}}],["每一个物理内存的大小是4kb，按照4kb大小来分页（page），所以如上图所示，就有物理页这个概念",{"_index":7892,"title":{},"body":{"1015833":{}}}],["每一个物理页都是该全局数组的一个成员，对应结构体_mmpfn，该结构体有很多union类型成员，也就表示当前结构体的意义很多",{"_index":6885,"title":{},"body":{"2949228":{}}}],["每一个线程都有一个内核堆栈，在系统调用章节时我们了解到使用api从3环进0环都要进行一个堆栈的切换，进0环所切换的堆栈就是内核堆栈。在线程结构体_kthread中有关于内核堆栈的相关信息（栈顶、栈底、栈边界",{"_index":11237,"title":{},"body":{"1703937":{}}}],["每一个进程都有自己的4gb线性地址空间，这是我们之前的学习中反复提到的，这4gb的线性地址空间的划分大致如下图所示。虽然每个线程名义上有4gb的内存空间，但实际上只有低2g的内存空间可以使用，高2g的内存空间是共用的。除此之外，我们可以根据如下图知道，4gb空间中只有用户模式区和内核区可以访问使用，而空指针赋值区和64kb禁入区是不允许的。无论是用户空间还是内核空间，肯定都是要记录线性地址的分配情况的，这样才不会出现重复分配的情况",{"_index":6690,"title":{},"body":{"2949228":{}}}],["每一个进程都有自己的一个4gb大小的虚拟空间，也就是从0x0",{"_index":7190,"title":{},"body":{"1015833":{}}}],["每一种状态对应一个链表，该链表串着所有当前状态的物理页，成员pagelocation的值和链表、状态、含义对应如下（都可以表示为空闲的物理页",{"_index":6958,"title":{},"body":{"2949228":{}}}],["每个cpu都有自己的控制区，这块控制区我们称之为kpcr。你的cpu有几核就有几个对应的kpcr",{"_index":2508,"title":{},"body":{"1015846":{}}}],["每个gui线程有且只有一个消息队列",{"_index":3922,"title":{},"body":{"3440655":{}}}],["每个windows进程在0环都有一个对应的结构体：_eprocess，该结构体包含了进程所有的重要信息",{"_index":10938,"title":{},"body":{"1703937":{}}}],["每个应用程序都会有自己的独立4gb内存空间，这里的内存说的就是这4gb而并不是我们所熟悉的内存条",{"_index":5180,"title":{},"body":{"1015825":{}}}],["每个控件都有自己独有的信号和槽",{"_index":4158,"title":{},"body":{"1015820":{}}}],["每个线程只有一个消息队列",{"_index":7694,"title":{},"body":{"1015833":{}}}],["每个线程都有自己的栈，局部变量是存储在栈中的，这就意味着每个进程都会有一份自己的“句柄变量”（栈），如果线程仅仅使用自己的“局部变量”那就不存在线程安全问题，反之，如果多个线程共用一个全局变量呢？那么在什么情况下会有问题呢？那就是当多线程共用一个全局变量并对其进行修改时则存在安全问题，如果仅仅是读的话没有问题",{"_index":7489,"title":{},"body":{"1015833":{}}}],["每个进程或线程都一个结构体来描述本身，同样cpu也有这样一个结构体来描述自己，即_kpcr",{"_index":11049,"title":{},"body":{"1703937":{}}}],["每个进程都有4gb的虚拟内存，虚拟内存的地址是如何划分的？首先，我们需要知道一个虚拟内存分为高2g、低2g",{"_index":7894,"title":{},"body":{"1015833":{}}}],["每个进程都有一份私有的句柄表，而操作系统也有一份句柄表，我们称之为全局句柄表，这张表里包含了所有正在运行的进程、线程",{"_index":7333,"title":{},"body":{"1015833":{}}}],["每个进程都有自己的4gb内存，但是这个4gb内存并不是真实存在的，而是一块虚拟内存",{"_index":7889,"title":{},"body":{"1015833":{}}}],["每个进程默认都会有一个线程，每启动一个线程，在内存里就会多一个线程结构体，即_ethr",{"_index":11008,"title":{},"body":{"1703937":{}}}],["每个链表的结构如下，可以看见都是第3、4个成员为list_head，它们都是链表头的索引，不同的是前者是从前往后，后者是从后往前",{"_index":6981,"title":{},"body":{"2949228":{}}}],["每次时钟中断会调用keupdateruntime函数，该函数每次执行就会将当前线程结构体成员quantum的值减少3个单位，如果减到0则将_kpcr.prcbdata.quantumend的值设置为非0来表示当前时间片已经到期了，我们可以通过ida来看到这一过程",{"_index":11228,"title":{},"body":{"1703937":{}}}],["比如我们想要弹出一个提示窗口，win32",{"_index":7150,"title":{},"body":{"1015833":{}}}],["比如我现在的是是2gb（2048mb），我们可以在任务管理器清晰的看见物理内存的总数是接近2048*1024的",{"_index":7903,"title":{},"body":{"1015833":{}}}],["比如：淘宝，有很多店铺，虽然每个店铺卖的东西都不一样，但是他们同样都可以下单、评论、购物车，也就是说他们都遵守了这种标准规则；也就是说你可以把淘宝当作一个抽象类，其有很多成员：购物车、评论、商品展示区...但是他都没有定义，而是交给开淘宝店的人（子类）去根据标准规则定义",{"_index":3662,"title":{},"body":{"1015840":{}}}],["比较",{"_index":3246,"title":{},"body":{"1015823":{}}}],["汇编",{"_index":4973,"title":{},"body":{"1015826":{}}}],["汇编中的数据类型由程序员决定，也就是没有类型，程序员说是什么类型就是什么类型。所以当看到无符号数，则关注cf标志，看成有符号数，关注of标志",{"_index":5417,"title":{},"body":{"1015825":{}}}],["汇编代码",{"_index":11843,"title":{},"body":{"1015817":{}}}],["汇编学习环境搭建",{"_index":5143,"title":{},"body":{"1015825":{}}}],["汇编指令",{"_index":5223,"title":{},"body":{"1015825":{}}}],["汇编眼中的函数",{"_index":5363,"title":{},"body":{"1015825":{}}}],["汇编语言",{"_index":4980,"title":{"1015825":{}},"body":{"1015827":{}}}],["没有方法体的函数我们称之为纯虚函数，也就是说如下例子",{"_index":3574,"title":{},"body":{"1015840":{}}}],["没法直接管理内核对象，这时候句柄表就诞生了，但是需要注意的是，只有进程才会有句柄表，并且每一个进程都会有一个句柄表",{"_index":7309,"title":{},"body":{"1015833":{}}}],["注入代码",{"_index":8594,"title":{},"body":{"1015833":{}}}],["注入代码的思路",{"_index":8596,"title":{},"body":{"1015833":{}}}],["注入实现",{"_index":8443,"title":{},"body":{"1015833":{}}}],["注入成功",{"_index":8473,"title":{},"body":{"1015833":{}}}],["注册异常处理函数，并通过汇编的方式构造除0异常，这里也就将eax作为了除数，这样就可以触发异常，从而进入异常的处理",{"_index":4349,"title":{},"body":{"2949166":{}}}],["注册表脚本文件有什么作用：注册表脚本文件就是资源文件中的rgs后缀名文件，这里其实是要写入注册表里的信息，当调用注册函数的时候就会使用这里的信息写入到注册表中",{"_index":3100,"title":{},"body":{"1015823":{}}}],["注意",{"_index":1756,"title":{},"body":{"1015823":{},"1015825":{},"1015843":{}}}],["注意，如果你创建动态链接库的方式是extern的方式，那么在第三步加入函数声明时就应该按照extern的格式来",{"_index":8371,"title":{},"body":{"1015833":{}}}],["注意：一个线程可以有多个窗口，但是一个窗口只属于一个线程",{"_index":7699,"title":{},"body":{"1015833":{}}}],["注意：下文中出现的pe文件文件对齐与内存对齐一致，即rva等于foa，无需转换",{"_index":6553,"title":{},"body":{"1015828":{}}}],["注意：之前一直提到的堆栈实际上是两个概念",{"_index":3447,"title":{},"body":{"1015840":{}}}],["注意：代码段和系统段描述符中的检查方式是不一样的，这些将于后面的章节中了解到",{"_index":9097,"title":{},"body":{"1015831":{}}}],["注意：分支语句中可以嵌套分支语句，具体实现的功能看使用者",{"_index":1790,"title":{},"body":{"1015843":{}}}],["注意：前缀指令使用的时候是没有顺序的",{"_index":11813,"title":{},"body":{"1015817":{}}}],["注意：在一些新版本的c++编译器里面已经不再提供类似于友元这样的特性了",{"_index":3700,"title":{},"body":{"1015840":{}}}],["注意：在课程中给出的_declspec是有两个下划线的，经过查询之后实际上一个下划线和两个下划线是等价的",{"_index":8366,"title":{},"body":{"1015833":{}}}],["注意：如果df位为0，movs指令执行结束后，esi、edi的值自增；如果df位为1，movs指令执行结束后，esi、edi的值自减。（此块涉及标志寄存器：efl，可以向下翻阅相关知识",{"_index":5303,"title":{},"body":{"1015825":{}}}],["注意：端口号的范围就是0",{"_index":9698,"title":{},"body":{"1015818":{}}}],["注意：网络传输的字节序和你主机本身的字节序是不一样的，所以在转换的时候需要注意一下",{"_index":10293,"title":{},"body":{"1015818":{}}}],["注意：这里的rect对象名，如果我们直接写对象名称不要那个取地址符也是可以的，因为这样实际上就是拷贝一份过去，而如果传入指针实际上就是将当前对象的地址传过去，两者唯一区别就是前者拷贝过去的对象被修改了不会影响本身，但后者则会影响本身，前者需要重新开辟一块空间，其实也是一种资源浪费，我们这些代码理论上也不会修改我们的坐标点，所以我们还是直接使用取地址符传指针进去较好",{"_index":798,"title":{},"body":{"1015822":{}}}],["注：gs段寄存器没有属性值是因为window",{"_index":8932,"title":{},"body":{"1015831":{}}}],["注：int在16位计算机中与short宽度一样，在32位及以上的计算机中与long相同",{"_index":1533,"title":{},"body":{"1015843":{}}}],["注：变量类型用来说明数据宽度是多大",{"_index":1458,"title":{},"body":{"1015843":{}}}],["注：在这里会引出到很多不了解的概念和意义，不用深究，后续章节会去详细讲解",{"_index":2636,"title":{},"body":{"1015823":{}}}],["注：如果不需要支持脚本语言最好不要用双接口，因为双接口、idispatch接口只支持自动化的参数类型，使用受到限制，某些情况下很不方便",{"_index":3208,"title":{},"body":{"1015823":{}}}],["注：我们可以认为cframewnd类取代了窗口过程函数",{"_index":49,"title":{},"body":{"1015822":{}}}],["活动页的管理",{"_index":7004,"title":{},"body":{"2949228":{}}}],["派生类mywidget的方法的实现文件",{"_index":4191,"title":{},"body":{"1015820":{}}}],["派遣函数",{"_index":5680,"title":{},"body":{"1015847":{}}}],["派遣函数也是有一个固定格式的",{"_index":5709,"title":{},"body":{"1015847":{}}}],["流程",{"_index":9107,"title":{},"body":{"1015831":{}}}],["流程跟进",{"_index":348,"title":{},"body":{"1015822":{}}}],["浜嬩欢",{"_index":7627,"title":{},"body":{"1015833":{}}}],["浜嬩欢绫诲瀷涔熸槸鍐呮牳瀵硅薄锛屾墍浠ヤ篃闇�瑕佸叧闂彞鏌",{"_index":7592,"title":{},"body":{"1015833":{}}}],["浜嬩欢鍚嶅瓧",{"_index":7573,"title":{},"body":{"1015833":{}}}],["浜岀淮鏁扮粍鎸囬拡",{"_index":2226,"title":{},"body":{"1015843":{}}}],["浜掓枼浣",{"_index":7609,"title":{},"body":{"1015833":{}}}],["浜掓枼浣撶殑type鍊间负2",{"_index":10730,"title":{},"body":{"2424889":{}}}],["浜掓枼浣撶殑鍚嶅瓧",{"_index":7535,"title":{},"body":{"1015833":{}}}],["浜伆鑹茬敾鍒",{"_index":786,"title":{},"body":{"1015822":{}}}],["浠ュ嚱鏁板悕瀛楀鍑虹殑鍑芥暟涓暟",{"_index":6475,"title":{},"body":{"1015828":{}}}],["浠庣紦鍐插尯璇诲彇鏁版嵁",{"_index":5791,"title":{},"body":{"1015847":{}}}],["浠ｅ叆鍏紡璁＄畻",{"_index":6426,"title":{},"body":{"1015828":{}}}],["浠ｆ浛initapplication锛屽湪閲岄潰鍒涘缓绐楀彛",{"_index":560,"title":{},"body":{"1015822":{}}}],["浠ｆ浛win32鐨勬秷鎭惊鐜",{"_index":561,"title":{},"body":{"1015822":{}}}],["浠ｇ爜寮�濮嬬殑鍩哄潃锛岀紪璇戝櫒濉殑锛堟病鐢級",{"_index":6138,"title":{},"body":{"1015828":{}}}],["浠ｈ〃搴旂敤绋嬪簭鏈韩锛岀瓑浠蜂簬mfc涓殑cwinapp銆丆mywinap",{"_index":4115,"title":{},"body":{"1015820":{}}}],["浠ｈ〃杩欎釜椤甸潰蹇呴』瑕佷繚鐣欏湪鍐呭瓨涓殑寮曠敤璁℃暟",{"_index":6912,"title":{},"body":{"2949228":{}}}],["浣",{"_index":6433,"title":{},"body":{"1015828":{}}}],["浣犲笇鏈涚殑璁块棶鏉冮檺",{"_index":7350,"title":{},"body":{"1015833":{}}}],["浣犵殑鐩綍\\windbg.ex",{"_index":8978,"title":{},"body":{"1015831":{}}}],["浣犺鍒锋柊鐨勫湴鍧",{"_index":8262,"title":{},"body":{"1015833":{}}}],["浣跨敤key鍘荤洿鎺ヤ慨鏀瑰",{"_index":11527,"title":{},"body":{"1015814":{}}}],["浣跨敤涔嬪墠杩涜鍒濆鍖",{"_index":7522,"title":{},"body":{"1015833":{}}}],["浣跨敤鍑芥暟鎸囬拡鍙橀噺",{"_index":2319,"title":{},"body":{"1015843":{}}}],["浣跨敤鐨勫崗璁細杩欓噷鎴戜滑鍙互鐩存帴鍐�0锛岃繖鏍锋搷浣滅郴缁熷氨浼氭牴鎹墠闈袱涓�夐」鎺ㄦ柇鍑轰綘鎯崇敤鐨勫崗璁",{"_index":9731,"title":{},"body":{"1015818":{}}}],["浣�32浣嶏紝鎸囧畾浠庡摢閲屽紑濮嬫槧灏",{"_index":7963,"title":{},"body":{"1015833":{}}}],["浣�32浣嶏紝鎸囧畾鐗╃悊鍐呭瓨鐨勫ぇ灏",{"_index":7957,"title":{},"body":{"1015833":{}}}],["浮点类型",{"_index":1569,"title":{},"body":{"1015843":{}}}],["浮点类型分为这几类",{"_index":1570,"title":{},"body":{"1015843":{}}}],["浮点类型的精度",{"_index":1634,"title":{},"body":{"1015843":{}}}],["浼戠湢鏃堕棿",{"_index":11106,"title":{},"body":{"1703937":{}}}],["浼犲叆棣栧熬鍜岃嚜瀹氫箟鐨勫嚱鏁",{"_index":11452,"title":{},"body":{"1015814":{}}}],["浼犺緭鏁版嵁鐨勭紦鍐插尯",{"_index":9819,"title":{},"body":{"1015818":{}}}],["浼犻�掔粨鏋勪綋鎸囬拡",{"_index":8157,"title":{},"body":{"1015833":{}}}],["消息会按照规定的路线，游走于各个对象之间，直到找到它的消息处理函数；如果找不到，则最终把它交给::defwindowpro函数去处理",{"_index":455,"title":{},"body":{"1015822":{}}}],["消息去处",{"_index":3928,"title":{},"body":{"3440655":{}}}],["消息处理流程",{"_index":513,"title":{},"body":{"1015822":{}}}],["消息无时不刻都在产生，我们在自定义窗口过程函数时候只需要对关注的消息进行处理，其他的我们都可以交给默认的消息处理函数，即defwindowproç",{"_index":4039,"title":{},"body":{"3440655":{}}}],["消息映射",{"_index":353,"title":{},"body":{"1015822":{}}}],["消息映射是mfc内建的一个消息分派机制，只要利用数个宏以及固定形式的写法（类似于填表格）就可以让我们的框架知道一旦消息发生，该往哪一个类去传递，每一个类只能拥有一个消息映射表格，也可以没有",{"_index":355,"title":{},"body":{"1015822":{}}}],["消息机制",{"_index":3744,"title":{"3440655":{}},"body":{"1015827":{},"1015832":{}}}],["消息来源",{"_index":3925,"title":{},"body":{"3440655":{}}}],["消息的产生与处理流程",{"_index":7787,"title":{},"body":{"1015833":{}}}],["消息的产生与处理流程，从消息发起这个点开始说，假设我们点击了某个窗口时就会产生一个消息，操作系统得到这个消息后先判断当前点击的是哪个窗口，找到对应的窗口对象，再根据窗口对象的里的某一个成员找到对应线程，一旦找到了对应线程，操作系统就会把封装好的消息（这是一个结构体，包含了你鼠标点击的坐标等等消息）存到对应的消息队列里，应用程序就会通过getmessage不停的从消息队列中取消息",{"_index":7788,"title":{},"body":{"1015833":{}}}],["消息的分发",{"_index":4018,"title":{},"body":{"3440655":{}}}],["消息的接收",{"_index":3968,"title":{},"body":{"3440655":{}}}],["消息的转换",{"_index":4015,"title":{},"body":{"3440655":{}}}],["消息类型",{"_index":7786,"title":{},"body":{"1015833":{}}}],["消息结构体",{"_index":7789,"title":{},"body":{"1015833":{}}}],["消息这个结构体存储的信息也不多，只能知道消息属于哪个窗口，根本不知道对应窗口函数是什么，所以我们不得不在之后对消息进行分发（dispatchmessage函数），而后由内核发起调用来执行窗口函数",{"_index":7801,"title":{},"body":{"1015833":{}}}],["消息队列",{"_index":3748,"title":{},"body":{"1015833":{},"3440655":{}}}],["消息队列存放位置",{"_index":3792,"title":{},"body":{"3440655":{}}}],["消息队列的寻找",{"_index":3956,"title":{},"body":{"3440655":{}}}],["消息队列的结构",{"_index":3972,"title":{},"body":{"3440655":{}}}],["涓哄嚱鏁版寚閽堝彉閲忚祴鍊",{"_index":2316,"title":{},"body":{"1015843":{}}}],["涓夌淮鏁扮粍鎸囬拡",{"_index":2228,"title":{},"body":{"1015843":{}}}],["涓婁竴涓猒try_except绋嬪簭鍧楃紪鍙",{"_index":4441,"title":{},"body":{"2949166":{}}}],["涓嬩竴涓瓑寰呭潡鍦板潃锛岃繖鏄竴涓崟鍚戝惊鐜摼琛紝瀛樺偍鐨勬槸涓庡綋鍓嶇嚎绋嬪叧鑱旂殑澶氫釜绛夊緟鍧楃粨鏋勪綋鍦板潃锛屽鏋滃彧鏈変竴涓瓑寰呭潡鍒欒鍦板潃鎸囧悜褰撳墠绛夊緟蹇湴鍧",{"_index":10577,"title":{},"body":{"2424889":{}}}],["涓嬮潰閮芥槸createfile鎵�闇�瑕佺敤鍒扮殑鍙傛暟",{"_index":8619,"title":{},"body":{"1015833":{}}}],["涓嶅彲浠ヤ娇鐢�0x0",{"_index":5751,"title":{},"body":{"1015847":{}}}],["涓嶅悓鏉冮檺瀵瑰簲鐨凟sp銆丼s锛屽鏋滀笉娑夊強鍒版潈闄愬垏鎹㈡墍浠ュ彲浠ュ皢杩欎簺瀵勫瓨鍣ㄧ殑鍊煎叏閮ㄥ～0",{"_index":9312,"title":{},"body":{"1015831":{}}}],["涓嶆寚瀹氬瓧娈垫坊鍔犳暟鎹",{"_index":8848,"title":{},"body":{"1015850":{}}}],["涓嶆槸璋冪敤鍑芥暟锛屽彧鏄憡璇夋搷浣滅郴缁燂紝褰撳墠绐楀彛瀵瑰簲鐨勭獥鍙ｅ洖璋冨嚱鏁版槸浠�涔",{"_index":7747,"title":{},"body":{"1015833":{}}}],["涓巉ind鐨勫尯鍒氨鍦ㄤ簬锛岀涓変釜鍙傛暟涓鸿嚜瀹氫箟鍑芥暟锛屽嚱鏁版帴鏀剁殑鍙傛暟灏辨槸姣忎竴涓厓绱",{"_index":11628,"title":{},"body":{"1015814":{}}}],["涓庨┍鍔ㄨ繘琛岄�氫俊",{"_index":5741,"title":{},"body":{"1015847":{}}}],["涓氬姟浠ｇ爜",{"_index":5713,"title":{},"body":{"1015847":{}}}],["涓虹粨鏋勪綋鎸囬拡璧嬪",{"_index":2195,"title":{},"body":{"1015843":{}}}],["涓诲嚱鏁",{"_index":4367,"title":{},"body":{"2949166":{}}}],["涓浗",{"_index":1700,"title":{},"body":{"1015833":{},"1015843":{}}}],["涓紱",{"_index":10638,"title":{},"body":{"2424889":{}}}],["涓�缁存暟缁勬寚閽",{"_index":2223,"title":{},"body":{"1015843":{}}}],["涓�鑸槸鍙栧悗涓�涓",{"_index":6201,"title":{},"body":{"1015828":{}}}],["涔熸病瓒呮椂",{"_index":10635,"title":{},"body":{"2424889":{}}}],["涔熺瓑浜",{"_index":2268,"title":{},"body":{"1015843":{}}}],["淇″彿鍙戦�佽",{"_index":4149,"title":{},"body":{"1015820":{}}}],["淇″彿鎺ュ彈鑰",{"_index":4153,"title":{},"body":{"1015820":{}}}],["淇″彿锛歋ignal(pressed())锛岀敤signal瀹忓姞淇″彿鐨勪簨浠舵柟娉",{"_index":4151,"title":{},"body":{"1015820":{}}}],["淇″彿閲忓搴旂殑鍊间负5",{"_index":10702,"title":{},"body":{"2424889":{}}}],["淇″彿閲忕殑鍙ユ焺",{"_index":10706,"title":{},"body":{"2424889":{}}}],["淇濆瓨瀵勫瓨鍣",{"_index":5912,"title":{},"body":{"1015847":{}}}],["淇濆瓨琚獺ook鐨勫嚱鏁板湴鍧",{"_index":5833,"title":{},"body":{"1015847":{}}}],["淇濆瓨璋冭瘯浜嬩欢鐨勯摼琛",{"_index":4570,"title":{},"body":{"3440657":{}}}],["淇濆瓨鍘烣s:[0",{"_index":4405,"title":{},"body":{"2949166":{}}}],["淇濆瓨鍘熺墿鐞嗛〉灞炴",{"_index":4876,"title":{},"body":{"3440657":{}}}],["淇濇姢妯″紡锛岀墿鐞嗛〉鐨勫睘鎬",{"_index":7953,"title":{},"body":{"1015833":{}}}],["淇eip",{"_index":4844,"title":{},"body":{"3440657":{}}}],["淇eip锛屽唴瀛樻柇鐐逛笉闇�瑕佷慨澶岴ip锛岃蒋浠舵柇鐐归渶瑕",{"_index":4907,"title":{},"body":{"3440657":{}}}],["淇敼r/w涓�0",{"_index":5879,"title":{},"body":{"1015847":{}}}],["淇敼r/w涓�1",{"_index":5877,"title":{},"body":{"1015847":{}}}],["淇敼signalstate锛",{"_index":10632,"title":{},"body":{"2424889":{}}}],["淇敼瀛楁灞炴",{"_index":8834,"title":{},"body":{"1015850":{}}}],["淇敼琛ㄥ悕",{"_index":8831,"title":{},"body":{"1015850":{}}}],["淇敼绾跨▼鍑芥暟璧峰鍦板潃",{"_index":8666,"title":{},"body":{"1015833":{}}}],["淇敼鍑芥暟鎸囦护",{"_index":5937,"title":{},"body":{"1015847":{}}}],["淇敼鍙戠敓寮傚父鏃剁殑ecx",{"_index":4363,"title":{},"body":{"2949166":{}}}],["淇敼鍙戠敓寮傚父鏃剁殑eip",{"_index":4361,"title":{},"body":{"2949166":{}}}],["淇敼鐗╃悊椤靛睘鎬",{"_index":5855,"title":{},"body":{"1015847":{}}}],["淇敼鐩綍鍚嶇о锛堢щ鍔級",{"_index":8088,"title":{},"body":{"1015833":{}}}],["添加一个socket(超过默认值大小不再处理",{"_index":10054,"title":{},"body":{"1015818":{}}}],["添加信号和槽",{"_index":4198,"title":{},"body":{"1015820":{}}}],["添加信号和槽有两种方式",{"_index":4199,"title":{},"body":{"1015820":{}}}],["添加元素",{"_index":11346,"title":{},"body":{"1015814":{}}}],["添加元素可以使用insert函数",{"_index":11453,"title":{},"body":{"1015814":{}}}],["添加元素可以使用insert函数和[]的方式",{"_index":11512,"title":{},"body":{"1015814":{}}}],["添加到调用文件",{"_index":8363,"title":{},"body":{"1015833":{}}}],["添加右键菜单",{"_index":1215,"title":{},"body":{"1015822":{}}}],["添加接口：在这里创建完成之后在头文件中加入了接口的声明，在定义文件中添加了接口的定义，并且在idl文件中也添加了对应的接口信息",{"_index":3093,"title":{},"body":{"1015823":{}}}],["添加简单对象：通过可视化操作直接去创建，相当于给你创建了头文件（h）和实现文件（cpp），以及在idl文件中添加了内容",{"_index":3092,"title":{},"body":{"1015823":{}}}],["添加线段，将分层结构的顶层或者称为根的项目连接起来，只有指定了tvs_haslines，此样式才有效果",{"_index":1224,"title":{},"body":{"1015822":{}}}],["添加线段，将子项目和其父项目连接起来",{"_index":1222,"title":{},"body":{"1015822":{}}}],["添加组件属性",{"_index":3125,"title":{},"body":{"1015823":{}}}],["渚濇鍒ゆ柇鍏朵粬鐨�6涓槦鍒楋紝閲岄潰濡傛灉鏈夋秷鎭氨杩斿洖锛屾病鏈夊垯缁х画",{"_index":4006,"title":{},"body":{"3440655":{}}}],["源ip",{"_index":10291,"title":{},"body":{"1015818":{}}}],["源代码：hellocode.cp",{"_index":139,"title":{},"body":{"1015822":{}}}],["源地址和目的地址：表示发送ip段的源和目的ip，分别占32位",{"_index":10284,"title":{},"body":{"1015818":{}}}],["源端口",{"_index":10376,"title":{},"body":{"1015818":{}}}],["源端口：发送方应用程序对应的端口",{"_index":10367,"title":{},"body":{"1015818":{}}}],["溢出标志位：【of】—当将操作数作为有符号数的时候，使用该标志位判断运算结果是否溢出。加法：若相同符号数相加，结果的符号与之相反则of=1，否则of=0",{"_index":5410,"title":{},"body":{"1015825":{}}}],["滚动条",{"_index":1089,"title":{},"body":{"1015822":{}}}],["满足激活条件时，修改_dispatcher_header.signalstate的值，这里不一定是清零，因为每种等待对象修改的方式不一样，最后退出循环",{"_index":10656,"title":{},"body":{"2424889":{}}}],["滴水逆向课程中级篇章节",{"_index":8735,"title":{},"body":{"1015832":{}}}],["滴水逆向课程初级篇章节",{"_index":4972,"title":{},"body":{"1015826":{}}}],["澧炲姞鍔ㄧ敾鏁堟灉",{"_index":824,"title":{},"body":{"1015822":{}}}],["澧炲姞鐨勬暟閲",{"_index":10708,"title":{},"body":{"2424889":{}}}],["澶т簬0",{"_index":10033,"title":{},"body":{"1015818":{}}}],["澶х",{"_index":9898,"title":{},"body":{"1015818":{}}}],["澶勭悊娑堟伅鐨勭獥鍙ｅ嚱鏁",{"_index":7744,"title":{},"body":{"1015833":{}}}],["澶勭悊璋冭瘯浜嬩欢",{"_index":4648,"title":{},"body":{"3440657":{}}}],["澶囦唤鍘熷浠ｇ爜",{"_index":4816,"title":{},"body":{"3440657":{}}}],["澶嶅埗tmparray鏁扮粍tmparray+2鍒皌mparray+5鍖洪棿鍐呯殑鍏冪礌鍒板鍣ㄤ腑",{"_index":11345,"title":{},"body":{"1015814":{}}}],["澶嶅埗涓�涓鍣",{"_index":11341,"title":{},"body":{"1015814":{}}}],["澶嶅埗瀛楃涓瞫rc鍒癲est涓紝杩斿洖鎸囬拡涓篸est鐨勫",{"_index":2148,"title":{},"body":{"1015843":{}}}],["澶嶅埗鎸囧畾set瀹瑰櫒鐨勫尯闂寸殑鍐呭浣滀负瀹瑰櫒鐨勫厓绱",{"_index":11443,"title":{},"body":{"1015814":{}}}],["澶嶅埗鎸囧畾鏁扮粍鐨勫尯闂寸殑鍐呭浣滀负瀹瑰櫒鐨勫厓绱",{"_index":11440,"title":{},"body":{"1015814":{}}}],["澶嶅埗鐨勬枃浠",{"_index":8177,"title":{},"body":{"1015833":{}}}],["澶嶅師",{"_index":826,"title":{},"body":{"1015822":{}}}],["澹版槑杩斿洖绫诲伐鍘傚璞＄殑寮曞嚭鍑芥暟",{"_index":2605,"title":{},"body":{"1015823":{}}}],["澹版槑绫诲伐鍘",{"_index":2595,"title":{},"body":{"1015823":{}}}],["澹版槑缁撴瀯浣撴寚閽",{"_index":2194,"title":{},"body":{"1015843":{}}}],["澹版槑鍑芥暟鎸囬拡",{"_index":5836,"title":{},"body":{"1015847":{}}}],["濂楁帴瀛",{"_index":9949,"title":{},"body":{"1015818":{}}}],["濂楁帴瀛楃被鍨嬶細鍘熷濂楁帴瀛桽ocket_raw锛堝杈冧綆灞傛鐨勫崗璁洿鎺ヨ闂紝渚嬪ip銆両cmp鍗忚锛夈�丼ock_stream闈㈠悜杩炴帴锛圱cp/ip鍗忚锛夈�丼ock_dgram闈㈠悜鏃犺繛鎺ワ紙udp鍗忚锛",{"_index":9729,"title":{},"body":{"1015818":{}}}],["濂楁帴瀛楋細",{"_index":9889,"title":{},"body":{"1015818":{}}}],["濂楁帴瀛楋細灏哸ccept杩斿洖鐨勫鎺ュ瓧鍙橀噺鍚嶅瓧鍐欎笂鍘",{"_index":9810,"title":{},"body":{"1015818":{}}}],["濂楁帴瀛楋細灏嗗垱寤虹殑濂楁帴瀛楀彉閲忓悕瀛楀啓涓婂幓",{"_index":9737,"title":{},"body":{"1015818":{}}}],["濉玁ul",{"_index":10174,"title":{},"body":{"1015818":{}}}],["濉叆鍑洪敊鍚庤鎵ц鐨勪唬鐮",{"_index":5539,"title":{},"body":{"1015847":{}}}],["濉叆鍙兘瑕佸嚭閿欑殑浠ｇ爜",{"_index":5536,"title":{},"body":{"1015847":{}}}],["濉�0",{"_index":10020,"title":{},"body":{"1015818":{}}}],["濡備綍鍒涘缓锛屽彲浠ユ墦寮�涓�涓凡缁忓瓨鍦ㄧ殑鏂囦欢",{"_index":8114,"title":{},"body":{"1015833":{}}}],["濡備綍閲婃斁锛岄噴鏀剧殑绫诲瀷锛屼竴鍏辨湁涓や釜绫诲瀷锛歁em_decommit锛堥噴鏀剧墿鐞嗗唴瀛橈紝浣嗙嚎鎬у湴鍧�淇濈暀锛夈�丮em_release锛堥噴鏀剧墿鐞嗗唴瀛橈紝閲婃斁绾挎�у湴鍧�锛屼娇鐢ㄨ繖涓缃殑鏃跺�欏唴瀛樺ぇ灏忓氨蹇呴』涓�0锛",{"_index":7938,"title":{},"body":{"1015833":{}}}],["濡傛灉recv杩斿洖涓�0鍒欒〃绀哄鎴风瑕佹柇寮�杩炴帴锛屽氨璺冲嚭寰幆鏂紑杩炴帴",{"_index":9859,"title":{},"body":{"1015818":{}}}],["濡傛灉socket涓哄綋鍓嶆湇鍔″櫒鍒涘缓鐨剆coket鍒欒繘鍏ccept绛夊緟娑堟伅",{"_index":10079,"title":{},"body":{"1015818":{}}}],["濡傛灉杩斿洖鍊煎ぇ浜�0鍒欒鏄庝笉瀛樺湪鏃犲搷搴斻�侀敊璇殑鎯呭喌锛岀户缁悜涓",{"_index":10073,"title":{},"body":{"1015818":{}}}],["濡傛灉浣犲笇鏈涘綋鍓嶄簨浠剁被鍨嬫槸閫氱煡绫诲瀷鍒欏啓true锛屽弽涔婩al",{"_index":7570,"title":{},"body":{"1015833":{}}}],["濡傛灉涓嶆槸锛屽垯杩涘叆鎺ユ敹娑堟伅",{"_index":10086,"title":{},"body":{"1015818":{}}}],["濡傛灉涓篘ull鍒欑獥鍙ｅ垱寤哄け璐ワ紝杈撳嚭閿欒淇℃伅",{"_index":7773,"title":{},"body":{"1015833":{}}}],["濡傛灉璇ョ獥鍙ｆ槸涓�涓瓙绐楀彛锛屽垯涓虹埗绐楀彛鐨勫彞鏌勶紱濡傛灉璇ョ獥鍙ｆ槸鑷湁鐨勶紝杩欎釜鎴愬憳鏍囪瘑浜嗘墍鏈夎�呯獥鍙ｏ紱濡傛灉璇ョ獥鍙ｄ笉鏄竴涓瓙绐楀彛鎴栬嚜鏈夌獥鍙ｏ紝杩欎釜鎴愬憳鏄疦ull銆",{"_index":473,"title":{},"body":{"1015822":{}}}],["濡傛灉绫诲悕涓篘ull锛屽垯浠fc鍐呭缓鐨勭獥鍙ｇ被浜х敓涓�涓爣鍑嗙殑澶栨绐楀彛",{"_index":56,"title":{},"body":{"1015822":{}}}],["濡傛灉褰撳墠apc涓哄唴鏍窤pc锛屽垯璇ュ�兼病鏈夋剰涔夛紝濡傛灉涓虹敤鎴稟pc锛屽垯璇ュ�间负鐪熸鐨凙pc鍑芥暟",{"_index":10844,"title":{},"body":{"2424869":{}}}],["濡傛灉褰撳墠apc涓虹敤鎴风┖闂寸殑锛屽垯涓虹敤鎴稟pc鐨勬�诲叆鍙ｏ紝鍙嶄箣涓虹湡姝ｇ殑鍐呮牳apc鍑芥暟锛屽洜姝ら�氳繃瀹冨彲浠ュ府鍔╂垜浠壘鍒版彁渚涚殑apc鍑芥暟鍦板潃",{"_index":10841,"title":{},"body":{"2424869":{}}}],["濡傛灉鏄郴缁熸柇鐐癸紝涓嶉渶瑕佷慨澶岻nt3",{"_index":4833,"title":{},"body":{"3440657":{}}}],["瀛愮獥鍙ｆ帶浠舵牱寮忥細瀛愮獥鍙ｃ�佸垱寤哄悗鍙互鐪嬪埌",{"_index":7863,"title":{},"body":{"1015833":{}}}],["瀛愮獥鍙ｆ帶浠舵牱寮忥細瀛愮獥鍙ｃ�佸垱寤哄悗鍙互鐪嬪埌銆佹粴鍔ㄦ潯銆佽嚜鍔ㄦ崲琛",{"_index":7851,"title":{},"body":{"1015833":{}}}],["瀛愮獥鍙ｆ爣璇",{"_index":7857,"title":{},"body":{"1015833":{}}}],["瀛愮郴缁熺増鏈殑鍊硷紝蹇呴』涓�0",{"_index":6158,"title":{},"body":{"1015828":{}}}],["瀛愮郴缁燂紝椹卞姩绋嬪簭(1)銆佸浘褰㈢晫闈�(2",{"_index":6165,"title":{},"body":{"1015828":{}}}],["瀛椾綋澶у皬",{"_index":871,"title":{},"body":{"1015822":{}}}],["瀛椾綋瀹藉害",{"_index":874,"title":{},"body":{"1015822":{}}}],["瀛椾綋鍚嶇о",{"_index":878,"title":{},"body":{"1015822":{}}}],["瀛椾綋鏄惁鍊炬枩",{"_index":876,"title":{},"body":{"1015822":{}}}],["瀛楁1",{"_index":8817,"title":{},"body":{"1015850":{}}}],["瀛楁鍚",{"_index":8832,"title":{},"body":{"1015850":{}}}],["瀛楁鍚�1",{"_index":8837,"title":{},"body":{"1015850":{}}}],["瀛楁鍚�2",{"_index":8839,"title":{},"body":{"1015850":{}}}],["瀛楁鍚�=鍊",{"_index":8852,"title":{},"body":{"1015850":{}}}],["瀛楄妭搴",{"_index":9894,"title":{},"body":{"1015818":{}}}],["瀛楄妭涓庡瓨鍌ㄤ綅缃殑鍏崇郴",{"_index":9895,"title":{},"body":{"1015818":{}}}],["瀛樺偍寮傚父鍙戠敓鏃剁殑涓婁笅鏂囩幆澧",{"_index":4395,"title":{},"body":{"2949166":{}}}],["瀛樻斁socket鐨勬暟缁",{"_index":10045,"title":{},"body":{"1015818":{}}}],["瀵勫瓨鍣�/鍐呭瓨/绔嬪嵆鏁",{"_index":5354,"title":{},"body":{"1015825":{}}}],["瀵嗙爜",{"_index":8877,"title":{},"body":{"1015850":{}}}],["瀵煎嚭鍑芥暟搴忓彿琛≧va",{"_index":6481,"title":{},"body":{"1015828":{}}}],["瀵煎嚭鍑芥暟璧峰搴忓彿",{"_index":6471,"title":{},"body":{"1015828":{}}}],["瀵煎嚭鍑芥暟鍚嶇о琛≧va",{"_index":6479,"title":{},"body":{"1015828":{}}}],["瀵煎嚭鐢卞唴鏍告ā鍧楁墍瀵煎嚭鐨凷sdt",{"_index":5821,"title":{},"body":{"1015847":{}}}],["瀵瑰簲_kthread缁撴瀯浣撶殑alertable灞炴�э紝璇ュ�间负1鏃舵彃鍏ョ敤鎴稟pc锛岀嚎绋嬩細琚惖閱",{"_index":10607,"title":{},"body":{"2424889":{}}}],["瀵瑰簲kapc.normalcontex",{"_index":10874,"title":{},"body":{"2424869":{}}}],["瀵瑰簲kapc.normalr",{"_index":10872,"title":{},"body":{"2424869":{}}}],["瀵瑰簲鍐呮牳鍑芥暟锛歂tcreatemu",{"_index":10760,"title":{},"body":{"2424889":{}}}],["瀵瑰簲鍐呮牳鍑芥暟锛歂tcreatemutex",{"_index":10764,"title":{},"body":{"2424889":{}}}],["瀵硅薄鍚嶅瓧锛屽叕鐢ㄦ椂鍐欙紝鑷繁浣跨敤鍒欏彲浠ヤ笉鎸囧畾",{"_index":7958,"title":{},"body":{"1015833":{}}}],["瀵硅薄鍚嶇о",{"_index":8276,"title":{},"body":{"1015833":{},"2424889":{}}}],["瀵绘壘idualdbconneç",{"_index":3268,"title":{},"body":{"1015823":{}}}],["瀵绘壘涓嬩竴涓紓甯稿鐞嗗嚱鏁",{"_index":4419,"title":{},"body":{"2949166":{}}}],["瀵绘壘瀛楃涓诧紝鎵惧埌鍒欒繑鍥炲�煎ぇ浜�0锛屽苟涓旇繑鍥炵殑鏄鎵惧埌鐨勫瓧绗︿覆鐨勪笅鏍",{"_index":1171,"title":{},"body":{"1015822":{}}}],["瀵逛簬绐楀彛娑堟伅璇ュ�间负0锛屽鐞嗗懡浠ゆ秷鎭拰鎺т欢閫氱煡鐨勫嚱鏁颁娇鐢ㄤ笌姝ょ浉鍚岀殑娑堟伅鏄犲儚銆",{"_index":410,"title":{},"body":{"1015822":{}}}],["瀹冩湁涓変釜鍙傛暟锛氱涓�涓弬鏁版槸鎸囧悜寮�濮嬪厓绱犵殑杩唬鍣紝绗簩涓弬鏁版槸鎸囧悜鏈�鏈熬鍏冪礌鐨勮凯浠ｅ櫒锛岀涓変釜鍙傛暟鏄痩ess<>()鎴栨槸greater<>()锛屽墠鑰呯敤浜庣敓鎴愬ぇ椤跺爢锛屽悗鑰呯敤浜庣敓鎴愬皬椤跺爢锛岀涓変釜鍙傛暟榛樿鎯呭喌涓嬩负less<>()锛宭ess<int>()鐢ㄤ簬鐢熸垚澶ч《鍫嗐",{"_index":11695,"title":{},"body":{"1015814":{}}}],["瀹夊叏灞炴�э紝鍖呭惈瀹夊叏鎻忚堪绗",{"_index":7397,"title":{},"body":{"1015833":{}}}],["瀹廋ontaining_record鏍规嵁缁撴瀯浣撲腑鏌愭垚鍛樼殑鍦板潃鏉ユ帹绠楀嚭璇ョ粨鏋勪綋鏁翠綋鐨勫湴鍧",{"_index":8567,"title":{},"body":{"1015833":{}}}],["瀹廤m_command涓紝wparam鍙傛暟鐨勪綆16浣嶄腑鏈夋爣璇嗭紝鏍规嵁鏍囪瘑鎴戜滑鎵嶈兘鍒ゆ柇鍝釜鎸夐挳鍜岀紪杈戞锛屼娇鐢↙oword()鍙互鑾峰彇浣�16浣",{"_index":7872,"title":{},"body":{"1015833":{}}}],["瀹氫箟",{"_index":9480,"title":{},"body":{"1015818":{},"1015831":{}}}],["瀹氫箟ssdt缁撴瀯",{"_index":5813,"title":{},"body":{"1015847":{}}}],["瀹氫箟寮傚父澶勭悊鍑芥暟",{"_index":4355,"title":{},"body":{"2949166":{}}}],["瀹氫箟椹卞姩绋嬪簭鍗歌浇鍑芥暟鐨勫湴鍧",{"_index":5621,"title":{},"body":{"1015847":{}}}],["瀹氫箟涓�涓叏灞�鐨凜point锛岀敤浜庡瓨鏀鹃紶鏍囧乏閿寜涓嬫椂鐨勫潗鏍",{"_index":976,"title":{},"body":{"1015822":{}}}],["瀹氫箟涓�涓嚱鏁版寚閽",{"_index":8621,"title":{},"body":{"1015833":{}}}],["瀹氫箟涓�涓粨鏋勪綋",{"_index":8154,"title":{},"body":{"1015833":{}}}],["瀹氫箟瀛愮獥鍙ｆ爣璇",{"_index":7835,"title":{},"body":{"1015833":{}}}],["瀹氫箟璋冭瘯杩涚▼璺緞",{"_index":4627,"title":{},"body":{"3440657":{}}}],["瀹氫箟绯荤粺鏈嶅姟琛ㄧ粨鏋",{"_index":5805,"title":{},"body":{"1015847":{}}}],["瀹氫箟缁撴瀯浣撳彉閲",{"_index":2046,"title":{},"body":{"1015843":{}}}],["瀹氫箟缁撴瀯浣撴暟缁",{"_index":2048,"title":{},"body":{"1015843":{}}}],["瀹氫箟缁撴瀯浣撶被鍨",{"_index":2045,"title":{},"body":{"1015843":{}}}],["瀹氫箟鍏ㄥ眬妯″潡",{"_index":7841,"title":{},"body":{"1015833":{}}}],["瀹氫箟鍑芥暟鎸囬拡鍙橀噺",{"_index":2315,"title":{},"body":{"1015843":{}}}],["瀹氫箟鍒涘缓鐨勭獥鍙�(鍒涘缓娉ㄥ唽绐楀彛绫",{"_index":7734,"title":{},"body":{"1015833":{}}}],["瀹氫箟鍙啓鐨勯泦鍚",{"_index":10070,"title":{},"body":{"1015818":{}}}],["瀹氫箟鍙鐨勯泦鍚",{"_index":10069,"title":{},"body":{"1015818":{}}}],["瀹氫箟鎸囧悜addvectorexceptionhandler鍑芥暟鐨勫嚱鏁版寚閽",{"_index":4350,"title":{},"body":{"2949166":{}}}],["瀹氫箟鏁扮粍",{"_index":735,"title":{},"body":{"1015822":{}}}],["瀹炵幇浠ｇ爜",{"_index":9732,"title":{},"body":{"1015818":{}}}],["瀹炵幇浠ｇ爜锛宎ccept杩斿洖鐨勪篃鏄竴涓猄ocket锛屾垜浠渶瑕佽祴鍊间竴涓",{"_index":9802,"title":{},"body":{"1015818":{}}}],["瀹為檯杩斿洖闀垮害",{"_index":5762,"title":{},"body":{"1015847":{}}}],["瀹為檯涓婂叾鑾峰彇鍒扮殑閮芥槸鎴戜滑鐨則heapp锛屽洜涓轰竴涓繘绋嬭偗瀹氬寘鍚竴涓嚎绋嬶紝鎵�浠ヨ繖閲屾垜浠彲浠ヨ涓簆app绛変环浜巔thr",{"_index":553,"title":{},"body":{"1015822":{}}}],["瀹瑰櫒",{"_index":7607,"title":{},"body":{"1015833":{}}}],["瀹瑰櫒绫诲悕::const_",{"_index":11709,"title":{},"body":{"1015814":{}}}],["瀹瑰櫒绫诲悕::i",{"_index":11706,"title":{},"body":{"1015814":{}}}],["灏咮杩涚▼0x12345678鐨勫�煎瓨鐨別ax涓",{"_index":11303,"title":{},"body":{"1703937":{}}}],["灏咲ll鏂囦欢澶嶅埗鍒伴」鐩洰褰曚笅",{"_index":8340,"title":{},"body":{"1015833":{}}}],["灏咵flags瀵勫瓨鍣ㄧ殑tf浣嶇疆1",{"_index":4967,"title":{},"body":{"3440657":{}}}],["灏唀cx缁欏埌ldr",{"_index":8564,"title":{},"body":{"1015833":{}}}],["灏嗕綆搴忓瓧鑺傚瓨鍌ㄥ湪璧峰鍦板潃",{"_index":9897,"title":{},"body":{"1015818":{}}}],["灏嗗惎鍔ㄧ嚎绋嬬殑鍑芥暟鍦板潃缁欏埌eip",{"_index":11184,"title":{},"body":{"1703937":{}}}],["灏嗗瓧绗︿覆src娣诲姞鍒癲est灏鹃儴锛岃繑鍥炴寚閽堜负dest鐨勫",{"_index":2150,"title":{},"body":{"1015843":{}}}],["灏嗗瘎瀛樺櫒淇濆瓨鍒板叏灞�鍙橀噺涓",{"_index":9342,"title":{},"body":{"1015831":{}}}],["灏嗗紑濮嬫椂闂寸щ鍒扮粨鏉熸椂闂达紝鎻愪緵涓嬩竴娆¤绠",{"_index":10418,"title":{},"body":{"1015818":{}}}],["灏嗗綋鍓嶄簰鏂ヤ綋鎸傚叆鍒板綋鍓嶇嚎绋嬬殑浜掓枼浣撻摼琛",{"_index":10741,"title":{},"body":{"2424889":{}}}],["灏嗗綋鍓嶆湇鍔″櫒鍒涘缓鐨剆ocket鏀惧叆闆嗗悎涓",{"_index":10068,"title":{},"body":{"1015818":{}}}],["灏嗗綋鍓嶇嚎绋嬬殑绛夊緟鍧楁寕鍒扮瓑寰呭璞＄殑閾捐〃(waitlisth",{"_index":10637,"title":{},"body":{"2424889":{}}}],["灏嗗綋鍓嶇嚎绋嬬粨鏋勪綋鍜岃鍒囨崲鐨勭嚎绋嬬粨鏋勪綋鍒嗗埆瀛樺叆esi鍜孍di瀵勫瓨鍣",{"_index":11178,"title":{},"body":{"1703937":{}}}],["灏嗘暟鎹瓨鍌ㄥ埌0x00401234涓",{"_index":11305,"title":{},"body":{"1703937":{}}}],["灏嗘椂闂存埑杞崲鎴愬彲璇嗗埆鐨勬牸寮",{"_index":10223,"title":{},"body":{"1015818":{}}}],["灏嗙墿鐞嗛〉涓庣嚎鎬у湴鍧�杩涜鏄犲皠",{"_index":7973,"title":{},"body":{"1015833":{}}}],["灏嗚嚜宸辨寕鍏ョ瓑寰呴摼琛�(kiaitlisthead)锛",{"_index":10639,"title":{},"body":{"2424889":{}}}],["灏嗚繖涓浆涓篒id鏍煎紡鍗冲彲",{"_index":3276,"title":{},"body":{"1015823":{}}}],["灏嗚鍒囨崲鐨勭嚎绋嬬粨鏋勪綋鎴愬憳kernelstack缁欏埌esp瀵勫瓨鍣紙鏍堥《锛夛紝涔熷氨鏄爤鐨勫垏鎹",{"_index":11182,"title":{},"body":{"1703937":{}}}],["灏嗚鏇挎崲鐨勬寚浠ゅ湴鍧�鍑忓幓鍑芥暟棣栧湴鍧�寰楀嚭鍋忕щ0x14",{"_index":5946,"title":{},"body":{"1015847":{}}}],["灏嗛珮搴忓瓧鑺傚瓨鍌ㄥ湪璧峰鍦板潃",{"_index":9899,"title":{},"body":{"1015818":{}}}],["灏忕",{"_index":9896,"title":{},"body":{"1015818":{}}}],["灏�16杩涘埗瀛楃涓茶浆鎴愬ぇ鏁",{"_index":10490,"title":{},"body":{"1015818":{}}}],["灞曠ず绐楀彛",{"_index":4126,"title":{},"body":{"1015820":{}}}],["灞曠ず绐楀彛锛屽綋璋冪敤showwindow鏃讹紝浣犲簲璇ユ妸m_ncmdshow浣滀负涓�涓弬鏁颁紶缁欏畠",{"_index":147,"title":{},"body":{"1015822":{}}}],["灞炴�э紝",{"_index":5654,"title":{},"body":{"1015847":{}}}],["灵活通信",{"_index":5730,"title":{},"body":{"1015847":{}}}],["点击finish然后点击",{"_index":17,"title":{},"body":{"1015822":{}}}],["点击install按钮",{"_index":5492,"title":{},"body":{"1015847":{}}}],["点击ok选择dialogu",{"_index":15,"title":{},"body":{"1015822":{}}}],["点击“是",{"_index":5493,"title":{},"body":{"1015847":{}}}],["然后再到dtdebug的内存窗口，输入",{"_index":5324,"title":{},"body":{"1015825":{}}}],["然后再来看下多态情况下的反汇编代码",{"_index":3583,"title":{},"body":{"1015840":{}}}],["然后又来到了通过句柄获取对象的环节，这次是通过调试对象的句柄来获取调试对象的地址，并且将调试对象的地址和被调试进程的_eprocess结构体地址作为参数带入_dbgkpsetprocessdebugobject函数执行",{"_index":4541,"title":{},"body":{"3440657":{}}}],["然后取2进制",{"_index":1630,"title":{},"body":{"1015843":{}}}],["然后在window",{"_index":8970,"title":{},"body":{"1015831":{}}}],["然后在类中去声明我们的三个page成员",{"_index":1325,"title":{},"body":{"1015822":{}}}],["然后将堆栈按ecx即函数参数字节数进行提升，这样是为了在0环将3环的参数复制进来，接着将ecx即函数参数字节数右移2位也就是除以4获得参数的个数，因为在下面的rep指令中每次复制是4字节的，并且该指令的循环次数是ecx的值，所以我们要除以4。接着将esp给edi是为设置要循环复制的目的地址，然后判断3环参数地址范围有没有越界，也就是有没有大于_mmuserprobeaddress，如果越界了则进行跳转。最后，执行完rep指令就调用ebx也就是内核函数",{"_index":2558,"title":{},"body":{"1015846":{}}}],["然后将对应值填入即可远程创建线程",{"_index":8420,"title":{},"body":{"1015833":{}}}],["然后就可以直接使用它了",{"_index":1098,"title":{},"body":{"1015822":{}}}],["然后就是压入fs段的0x0偏移位的内容，也就是指向的kpcr结构0x0偏移位成员_nt_tib",{"_index":2533,"title":{},"body":{"1015846":{}}}],["然后就是定义e、d、n，这个我们根据r",{"_index":10513,"title":{},"body":{"1015818":{}}}],["然后当返回3环时，就会跳转到kiuserapcdispatcher函数开始执行，我们的传递的4个参数也是给它用的",{"_index":10931,"title":{},"body":{"2424869":{}}}],["然后快速的双击你修改后的windbg快捷方式，如下图所示我们就可以去观察window",{"_index":8982,"title":{},"body":{"1015831":{}}}],["然后我们再重新打开被调试进程，就会发现程序在我们之前编写的简易调试器所输出的发生异常调试事件地址加一的地址（0x7c921231）进行了断点",{"_index":4751,"title":{},"body":{"3440657":{}}}],["然后我们回到dodataexchange函数，代码中多了一个ddx_control函数，这是这是因为我们刚刚定义的时候category选择的就是control类型，其作用就是将我们的idc_edit1控件和m_edit1变量关联起来，这时候我们操作m_edit1就会改变idc_edit1这个控件",{"_index":1044,"title":{},"body":{"1015822":{}}}],["然后我们开始写自己的第一个驱动程序代码，最基本的格式就是包含ntddk.h头文件，以及写好驱动程序入口函数driverentr",{"_index":5465,"title":{},"body":{"1015847":{}}}],["然后我们的完整代码如下所示",{"_index":9337,"title":{},"body":{"1015831":{}}}],["然后我们跟进它们都跳转进的代码段会发现这里调用了rtldispatchexception函数，这个函数专门负责调用异常处理函数来处理异常，我们可以看见该函数调用时候传递了两个参数，即context和exceptionreç",{"_index":4287,"title":{},"body":{"2949166":{}}}],["然后我们进入afxwininit函数，跟进发现在该函数内部会在获取一次我们实例化的对象，然后判断是否存在，存在则把入口点的四个参数保存在我们实例化对象的成员里",{"_index":564,"title":{},"body":{"1015822":{}}}],["然后我们重新运行代码跟到断点的地方继续跟进会发现pthread、papp确实如我们所说是等价的，都是获取的我们实例化的对象",{"_index":563,"title":{},"body":{"1015822":{}}}],["然后找到对应的扩展pe头的成员sectionalignment的值，这里就是默认的0x10",{"_index":6033,"title":{},"body":{"1015828":{}}}],["然后找到最后一个节表成员，修改sizeofrawdata和virtualsize成员的值，这个值是要取sizeofrawdata和virtualsize成员当前值的最大值进行内存对齐之后的值加上我们插入宽度0x10",{"_index":6375,"title":{},"body":{"1015828":{}}}],["然后找到该结构体数组的第一个结构体，里面就包含了导出表的地址和大小",{"_index":6459,"title":{},"body":{"1015828":{}}}],["然后新建一个按钮来其来使用一些常见的函数；通过insertitem函数我们可以添加节点（该方法重载的有很多种，查询",{"_index":1235,"title":{},"body":{"1015822":{}}}],["然后由于我们合并了其他的节，但是其他节的characteristics（属性）是不一样的，我们合并了也要将其他节的属性添加进来，这里可以选择使用或运算，如下图所示就是进行或运算之后的结果0xe0000060",{"_index":6447,"title":{},"body":{"1015828":{}}}],["然后编译，用lordpe打开查看一下函数名称就会发现其没有了@xxx这样的格式而是我们定义什么样就是什么样",{"_index":8336,"title":{},"body":{"1015833":{}}}],["然后让客户通过regsvr32命令注册组件",{"_index":2767,"title":{},"body":{"1015823":{}}}],["然后还要去实现这个接口函数",{"_index":3159,"title":{},"body":{"1015823":{}}}],["然后进入虚拟机，拷贝出来ntoskrnl.exe重命名为ntkrnlmp.exe，再通过ida打开，此时ida就会去调用ntkrnlmp.exe的符号文件来解析",{"_index":6669,"title":{},"body":{"1933380":{}}}],["然后通过nsig（消息的动作标识",{"_index":528,"title":{},"body":{"1015822":{}}}],["然后通过这样的方式将对应的参数传递给我们的消息处理函数，执行该函数",{"_index":530,"title":{},"body":{"1015822":{}}}],["然后需要修改一下sizeofimage的大小，加上0x1000即可",{"_index":6412,"title":{},"body":{"1015828":{}}}],["然后，你需要在头文件中定义好这个接口指针",{"_index":3114,"title":{},"body":{"1015823":{}}}],["版本",{"_index":10288,"title":{},"body":{"1015818":{}}}],["版本：版本占了4位，用来表示该协议采用的是那一个版本的ip，相同版本的ip才能进行通信，一般此处的值为4，表示ipv4",{"_index":10271,"title":{},"body":{"1015818":{}}}],["物理内存",{"_index":7900,"title":{},"body":{"1015833":{}}}],["物理内存分为两类，一个是私有内存（private）一个是共享内存（mapped），私有内存的意思是这块物理内存（物理页）只有你使用，而共享内存则是多个进程一起用",{"_index":7916,"title":{},"body":{"1015833":{}}}],["物理内存的管理",{"_index":6865,"title":{},"body":{"2949228":{}}}],["物理设备：屏幕、打印机等",{"_index":658,"title":{},"body":{"1015822":{}}}],["物理页分为两大类：空闲页、活动页，我们了解了空闲页再来看一下活动页",{"_index":7005,"title":{},"body":{"2949228":{}}}],["物理页有很多种状态，在_mmpfn.u3.e1处的结构是一个位段（_mmpfnentry），其结构如下，其中成员pagelocation表示了当前物理页的状态",{"_index":6942,"title":{},"body":{"2949228":{}}}],["物理页状态",{"_index":6941,"title":{},"body":{"2949228":{}}}],["物理页的使用",{"_index":7912,"title":{},"body":{"1015833":{}}}],["特别说明：线性地址有4g",{"_index":7898,"title":{},"body":{"1015833":{}}}],["状态类型",{"_index":6961,"title":{},"body":{"2949228":{}}}],["犹豫map与set容器实际上是一样的类型，只不过有一点小差异，这里至今把之前的代码拿过来修改一下就可以了（相较于map容器，这里多了一个value需要初始化类型",{"_index":11495,"title":{},"body":{"1015814":{}}}],["环境配置",{"_index":5440,"title":{},"body":{"1015847":{}}}],["现在去跑add指令",{"_index":5420,"title":{},"body":{"1015825":{}}}],["现在我们有一个任务，需要在空白区添加一段代码（你也可以称之为shellcode），并且在程序运行之前执行这段代码；首先我们要知道pe空白区是什么，pe空白区表示pe文件按照对齐方式之后多出来的部分，可以是节与节之间的空白区也可以是节表与节之间的空白区",{"_index":6344,"title":{},"body":{"1015828":{}}}],["现在我们有一个需求，需要打印对象的成员变量，如下代码",{"_index":3555,"title":{},"body":{"1015840":{}}}],["现在我们来a进程写入，b进程读取看看到底能不能跨进程恭喜，写入代码",{"_index":8269,"title":{},"body":{"1015833":{}}}],["现在操作系统大多是运行在保护模式下的，如果我们要学好操作系统，保护模式是一定要了解的；本章节主要讲解x86的保护模式，由于x64是基于x86拓展的指令集，所以当你具备x86的基础之后再去学习x64也就很简单了",{"_index":8901,"title":{},"body":{"1015831":{}}}],["现在有一个指令为：0x8",{"_index":12014,"title":{},"body":{"1015817":{}}}],["现在有一个指令为：0x80",{"_index":12033,"title":{},"body":{"1015817":{}}}],["现在有一个类，其中有一个函数用于比较2个类的成员大小",{"_index":3601,"title":{},"body":{"1015840":{}}}],["理解gdi中的页面空间和设备空间(逻辑坐标和设备坐标)以及映射模式",{"_index":622,"title":{},"body":{"1015822":{}}}],["理解modr/",{"_index":12008,"title":{},"body":{"1015817":{}}}],["理解客户区鼠标消息和非客户区鼠标消息",{"_index":925,"title":{},"body":{"1015822":{}}}],["理解窗口和视口以及对应的原点和范围",{"_index":623,"title":{},"body":{"1015822":{}}}],["理解设备空间的三大坐标系",{"_index":624,"title":{},"body":{"1015822":{}}}],["琛ㄥ悕",{"_index":8816,"title":{},"body":{"1015850":{}}}],["琛ㄥ悕(瀛楁1,瀛楁2",{"_index":8846,"title":{},"body":{"1015850":{}}}],["琛ㄧず浠ｇ爜娈垫垨鏁版嵁娈垫弿杩扮",{"_index":9033,"title":{},"body":{"1015831":{}}}],["琛ㄧず绐楀彛锛岀瓑浠蜂簬mfc涓殑cwnd",{"_index":4117,"title":{},"body":{"1015820":{}}}],["琛ㄧず绯荤粺娈垫弿杩扮",{"_index":9034,"title":{},"body":{"1015831":{}}}],["琛ㄧず褰撳墠鍒涘缓鐨勪簰鏂ヤ綋鏄惁灞炰簬褰撳墠绾跨▼锛屼簰鏂ヤ綋缁撴瀯浣撴垚鍛樼殑ownerthread灏辩敱瀹冨喅瀹",{"_index":10732,"title":{},"body":{"2424889":{}}}],["琛ㄧず鏈珹pc鏄惁宸叉寕鍏ラ槦鍒楋紝鎸傚叆鍓嶏細0锛屾寕鍏ュ悗锛�1",{"_index":10856,"title":{},"body":{"2424869":{}}}],["琛ㄧず鑺傜殑鏁伴噺",{"_index":6101,"title":{},"body":{"1015828":{}}}],["琛屽彿",{"_index":914,"title":{},"body":{"1015822":{}}}],["琛紝缁撴瀯浣撴暟缁",{"_index":6182,"title":{},"body":{"1015828":{}}}],["瑕佷慨鏀瑰唴瀛樼殑杩涚▼鍙ユ焺",{"_index":4854,"title":{},"body":{"3440657":{}}}],["瑕佷慨鏀瑰唴瀛樼殑璧峰鍦板潃",{"_index":4856,"title":{},"body":{"3440657":{}}}],["瑕佸啓澶氬皯瀛楄妭",{"_index":8170,"title":{},"body":{"1015833":{}}}],["瑕佸啓鍏ョ殑鏁版嵁鍦ㄥ摢",{"_index":8168,"title":{},"body":{"1015833":{}}}],["瑕佸垎閰嶇殑鍐呭瓨鍖哄煙鐨勫湴鍧�锛屾病鏈夌壒娈婇渶姹傞�氬父涓嶆寚瀹",{"_index":7924,"title":{},"body":{"1015833":{}}}],["瑕佸埛鏂扮殑澶у皬锛堝瓧鑺傦級",{"_index":8264,"title":{},"body":{"1015833":{}}}],["瑕佸姞瀵嗕俊鎭",{"_index":10497,"title":{},"body":{"1015818":{}}}],["瑕佸姞瀵嗕俊鎭暱搴",{"_index":10496,"title":{},"body":{"1015818":{}}}],["瑕佹墦寮�鐨勯�傞厤鍣ㄥ悕瀛",{"_index":10160,"title":{},"body":{"1015818":{}}}],["瑕佹墽琛岀殑浠ｇ爜",{"_index":7410,"title":{},"body":{"1015833":{}}}],["瑕佽в瀵嗙殑淇℃伅",{"_index":10506,"title":{},"body":{"1015818":{}}}],["瑕佽в瀵嗙殑淇℃伅闀垮害",{"_index":10505,"title":{},"body":{"1015818":{}}}],["瑕佽澶氬皯瀛楄妭",{"_index":8163,"title":{},"body":{"1015833":{}}}],["瑙﹀彂璋冭瘯浜嬩欢鐨勭嚎绋婭d",{"_index":4680,"title":{},"body":{"3440657":{}}}],["瑙﹀彂璋冭瘯浜嬩欢鐨勮繘绋婭d",{"_index":4678,"title":{},"body":{"3440657":{}}}],["璁よ瘉锛宲cap_op",{"_index":10168,"title":{},"body":{"1015818":{}}}],["璁剧疆妯″潡鍦板潃",{"_index":7742,"title":{},"body":{"1015833":{}}}],["璁剧疆杞欢鏂偣",{"_index":4819,"title":{},"body":{"3440657":{}}}],["璁剧疆杩斿洖鐘舵",{"_index":5714,"title":{},"body":{"1015847":{}}}],["璁剧疆浜ゆ崲鏁版嵁鏂瑰紡",{"_index":5669,"title":{},"body":{"1015847":{}}}],["璁剧疆浜嬩欢涓哄凡閫氱煡锛屼篃灏辨槸璁剧疆涓烘湁淇″彿",{"_index":7587,"title":{},"body":{"1015833":{}}}],["璁剧疆涓篘ull鍒欒〃绀哄湪妗岄潰涓粯鐢",{"_index":7665,"title":{},"body":{"1015833":{}}}],["璁剧疆涓�0",{"_index":8884,"title":{},"body":{"1015850":{}}}],["璁剧疆涓�涓嵏杞藉嚱鏁帮紝褰撻┍鍔ㄥ仠姝㈡椂瑙﹀彂",{"_index":5476,"title":{},"body":{"1015847":{}}}],["璁剧疆涓�涓嵏杞藉嚱鏁帮紝褰撻┍鍔ㄥ嵏杞芥椂瑙﹀彂",{"_index":5628,"title":{},"body":{"1015847":{}}}],["璁剧疆瀛椾綋",{"_index":897,"title":{},"body":{"1015822":{}}}],["璁剧疆琛ㄥ潗涓婅",{"_index":898,"title":{},"body":{"1015822":{}}}],["璁剧疆瑙嗗彛澶у皬",{"_index":679,"title":{},"body":{"1015822":{}}}],["璁剧疆璁块棶鏂偣",{"_index":4877,"title":{},"body":{"3440657":{}}}],["璁剧疆绋嬪簭褰撳墠鐩綍",{"_index":8104,"title":{},"body":{"1015833":{}}}],["璁剧疆绐楀彛澶у皬",{"_index":676,"title":{},"body":{"1015822":{}}}],["璁剧疆绐楀彛鏍囬锛屼娇鐢≦t涓殑瀛楃涓睶string",{"_index":4124,"title":{},"body":{"1015820":{}}}],["璁剧疆绐楀彛鑳屾櫙鑹",{"_index":7737,"title":{},"body":{"1015833":{}}}],["璁剧疆绫诲悕瀛",{"_index":7740,"title":{},"body":{"1015833":{}}}],["璁剧疆绾跨▼涓婁笅鏂",{"_index":4942,"title":{},"body":{"3440657":{}}}],["璁剧疆绾跨▼鐘舵�佷负鍑嗗",{"_index":11152,"title":{},"body":{"1703937":{}}}],["璁剧疆褰撳墠璇诲彇鐨勪綅缃",{"_index":8187,"title":{},"body":{"1015833":{}}}],["璁剧疆褰撳墠绱㈠紩锛屽鏋滃～鍐�0锛岄偅涔堝氨鏄缃涓�涓�変腑",{"_index":1159,"title":{},"body":{"1015822":{}}}],["璁剧疆褰撳墠绾跨▼鐨勬爤椤",{"_index":11151,"title":{},"body":{"1703937":{}}}],["璁剧疆鍐欏叆鏂偣",{"_index":4880,"title":{},"body":{"3440657":{}}}],["璁剧疆鍥炶皟鍑芥暟寮�濮嬫崟鑾锋暟鎹寘(pcap_loop鍑芥暟",{"_index":10154,"title":{},"body":{"1015818":{}}}],["璁剧疆鎵╁睍鏍峰紡",{"_index":1203,"title":{},"body":{"1015822":{}}}],["璁剧疆鎸囧畾绱㈠紩鐨勪綅缃殑鍊",{"_index":1163,"title":{},"body":{"1015822":{}}}],["璁剧疆鎸夐挳鍚嶅瓧",{"_index":4168,"title":{},"body":{"1015820":{}}}],["璁剧疆鎸夐挳鍧愭爣鍜屽ぇ灏",{"_index":4166,"title":{},"body":{"1015820":{}}}],["璁剧疆鏁版嵁浜ゆ崲鐨勬柟寮",{"_index":5797,"title":{},"body":{"1015847":{}}}],["璁剧疆鏂囨湰瀵归綈",{"_index":851,"title":{},"body":{"1015822":{}}}],["璁剧疆鏂偣浣嶇疆锛堜娇鐢―r0浣滀负鏂偣瀵勫瓨鍣級",{"_index":4936,"title":{},"body":{"3440657":{}}}],["璁剧疆鏂偣闀垮害",{"_index":4940,"title":{},"body":{"3440657":{}}}],["璁剧疆鏄犲皠妯″紡",{"_index":674,"title":{},"body":{"1015822":{}}}],["璁剧疆鏍峰紡",{"_index":1192,"title":{},"body":{"1015822":{}}}],["璁块棶妯″紡",{"_index":5757,"title":{},"body":{"1015833":{},"1015847":{}}}],["璁块棶妯″紡(铏氭嫙鍐呭瓨鐨勯檺鍒跺繀椤绘瘮鐗╃悊鍦板潃鏇村姞涓ユ牸",{"_index":7961,"title":{},"body":{"1015833":{}}}],["璁块棶椤佃〃鍏紡",{"_index":9492,"title":{},"body":{"1015831":{}}}],["璁块棶椤电洰褰曡〃鍏紡",{"_index":9489,"title":{},"body":{"1015831":{}}}],["璁惧涓婁笅鏂囧璞",{"_index":7661,"title":{},"body":{"1015833":{}}}],["璁惧瀵硅薄鏄惁琛ㄧず鐙崰璁惧锛屽鏋滃惎鐢ㄤ簡瀵硅澶囩殑鐙崰璁块棶锛屽垯涓�娆″彧鑳芥墦寮�璁惧鐨勪竴涓彞鏌",{"_index":5656,"title":{},"body":{"1015847":{}}}],["璁惧瀵硅薄锛岃缁樼敾鐨勪綅缃",{"_index":7664,"title":{},"body":{"1015833":{}}}],["璁惧灞炴�э紝澶у鏁伴┍鍔ㄧ▼搴忎粎鎸囧畾",{"_index":5653,"title":{},"body":{"1015847":{}}}],["璁惧绫诲瀷",{"_index":5749,"title":{},"body":{"1015847":{}}}],["璁惧绫诲瀷锛屽綋鍓嶄笉涓庢煇涓叿浣撹澶囨寕閽╋紝鎵�浠ョ被鍨嬩负unknow",{"_index":5651,"title":{},"body":{"1015847":{}}}],["璁惧鍙ユ焺",{"_index":5746,"title":{},"body":{"1015847":{}}}],["璁惧鍚嶇о",{"_index":5644,"title":{},"body":{"1015847":{}}}],["璁板緱鍖呭惈杩欎釜澶存枃浠",{"_index":11447,"title":{},"body":{"1015814":{}}}],["璁＄畻寰楀嚭寮�濮嬫椂闂村噺鍘荤粨鏉熸椂闂",{"_index":10406,"title":{},"body":{"1015818":{}}}],["璁＄畻瑕佹浛鎹㈢殑鍑芥暟鍦板潃鍜岃jmp鐨勮繑鍥炲湴鍧",{"_index":5944,"title":{},"body":{"1015847":{}}}],["璁＄畻鍣",{"_index":8693,"title":{},"body":{"1933378":{}}}],["璇",{"_index":2064,"title":{},"body":{"1015843":{}}}],["璇ュ唴瀛樼殑鍒濆淇濇姢灞炴",{"_index":7928,"title":{},"body":{"1015833":{}}}],["璇ュ嚱鏁伴渶瑕佸寘鍚玸tdio.h澶存枃浠",{"_index":7727,"title":{},"body":{"1015833":{}}}],["璇ュ嚱鏁板湪鎸囧畾鐨勭煩褰㈤噷鍐欏叆鏍煎紡鍖栫殑姝ｆ枃",{"_index":814,"title":{},"body":{"1015822":{}}}],["璇ュ�间负1琛ㄧず绗竴娆″垎鍙戯紝涓�0琛ㄧず绗簩娆″垎鍙",{"_index":4283,"title":{},"body":{"2949166":{}}}],["璇ユ垚鍛樻湭浣跨敤",{"_index":10833,"title":{},"body":{"2424869":{}}}],["璇ラ〉闈㈠湪杩涚▼宸ヤ綔闆嗛摼琛ㄤ腑鐨勭储寮",{"_index":6902,"title":{},"body":{"2949228":{}}}],["璇诲彇",{"_index":1926,"title":{},"body":{"1015843":{}}}],["璇诲彇瓒呮椂鏃堕棿锛岃繖閲屽彲浠ョ洿鎺ュ啓null锛屼笉绠″畠",{"_index":10165,"title":{},"body":{"1015818":{}}}],["璇诲彇鍐呭瓨鐨勫",{"_index":5201,"title":{},"body":{"1015825":{}}}],["璇诲彇鏁版嵁",{"_index":1308,"title":{},"body":{"1015822":{},"1015833":{}}}],["璇诲彇鏂囦欢",{"_index":8160,"title":{},"body":{"1015833":{}}}],["璇诲彇鏈�寮�濮嬬殑4瀛楄妭",{"_index":8248,"title":{},"body":{"1015833":{}}}],["璇彞",{"_index":1796,"title":{},"body":{"1015843":{}}}],["璇硶鏍煎紡锛",{"_index":7668,"title":{},"body":{"1015833":{}}}],["璇硶鏍煎紡锛歩ter",{"_index":11353,"title":{},"body":{"1015814":{}}}],["璇硶鏍煎紡锛歷o",{"_index":11348,"title":{},"body":{"1015814":{}}}],["璋冪敤",{"_index":3269,"title":{},"body":{"1015823":{}}}],["璋冪敤涓�涓粯璁ょ殑娑堟伅澶勭悊鍑芥暟锛屽叧闂�佹渶灏忓寲銆佹渶澶у寲閮芥槸鐢遍粯璁ゆ秷鎭鐞嗗嚱鏁板鐞嗙殑",{"_index":4042,"title":{},"body":{"3440655":{}}}],["璋冪敤绾﹀畾",{"_index":2311,"title":{},"body":{"1015833":{},"1015843":{}}}],["璋冪敤鎺ュ彛鏂规硶",{"_index":2801,"title":{},"body":{"1015823":{}}}],["璋冪敤鏂归┍鍔ㄧ▼搴忓璞",{"_index":5649,"title":{},"body":{"1015847":{}}}],["璋冭瘯寰幆",{"_index":4641,"title":{},"body":{"3440657":{}}}],["璋冭瘯杈撳嚭",{"_index":5917,"title":{},"body":{"1015847":{}}}],["璋冭瘯浜嬩欢绫诲瀷",{"_index":4676,"title":{},"body":{"3440657":{}}}],["璋冭瘯鐩稿叧",{"_index":6105,"title":{},"body":{"1015828":{}}}],["璧嬪",{"_index":2927,"title":{},"body":{"1015823":{}}}],["璧嬪�硷紙瀛樺叆锛",{"_index":1929,"title":{},"body":{"1015843":{}}}],["璺宠浆鍥炲師鍑芥暟琚浛鎹㈡寚浠ょ殑涓嬩竴琛屽湴鍧",{"_index":5923,"title":{},"body":{"1015847":{}}}],["瓒呮椂鏃堕棿",{"_index":10601,"title":{},"body":{"2424889":{}}}],["瓒婅繃绗竴涓暟缁",{"_index":2283,"title":{},"body":{"1015843":{}}}],["生产者与消费者",{"_index":7602,"title":{},"body":{"1015833":{}}}],["生产者消费者模式就是通过一个容器来解决生产者和消费者的强耦合（依赖性）问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力",{"_index":7604,"title":{},"body":{"1015833":{}}}],["生存时间（ttl）：该字段表示生存周期，该值占8位，ip分段每经过一个路由器该值减一，它的出现是为了防止路由环路，浪费带宽的问题，window系统默认为128",{"_index":10281,"title":{},"body":{"1015818":{}}}],["用atl制作简单对象",{"_index":3090,"title":{},"body":{"1015823":{}}}],["用cfile的构造函数打开文件",{"_index":1252,"title":{},"body":{"1015822":{}}}],["用qtdesigner来设计界面",{"_index":4179,"title":{},"body":{"1015820":{}}}],["用static声明的全局变量，只有当前函数能访问；我们可以看下反汇编代码来论证这是一个全局变量",{"_index":3737,"title":{},"body":{"1015840":{}}}],["用static就是一个全局变量，只不过它是一个私有的全局变量",{"_index":3732,"title":{},"body":{"1015840":{}}}],["用于表示以函数名字导出的函数个数，如果你在定义的.def中设置了导出函数的属性为noname则就是以序号的方式导出",{"_index":6493,"title":{},"body":{"1015828":{}}}],["用于表示可变长度的二进制数据",{"_index":8806,"title":{},"body":{"1015850":{}}}],["用于表示可变长度的字符串",{"_index":8803,"title":{},"body":{"1015850":{}}}],["用于表示固定长度的二进制数据",{"_index":8804,"title":{},"body":{"1015850":{}}}],["用于表示固定长度的字符串",{"_index":8801,"title":{},"body":{"1015850":{}}}],["用于表示导出函数名称表的地址，这张表是按照首字母a",{"_index":6507,"title":{},"body":{"1015828":{}}}],["用于表示导出函数地址表的地址，这里的地址是rva，如果当前pe文件的文件对齐与内存对齐不一致，需要转换为foa，我们这边是一样的，所以不需要进行转换；通过numberoffunctions知道有6个导出函数，所以从该地址开始依次寻找6个4字节的地址即可，我们可以很清楚的看见这里的地址有些就是00填充的",{"_index":6495,"title":{},"body":{"1015828":{}}}],["用于表示导出函数序号表的地址，同样这里的地址是rva，需要转换为foa；这里表中的成员数与addressofnames是一致的，但需要注意，序号表中的每个成员为2字节，那也就是从该地址开始依次寻找3个2字节数据即可",{"_index":6515,"title":{},"body":{"1015828":{}}}],["用于表示当前导出函数的起始序号，也就是你定义的.def中最小的那个序号",{"_index":6489,"title":{},"body":{"1015828":{}}}],["用于表示当前导出表文件名，这是一个字符串，所以我们只需要找到00即停止寻找",{"_index":6486,"title":{},"body":{"1015828":{}}}],["用于表示所有导出函数的个数，这个数是按照你定义的.def中的序号算的，如果在导出时不按序号顺序导出，则空余位也计入总和，例如如下所示，我们实际上只有4个导出函数，但是因为导出函数的序号没有按照顺序来进行导出，导致计算的时候将空缺的也算入进去了",{"_index":6491,"title":{},"body":{"1015828":{}}}],["用代码模拟mfc的初始化过程，我们基于上一章中手动编写的mfc代码来模拟",{"_index":173,"title":{},"body":{"1015822":{}}}],["用如下代码来实验，我们运行这段代码，先获取变量a的线性地址，然后找到其物理页地址，赋值给0x0的pte，然后回车即可向0x0地址写入内容，并读取",{"_index":9425,"title":{},"body":{"1015831":{}}}],["用成员函数控制就不会存在别人想要调用这个类的时候存在合法不合理的情况了，其根本的目的就是可控。（数据隐藏",{"_index":3538,"title":{},"body":{"1015840":{}}}],["用户apc执行过程",{"_index":10917,"title":{},"body":{"2424869":{}}}],["用户apc的执行：用户apc（asynchr",{"_index":4052,"title":{},"body":{"3440655":{}}}],["用户互斥体与内核互斥体结构名不同，但是结构体相同，主要的区别在于apcdisable成员。用户互斥体是允许内核apc执行的，但是内核互斥体是不允许内核apc进行执行的。在kewaitforsingleobject的代码中，我们知道它会根据apcdisable的值修改_kthread.kernelapcdisable（即正在使用互斥体的线程），若apcdisable值为0，则kernelapcdisable的值不会发生改变；若apcdisable值为1，则kernelapcdisable的值将会减1，此时kernelapcdisable将会是一个不为0的值，内核apc将会被禁用（根据内核apc执行过程，若kernelapcdisable的值不为0，内核apc将会被禁用",{"_index":10766,"title":{},"body":{"2424889":{}}}],["用户异常",{"_index":4301,"title":{},"body":{"2949166":{}}}],["用户异常的处理：当内核调试器和用户调试器均不存在或不处理时，如果发生用户模式异常，处理流程将从ring",{"_index":4055,"title":{},"body":{"3440655":{}}}],["用户空间",{"_index":3793,"title":{},"body":{"3440655":{}}}],["用户空间线性地址的管理",{"_index":6692,"title":{},"body":{"2949228":{}}}],["用户自定义",{"_index":649,"title":{},"body":{"1015822":{}}}],["用户自定义(x,y同等缩放",{"_index":648,"title":{},"body":{"1015822":{}}}],["用户自定义(x和y独立缩放",{"_index":651,"title":{},"body":{"1015822":{}}}],["用户自定义映射模式",{"_index":665,"title":{},"body":{"1015822":{}}}],["用户自定义的映射模式有：mm_isotropic、mm_anisotrop",{"_index":666,"title":{},"body":{"1015822":{}}}],["用指定的画刷填充矩形",{"_index":717,"title":{},"body":{"1015822":{}}}],["用来加密",{"_index":10443,"title":{},"body":{"1015818":{}}}],["用来实现3d立体感",{"_index":719,"title":{},"body":{"1015822":{}}}],["用来解密",{"_index":10445,"title":{},"body":{"1015818":{}}}],["用模板的方式来修改一下这个冒泡排序函数",{"_index":3636,"title":{},"body":{"1015840":{}}}],["用途",{"_index":2384,"title":{},"body":{"1015843":{}}}],["甯搁噺琛ㄨ揪寮",{"_index":1798,"title":{},"body":{"1015843":{}}}],["甯搁噺琛ㄨ揪寮�1",{"_index":1795,"title":{},"body":{"1015843":{}}}],["由",{"_index":10439,"title":{},"body":{"1015818":{}}}],["由于ascii编码无法满足需求，所以在其基础上进行扩展，大家都知道ascii编码只有0",{"_index":7066,"title":{},"body":{"1015833":{}}}],["由于windows中没有使用调用门，所以我们需要自己去构建一个调用门，也就是向gdt表中写一个调用门描述符",{"_index":9200,"title":{},"body":{"1015831":{}}}],["由于不同类型的异常，调用kidispatcherexception的函数不同，所以会当kidispatcherexception执行完后，会返回当相应的函数继续执行。如下图所示，如果是cpu异常，kidispatcherexception函数执行完成之后会返回到commondispatcherexception函数中，并通过iretd返回3环（cpu是通过中断门进的0环，因此用中断返回）；如果是模拟异常，kidispatcherexception执行完成之后会返回到kiraiseexception函数中，并通过系统调用（kiserviceexit）返回3环",{"_index":4306,"title":{},"body":{"2949166":{}}}],["由于任务门可以位于idt表中，所以当遇到中断或者异常时，可以切换到独立的任务去处理异常",{"_index":9364,"title":{},"body":{"1015831":{}}}],["由于单步异常存在两种情况，因此在处理函数内部需要进行判断，以确定是否是由硬件断点引起的异常",{"_index":4943,"title":{},"body":{"3440657":{}}}],["由于单步步入与硬件断点触发的异常都属于单步异常，因此这两种异常可以使用同一个处理函数，只需对dr6的值进行判断即可区分，这部分代码与硬件断点的实现代码一致，所以也不再赘述",{"_index":4968,"title":{},"body":{"3440657":{}}}],["由于在deque容器中适用所有vector的操作，这里不过多赘述，简单说下的2个独有函数",{"_index":11385,"title":{},"body":{"1015814":{}}}],["由于在这里微软只预留了4个等待块的空间，并且第四个等待块还是被固定使用的，因此我们在使用waitformultipleobjects函数时，当等待对象超过3个，就不会再继续使用这里的空间，而是另辟一块新的空间存放等待块。如下图所示，有4个等待对象时候，虽然0x70位置处的等待块空间被使用了，但实际上在0x5c位置处的等待块地址并不是它，0x70位置处的等待块地址也并没有出现在0x5c对应等待块的下一等待块地址（单向循环链表）中",{"_index":10623,"title":{},"body":{"2424889":{}}}],["由于它内部维护了一个variant的数据结构，我们也可以使用variant类型的方式",{"_index":3238,"title":{},"body":{"1015823":{}}}],["由于当前异常来自用户空间，所以我们直接看用户异常的处理流程，这里",{"_index":4802,"title":{},"body":{"3440657":{}}}],["由于我们只能看见段寄存器的16位，所以我们也只能对段寄存器的这可见部分进行读取，但写入的话是按照96位去写入的",{"_index":8918,"title":{},"body":{"1015831":{}}}],["由于我们这里修改了第一个节的大小并添加了空间，所以之后的节的文件偏移（pointertorawdata）要对应添加上增加的差值",{"_index":6442,"title":{},"body":{"1015828":{}}}],["由于根据项目引导生成的代码繁杂冗余，所以我们可以自己来手写mfc来创建windows窗口程序，这样就可以避免一些不必要的代码",{"_index":25,"title":{},"body":{"1015822":{}}}],["由于硬件的种类很多，导致系统内核无法完全兼容所有的迎接，所以微软提供了接口，让开发人员按规定格式编写驱动程序来支持自己的硬件；这些驱动程序每一个我们都可以当作是一个模块，也就可以称之为内核模块，它们遵循pe结构，并且可以加载到内核中",{"_index":5598,"title":{},"body":{"1015847":{}}}],["由于该结构体是未公开的，所以我们也只能在reactos代码（https://sourceforge.net/projects/reactos/）中找到，如下代码中的成员messagequeue就是消息队列",{"_index":3799,"title":{},"body":{"3440655":{}}}],["由于软件断点会修改原指令，因此在重新执行之前需要恢复原硬编码指令。在这里判断了当前的in",{"_index":4823,"title":{},"body":{"3440657":{}}}],["由于这里结构体的内容比较多，我们可以简化一下，整理出本章需要学到的东西",{"_index":238,"title":{},"body":{"1015822":{}}}],["由此得出一个结论：当数据存储超出其数据宽度造成数据溢出时，存储数据舍弃高位，存储低位。以上例子可能不明显，可以看如下例子",{"_index":1540,"title":{},"body":{"1015843":{}}}],["由此得出结论：用二进制描述小数，不可能做到完全精确，就像用十进制描述1/3一样",{"_index":1592,"title":{},"body":{"1015843":{}}}],["由类厂对象创建com对象，返回接口指针给客户",{"_index":2909,"title":{},"body":{"1015823":{}}}],["申请内存的两种方式",{"_index":7919,"title":{},"body":{"1015833":{}}}],["申请内存的函数是virtualalloc，其语法格式如下",{"_index":7923,"title":{},"body":{"1015833":{}}}],["画一个excel表格的ui，有一说一这个课后作业的目标还是很有挑战性的，了解了mfc的一些细节",{"_index":880,"title":{},"body":{"1015822":{}}}],["画一个圆或者椭圆",{"_index":713,"title":{},"body":{"1015822":{}}}],["画一个带直角的矩形",{"_index":715,"title":{},"body":{"1015822":{}}}],["画笔使用cpen类创建，我们可以直接通过构造函数去创建一个画笔",{"_index":830,"title":{},"body":{"1015822":{}}}],["画笔（画刷同理可得",{"_index":829,"title":{},"body":{"1015822":{}}}],["界面文件",{"_index":4193,"title":{},"body":{"1015820":{}}}],["病毒和反病毒",{"_index":5979,"title":{},"body":{"1015828":{}}}],["的使用",{"_index":2093,"title":{},"body":{"1015843":{}}}],["的存在就表示modr/m字段无法描述出来这段地址，你就需要sib字节来填充这些",{"_index":12051,"title":{},"body":{"1015817":{}}}],["的宽度为",{"_index":2071,"title":{},"body":{"1015843":{}}}],["目录相关ap",{"_index":8064,"title":{},"body":{"1015833":{}}}],["目的ip",{"_index":10292,"title":{},"body":{"1015818":{}}}],["目的端口",{"_index":10377,"title":{},"body":{"1015818":{}}}],["目的端口：接收方应用程序对应的端口",{"_index":10368,"title":{},"body":{"1015818":{}}}],["直接使用宏定义函数",{"_index":2362,"title":{},"body":{"1015843":{}}}],["直接修改cr3的方法如果遇到了线程切换就会变回去，我们可以来看一下windows下的函数ntreadvirtualmemory，该函数的作用就是读取其他进程的内存，我们看一下它是如何实现的",{"_index":11289,"title":{},"body":{"1703937":{}}}],["直接在windbg中通过指令",{"_index":6993,"title":{},"body":{"2949228":{}}}],["直接对代码段进行jmp或者",{"_index":9123,"title":{},"body":{"1015831":{}}}],["直接读写（do_direct_io），操作系统会将用户模式下的缓冲区锁住，然后操作系统将这段缓冲区在内核模式地址再次映射一遍，这样用户模式的缓冲区和内核模式的缓冲区指向的是同一区域的物理内存，缺点就是要单独占用物理页面",{"_index":5666,"title":{},"body":{"1015847":{}}}],["直接转为十六进制与十进制，有无符号数都是一样的，但如果是100",{"_index":5101,"title":{},"body":{"1015825":{}}}],["相同点：peekmessage函数与getmessage函数都用于查看应用程序消息队列，有消息时将队列中的消息派发出去",{"_index":574,"title":{},"body":{"1015822":{}}}],["相比之下，当我们使用postmessage函数发送消息时，getmessage函数只是接收该消息，而不会进行处理。消息的处理由translatemessage和dispatchmessage函数负责。postmessage函数不会等待对方返回处理结果，一旦发送完成就立即结束自身程序",{"_index":4014,"title":{},"body":{"3440655":{}}}],["相比较tcp协议我们少了很多代码，并且在创建套接字的时候参数变成了sock_dgram，我们还需要了解一个新函数recvfrom，这个函数是用来收信息的，其语法如下",{"_index":9947,"title":{},"body":{"1015818":{}}}],["看似这是一个窗口实际上，在其背后已经替我们写了很多的代码",{"_index":19,"title":{},"body":{"1015822":{}}}],["看过示例代码之后，我们就知道了字符串本质上就是一堆字符连续串在一块，观察一下反汇编代码",{"_index":1680,"title":{},"body":{"1015843":{}}}],["知识）只有eax、ecx、edx、ebx有8位寄存器",{"_index":5169,"title":{},"body":{"1015825":{}}}],["短调用",{"_index":9158,"title":{},"body":{"1015831":{}}}],["短调用就是我们之前所学习的call指令，指令格式如下",{"_index":9159,"title":{},"body":{"1015831":{}}}],["硬件断点",{"_index":4908,"title":{},"body":{"3440657":{}}}],["硬件断点与软件断点或内存断点有所不同。软件断点和内存断点可以在oep（原始执行点）处设置断点，但是硬件断点不能在oep处设置断点，因为此时主线程还未创建出来（参考使用createprocess函数创建调试关系时所产生的调试事件",{"_index":4933,"title":{},"body":{"3440657":{}}}],["硬件断点是基于线程的，没有线程的情况下无法触发硬件断点。因此，可以采用另一种方法，在oep处设置一个软件断点。当软件断点被触发时，将进入软件断点处理函数，这样就会创建一个线程，因此我们可以在软件断点处理函数中来设置硬件断点（可以在oep+1处设置），这样就可以触发硬件断点。硬件断点的实现如下所示（省略了软件断点处的代码",{"_index":4934,"title":{},"body":{"3440657":{}}}],["硬件断点的实现需要使用调试寄存器dr0到dr7，它们的结构如下",{"_index":4910,"title":{},"body":{"3440657":{}}}],["硬件调试断点产生的异常是status_single_step（单步异常）。除了硬件断点外，当eflags的tf标志位置为1时，也会产生单步异常。dr6寄存器的作用是确定产生的是哪种类型的单步异常。当b0",{"_index":4923,"title":{},"body":{"3440657":{}}}],["硬盘，寄存器是指cpu存储数据的地方。如果你是一个32位的cpu，那么它能提供的寄存器则有：8、16、32位的寄存器",{"_index":5150,"title":{},"body":{"1015825":{}}}],["硬编码",{"_index":4978,"title":{"1015817":{}},"body":{"1015826":{},"1015827":{}}}],["硬编码概述",{"_index":11781,"title":{},"body":{"1015817":{}}}],["确定依赖函数",{"_index":6560,"title":{},"body":{"1015828":{}}}],["确定依赖模块",{"_index":6554,"title":{},"body":{"1015828":{}}}],["确定函数地址",{"_index":6590,"title":{},"body":{"1015828":{}}}],["确认号",{"_index":10371,"title":{},"body":{"1015818":{}}}],["示例代码",{"_index":1751,"title":{},"body":{"1015833":{},"1015843":{}}}],["示例代码如下",{"_index":7965,"title":{},"body":{"1015833":{}}}],["示例代码如下（举一反三",{"_index":8182,"title":{},"body":{"1015833":{}}}],["示意图",{"_index":3192,"title":{},"body":{"1015823":{}}}],["禁止对象被随便创建",{"_index":3742,"title":{},"body":{"1015840":{}}}],["离开",{"_index":7511,"title":{},"body":{"1015833":{}}}],["私有内存的申请释放",{"_index":7915,"title":{},"body":{"1015833":{}}}],["私有内存通过virtualalloc/virtualallocex函数申请，这两个函数在底层实现是没有区别的，但是后者是可以在其他进程中申请内存",{"_index":7920,"title":{},"body":{"1015833":{}}}],["私有密钥",{"_index":10444,"title":{},"body":{"1015818":{}}}],["私钥解密函数",{"_index":10503,"title":{},"body":{"1015818":{}}}],["种类",{"_index":4572,"title":{},"body":{"1015831":{},"3440657":{}}}],["科学计数法",{"_index":1605,"title":{},"body":{"1015843":{}}}],["程序卸载，找到当前v",{"_index":5449,"title":{},"body":{"1015847":{}}}],["程序所需要的资源（数据、代码...）是由进程提供的；进程是一种空间上的概念，它的责任就是提供资源，至于资源如何使用，与它无关",{"_index":7189,"title":{},"body":{"1015833":{}}}],["空类型：vo",{"_index":1521,"title":{},"body":{"1015843":{}}}],["空闲",{"_index":6966,"title":{},"body":{"2949228":{}}}],["空闲页的管理",{"_index":6879,"title":{},"body":{"2949228":{}}}],["窗口与线程",{"_index":3923,"title":{},"body":{"1015833":{},"3440655":{}}}],["窗口坐标",{"_index":627,"title":{},"body":{"1015822":{}}}],["窗口的创建过程",{"_index":3969,"title":{},"body":{"3440655":{}}}],["窗口的本质",{"_index":7642,"title":{},"body":{"1015833":{}}}],["窗口过程的调用者",{"_index":4045,"title":{},"body":{"3440655":{}}}],["窗口（视图）类，在任何地方（包括基础代码）都能获取dc并调整画笔，你无法确认上次使用的画笔是否被更换了",{"_index":841,"title":{},"body":{"1015822":{}}}],["窗口：接收窗口的大小，表示接收端希望接受的字节数",{"_index":10374,"title":{},"body":{"1015818":{}}}],["端口号是什么",{"_index":9695,"title":{},"body":{"1015818":{}}}],["符号位(1",{"_index":1613,"title":{},"body":{"1015843":{}}}],["符号是取地址符，任何变量都可以使用&来获取地址，但不能用在常量上",{"_index":2094,"title":{},"body":{"1015843":{}}}],["第一个mfc程序",{"_index":24,"title":{},"body":{"1015822":{}}}],["第一个qt应用",{"_index":4106,"title":{},"body":{"1015820":{}}}],["第一个windwos程序",{"_index":7700,"title":{},"body":{"1015833":{}}}],["第一个函数rtlpgetstacklimits取了fs:[8]和fs:[4]的值，即_teb._nt_tib.stackbase和_teb._nt_tib.stacklimit，这两个值就是栈的基址和栈的大小，取这两个值的目的就是为了检查seh链表是否属于当前线程的栈中",{"_index":4385,"title":{},"body":{"2949166":{}}}],["第一个参数就是线程句柄，这个很好理解，重点是第二个参数，其是一个context结构体，该结构体包含指定线程的上下文，其contextflags成员的值指定了要设置线程上下文的哪些部分",{"_index":7471,"title":{},"body":{"1015833":{}}}],["第一个成员就是pe标识，该标识不能破坏，因为操作系统在启动一个程序的时候会检测这个标识",{"_index":6094,"title":{},"body":{"1015828":{}}}],["第一个成员我们见怪不怪了，在windows设计下都会有这样一个成员；第二个安全描述符，这个对我们来说实际上没有任何意义，一般留空就行，默认它会遵循父进程的来，其主要作用就是描述谁创建了该对象，谁有访问、使用该对象的权限",{"_index":7322,"title":{},"body":{"1015833":{}}}],["第一个成员指向的就是一个int，这张表中的成员就是如下结构体，这个结构体中就只有一个联合体，它的宽度就是4字节",{"_index":6566,"title":{},"body":{"1015828":{}}}],["第一个成员是一个结构体timeval，自行了解，这里不再赘述，第二与第三个成员，理论应该是一样的大小，但有可能捕获到数据包的长度与实际的长度有出入（数据丢失",{"_index":10194,"title":{},"body":{"1015818":{}}}],["第一个物理页（0x000",{"_index":6935,"title":{},"body":{"2949228":{}}}],["第一个程序",{"_index":4112,"title":{},"body":{"1015820":{}}}],["第一个：使用静态链接生成的可执行文件体积较大，例如我们从汇编层面来看，是根本无法区分哪个是静态库中的代码的",{"_index":8309,"title":{},"body":{"1015833":{}}}],["第一次自增，a+4",{"_index":2084,"title":{},"body":{"1015843":{}}}],["第一种情况",{"_index":11754,"title":{},"body":{"1015814":{}}}],["第一种情况导致堆栈不平衡（函数内压栈",{"_index":5381,"title":{},"body":{"1015825":{}}}],["第一种方法：将生成的.h与.lib文件复制到项目根目录，然后在代码中引用",{"_index":8295,"title":{},"body":{"1015833":{}}}],["第一级叫页目录表（pdt，p",{"_index":9416,"title":{},"body":{"1015831":{}}}],["第一部分：共计两个字节（48",{"_index":8710,"title":{},"body":{"1933378":{}}}],["第七个成员characteristics用来记录当前pe文件的一些属性，该成员是16位（2字节）大小，其每一数据位对应的属性如下所示",{"_index":6120,"title":{},"body":{"1015828":{}}}],["第七步也是最后一步，关闭套接字（这里有2个都要关闭），使用函数closesocket，其语法如下",{"_index":9827,"title":{},"body":{"1015818":{}}}],["第三、第四个参数（lpstr",{"_index":7712,"title":{},"body":{"1015833":{}}}],["第三、第四参数可以根据msdn",{"_index":7929,"title":{},"body":{"1015833":{}}}],["第三个参数就是字符所以我们直接输出这个即可",{"_index":7827,"title":{},"body":{"1015833":{}}}],["第三个参数表示标志位，其位数也有相应含义",{"_index":1000,"title":{},"body":{"1015822":{}}}],["第三个成员是我们重点需要关注的，因为其决定了句柄是否可以被继承，如下图所示，我们让createprocess函数创建的进程、线程句柄可以被继承",{"_index":7323,"title":{},"body":{"1015833":{}}}],["第三步就是监听套接字，使用函数listen，其语法如下",{"_index":9793,"title":{},"body":{"1015818":{}}}],["第三部分和第四部分：共计4字节（0",{"_index":8717,"title":{},"body":{"1933378":{}}}],["第二个函数rtlpgetregistrationhead取fs:[0]的值，即_teb._nt_tib.exceptionlist，也就是seh链表头地址",{"_index":4386,"title":{},"body":{"2949166":{}}}],["第二个成员numberofsections表示当前pe文件中节的数量，也就是节表中有几个结构体；第三个成员timedatestamp表示编译器编译的时候插入的时间戳，与文件属性里面的创建时间和修改时间是无关的",{"_index":6118,"title":{},"body":{"1015828":{}}}],["第二个执行点是系统调用、中断或者异常，因此当线程调用api、程序出现异常或中断时返回用户空间调用kiserviceexit函数，该函数会检查当前kthread.apcstate.userapcpending是否为0，即表示是否有用户空间的apc请求，如果有的话就会向下继续走，通过kideliverapc函数执行apc，因为第一个参数为1，所以会先执行内核apc，然后执行用户apc。因此我们也知道在此处如果没有用户apc，也就不会执行内核apç",{"_index":10906,"title":{},"body":{"2424869":{}}}],["第二个是insert函数，这个函数有3种方式",{"_index":11352,"title":{},"body":{"1015814":{}}}],["第二个物理页（0x100",{"_index":6938,"title":{},"body":{"2949228":{}}}],["第二个：包含相同的公共代码，造成浪费，假设我们在多个项目中使用同一个静态链接库，其实也就表示相同的代码复制多份",{"_index":8311,"title":{},"body":{"1015833":{}}}],["第二是erase函数，这个函数有两种使用方法",{"_index":11369,"title":{},"body":{"1015814":{}}}],["第二段用于读取共享文件",{"_index":6858,"title":{},"body":{"2949228":{}}}],["第二种情况",{"_index":11766,"title":{},"body":{"1015814":{}}}],["第二种情况导致堆栈不平衡（堆栈传参",{"_index":5384,"title":{},"body":{"1015825":{}}}],["第二种方法就是通过修改cr0寄存器的wp位，将其设为0就可以关闭写保护无视物理页只读权限进行读写，这样的方法虽然简单但在多核的情况下在代码运行时候有核切换就会存在问题，所以推荐使用的是第一种方法",{"_index":5881,"title":{},"body":{"1015847":{}}}],["第二种方法：将xxxx.h与xxxx.lib文件复制到vc6安装目录，与库文件放在一起，然后在工程",{"_index":8300,"title":{},"body":{"1015833":{}}}],["第二级叫页表（ptt，pag",{"_index":9418,"title":{},"body":{"1015831":{}}}],["第二部分：共计2个字节（32",{"_index":8715,"title":{},"body":{"1933378":{}}}],["第五步收发数据，首先我们看下收数据，使用到函数recv，其语法如下",{"_index":9808,"title":{},"body":{"1015818":{}}}],["第六步断开连接，我们使用shutdown函数，其语法如下",{"_index":9822,"title":{},"body":{"1015818":{}}}],["第四、第五个成员是调试相关的，我们暂时不用去了解；第六个成员sizeofoptionalheader表示扩展pe头的大小，默认情况下32位pe文件对应值位0xe0，64位pe文件对应值为0xf0",{"_index":6119,"title":{},"body":{"1015828":{}}}],["第四步等待连接，使用函数accept，其语法如下",{"_index":9797,"title":{},"body":{"1015818":{}}}],["等于",{"_index":1749,"title":{},"body":{"1015843":{}}}],["等待与唤醒机制",{"_index":10547,"title":{},"body":{"2424889":{}}}],["等待中的线程一定会挂入等待链表中（即kiwaitlisthead），同时也一定位于等待网上（即kthread+5c的位置不为空",{"_index":10597,"title":{},"body":{"2424889":{}}}],["等待块",{"_index":10557,"title":{},"body":{"2424889":{}}}],["等待块是一个_kwait_block结构体，它将线程与被等待对象联系到了一起，我们接着来看一下它的成员含义",{"_index":10567,"title":{},"body":{"2424889":{}}}],["等待块的填充",{"_index":10611,"title":{},"body":{"2424889":{}}}],["等待对象",{"_index":10668,"title":{},"body":{"2424889":{}}}],["等待模式的值是布尔类型，一个是true，一个是false，true就是等待所有对象的所有状态发生变更，false则是等待任意一个对象的状态发生变更",{"_index":7450,"title":{},"body":{"1015833":{}}}],["等待用户命令，调试器的最主要的作用就是可以对代码进行调试，包括但不限于单步执行、逐行执行、继续执行等操作。在这里，通过一个循环来等待用户执行命令，如果用户没有执行命令，就一直等待下去。waitforusercommand函数需要自行实现，在后续单步学习时候会了解到",{"_index":4830,"title":{},"body":{"3440657":{}}}],["等待线程结束",{"_index":7429,"title":{},"body":{"1015833":{}}}],["等待网",{"_index":10595,"title":{},"body":{"2424889":{}}}],["等待链表",{"_index":11091,"title":{},"body":{"1703937":{}}}],["等待链表是一个双向链表，因此我们可以通过kiwaitlisthead来遍历这张表，找到所有的等待线程。如下图所示我们可以通过kiwaitlisthead这个全局变量，在windbg中找到等待链表头，它的两个成员分别指向了前、后的等待线程",{"_index":11093,"title":{},"body":{"1703937":{}}}],["等类型是编译器已知类型，我们称之为内置类型；但结构体编译器并不认识，当我们使用的时候需要告诉编译器一声，我们也称之为自定义类型",{"_index":1985,"title":{},"body":{"1015843":{}}}],["等运算，也不可以被重新赋值",{"_index":3340,"title":{},"body":{"1015840":{}}}],["答案：系统是根据端口号来区分出数据包应该分给哪个进程，每个联网的进程都会分配一个系统唯一的id，发送数据包的时候这个id也会放进去，接受数据包的时候就可以根据这个id来分别出对应进程，这个id也就是端口号",{"_index":9697,"title":{},"body":{"1015818":{}}}],["简介",{"_index":3086,"title":{},"body":{"1015823":{}}}],["简单改造一番之后将lib、dll文件和抽象基类头文件打包给客户，这样客户就只能看见抽象基类定义的内容，而无法看见子类的私有成员了",{"_index":2628,"title":{},"body":{"1015823":{}}}],["简单理解：cwinapp的run函数就是用于消息循环的",{"_index":191,"title":{},"body":{"1015822":{}}}],["简单的宏：#def",{"_index":2338,"title":{},"body":{"1015843":{}}}],["简单看下反汇编，我们发现是可以的，因为这里结构体类型都是一样的，类型一样，自然可以赋值",{"_index":2015,"title":{},"body":{"1015843":{}}}],["简易调试器输出的地址处的指令刚好是in",{"_index":4752,"title":{},"body":{"3440657":{}}}],["简而言之，定长指令可以直接通过opcode确定硬编码长度，变长指令就无法通过opcode确定硬编码长度",{"_index":11820,"title":{},"body":{"1015817":{}}}],["简而言之：当系统内存不够的时候，操作系统会把物理内存中的数据交换到硬盘上，此时页面不是直接挂到空闲链表上去，而是挂到备用链表上，虽然释放了，但里边的内容还是有意义的",{"_index":6971,"title":{},"body":{"2949228":{}}}],["算式为：mmpfndat",{"_index":6932,"title":{},"body":{"2949228":{}}}],["算数运算符",{"_index":1730,"title":{},"body":{"1015843":{}}}],["算法",{"_index":11599,"title":{},"body":{"1015814":{}}}],["算法：用来操作容器中的元素的函数模版。例如，stl用sort()来对一个vector中的数据进行排序",{"_index":11321,"title":{},"body":{"1015814":{}}}],["管理",{"_index":9576,"title":{},"body":{"1015831":{}}}],["管理内核对象",{"_index":7305,"title":{},"body":{"1015833":{}}}],["类::内部类",{"_index":3718,"title":{},"body":{"1015840":{}}}],["类似于备用状态，页面已从原来的工作集中移除，但页面的内容已被修改。原来工作集中的pte仍然指向该物理页面，但已被标记为无效的正在转移的pte。如果系统要回收此类页面以供其他用途，则必须将页面的内容写入磁盘",{"_index":6974,"title":{},"body":{"2949228":{}}}],["类似于已修改状态，但区别在于内存管理器不会将页面的内容写入磁盘。这种状态通常用于临时修改的数据，系统不需要将其持久化到磁盘中，以提高性能",{"_index":6977,"title":{},"body":{"2949228":{}}}],["类厂本身也是一个com对象，它支持一个特殊的接口iclassfactory，这个接口的定义如下",{"_index":2884,"title":{},"body":{"1015823":{}}}],["类厂的锁计数为0",{"_index":2902,"title":{},"body":{"1015823":{}}}],["类型",{"_index":9643,"title":{},"body":{"1015818":{}}}],["类成员的访问控制",{"_index":3415,"title":{},"body":{"1015840":{}}}],["类：带有函数的结构体，称为类",{"_index":3314,"title":{},"body":{"1015840":{}}}],["系统启动线程",{"_index":7202,"title":{},"body":{"1015833":{}}}],["系统在安装时会根据你的硬件环境，如intel的多核cpu，系统就会将ntkrnlmp.exe拷贝成ntoskrnl.exe，虽然与单核时的名字是一样的，但真正的源文件不同",{"_index":6667,"title":{},"body":{"1933380":{}}}],["系统时钟执行完毕之后都会去调用kidispatchinterrupt函数，这个函数用于判断当前线程的时间片是否到期，我们可以来看一下该函数的执行流程，先判断_kpcr.prcbdata.quantumend的值，当值为非0时进行跳转，接着修改该值为0继而调用_kiquantumend函数，在这个函数里就是重新设置_kthread结构体的quantum成员为6，然后进入到kifindreadthread函数寻找下一个就绪状态的线程",{"_index":11229,"title":{},"body":{"1703937":{}}}],["系统服务表",{"_index":2541,"title":{},"body":{"1015846":{}}}],["系统调用",{"_index":2404,"title":{"1015846":{}},"body":{"1015827":{},"1015832":{}}}],["系统调用、中断或者异常",{"_index":10905,"title":{},"body":{"2424869":{}}}],["系统调用号查找函数",{"_index":2550,"title":{},"body":{"1015846":{}}}],["系统重启",{"_index":5494,"title":{},"body":{"1015847":{}}}],["系统：window",{"_index":5144,"title":{},"body":{"1015825":{}}}],["纭紪鐮",{"_index":5928,"title":{},"body":{"1015847":{}}}],["纯虚函数",{"_index":3575,"title":{},"body":{"1015840":{}}}],["纯虚函数语法",{"_index":3653,"title":{},"body":{"1015840":{}}}],["线性地址是32位的，这样算下来就还剩下2位，这2位就是新拓展出来pdpi（pagı",{"_index":9517,"title":{},"body":{"1015831":{}}}],["线性地址的管理",{"_index":6688,"title":{},"body":{"2949228":{}}}],["线性地址，会帮我们自动将线性地址转换为物理地址，但是在转换过程中pte为空，所以最后提示p",{"_index":7040,"title":{},"body":{"2949228":{}}}],["线程apc队列中的apc函数都是与进程相关联的，如a进程的1线程中的所有apc函数要访问的内存地址都是a进程的。但线程是可以挂靠到其他的进程，如a进程的线程1通过修改cr3，即改为b进程的页目录基址，就可以访问b进程地址空间，即所谓的进程挂靠",{"_index":10806,"title":{},"body":{"2424869":{}}}],["线程上下文是指某一时间点cpu寄存器和程序计数器的内容，如果想要设置、获取线程上下文就需要先将线程挂起",{"_index":7466,"title":{},"body":{"1015833":{}}}],["线程不是被动切换的，而是主动的，这点我们在线程函数的实现代码上有体现，即每个线程函数都调用了线程切换的函数",{"_index":11192,"title":{},"body":{"1703937":{}}}],["线程互斥：线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性；当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源",{"_index":7600,"title":{},"body":{"1015833":{}}}],["线程优先级",{"_index":11258,"title":{},"body":{"1703937":{}}}],["线程函数会有一个返回值（dword），这个返回值可以根据你的需求进行返回，而我们需要如何获取这个返回结果呢？这时候就可以使用getexitcodethread函数，其语法格式如下",{"_index":7456,"title":{},"body":{"1015833":{}}}],["线程切换",{"_index":10900,"title":{},"body":{"1703937":{},"2424869":{}}}],["线程切换与fs寄存器的关系",{"_index":11252,"title":{},"body":{"1703937":{}}}],["线程切换与tss的关系",{"_index":11234,"title":{},"body":{"1703937":{}}}],["线程切换并没有通过tss来保护寄存器，而是通过堆栈的方式",{"_index":11193,"title":{},"body":{"1703937":{}}}],["线程切换的几种情况",{"_index":11217,"title":{},"body":{"1703937":{}}}],["线程同步",{"_index":7599,"title":{},"body":{"1015833":{}}}],["线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒；同步的前提是互斥，其次就是有序，互斥并不代表a线程访问临界资源后就一定是b线程再去访问，也有可能是a线程，这就是属于无序的状态，所以同步就是互斥加上有序",{"_index":7601,"title":{},"body":{"1015833":{}}}],["线程安全问题",{"_index":7488,"title":{},"body":{"1015833":{}}}],["线程开始执行",{"_index":7204,"title":{},"body":{"1015833":{}}}],["线程意外结束时，互斥体可以避免无限等待",{"_index":7550,"title":{},"body":{"1015833":{}}}],["线程执行函数的语法要求如下",{"_index":7407,"title":{},"body":{"1015833":{}}}],["线程控制",{"_index":7416,"title":{},"body":{"1015833":{}}}],["线程是不能被结束、暂停、恢复的，线程在执行的时候自己占据着cpu。设想一种极端的例子：如果不调用api、屏蔽中断，并保证代码不出现异常，线程将永久占用cpu，线程只有自己执行代码将自己结束",{"_index":10769,"title":{},"body":{"2424869":{}}}],["线程是附属在进程上的执行实体，是代码的执行流程",{"_index":7391,"title":{},"body":{"1015833":{}}}],["线程是附属在进程上的执行实体，是代码的执行流程；代码必须通过线程才能执行",{"_index":8389,"title":{},"body":{"1015833":{}}}],["线程有3种状态：就绪、等待、运行。正在运行中的线程存储在_kpcr结构体中，就绪和等待的线程全在另外的33个链表中。这33个链表有1个等待链表核32个就绪链表（我们也称之为调度链表",{"_index":11090,"title":{},"body":{"1703937":{}}}],["线程的切换过程本质上就是堆栈的切换过程",{"_index":11194,"title":{},"body":{"1703937":{}}}],["线程的概念",{"_index":8388,"title":{},"body":{"1015833":{}}}],["线程等待与唤醒",{"_index":10541,"title":{},"body":{"2424889":{}}}],["线程结构体",{"_index":11007,"title":{},"body":{"1703937":{}}}],["线程结构体0x34偏移位成员指向了一个结构体_kapc_state，该结构体有5个成员",{"_index":10773,"title":{},"body":{"2424869":{}}}],["线程进0环时，原来的运行环境（寄存器栈顶等）保存到trap_frame结构体中，如果要提前返回3环去处理用户apc，就必须要修改trap_frame结构体。比如进0环时的位置存储在eip中，现在要提前返回，而且返回的并不是原来的位置，那就意味着必须要修改eip为新的返回位置，还需要修改为处理apc时需要的栈（esp",{"_index":10925,"title":{},"body":{"2424869":{}}}],["线程锁",{"_index":7505,"title":{},"body":{"1015833":{}}}],["线程锁只能用于单个进程间的线程控制",{"_index":7548,"title":{},"body":{"1015833":{}}}],["线程锁就是临界区的实现方式，通过线程锁我们可以完美解决如上所述的问题，其步骤如下所示",{"_index":7506,"title":{},"body":{"1015833":{}}}],["线程间不会相互配合，而是各自执行自己的，如果想要配合就需要了解线程通信，这个后面会学习到",{"_index":7412,"title":{},"body":{"1015833":{}}}],["绂诲紑涓翠复鐣屽尯锛屽綊杩樹护鐗",{"_index":7520,"title":{},"body":{"1015833":{}}}],["组件中对象数为0",{"_index":2901,"title":{},"body":{"1015823":{}}}],["组件的clsid在哪里：如上图注释所示",{"_index":3105,"title":{},"body":{"1015823":{}}}],["组件程序创建完成之后，必须要通过某种途径把它的信息注册到注册表中，然后客户程序才能根据注册表中的信息对组件程序进行操作",{"_index":2895,"title":{},"body":{"1015823":{}}}],["组合框",{"_index":1086,"title":{},"body":{"1015822":{}}}],["组合框与列表框控件",{"_index":1122,"title":{},"body":{"1015822":{}}}],["绉婚櫎鏂偣",{"_index":4952,"title":{},"body":{"3440657":{}}}],["绋嬪簭姝ｅ父鎵ц",{"_index":4513,"title":{},"body":{"2949166":{}}}],["绋嬪簭鍏ュ彛",{"_index":6136,"title":{},"body":{"1015828":{}}}],["绋嶅悗浜嗚в",{"_index":10571,"title":{},"body":{"2424889":{}}}],["绌洪棿娓呴浂",{"_index":11131,"title":{},"body":{"1703937":{}}}],["经典变长指令",{"_index":11994,"title":{},"body":{"1015817":{}}}],["经典定长指令",{"_index":11836,"title":{},"body":{"1015817":{}}}],["经典定长指令，就是我们以后会经常见到、使用的定长指令；注意以下都是以x86环境去讲解，在实际的硬编码对应的汇编指令中其他环境对应的指令并不是这些",{"_index":11837,"title":{},"body":{"1015817":{}}}],["经过观察我们发现，这里的数组越界访问，造成了堆栈中返回地址被篡改为fun函数的地址，一旦执行到ret指令后，程序将会跳转到fun函数然后往下执行，也就进入了死循环输出",{"_index":1945,"title":{},"body":{"1015843":{}}}],["绐楀彛妯″潡鐨勫彞鏌",{"_index":468,"title":{},"body":{"1015822":{}}}],["绐楀彛浣跨敤鐨勮彍鍗曞彞鏌",{"_index":470,"title":{},"body":{"1015822":{}}}],["绐楀彛澶栬鐨勬牱寮",{"_index":7757,"title":{},"body":{"1015833":{}}}],["绐楀彛瀹藉害锛氬儚绱",{"_index":7762,"title":{},"body":{"1015833":{}}}],["绐楀彛鍑芥暟瀹氫箟",{"_index":7732,"title":{},"body":{"1015833":{}}}],["绐楀彛鍙ユ焺",{"_index":4026,"title":{},"body":{"1015833":{},"3440655":{}}}],["绐楀彛鍙ユ焺锛屽鏋滀负null鍒欒〃绀鸿绾跨▼涓殑鎵�鏈夋秷鎭兘瑕",{"_index":7782,"title":{},"body":{"1015833":{}}}],["绐楀彛鍚嶅瓧",{"_index":7756,"title":{},"body":{"1015833":{}}}],["绐楀彛鍚嶇о",{"_index":7847,"title":{},"body":{"1015833":{}}}],["绐楀彛鐨勫悕绉",{"_index":485,"title":{},"body":{"1015822":{}}}],["绐楀彛鐨勫搴︼紝鍗曚綅鏄儚绱犮",{"_index":477,"title":{},"body":{"1015822":{}}}],["绐楀彛鐨勬牱寮",{"_index":483,"title":{},"body":{"1015822":{}}}],["绐楀彛鐨勭被鍚",{"_index":487,"title":{},"body":{"1015822":{}}}],["绐楀彛鐨勯珮搴︼紝鍗曚綅鏄儚绱犮",{"_index":475,"title":{},"body":{"1015822":{}}}],["绐楀彛闀垮害锛氬儚绱",{"_index":7764,"title":{},"body":{"1015833":{}}}],["结合内容，再根据之前知道的opcode决定有没有modr/m，返过来一推，opcode后面有modr/m则表示这是一个变长指令，没有则是一个定长指令，也就是说操作数只要存在ex或gx的就为定长指令，没有的则为定长指令",{"_index":11835,"title":{},"body":{"1015817":{}}}],["结束一个#if…#else条件编译块",{"_index":2391,"title":{},"body":{"1015843":{}}}],["结束地址",{"_index":9645,"title":{},"body":{"1015818":{}}}],["结构",{"_index":8909,"title":{},"body":{"1015831":{}}}],["结构体",{"_index":1972,"title":{},"body":{"1015828":{},"1015843":{},"1015846":{}}}],["结构体中的成员对应的作用见下图中的文字注释，该结构体就是保存现场所需要用到的结构体",{"_index":2503,"title":{},"body":{"1015846":{}}}],["结构体名称.函数名",{"_index":3318,"title":{},"body":{"1015840":{}}}],["结构体和int、char等本质是没有区别的，所以结构体也有数组，结构体数组的定义如下",{"_index":2042,"title":{},"body":{"1015843":{}}}],["结构体在定义的时候，除了本身以外可以使用任何类型",{"_index":1988,"title":{},"body":{"1015843":{}}}],["结构体声明的位置和变量一样，都存在全局和局部的属性",{"_index":1987,"title":{},"body":{"1015843":{}}}],["结构体大小",{"_index":6933,"title":{},"body":{"2949228":{}}}],["结构体存储的时候是从下标为1的索引中开始的，下标为0的索引中存储的是当前函数的线程信息",{"_index":11118,"title":{},"body":{"1703937":{}}}],["结构体成员",{"_index":10940,"title":{},"body":{"1703937":{}}}],["结构体成员分别是：1.结构体长度；2.安全描述符；3.句柄是否被继承",{"_index":7321,"title":{},"body":{"1015833":{}}}],["结构体成员的使用",{"_index":2059,"title":{},"body":{"1015843":{}}}],["结构体指针",{"_index":2185,"title":{},"body":{"1015843":{}}}],["结构体指针也有数组，我们可以看下其定义和对应宽度",{"_index":2216,"title":{},"body":{"1015843":{}}}],["结构体数组",{"_index":2041,"title":{},"body":{"1015843":{}}}],["结构体数组初始化",{"_index":2050,"title":{},"body":{"1015843":{}}}],["结构体类型变量的定义",{"_index":1989,"title":{},"body":{"1015843":{}}}],["结构体类型变量的读写",{"_index":1997,"title":{},"body":{"1015843":{}}}],["结构分析",{"_index":1026,"title":{},"body":{"1015822":{}}}],["结构是8，所以也印证了，我们说的结构体也是需要字节对齐的",{"_index":2027,"title":{},"body":{"1015843":{}}}],["结果",{"_index":3198,"title":{},"body":{"1015823":{}}}],["结果为0，那我们一直按着ctrl键不抬起在看一下，结果就为1了",{"_index":1015,"title":{},"body":{"1015822":{}}}],["结果是24，那么就说明c不仅仅继承了b，还继承了a；再换个说法就是，继承的本质是数据的复制，那也就是说当复制完（继承）后才是其本身，b的本身就是4个成员x、y、v、",{"_index":3408,"title":{},"body":{"1015840":{}}}],["结论：可以看到当movs指令执行结束后，esi、edi的值自增了4，「自增多少取决于传送数据的数据宽度」，所以这里是dowrd表示4字节，也就自增了4",{"_index":5302,"title":{},"body":{"1015825":{}}}],["绔嬪嵆鏁",{"_index":5195,"title":{},"body":{"1015825":{}}}],["绔嬪嵆鏁�/瀵勫瓨鍣�/鍐呭瓨",{"_index":9160,"title":{},"body":{"1015831":{}}}],["绔栫潃鐢伙紝閬靛惊涓婁竴lineto鐨剎锛寉鍧愭爣涓鸿捣鐐癸紝x涓嶅彉锛寉澧炲姞",{"_index":728,"title":{},"body":{"1015822":{}}}],["绔彛",{"_index":9748,"title":{},"body":{"1015818":{}}}],["绔彛闇�瑕佹寜鐓х綉缁滃瓧鑺傚簭锛屾墍浠ラ渶瑕佷娇鐢╤tons鍑芥暟",{"_index":9786,"title":{},"body":{"1015818":{}}}],["绕过反调试的原理很简单，我们知道unhandledexceptionfilter函数是通过ntqueryinformationprocess来判断是否被调试的，而ntqueryinformationprocess是通过debugport的值来判断程序是否正在被调试，因此我们只需要hook了ntqueryinformationprocess，修改debugport的值就可以绕过反调试了",{"_index":4515,"title":{},"body":{"2949166":{}}}],["绗竴绉嶏細",{"_index":2259,"title":{},"body":{"1015843":{}}}],["绗竴鏉′俊鎭",{"_index":7783,"title":{},"body":{"1015833":{}}}],["绗笁涓弬鏁拌〃绀哄垵濮嬬姸鎬佹病鏈変俊鍙",{"_index":7583,"title":{},"body":{"1015833":{}}}],["绗笁涓弬鏁板彲浠ユ湁涓や釜鍊硷細",{"_index":4665,"title":{},"body":{"3440657":{}}}],["绗笁涓弬鏁版槸璧勬簮绫诲瀷锛屽氨杈撳叆鎴戜滑鍒氬垰鑷畾涔夌殑璧勬簮绫诲瀷",{"_index":1295,"title":{},"body":{"1015822":{}}}],["绗簩涓弬鏁伴渶瑕佸～鍐欒祫婧愬悕绉帮紝杩欎釜鏄敱makeintresource(id)鍘昏幏鍙栫殑锛孖d灏辨槸鎴戜滑鐨勮祫婧怚",{"_index":1294,"title":{},"body":{"1015822":{}}}],["绗簩涓弬鏁帮紝false琛ㄧず闈為�氱煡绫诲瀷閫氱煡锛屼篃灏辨槸浜掓枼锛汿rue鍒欒〃绀轰负閫氱煡绫诲瀷",{"_index":7582,"title":{},"body":{"1015833":{}}}],["绗簩绉嶏細",{"_index":2273,"title":{},"body":{"1015843":{}}}],["给具有子项目的项目添加带有加号或者减号的按钮，单击该按扭可以展开和折叠相关子树",{"_index":1226,"title":{},"body":{"1015822":{}}}],["绛変环浜",{"_index":2266,"title":{},"body":{"1015843":{}}}],["绛夊緟妯″紡",{"_index":7449,"title":{},"body":{"1015833":{}}}],["绛夊緟杩炴帴",{"_index":9719,"title":{},"body":{"1015818":{}}}],["绛夊緟浜嬩欢",{"_index":7576,"title":{},"body":{"1015833":{}}}],["绛夊緟浜嬩欢锛屼慨鏀逛簨浠禔鐘舵",{"_index":7629,"title":{},"body":{"1015833":{}}}],["绛夊緟浜嬩欢锛屼慨鏀逛簨浠禕鐘舵",{"_index":7633,"title":{},"body":{"1015833":{}}}],["绛夊緟浜掓枼浣撶姸鎬佸彂鐢熷彉鍖栵紝涔熷氨鏄湁淇″彿鎴栦负浜掓枼浣撴嫢鏈夎�咃紝鑾峰彇浠ょ墝",{"_index":7540,"title":{},"body":{"1015833":{}}}],["绛夊緟浜掓枼浣擄紝鑾峰彇浠ょ墝",{"_index":7612,"title":{},"body":{"1015833":{}}}],["绛夊緟瀵硅薄鐨勫湴鍧�锛堝綋鍓嶅疄楠屼腑涓篲kevent锛",{"_index":10574,"title":{},"body":{"2424889":{}}}],["绛夊緟璋冭瘯浜嬩欢",{"_index":4642,"title":{},"body":{"3440657":{}}}],["绛夊緟瓒呮椂鏃堕棿锛堟绉掞級",{"_index":7436,"title":{},"body":{"1015833":{}}}],["绛夊緟绫诲瀷锛岃嫢褰撳墠鍙鏈変竴涓瓑寰呭璞＄鍚堟潯浠跺氨鍙互浣垮緱绾跨▼琚敜閱掞紝閭ｄ箞璇ュ�煎氨鏄�1锛涘鏋滀綘绛夊緟澶氫釜瀵硅薄蹇呴』鍏ㄩ儴绗﹀悎鏉′欢鎵嶅彲浠ヤ娇寰楃嚎绋嬭鍞ら啋锛岄偅涔堣鍊�0",{"_index":10584,"title":{},"body":{"2424889":{}}}],["绛夊緟绾跨▼鎵ц缁撴潫锛岄攢姣佸唴鏍稿璞",{"_index":7589,"title":{},"body":{"1015833":{}}}],["绛夊緟鍧楃殑绱㈠紩锛屽綋鍓嶄负绗竴涓瓑寰呭潡锛屽洜姝よ鍊间负0",{"_index":10581,"title":{},"body":{"2424889":{}}}],["绛夊緟鐢ㄦ埛鍛戒护",{"_index":4848,"title":{},"body":{"3440657":{}}}],["统计信息，与物理页有关",{"_index":10978,"title":{},"body":{"1703937":{}}}],["统计信息，与虚拟内存有关",{"_index":10984,"title":{},"body":{"1703937":{}}}],["统计信息，分别记录了一个进程在0环、3环所花费的时间",{"_index":10953,"title":{},"body":{"1703937":{}}}],["绠�鍐欎负锛歁ov",{"_index":5294,"title":{},"body":{"1015825":{}}}],["绠�鍐欎负锛歁ovsb",{"_index":5292,"title":{},"body":{"1015825":{}}}],["绠�鍐欎负锛歁ovsw",{"_index":5293,"title":{},"body":{"1015825":{}}}],["绠�鍐欎负锛歋tos",{"_index":5310,"title":{},"body":{"1015825":{}}}],["绠�鍐欎负锛歋tosb",{"_index":5308,"title":{},"body":{"1015825":{}}}],["绠�鍐欎负锛歋tosw",{"_index":5309,"title":{},"body":{"1015825":{}}}],["继承",{"_index":3374,"title":{},"body":{"1015840":{}}}],["继承的类b",{"_index":3410,"title":{},"body":{"1015840":{}}}],["继续向下看，将_kpcr的0x638偏移位的成员值加1，也就是_kprcb的0x518偏移的成员kesystemcalls，然后将edx（即3环参数的指针）给到esi，接着将系统服务表指向的函数参数表argmenttable的地址给到ebx，然后xor清空ecx。紧接着就是根据系统调用号的索引获取想要调用的函数参数的字节数给到cl，再将系统服务表指向的函数地址表servicetable的地址给到edi，然后再根据系统调用号的索引获取需要调用的函数（这里乘以4是因为存储的函数地址宽度为4字节）给到ebx",{"_index":2557,"title":{},"body":{"1015846":{}}}],["继续向下跟进代码，我们发现无论是用户或者内核apc插入队列之后，最终都会走到这里，它的第一步就是将kapc.inserted设为1，表示当前apc已经插入到队列中；然后这里会有一个判断，判断kapc.apcstateindex的值与kthread.apcstateindex的值是否相同；若不同，说明挂入apc时出现问题，给al设为1后，即表示将kapc结构体设为1，结构体就没了，然后函数直接返回",{"_index":10892,"title":{},"body":{"2424869":{}}}],["继续执行错误处的代码",{"_index":5543,"title":{},"body":{"1015847":{}}}],["继续根据会发现其会通过afxfindmessageentry函数在消息映射表中去寻找第一个参数的nmessage与第二个参数message是否一致",{"_index":526,"title":{},"body":{"1015822":{}}}],["继续看pe文件头的第三个部分pe文件表头可选部分，我们也称之为扩展pe头，其就是image_optional_header32结构，默认情况下它在32位下是224字节，在64位下是240字节，你也可以通过image_file_header结构的成员去获取/修改扩展pe头的宽度",{"_index":6015,"title":{},"body":{"1015828":{}}}],["继续读代码，先是向ebx存入一个0x30，接着以0x30为段选择子在gdt表中找到段描述符加载到fs段寄存器中",{"_index":2522,"title":{},"body":{"1015846":{}}}],["继续跟进_dbgkcreatethread函数，我们会发现它判断了当前进程的debugport的值是否为空，这个判断是每个调试事件采集函数都会走的逻辑，如果判断值不为空则表示当前进程正在被调试就跳转进去",{"_index":4601,"title":{},"body":{"3440657":{}}}],["继续跟进代码你会发现messagemapfunctions结构体，这个表就是告诉我们当前函数（左键按下）是什么返回值、什么参数，然后将pfn（当前函数地址）保存到其成员pfn里",{"_index":527,"title":{},"body":{"1015822":{}}}],["继续跟进代码，如下图所示我们可以看见首先通过_processidtohandle函数，根据进程id获取被调试进程的句柄（返回结果eax给到esi），其次将被调试进程句柄作为参数带入到_dbguidebugactiveprocess函数",{"_index":4537,"title":{},"body":{"3440657":{}}}],["继续跟进发现是一个pumpmessage函数",{"_index":578,"title":{},"body":{"1015822":{}}}],["继续跟进就会发现我们熟悉的消息转换、分发",{"_index":580,"title":{},"body":{"1015822":{}}}],["继续跟进跳转，我们可以看见会进行两个判断，即判断当前是否有内核apc正在运行以及当前是否禁用了内核apc，如果都没有的话继续向下走，将当前apc从队列中进行摘除，调用kernelroutine对应的函数，该成员指向的是释放apc的函数，接着会再判断一次normalroutine是否为0，不为0则会先将kernelapcinprogress设为1，然后执行normalroutine对应的函数，即内核apc函数，并传入三个值：normalcontext、systemargument1、systemargument2",{"_index":10911,"title":{},"body":{"2424869":{}}}],["继续进行异或：步骤二的结果与左移一位的步骤三结果",{"_index":5137,"title":{},"body":{"1015825":{}}}],["绫",{"_index":3488,"title":{},"body":{"1015840":{}}}],["绫荤殑澶у皬",{"_index":244,"title":{},"body":{"1015822":{}}}],["绫诲悕",{"_index":3642,"title":{},"body":{"1015840":{}}}],["绫诲悕瀛",{"_index":7754,"title":{},"body":{"1015833":{}}}],["绫诲悕绉",{"_index":242,"title":{},"body":{"1015822":{}}}],["绫诲瀷",{"_index":2043,"title":{},"body":{"1015843":{}}}],["绫诲瀷璁板綍閾捐〃缁撴瀯",{"_index":318,"title":{},"body":{"1015822":{}}}],["绫诲瀷鍚峽",{"_index":1981,"title":{},"body":{"1015843":{}}}],["绯欙細slot(close())锛岀敤slot瀹忓姞澶勭悊瀵瑰簲淇″彿鐨勬ы鍑芥暟",{"_index":4154,"title":{},"body":{"1015820":{}}}],["绱㈠紩",{"_index":2527,"title":{},"body":{"1015846":{}}}],["综上所示，也就解答了我们的困惑，在多个线程中，fs选择子不变，依旧可以获取对应线程的信息",{"_index":11257,"title":{},"body":{"1703937":{}}}],["综上所示，我们去看gdt表中的内容，如下图所示红色方框标记的就是代码段，绿色的数据段",{"_index":9042,"title":{},"body":{"1015831":{}}}],["综上所示，我们可以知道virtualalloc/virtualallocex是申请私有内存的唯一方式",{"_index":6780,"title":{},"body":{"2949228":{}}}],["综上所述，我们可以使用如下图来表示一个线程等待一个对象的情况",{"_index":10585,"title":{},"body":{"2424889":{}}}],["综上所述，我们可以使用如下图来表示一个线程等待多个对象的情况",{"_index":10594,"title":{},"body":{"2424889":{}}}],["综上所述，我们可以借助信号量的特点来解决这个问题，而信号量的特点实际上就是对于信号量对象的signalstate值的修改。我们首先来看一下如何创建信号量，使用的函数是createsemaphore，它的语法格式如下",{"_index":10692,"title":{},"body":{"2424889":{}}}],["综上所述，我们可以得出结论大部分情况下，无论是进程的入口线程还是另起的线程，都会被添加的异常处理函数给处理掉，所以未处理异常的情况一般是不存在的",{"_index":4491,"title":{},"body":{"2949166":{}}}],["综上所述，我们就知道线程所需要的cr3寄存器值是来源于_ethread线程结构体0x44偏移位的成员。那么是否就表示0x220是多余的呢，其实不然，0x220偏移位成员用于表示的是当前线程是哪个进程所创建，而0x44偏移位成员用于表示当前线程的资源（cr3）是哪个进程所提供，在一般情况下这两个偏移位成员都指向同一个进程",{"_index":11277,"title":{},"body":{"1703937":{}}}],["综上所述，我们知道在互斥体对象中，我们想要激活等待该对象的线程，只需要满足signalstate大于0，或者互斥体所属为当前线程，即可满足激活条件，因此就解决了重入死锁问题",{"_index":10749,"title":{},"body":{"2424889":{}}}],["绾跨▼淇℃伅鐨勭粨鏋",{"_index":11102,"title":{},"body":{"1703937":{}}}],["绾跨▼灏嗚嚜宸�0x5c浣嶇疆娓�0锛",{"_index":10641,"title":{},"body":{"2424889":{}}}],["绾跨▼缁撴瀯浣擄紝鐢ㄤ簬绾跨▼鍑芥暟鍦板潃銆佸嚱鏁板弬鏁板湴鍧�鐨勫鎵",{"_index":11138,"title":{},"body":{"1703937":{}}}],["绾跨▼鍑芥暟",{"_index":11112,"title":{},"body":{"1703937":{}}}],["绾跨▼鍑芥暟鐨勫弬鏁",{"_index":11110,"title":{},"body":{"1703937":{}}}],["绾跨▼鍒涘缓绫诲瀷淇℃伅",{"_index":4705,"title":{},"body":{"3440657":{}}}],["绾跨▼鍙ユ焺",{"_index":7218,"title":{},"body":{"1015833":{}}}],["绾跨▼鍚",{"_index":11103,"title":{},"body":{"1703937":{}}}],["绾跨▼鍚屾鐨勫墠鎻愭槸浜掓枼",{"_index":7637,"title":{},"body":{"1015833":{}}}],["绾跨▼鍫嗘爤璧峰浣嶇疆",{"_index":11107,"title":{},"body":{"1703937":{}}}],["绾跨▼鍫嗘爤褰撳墠浣嶇疆锛屼篃灏辨槸esp",{"_index":11109,"title":{},"body":{"1703937":{}}}],["绾跨▼鍫嗘爤鐣岄檺",{"_index":11108,"title":{},"body":{"1703937":{}}}],["绾跨▼鎵ц鐨勪唬鐮",{"_index":6635,"title":{},"body":{"1933380":{}}}],["绾跨▼鎵ц鐨勫嚱鏁版湁璇硶瑕佹眰锛屽弬鑰僊sdn",{"_index":7409,"title":{},"body":{"1015833":{}}}],["绾跨▼鎵ц鐨勫嚱鏁颁唬鐮",{"_index":7401,"title":{},"body":{"1015833":{}}}],["绾跨▼鎵�灞炴垨鑰呮墍鎸傞潬鐨勮繘绋",{"_index":10779,"title":{},"body":{"2424869":{}}}],["绾跨▼鐘舵",{"_index":11104,"title":{},"body":{"1703937":{}}}],["绾跨▼閫�鍑",{"_index":4582,"title":{},"body":{"3440657":{}}}],["绾跨▼閫�鍑虹被鍨嬩俊鎭",{"_index":4721,"title":{},"body":{"3440657":{}}}],["绾跨▼闇�瑕佺殑鍙傛暟",{"_index":7402,"title":{},"body":{"1015833":{}}}],["缁ф壙鏍囪瘑锛屼负鐪熷垯琛ㄧず杩欎釜鍙互琚柊杩涚▼缁ф壙锛屼负鍋囧弽涔",{"_index":8275,"title":{},"body":{"1015833":{}}}],["缁堟杩涚",{"_index":4496,"title":{},"body":{"2949166":{},"3440657":{}}}],["缁堟绾跨",{"_index":4495,"title":{},"body":{"2949166":{},"3440657":{}}}],["缁忓吀绾跨▼鍒囨崲锛屽彟澶栦竴涓嚎绋嬪娲",{"_index":11181,"title":{},"body":{"1703937":{}}}],["缁戝畾濂楁帴瀛",{"_index":9717,"title":{},"body":{"1015818":{}}}],["缁撴潫鏃堕棿涓烘姄鍖呮椂闂",{"_index":10404,"title":{},"body":{"1015818":{}}}],["缁撴瀯浣",{"_index":9890,"title":{},"body":{"1015818":{}}}],["缁撴瀯浣撳垵濮嬪寲璧嬪�硷細鐘舵�併�佸悕绉般�佸嚱鏁板湴鍧�銆佸嚱鏁板弬鏁",{"_index":11126,"title":{},"body":{"1703937":{}}}],["缁撴瀯浣撳搴旂殑椹卞姩绋嬪簭鍦ㄥ唴鏍哥┖闂寸殑浣嶇疆",{"_index":5608,"title":{},"body":{"1015847":{}}}],["缁撴瀯浣撳搴旂殑椹卞姩绋嬪簭鐨勫ぇ灏",{"_index":5609,"title":{},"body":{"1015847":{}}}],["缁撴瀯浣撳搴旂殑椹卞姩绋嬪簭鐨勫悕瀛",{"_index":5614,"title":{},"body":{"1015847":{}}}],["缁撴瀯浣撴寚閽堬紝鎹曡幏椹卞姩涓庢暟鎹寘鐩稿叧鑱旂殑澶达紙涓嶆槸鍗忚澶达級",{"_index":10185,"title":{},"body":{"1015818":{}}}],["缁撴瀯浣撴暟缁勫悕[涓嬫爣].鎴愬憳鍚",{"_index":2060,"title":{},"body":{"1015843":{}}}],["缁撴瀯浣撹缁嗕俊鎭紙杩涚▼id銆佺嚎绋婭d銆佽繘绋嬪彞鏌勩�佺嚎绋嬪彞鏌勶級",{"_index":7236,"title":{},"body":{"1015833":{}}}],["缁撴瀯浣撹缁嗕俊鎭紙鍚姩杩涚▼鐩稿叧淇℃伅锛",{"_index":7233,"title":{},"body":{"1015833":{}}}],["缁撴瀯浣撻暱搴",{"_index":9891,"title":{},"body":{"1015818":{}}}],["缁撴瀯浣擄紝琛ㄧず鍙戦�佹暟鎹粰璋",{"_index":9963,"title":{},"body":{"1015818":{}}}],["缁撴瀯鍚嶏細mutant锛堝湪3鐜鍒涘缓锛",{"_index":10759,"title":{},"body":{"2424889":{}}}],["缁撴瀯鍚嶏細mutex锛堝湪0鐜鍒涘缓锛",{"_index":10763,"title":{},"body":{"2424889":{}}}],["缁撴瀯鐨勬寚閽堢殑鍙橀噺鐨勬寚閽",{"_index":5659,"title":{},"body":{"1015847":{}}}],["缁撴灉闆",{"_index":8900,"title":{},"body":{"1015850":{}}}],["缁檈venta璁剧疆淇″彿",{"_index":7635,"title":{},"body":{"1015833":{}}}],["缁檈ventb璁剧疆淇″彿",{"_index":7631,"title":{},"body":{"1015833":{}}}],["缁欑殑鏄瓨鍌ㄦ暟鎹殑鍐呭瓨棣栧湴鍧�锛屾垜浠牴鎹疄闄呮崟鑾风殑闀垮害鍘婚亶鍘嗗嵆鍙幏鍙栧畬鏁存暟鎹",{"_index":10253,"title":{},"body":{"1015818":{}}}],["缁熻鐨勬暟閲",{"_index":10043,"title":{},"body":{"1015818":{}}}],["缂撳啿鍖哄ぇ灏",{"_index":9813,"title":{},"body":{"1015818":{}}}],["缂撳啿鍖洪暱搴",{"_index":9951,"title":{},"body":{"1015818":{}}}],["缂撳啿鍖鸿鍐",{"_index":5671,"title":{},"body":{"1015847":{}}}],["缂栧啓瑕佸鍒跺埌鐩爣杩涚▼鐨勫嚱鏁",{"_index":8624,"title":{},"body":{"1015833":{}}}],["缂栧啓鍥炶皟鍑芥暟",{"_index":10217,"title":{},"body":{"1015818":{}}}],["缂栧啓鍥炶皟鍑芥暟杩涜鏁版嵁鐨勬帴鏀朵笌澶勭悊",{"_index":10155,"title":{},"body":{"1015818":{}}}],["缂栧彿",{"_index":8329,"title":{},"body":{"1015833":{}}}],["缂栫爜鏂瑰紡",{"_index":8763,"title":{},"body":{"1015850":{}}}],["缂栫爜鏂瑰紡_bi",{"_index":8764,"title":{},"body":{"1015850":{}}}],["缂栫爜鏂瑰紡_bin(淇敼瀛楃闆",{"_index":8824,"title":{},"body":{"1015850":{}}}],["缂栬瘧鍣ㄥ～鍐欑殑鏃堕棿鎴",{"_index":6103,"title":{},"body":{"1015828":{}}}],["缃戞牸绾匡紙鍙�傜敤涓巖eport椋庢牸鐨刲istctrl锛",{"_index":1199,"title":{},"body":{"1015822":{}}}],["缃戠粶瀛楄妭搴",{"_index":9900,"title":{},"body":{"1015818":{}}}],["缃戠粶鍦板潃淇℃伅锛氬寘鍚�氫俊鎵�闇�瑕佺殑鐩稿叧淇℃伅锛屼紶閫掔殑搴旇鏄竴涓猻ockaddr缁撴瀯浣擄紝鍦ㄥ叿浣撲紶鍙傜殑鏃跺�欙紝浼氱敤璇ョ粨鏋勪綋鐨勫彉浣搒ockaddr_in褰㈠紡鍘诲垵濮嬪寲鐩稿叧瀛楁",{"_index":9739,"title":{},"body":{"1015818":{}}}],["缓冲区读写（do_buffered_io），操作系统将应用程序提供缓冲区的数据直接复制到内核模式下的地址中",{"_index":5665,"title":{},"body":{"1015847":{}}}],["缓冲区长度不够",{"_index":5530,"title":{},"body":{"1015847":{}}}],["缓存一般页表（4kb字节页面）的指令页表缓存（instruç",{"_index":9558,"title":{},"body":{"1015831":{}}}],["缓存一般页表（4kb字节页面）的数据页表缓存（dat",{"_index":9559,"title":{},"body":{"1015831":{}}}],["缓存大尺寸页表（2mb/4mb字节页面）的指令页表缓存（instruç",{"_index":9560,"title":{},"body":{"1015831":{}}}],["缓存大尺寸页表（2mb/4mb字节页面）的数据页表缓存（instruç",{"_index":9561,"title":{},"body":{"1015831":{}}}],["编写内核程序是无法避免去操作内存的，对内存的使用主要就是申请、设置、拷贝、释放，常用的内核函数如下（应用层与内核层的对比",{"_index":5545,"title":{},"body":{"1015847":{}}}],["编写静态链接库文件",{"_index":8286,"title":{},"body":{"1015833":{}}}],["编号大的迭代器拥有编号小的迭代器的功能，能当编号小的迭代器使用",{"_index":11727,"title":{},"body":{"1015814":{}}}],["编码转换",{"_index":5589,"title":{},"body":{"1015847":{}}}],["编译一下，在项目目录的debug目录下会有一个a.lib文件，这就是我们的静态链接库",{"_index":8289,"title":{},"body":{"1015833":{}}}],["编译之后将文件放入虚拟机，以及在windbg重载符号文件，按如下图操作填入pdb文件所在路径即可",{"_index":5504,"title":{},"body":{"1015847":{}}}],["编译代码并运行可执行文件，最终提示我们出了问题，由此我们便探测出了段寄存器cs的attribute属性",{"_index":8940,"title":{},"body":{"1015831":{}}}],["编译代码，在系统上运行成功实现了ho",{"_index":5899,"title":{},"body":{"1015847":{}}}],["编译后在debug目录就会生成b.dll文件",{"_index":8324,"title":{},"body":{"1015833":{}}}],["编译器不要求必须提供",{"_index":3372,"title":{},"body":{"1015840":{}}}],["编译器不要求必须提供构造函数",{"_index":3361,"title":{},"body":{"1015840":{}}}],["编译器扩展seh",{"_index":4411,"title":{},"body":{"2949166":{}}}],["编译器是如何找到对应数据的呢？第一年五月份的数据",{"_index":1970,"title":{},"body":{"1015843":{}}}],["编译型语言使用组件",{"_index":3202,"title":{},"body":{"1015823":{}}}],["编译型语言在编译之前引入类型库(tlb文件)，编译器编译的时候就知道如何编译接口函数的调用了，这种方式我们称为前绑定；而脚本语言是解释执行的，它执行的时候不会知道具体的函数地址，自动化为此诞生了后绑定；自动化组件其实就是实现了idispatch（自动化）接口的组件；解释性语言跟宏语言，要调用com组件的自定义接口时，都是通过自动化控制程序把自定义接口中的函数名称的字符串跟函数参数传递给idispatch，让idispatch间接地去执行自定义接口中的函数；所以本节课所需要学习的就是idispatch（自动化）接口",{"_index":3178,"title":{},"body":{"1015823":{}}}],["编译好dll之后，我们需要一个进程b来控制进程a，代码如下",{"_index":8505,"title":{},"body":{"1015833":{}}}],["编译打开（不使用vc6打开）test.exe然后使用dtdebug来attach进程",{"_index":8582,"title":{},"body":{"1015833":{}}}],["编译直接出错",{"_index":3353,"title":{},"body":{"1015840":{}}}],["编译程序所需的文件，其中包含了项目名称项目类型以及相关的源文件头文件和界面文件",{"_index":4185,"title":{},"body":{"1015820":{}}}],["编译运行程序，在windbg中输入!proç",{"_index":9380,"title":{},"body":{"1015831":{}}}],["编译运行这段代码，我们输入a或者b进行回车，一开始创建的窗口就会随着不同的指令进行颜色的切换",{"_index":3789,"title":{},"body":{"3440655":{}}}],["编译：ctrl+f7",{"_index":1416,"title":{},"body":{"1015843":{}}}],["编辑框",{"_index":1083,"title":{},"body":{"1015822":{}}}],["缺点",{"_index":9967,"title":{},"body":{"1015818":{}}}],["缺点：占用系统资源太严重，客户端数量上升到一定程度，容易造成系统瘫痪（资源用光了",{"_index":9999,"title":{},"body":{"1015818":{}}}],["缺页异常",{"_index":7009,"title":{},"body":{"1015831":{},"2949228":{}}}],["缺页异常在操作系统中是无时不刻都在发生的，比如当pde/pte的p位为0或pde/pte的属性为只读但程序试图写入，这时候就会产生缺页异常",{"_index":9593,"title":{},"body":{"1015831":{}}}],["缺页异常并非总是不利的，实际上，在windows系统中，每秒都会发生缺页异常。正是通过这种异常机制，windows才能够更有效地利用物理页资源",{"_index":7012,"title":{},"body":{"2949228":{}}}],["网关是什么",{"_index":9700,"title":{},"body":{"1015818":{}}}],["网络上传输的数据很容易被抓包，如果不加密，网络数据就很容易窃取，诸如用户名、密码这些敏感的信息一旦丢失，将会造成巨大的损失",{"_index":10422,"title":{},"body":{"1015818":{}}}],["网络编程",{"_index":4974,"title":{"1015818":{}},"body":{"1015826":{},"1015827":{}}}],["网速的定义",{"_index":10395,"title":{},"body":{"1015818":{}}}],["置1以响应可屏蔽中断",{"_index":9280,"title":{},"body":{"1015831":{}}}],["老师个人认为c++之所以有友元是因为这是c++作者面向过程的一种妥协，这是因为c++是先有的c才有的c++，而很多人已经很熟悉c语言的语法了，你这时候推出一个新的概念，是对开发者的不友好（代码重构、学习代码），所以要妥协",{"_index":3706,"title":{},"body":{"1015840":{}}}],["老规矩我们基于vc6的环境下，在调用plus函数那一行下断点（f9），然后（f7）构建，（f5）运行，右键进入汇编界面",{"_index":1427,"title":{},"body":{"1015843":{}}}],["老规矩我们还是在plus函数那下断点跟踪画堆栈图，如下是堆栈图",{"_index":1503,"title":{},"body":{"1015843":{}}}],["老规矩，我们还是添加一个关联参数",{"_index":1234,"title":{},"body":{"1015822":{}}}],["而你要想查询三部分每个对应着什么内容就要去查看tabl",{"_index":12064,"title":{},"body":{"1015817":{}}}],["而前辈们早就发现了这种情况，因此unicode编码就是为了解决这个问题才出现的",{"_index":1697,"title":{},"body":{"1015843":{}}}],["而后如果是空闲状态则调用onidle函数",{"_index":576,"title":{},"body":{"1015822":{}}}],["而后就可以直接在代码中使用该变量即可用setwindowtext函数来修改编辑框内容",{"_index":1043,"title":{},"body":{"1015822":{}}}],["而后我们可以通过函数去设置这些值，那有人就会问了，你这样不还是可以输入",{"_index":3536,"title":{},"body":{"1015840":{}}}],["而后继续跟进代码是afxinitthread函数，该函数就是增加消息队列，初始化线程特别数据（为主线程作了一些初始化工作",{"_index":566,"title":{},"body":{"1015822":{}}}],["而后调用了构造函数：cal",{"_index":3457,"title":{},"body":{"1015840":{}}}],["而在这里创建对象编译器使用的age成员默认就是当前类teacher的成员；想要使用父类中的成员可以使用这种方式（对象名.父类名称::成员名称",{"_index":3399,"title":{},"body":{"1015840":{}}}],["而在这里我们想要确认b有没有继承a的私有成员，有2个方法",{"_index":3439,"title":{},"body":{"1015840":{}}}],["而在这里我们找到了一个零化物理页，想要找到第二个该怎么办？其实很简单，我们再回到_mmpfn结构体上，它的成员u1可以表示为flink，u2可以表示为bl",{"_index":6998,"title":{},"body":{"2949228":{}}}],["而如果不按照这种标准呢来，那么假如要统计所有的数据就会非常麻烦，不便于管理",{"_index":3663,"title":{},"body":{"1015840":{}}}],["而如果我们想要区分的话就需要借助dwcreationflags这个参数，将其修改为create_new_console即可",{"_index":7362,"title":{},"body":{"1015833":{}}}],["而如果我们的子网掩码为255.255.255.192，转为二进制就是11111111.11111111.11111111.11000000，可以看见其在我们的原先的后8位主机位中占用了2位作为网络位，现在有26个1，那么根据二进制非0即1，其表现方式就有11000000、10000000、00000000、01000000，也就是说我们将原有的192.168.8.0这个网络分成了四份，即4个子网，也可以理解为这里就是2的2（后8位主机位中占用了2位）次方，现在我们将它们转换成10进制就分别是0、64、128、192，那么这4段网络的范围如下所示",{"_index":9687,"title":{},"body":{"1015818":{}}}],["而如果是以挂起的方式创建进程，那么进程的创建过程就会发生变化",{"_index":7364,"title":{},"body":{"1015833":{}}}],["而如果没有调试器，正常打开该程序时，由于没有被调试，最后一道防线会查询当前是否有通过setunhandledexceptionfilter函数去注册异常处理函数，如果有就调用，没有的话windows就会弹出窗口让用户选择终止程序还是启动即时调试器",{"_index":4789,"title":{},"body":{"3440657":{}}}],["而当你看见imm",{"_index":12030,"title":{},"body":{"1015817":{}}}],["而当我们不需要使用这个数据的时候，就要释放，同样我们使用汇编指令就可以完成",{"_index":5334,"title":{},"body":{"1015825":{}}}],["而我们之前构建的调用门描述符中的选择子是指向0环的代码段，在windows里所有数据、代码段的base都为0，所以我们真正跳转的位置就是偏移位指向的内容。因此，我们要运行如上这段代码的话一定是报错的，因为我们给的偏移位置是0，我们预期效果是想要长跳转到getregister函数，所以我们可以下断点先将该函数的地址获取下来",{"_index":9222,"title":{},"body":{"1015831":{}}}],["而我们会发现我们的共享文件在vad树中并没有“exe”的字符串标识，这是因为我们的文件并不是用来执行的，如果是用来执行的文件则会有该字符串标识，例如我们使用loadlibrary来加载文件在vad树中就会有所体现，并且在这里内存属性为可执行、写拷贝",{"_index":6862,"title":{},"body":{"2949228":{}}}],["而我们想定位这个结构的话，按照网络协议的层级应该先从mac帧说起",{"_index":10266,"title":{},"body":{"1015818":{}}}],["而我们想要外部可以调用可以将private修改成publ",{"_index":3435,"title":{},"body":{"1015840":{}}}],["而我们想要跟进call指令需要使用f11跟进，就如同学习汇编时「使用dtdebugu",{"_index":1435,"title":{},"body":{"1015843":{}}}],["而我们每个都跟进去看，会发现最开始都在填充对应的调试事件结构体，最终调用_dbgkpsendapimessage函数",{"_index":4608,"title":{},"body":{"3440657":{}}}],["而解决这一缺陷的手段就是将c++对象改为com对象",{"_index":2632,"title":{},"body":{"1015823":{}}}],["而跟进call指令之后，我们的堆栈也会发生变化，call指令下一行执行的地址会压入堆栈，栈顶也随之提升，需要注意的是在vc6中f11跟进会先过渡到一个jmp指令，然后再通过其跳到真正的函数执行地址",{"_index":1437,"title":{},"body":{"1015843":{}}}],["而这一块内存就是iat中存储的函数地址",{"_index":6594,"title":{},"body":{"1015828":{}}}],["而这个虚拟内存实际上存放在c盘下的pagefile.sys，其对应的大小就是上图中的初始化的大小，内存交换到硬盘上的数据就会存在这个文件中",{"_index":7023,"title":{},"body":{"2949228":{}}}],["而这个，我们可以使用原sizeofimage的值获得，因为原sizeofimage的值表示pe文件在内存中展开的大小，我们单独添加的空间就在pe文件的末尾，所以可以根据sizeofimage来知道在添加空间中的指令地址；例如如下图所示众标红部分在内存中的地址范围应为imagebase加原sizeofimage与指令的宽度，最终的地址范围就是：0x10130",{"_index":6388,"title":{},"body":{"1015828":{}}}],["而这时候我们可以通过createprocess函数修改工作路径，让其读取我们指定工作目录的文件",{"_index":7381,"title":{},"body":{"1015833":{}}}],["而这种写法就是c++的概念：封装；也就是说将函数写在结构体内的形式就称之为封装，其带来的好处就是我们可以更加方便的使用结构体的成员",{"_index":3312,"title":{},"body":{"1015840":{}}}],["而这里是可以执行成功的，这是因为一致代码段描述符的权限校验是允许低权限程序访问高权限数据的，也就是cpl>=dpl",{"_index":9148,"title":{},"body":{"1015831":{}}}],["而这里面的onwndmsg同样也是一个虚函数，我们是可以改写的",{"_index":522,"title":{},"body":{"1015822":{}}}],["聊到堆栈，我们又不得不提一下之前所学到的通用寄存器：esp、ebp，其分别表示栈顶指针（表示当前正在使用的堆栈地址）、栈底指针（表示当前使用的堆栈的第一个地址），当前使用的堆栈地址范围就可以是esp",{"_index":5327,"title":{},"body":{"1015825":{}}}],["聽",{"_index":101,"title":{},"body":{"1015814":{},"1015818":{},"1015820":{},"1015822":{},"1015823":{},"1015825":{},"1015828":{},"1015831":{},"1015833":{},"1015840":{},"1015843":{},"1015847":{},"1015850":{},"1703937":{},"1933378":{},"1933380":{},"2424869":{},"2424889":{},"2949166":{},"2949228":{},"3440655":{},"3440657":{}}}],["聽connect(u",{"_index":4221,"title":{},"body":{"1015820":{}}}],["聽for_each(v.begi",{"_index":11680,"title":{},"body":{"1015814":{}}}],["聽un",{"_index":2811,"title":{},"body":{"1015823":{}}}],["聽鍑芥暟鎰忎箟锛氬湪瀹瑰櫒杩唬鍣ㄦ寚鍚戝厓绱犱箣鍓嶅鍔犱竴涓厓绱",{"_index":11355,"title":{},"body":{"1015814":{}}}],["聽鍑芥暟鎰忎箟锛氬湪瀹瑰櫒杩唬鍣ㄦ寚鍚戝厓绱犱箣鍓嶅鍔犳寚瀹氫釜鏁扮殑鐩稿悓鐨勫厓绱",{"_index":11358,"title":{},"body":{"1015814":{}}}],["聽鍑芥暟鎰忎箟锛氬湪瀹瑰櫒杩唬鍣ㄦ寚鍚戝厓绱犱箣鍓嶆彃鍏ユ寚瀹氭暟缁勬寚瀹氬尯闂村唴鐨勫厓绱",{"_index":11362,"title":{},"body":{"1015814":{}}}],["能产生消息的情况有四种情况：1",{"_index":7796,"title":{},"body":{"1015833":{}}}],["能这样实现是因为编译器扩展了seh结构体，从原先只有2个成员的结构体变成了5个成员",{"_index":4430,"title":{},"body":{"2949166":{}}}],["脚本语言使用组件",{"_index":3199,"title":{},"body":{"1015823":{}}}],["自减",{"_index":1737,"title":{},"body":{"1015843":{}}}],["自减同理可得，那么我们知道了自增、自减就可以知道指针类型的加减运算规律",{"_index":2087,"title":{},"body":{"1015843":{}}}],["自加",{"_index":1736,"title":{},"body":{"1015843":{}}}],["自动化",{"_index":3177,"title":{},"body":{"1015823":{}}}],["自定义标记(29位)反映结果是否为自定义标识，1",{"_index":2844,"title":{},"body":{"1015823":{}}}],["自旋锁",{"_index":6664,"title":{},"body":{"1933380":{}}}],["自身清理堆栈",{"_index":2299,"title":{},"body":{"1015843":{}}}],["至于为什么这样存储，还需要去回顾一下「原码、反码、补码」的相关知识",{"_index":1544,"title":{},"body":{"1015843":{}}}],["至此我们也就验证了此处的权限检查逻辑",{"_index":9143,"title":{},"body":{"1015831":{}}}],["至此整个步骤了解之后就会产生的一些疑问",{"_index":3095,"title":{},"body":{"1015823":{}}}],["至此，在互斥体中仍有一个成员我们不了解（即apcdisable），有这个成员的存在是因为互斥体分为两种，即用户、内核下使用的互斥体，它们的区别如下",{"_index":10757,"title":{},"body":{"2424889":{}}}],["至此，我们就了解了保存现场的过程",{"_index":2540,"title":{},"body":{"1015846":{}}}],["至此，我们就了解了函数嵌套调用的内存布局，但实际上我们在之前就已经了解过了，因为main本身也是一个函数，main调用了plus也属于函数嵌套调用，只不过我们画堆栈图是在调用plus之前画的，所以忽略了这一点",{"_index":1514,"title":{},"body":{"1015843":{}}}],["至此，我们就分析完run函数了，其与win32的消息循环本质没有区别，唯一的区别就是其多了一个空闲状态",{"_index":582,"title":{},"body":{"1015822":{}}}],["至此，我们就完成了在空白区添加代码并执行的任务了，最后需要注意的是我们这里所插入的代码只能在本机去运行，不能在其他机器上使用，因为这不是一个标准的shellcode（后续章节会了解shellç",{"_index":6367,"title":{},"body":{"1015828":{}}}],["至此，我们就知道了cpu是如何将段描述符的对应属性取出来放入段寄存器的结构中，也解释了64位变成80位的逻辑",{"_index":9030,"title":{},"body":{"1015831":{}}}],["至此，我们就解析完所有的导出表成员了",{"_index":6520,"title":{},"body":{"1015828":{}}}],["至此，我们所有的配置工作就搞定了",{"_index":5460,"title":{},"body":{"1015847":{}}}],["至此，我们的工作还没有完成，还需要在插入的代码结束之后跳转回程序的入口，程序的入口地址可以根据扩展pe头的addressofentrypoint成员（加上imagebase）获得，如下图所示程序入口地址就是0x4010b0",{"_index":6359,"title":{},"body":{"1015828":{}}}],["节操作",{"_index":6368,"title":{},"body":{"1015828":{}}}],["节表、节数据",{"_index":6021,"title":{},"body":{"1015828":{}}}],["节表就是n个image_section_header结构体组成的，该结构体数据宽度是40字节",{"_index":6023,"title":{},"body":{"1015828":{}}}],["节表很重要，其决定节数据的相关属性，而节数据是我们真正存储数据的地方，其数量和节表是对应的",{"_index":6022,"title":{},"body":{"1015828":{}}}],["若以上条件均满足，则会执行kiunwaitthread函数，将当前线程从等待链表里取出，挂到就绪链表中，也就是把当前线程唤醒，才有机会执行apc函数；若条件不满足，那么apc函数就无法得到执行，当然还有一种情况，如果当前apc因条件不满足而没法执行，但是它已经位于apc队列中，如果下一个apc插入时，满足唤醒线程的条件，就有可能会出现两个apc依次执行的情况",{"_index":10894,"title":{},"body":{"2424869":{}}}],["获取传递过来的参数，先进行lock原子操作，然后bts指令会先判断[ecx]值是否为0，为0则将cf位设为1，为1则cf位设为0，接着将[ecx]中下标为0的位置值设1",{"_index":6673,"title":{},"body":{"1933380":{}}}],["获取到0x16d45867，低12位置0，地址为0x16d45000，再加上第三部分的值即可获取到物理地址，这里我们可以以字节的形式查看数据",{"_index":9412,"title":{},"body":{"1015831":{}}}],["获取卷的信息",{"_index":8033,"title":{},"body":{"1015833":{}}}],["获取卷（逻辑驱动器",{"_index":7986,"title":{},"body":{"1015833":{}}}],["获取卷（逻辑驱动器）的类型",{"_index":8008,"title":{},"body":{"1015833":{}}}],["获取变量a的线性地址为0x0012ff7c",{"_index":9427,"title":{},"body":{"1015831":{}}}],["获取启动信息：getstartupinf",{"_index":7386,"title":{},"body":{"1015833":{}}}],["获取命令行：getcommandl",{"_index":7385,"title":{},"body":{"1015833":{}}}],["获取当前进程id（pid）：getcurrentproç",{"_index":7383,"title":{},"body":{"1015833":{}}}],["获取当前进程句柄：getcurrentproç",{"_index":7384,"title":{},"body":{"1015833":{}}}],["获取所有逻辑驱动器的字符串",{"_index":7997,"title":{},"body":{"1015833":{}}}],["获取文件大小",{"_index":8129,"title":{},"body":{"1015833":{}}}],["获取文件的属性和信息",{"_index":8140,"title":{},"body":{"1015833":{}}}],["获取程序当前目录",{"_index":8091,"title":{},"body":{"1015833":{}}}],["获取线程的上下文环境，一旦获得了线程的上下文环境，就可以获取当前状态下各个寄存器的值",{"_index":4826,"title":{},"body":{"3440657":{}}}],["获取组件中提供几个类型库",{"_index":3182,"title":{},"body":{"1015823":{}}}],["获取适配器上的数据包",{"_index":10149,"title":{},"body":{"1015818":{}}}],["获得第二级页地址0x16d0e867，这个地址不是真正的地址，低12位为属性，需要将其填0变为0x16d0e000，接着再加上第二部分的值找到物理页地址",{"_index":9410,"title":{},"body":{"1015831":{}}}],["虚函数可以被直接调用，也可以被子类重写后以多态的形式调用，而纯虚函数必须在子类中实现该函数才可以使用",{"_index":3579,"title":{},"body":{"1015840":{}}}],["虚函数目的是提供一个统一的接口，被继承的子类重载，以多态的形式被调用",{"_index":3576,"title":{},"body":{"1015840":{}}}],["虚拟内存",{"_index":7021,"title":{},"body":{"2949228":{}}}],["虚拟内存与物理内存",{"_index":7887,"title":{},"body":{"1015833":{}}}],["虚拟内存与物理内存的关系",{"_index":7888,"title":{},"body":{"1015833":{}}}],["虚拟内存地址划分",{"_index":7893,"title":{},"body":{"1015833":{}}}],["虚构的假消息",{"_index":4768,"title":{},"body":{"3440657":{}}}],["虚表",{"_index":3580,"title":{},"body":{"1015840":{}}}],["虚表的结构：虚表中存储的都是函数地址，每个地址占用4个字节，有几个虚函数，则就有几个地址",{"_index":3598,"title":{},"body":{"1015840":{}}}],["虽然以上所述的两种类型结构体都称之为可等待对象，但两者之间也是有差异的。差异在等待函数调用过程中体现出来",{"_index":10555,"title":{},"body":{"2424889":{}}}],["虽然我们可以使用结构体进行传参，但是这也存在一个问题，就是当我们使用结构体传参时，假设结构体有40个成员，那么就存在着大量的内存被复制，这样效率很低，是不推荐使用的",{"_index":3303,"title":{},"body":{"1015840":{}}}],["虽然我们已经了解过tcp三次握手的流程，但是里面具体的细节，我们并不了解，了解这些细节也有便于我们去深入了解tcp协议以及解决今后细节性的问题",{"_index":9904,"title":{},"body":{"1015818":{}}}],["虽然有两个成员，但是一般情况下只使用vadflags成员，该成员也是一个结构体_mmvad_flagı",{"_index":6720,"title":{},"body":{"2949228":{}}}],["虽然模拟异常与cpu异常有一定的差异，但是在最后，两者都会去调用kidispatchexception函数，用于异常分发",{"_index":4265,"title":{},"body":{"2949166":{}}}],["虽然返回3环的方式不同，但只要是用户空间的异常，当线程再次回到3环时，执行的都是kiuserexceptiondispatcher。（kiuserexceptiondispatcher函数会在后续章节中了解",{"_index":4307,"title":{},"body":{"2949166":{}}}],["虽然这样我们就完成了改造，但是为了便于客户侧使用，不让客户去操心内存的管理，我们需要在代码中写好申请、释放，这就需要实现一个类工厂来进行内存的管理",{"_index":2594,"title":{},"body":{"1015823":{}}}],["虽然通过重载内核我们可以绕过内核上的hook，但改动太大，即使抹去pe指纹也无法完全隐形，最好的办法不是重载内核，而是需要什么函数自己来实现",{"_index":6686,"title":{},"body":{"1933380":{}}}],["补充的背景知识实际上是之前也了解过的存储数据的大、小端的存储模式，这里就不再过多赘述",{"_index":9893,"title":{},"body":{"1015818":{}}}],["补码：正数补码与原码相同，负数符号位为1，其余位对原码取反加1",{"_index":5109,"title":{},"body":{"1015825":{}}}],["表",{"_index":8752,"title":{},"body":{"1015850":{}}}],["表位置",{"_index":2548,"title":{},"body":{"1015846":{}}}],["表基址",{"_index":9451,"title":{},"body":{"1015831":{}}}],["表数据的增加更新和删除",{"_index":8841,"title":{},"body":{"1015850":{}}}],["表示cpu的编号：1、2、3、4",{"_index":11078,"title":{},"body":{"1703937":{}}}],["表示压入数据，其格式为",{"_index":5339,"title":{},"body":{"1015825":{}}}],["表示将al/ax/eax的值储存到edi指定的内存地址，其格式为",{"_index":5305,"title":{},"body":{"1015825":{}}}],["表示当前线程内核异常链表(seh",{"_index":11056,"title":{},"body":{"1703937":{}}}],["表示当前线程内核栈的基址和大小",{"_index":11058,"title":{},"body":{"1703937":{}}}],["表示循环，其格式为",{"_index":5312,"title":{},"body":{"1015825":{}}}],["表示数据传送，其格式为",{"_index":5249,"title":{},"body":{"1015825":{}}}],["表示数据传送，它与mov的不同处在于，它可以将内存的数据传送到内存，但也仅仅能如此，其格式为",{"_index":5287,"title":{},"body":{"1015825":{}}}],["表示数据相与（位运算知识），其格式为",{"_index":5274,"title":{},"body":{"1015825":{}}}],["表示数据相减，其格式为",{"_index":5271,"title":{},"body":{"1015825":{}}}],["表示数据相加，其格式为",{"_index":5263,"title":{},"body":{"1015825":{}}}],["表示数据相异或（位运算知识），其格式为",{"_index":5280,"title":{},"body":{"1015825":{}}}],["表示数据相或（位运算知识），其格式为",{"_index":5277,"title":{},"body":{"1015825":{}}}],["表示线程状态：准备就绪、等待、正在执行",{"_index":11028,"title":{},"body":{"1703937":{}}}],["表示跳转，其格式为",{"_index":5352,"title":{},"body":{"1015825":{}}}],["表示返回，其格式为",{"_index":5361,"title":{},"body":{"1015825":{}}}],["表示释放数据，其格式为",{"_index":5346,"title":{},"body":{"1015825":{}}}],["表示非（位运算知识），其格式为",{"_index":5283,"title":{},"body":{"1015825":{}}}],["表示页面发生了硬件错误，系统不再使用该页面。这种页面通常被标记为无效页，不再分配给任何进程或工作集",{"_index":6980,"title":{},"body":{"2949228":{}}}],["表示页面是空闲的，不属于任何工作集。物理页是周转使用的，页中的数据可能包含不确定的内容。当系统处于空闲状态时，有专门的线程从该链表中获取物理页，并将其清零后放入零化链表",{"_index":6967,"title":{},"body":{"2949228":{}}}],["表示页面是空闲的，不属于任何工作集。零化链表中的每个物理页的内容已经被全部清零，即所有数据被初始化为零",{"_index":6964,"title":{},"body":{"2949228":{}}}],["表达式结束不能是浮点数",{"_index":1800,"title":{},"body":{"1015843":{}}}],["表达的意思",{"_index":5516,"title":{},"body":{"1015847":{}}}],["表项结构",{"_index":8708,"title":{},"body":{"1933378":{}}}],["褰㈠弬鍚",{"_index":3635,"title":{},"body":{"1015840":{}}}],["褰撳墠apc鐨勬ā寮忥細鍐呮牳銆佺敤鎴",{"_index":10854,"title":{},"body":{"2424869":{}}}],["褰撳墠瀵煎嚭琛ㄦ枃浠跺悕瀛楃涓茬殑鍦板潃",{"_index":6470,"title":{},"body":{"1015828":{}}}],["褰撳墠绾跨",{"_index":10737,"title":{},"body":{"2424889":{}}}],["褰撳墠绾跨▼鍦板潃",{"_index":10573,"title":{},"body":{"2424889":{}}}],["褰撳墠绾跨▼鐢ㄥ埌鐨勫瘎瀛樺櫒鍏ユ爤",{"_index":11177,"title":{},"body":{"1703937":{}}}],["褰撳墠缁撴瀯浣撶殑澶у皬锛�0x30",{"_index":10830,"title":{},"body":{"2424869":{}}}],["褰撳墠鐜",{"_index":10878,"title":{},"body":{"2424869":{}}}],["褰撴寜閽负璁剧疆",{"_index":7874,"title":{},"body":{"1015833":{}}}],["褰撴寜閽负鑾峰彇",{"_index":7879,"title":{},"body":{"1015833":{}}}],["褰撴寜閽偣鍑诲垯澶勭悊",{"_index":7870,"title":{},"body":{"1015833":{}}}],["褰撴椂闂村ぇ浜�1绉掓椂锛岃绠楃綉閫",{"_index":10413,"title":{},"body":{"1015818":{}}}],["褰撶獥鍙ｅ叧闂垯閫�鍑鸿繘绋",{"_index":7811,"title":{},"body":{"1015833":{}}}],["褰撶獥鍙ｅ垱寤哄垯寮�濮嬪垱寤哄瓙绐楀彛鎺т欢",{"_index":7843,"title":{},"body":{"1015833":{}}}],["褰撹繘绋嬫墽琛孡oadlibrary鏃跺垱寤轰竴涓嚎绋嬶紝鎵цthreadproc绾跨",{"_index":8440,"title":{},"body":{"1015833":{}}}],["褰撻敭鐩樻寜涓嬪垯澶勭悊",{"_index":7819,"title":{},"body":{"1015833":{}}}],["要在计算机中存储数据，需要遵循其的存储模式，存储模式分为两种：大、小端",{"_index":5219,"title":{},"body":{"1015825":{}}}],["要想知道堆栈可以使用的地址范围，我们可以查看dtdebug的寄存器窗口，找到如下图红框部分",{"_index":5323,"title":{},"body":{"1015825":{}}}],["规定了进程里面的所有线程可以在哪个cpu上运行。如果该成员值为1则这个进程的所有线程只能在0号cpu上运行，也就表示我们可以将该成员值转为二进制数值，第n位为1即表示可以在n号cpu上运行所有线程，举一反三，如果该值为5，则第0、2位为1，也就表示可以在0、2号cpu上运行",{"_index":10956,"title":{},"body":{"1703937":{}}}],["解决问题",{"_index":7499,"title":{},"body":{"1015833":{}}}],["解析导出表成员",{"_index":6485,"title":{},"body":{"1015828":{}}}],["解释器只认识idispatch接口",{"_index":3200,"title":{},"body":{"1015823":{}}}],["触发软件断点的过程，实际上就是cpu异常分发的过程：cpu检测到异常（",{"_index":4799,"title":{},"body":{"3440657":{}}}],["计算机不会做加法",{"_index":5119,"title":{},"body":{"1015825":{}}}],["计算机只认识0和1，也就是二进制，任何一个可执行程序最终就是0和1组成，如果非要细分的化，可以分为两个部分：数据和指令，但是对于这两个部分没有明显的界限，如果你把某个地址给到cpu的eip寄存器，这时候这个地址就会当成指令去执行，但是指令是有自己的格式，如果你指向的地址没有按照指令的格式来，就会执行出错，换句话说，如果你指向的地址是一段数据，但是这个数据格式也是按照指令格式的，那么也就会去执行",{"_index":11782,"title":{},"body":{"1015817":{}}}],["计算机只认识0和1，它能做的运算归根结底也就是对0和1进行运算，例如2+3、2",{"_index":5120,"title":{},"body":{"1015825":{}}}],["计算机是由美国人发明的，所以一开始设计编码的时候只会考虑到自身的元素，采用ascii编码完全可以满足其需求，但是计算机普及之后，很多国家的文字是象形文字，所以我们使用ascii编码是无法满足需求的",{"_index":7064,"title":{},"body":{"1015833":{}}}],["计算机语言多种多样，com产生的目的之一就是要跨语言，而variant数据类型就具有了跨语言的特性，同时它可能存储任何的数据类型，说夸张一点，它是万能数据类型",{"_index":2944,"title":{},"body":{"1015823":{}}}],["计算机通过位运算实现加减乘除，而我们都知道所有算术都是通过加法演变的所有算术都是通过加法演变的，所以我们只需要明白计算机是如何通过加法计算的，其他就都明白了",{"_index":5129,"title":{},"body":{"1015825":{}}}],["认识物理内存",{"_index":6867,"title":{},"body":{"2949228":{}}}],["让线程停下来",{"_index":7417,"title":{},"body":{"1015833":{}}}],["让试图修改文件的进程中的映射指向这个新的物理页",{"_index":7056,"title":{},"body":{"2949228":{}}}],["记不住没关系，我们可以在msdn",{"_index":7303,"title":{},"body":{"1015833":{}}}],["记住堆栈在执行前后的变化，画堆栈图要记住两个寄存器，一个是栈顶（esp），一个是栈底（ebp",{"_index":1429,"title":{},"body":{"1015843":{}}}],["记录一下个人学习滴水逆向课程的笔记",{"_index":6618,"title":{},"body":{"1015827":{}}}],["记录信息，分别表示进程创建、退出的时间",{"_index":10968,"title":{},"body":{"1703937":{}}}],["讲到了封装，我们就要知道另外两个概念",{"_index":3313,"title":{},"body":{"1015840":{}}}],["设d为需要解密的密文数据，解密算法为：decrypt_messagı",{"_index":10449,"title":{},"body":{"1015818":{}}}],["设m为需要加密的明文数据，加密算法为：encrypt_messagı",{"_index":10447,"title":{},"body":{"1015818":{}}}],["设备对象",{"_index":5634,"title":{},"body":{"1015847":{}}}],["设备对象：画的位置",{"_index":7654,"title":{},"body":{"1015833":{}}}],["设备控制，比读取、写入操作更加灵活",{"_index":5700,"title":{},"body":{"1015847":{}}}],["设备空间下的坐标系",{"_index":696,"title":{},"body":{"1015822":{}}}],["设备空间下的坐标系分为三类：1",{"_index":697,"title":{},"body":{"1015822":{}}}],["设备空间（视口）：图形输出时，windows将gdi函数中指定的逻辑坐标映射为设备坐标",{"_index":657,"title":{},"body":{"1015822":{}}}],["设备符号链接",{"_index":5672,"title":{},"body":{"1015847":{}}}],["设备管理器",{"_index":9577,"title":{},"body":{"1015831":{}}}],["设置",{"_index":7020,"title":{},"body":{"1015833":{},"2949228":{}}}],["设置、获取线程上下文",{"_index":7465,"title":{},"body":{"1015833":{}}}],["设置二进制模式（仅用于派生类",{"_index":1287,"title":{},"body":{"1015822":{}}}],["设置程序当前目录",{"_index":8100,"title":{},"body":{"1015833":{}}}],["访问文件就像访问内存一样简单，想读就读，想怎么样就怎么样，不用那么繁杂",{"_index":8226,"title":{},"body":{"1015833":{}}}],["访问迭代器指向的元素使用如下方法",{"_index":11712,"title":{},"body":{"1015814":{}}}],["识别pe文件",{"_index":5983,"title":{},"body":{"1015828":{}}}],["该代码和以前我们写的工程是没有区别的，它的chellodialogapp::initinstance函数就是初始化一个对话框，同样我们可以根据mfc层次结构图看见其与cframewnd通用继承于cwnd，换而言之其实两者没有什么区别，无非就是表现出来的形式不一样罢了",{"_index":1029,"title":{},"body":{"1015822":{}}}],["该函数plus前面有一个int，这就表示plus函数返回类型为int类型，而int类型也是表示数据宽度，其为4个字节，除此之外还有short（2个字节）、char（1个字节",{"_index":1425,"title":{},"body":{"1015843":{}}}],["该函数在0环就是kereleasesemaphore，如下图所示，我们可以通过ida分析看见，该函数首先将原signalstate与lreleasecount的值相加，然后重新赋给signalstate，接着通过取线程结构体的方式，将其waitlistentry链表的flink、blink进行位置交换，从而实现从等待链表中摘除当前线程（使用的是我们之前apc章节中提到的kiunwaitthread函数",{"_index":10712,"title":{},"body":{"2424889":{}}}],["该函数就是一个模态对话框，该函数就实现了一个对话框的初始化、呼出对话框以及一个消息循环",{"_index":1051,"title":{},"body":{"1015822":{}}}],["该函数有两个参数，这里简要说明一下",{"_index":4615,"title":{},"body":{"3440657":{}}}],["该函数没有函数体，最后跟=0",{"_index":3655,"title":{},"body":{"1015840":{}}}],["该函数的作用就是为我们准备好物理内存（物理页），但是创建好了并不代表就可以使用了，我们还需要通过mapviewoffile函数将物理页与线性地址进行映射，mapviewoffile函数语法格式如下",{"_index":7959,"title":{},"body":{"1015833":{}}}],["该函数的作用就是检测出可读、可写的socket，它的返回值有这些",{"_index":10031,"title":{},"body":{"1015818":{}}}],["该函数的前面一部分代码和kisystemservice函数（系统调用api进0环）的代码一样，都是用来保存现场的",{"_index":4256,"title":{},"body":{"2949166":{}}}],["该函数的参数exceptioninfo为exception_pointers结构体的指针，该结构体及其成员如下所示",{"_index":4316,"title":{},"body":{"2949166":{}}}],["该函数第一个参数为lpcrect，所以我们rectangle函数也使用lpcrect，这样便于使用；第二个参数是一个cbrush类指针，也就是我们的画刷",{"_index":779,"title":{},"body":{"1015822":{}}}],["该函数返回值就是选中为1，没选中则为0，参数也就表示获取第几个复选框的选中状态",{"_index":1213,"title":{},"body":{"1015822":{}}}],["该属性和modecreate联合使用，可以达到如下效果：如果文件存在，则不会将文件的长度置为0，如果不存在，则会由modecreate属性来创建一个新文件",{"_index":1265,"title":{},"body":{"1015822":{}}}],["该循环语句又一个特点就是，即使表达式为0（不成立），也会执行依次循环体内的语句，举例说明",{"_index":1872,"title":{},"body":{"1015843":{}}}],["该成员存储的信息也分为两种场景，分别是正常场景和挂靠场景",{"_index":10812,"title":{},"body":{"2424869":{}}}],["该成员用来表示dos头、pe头与节表加起来按照文件对齐以后的大小。这个真正的大小实际上取决于另外一个成员filealignment，sizeofheaders存储的数值一定是filealignment的整数倍，默认情况下该成员的值为0x20",{"_index":6026,"title":{},"body":{"1015828":{}}}],["该模块开头两个字节是4d",{"_index":8588,"title":{},"body":{"1015833":{}}}],["该目录下有几个重要的dl",{"_index":2409,"title":{},"body":{"1015846":{}}}],["该结构体中每个成员的含义如下",{"_index":6699,"title":{},"body":{"2949228":{}}}],["该结构体几个重要的成员如下",{"_index":11054,"title":{},"body":{"1703937":{}}}],["该表十进制值从128到255，但是这些也没办法满足我们中文的需求，所以天朝专家把那些127号后的奇异符号们",{"_index":1691,"title":{},"body":{"1015843":{}}}],["该门描述符的高32位的第8位为0，也就表示该描述符为",{"_index":2474,"title":{},"body":{"1015846":{}}}],["语句",{"_index":1870,"title":{},"body":{"1015843":{}}}],["语句的语法格式",{"_index":1847,"title":{},"body":{"1015843":{}}}],["语法不过多的阐述，之前也有写过；接下来我们要了解一个新的概念：抽象类",{"_index":3656,"title":{},"body":{"1015840":{}}}],["语法格式",{"_index":6822,"title":{},"body":{"2949228":{}}}],["说完代码/数据段之后，我们来看下当s位的值为0时候，则表示当前是系统段描述符，系统段分为以下内容",{"_index":9046,"title":{},"body":{"1015831":{}}}],["说明",{"_index":11207,"title":{},"body":{"1703937":{}}}],["读/写/拷贝/删除文件",{"_index":8158,"title":{},"body":{"1015833":{}}}],["读写",{"_index":8917,"title":{},"body":{"1015831":{}}}],["读取代码",{"_index":8272,"title":{},"body":{"1015833":{}}}],["读取第一年五月份的数据，修改第二年三月份的数据，可以这样来操作",{"_index":1967,"title":{},"body":{"1015843":{}}}],["课后作业",{"_index":161,"title":{},"body":{"1015822":{}}}],["课外",{"_index":3416,"title":{},"body":{"1015840":{}}}],["课外扩展",{"_index":7261,"title":{},"body":{"1015833":{}}}],["课外：缓冲区溢出",{"_index":1936,"title":{},"body":{"1015843":{}}}],["课程概要",{"_index":1333,"title":{},"body":{"1015825":{},"1015843":{}}}],["谁来调用cofreealllibraries函数？是由客户来调用，一般在程序空闲的时候调用",{"_index":2904,"title":{},"body":{"1015823":{}}}],["调度链表",{"_index":11095,"title":{},"body":{"1703937":{}}}],["调度链表有32个，也就有32个表头，我们可以通过全局变量kidispatcherreadylisthead找到。在这32个链表中，每个链表链入的线程的优先级是不一样的",{"_index":11096,"title":{},"body":{"1703937":{}}}],["调式驱动程序不像应用程序一样简单（直接在od之类的调试工具中下断点），要想调试驱动程序就需要使用双机调试，在虚拟机中运行驱动程序，在实体机上使用0环调试器（也就是windbg）进行调试",{"_index":5484,"title":{},"body":{"1015847":{}}}],["调用api进0环",{"_index":11240,"title":{},"body":{"1703937":{}}}],["调用commondispatchexception函数",{"_index":4868,"title":{},"body":{"3440657":{}}}],["调用edx地址对应的值，也就是子类对象的print函数",{"_index":3590,"title":{},"body":{"1015840":{}}}],["调用kidispatchexception函数",{"_index":4869,"title":{},"body":{"3440657":{}}}],["调用myprint函数，传入1，即可打印0",{"_index":1838,"title":{},"body":{"1015843":{}}}],["调用obreferenceobjectbyhandle函数，通过对象句柄找到等待对象结构体地址",{"_index":10603,"title":{},"body":{"2424889":{}}}],["调用也很简单，使用格式：命名空间名称::函数\\变量\\类",{"_index":3728,"title":{},"body":{"1015840":{}}}],["调用函数运行之后成功输出，并获取到对应内容",{"_index":8254,"title":{},"body":{"1015833":{}}}],["调用成员函数cdc::setmapmod来修改映射模式，我们正常的映射模式是一个像素点，也就是mm_text，其x轴向右，y轴向下，如下图表有很多种映射模式",{"_index":630,"title":{},"body":{"1015822":{}}}],["调用成员函数的方法与调用结构体成员的语法是一样的",{"_index":3317,"title":{},"body":{"1015840":{}}}],["调用文件",{"_index":2621,"title":{},"body":{"1015823":{}}}],["调用约定",{"_index":2291,"title":{},"body":{"1015843":{}}}],["调用者清理栈",{"_index":2298,"title":{},"body":{"1015843":{}}}],["调用者通过该函数取得他想要的类型库",{"_index":3184,"title":{},"body":{"1015823":{}}}],["调用过程分析",{"_index":2471,"title":{},"body":{"1015846":{}}}],["调用门",{"_index":9191,"title":{},"body":{"1015831":{}}}],["调用门使用",{"_index":9210,"title":{},"body":{"1015831":{}}}],["调用门描述符中的偏移地址",{"_index":9196,"title":{},"body":{"1015831":{}}}],["调用门描述符的结构如下图所示，我们可以看到它跟段描述符的结构有一些差别，当s位为0则表示这是一个系统段描述符，并且当type域为1100时则确定这是一个调用门描述符",{"_index":9197,"title":{},"body":{"1015831":{}}}],["调试事件",{"_index":4566,"title":{},"body":{"3440657":{}}}],["调试事件的处理",{"_index":4621,"title":{},"body":{"3440657":{}}}],["调试事件的采集",{"_index":4565,"title":{},"body":{"3440657":{}}}],["调试事件结构",{"_index":4671,"title":{},"body":{"3440657":{}}}],["调试事件采集之后就需要对不同的事件进行处理，接下来我们通过程序模拟两种建立调试关系的方式（即创建进程、附加进程），分析调试事件的处理过程和不同调试事件的结构细节",{"_index":4622,"title":{},"body":{"3440657":{}}}],["调试信息输出",{"_index":7717,"title":{},"body":{"1015833":{}}}],["调试器下的异常分发",{"_index":4777,"title":{},"body":{"3440657":{}}}],["调试器与被调试程序",{"_index":4524,"title":{},"body":{"3440657":{}}}],["调试器与被调试程序在用户层都是独立的进程，我们要想将两者之间相互关联，就需要通过一个媒介，即进程空间的高2g，也就是我们常说的内核层，每个进程的高2g都是共享的，因此调试器可以通过它来与被调试器进行通信",{"_index":4525,"title":{},"body":{"3440657":{}}}],["调试器与被调试进程之间通过_debug_object（调试对象）来建立起联系，调试器通过调试对象的eventlist成员来指导被调试进程到底发生了什么事情，该成员是一个链表，其中存储的是从被调试进程发送过来的各种类型的调试事件",{"_index":4567,"title":{},"body":{"3440657":{}}}],["调试器之所以能够观察到被调试进程加载的dll模块，主要是因为在每个模块加载时，调试事件采集函数会先采集这些事件，并将其发送给调试器",{"_index":4772,"title":{},"body":{"3440657":{}}}],["调试对抗",{"_index":4554,"title":{},"body":{"3440657":{}}}],["调试对象",{"_index":4523,"title":{},"body":{"3440657":{}}}],["调试环境",{"_index":5483,"title":{},"body":{"1015847":{}}}],["调试驱动程序",{"_index":5482,"title":{},"body":{"1015847":{}}}],["质数：是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数",{"_index":10428,"title":{},"body":{"1015818":{}}}],["资源操作",{"_index":1288,"title":{},"body":{"1015822":{}}}],["资源脚本",{"_index":1033,"title":{},"body":{"1015822":{}}}],["资源，找到windows时钟的中断编号（其他设备也是一样的",{"_index":9578,"title":{},"body":{"1015831":{}}}],["赋值",{"_index":1776,"title":{},"body":{"1015843":{}}}],["赋值运算符",{"_index":1775,"title":{},"body":{"1015843":{}}}],["起始地址",{"_index":9644,"title":{},"body":{"1015818":{}}}],["跟static不同的是，我们想要使用const关键词的成员时应创建对象后根据对象名来使用",{"_index":217,"title":{},"body":{"1015822":{}}}],["跟到函数afxcallwndproc，在如下图所示的位置下断点",{"_index":515,"title":{},"body":{"1015822":{}}}],["跟着跟着你就发现跟到了afxwndproc这个函数",{"_index":512,"title":{},"body":{"1015822":{}}}],["跟进call指令不能使用f8要是用f7",{"_index":1436,"title":{},"body":{"1015843":{}}}],["跟进commondispatchexception函数，我们可以看见它开辟了一块大小为0x50的空间，用于存放_exception_record结构体，并且给结构体的每个成员赋值，最终执行kidispatchexception函数，该函数通常用来分发异常，目的是找到异常的处理函数",{"_index":4258,"title":{},"body":{"2949166":{}}}],["跟进createex函数，其一开始对一些信息进行了填充，这个信息传递给了precreatewindow函数",{"_index":461,"title":{},"body":{"1015822":{}}}],["跟进delete关键词，会发现其会先调用析构函数函数然后再去调用op",{"_index":3468,"title":{},"body":{"1015840":{}}}],["跟进hal模块（hal.dll文件在c:/windows/system32目录下）在halendsysteminterrupt函数内，我们可以看到它又调用了kidispatchinterrupt函数",{"_index":11214,"title":{},"body":{"1703937":{}}}],["跟进rtldispatchexception函数（该函数是一个库函数，内核和用户异常都会使用它来进行分发，在本章简单了解一下，后续用户异常分发和处理我们详细进行分析），我们会发现其调用了rtlpgetregistrationhead函数，它的作用就是获取fs:[0",{"_index":4288,"title":{},"body":{"2949166":{}}}],["跟进反汇编代码发现，这里就是将传入的参数赋值给了参数本身，并没有改变成员的值，这是因为编译器根本不知道你这里的a到底是谁，所以我们就需要借助this指针来实现",{"_index":3332,"title":{},"body":{"1015840":{}}}],["跟进地址0x0001cfb0，找到int，我们可以看见这里有很多个成员",{"_index":6583,"title":{},"body":{"1015828":{}}}],["跟进该函数，会发现它也是调用了另外一个函数raiseexception，并通过栈的方式压入了几个传参",{"_index":4262,"title":{},"body":{"2949166":{}}}],["跟进跳转我们就能看见将空闲线程的值就赋值给了eax，然后跳回之前的位置",{"_index":11266,"title":{},"body":{"1703937":{}}}],["跟进跳转的片段代码，我们可以看见它一开始就做了一件事情，即判断当前线程是否为第一个线程，以此来判断生成的调试事件是创建进程还是创建线程",{"_index":4602,"title":{},"body":{"3440657":{}}}],["跟进跳转的片段代码，这里判断了当前退出的线程是不是最后一个，也就表示判断是否是退出的进程，如果是则调用函数_dbgkexitprocess，反之如果不是则表示当前退出的是线程，则调用函数_dbgkexitthread。这里是根据退出事件选择对应的采集函数",{"_index":4607,"title":{},"body":{"3440657":{}}}],["跨段并提权的长调用指令，表示当前执行长调用指令时cpl为3，我们要去调用的段cpl为0，所以这就会产生一个提权操作，提权会",{"_index":9178,"title":{},"body":{"1015831":{}}}],["跨段调用时，一旦有权限切换，就会切换栈",{"_index":9185,"title":{},"body":{"1015831":{}}}],["跨进程读写",{"_index":11300,"title":{},"body":{"1703937":{}}}],["跳回可以使用jmp指令：e9",{"_index":6360,"title":{},"body":{"1015828":{}}}],["跳转到当前指令地址",{"_index":11977,"title":{},"body":{"1015817":{}}}],["跳转过来之后，会进行两个判断，第一个判断是kideliverapc函数的第一个参数是否为1，为1则表示要处理用户apc，就不会跳转继续向下走；第二个判断是userapcpending是否为0，不为0则表示当前有等待执行的用户apc，就不会跳转继续向下走；将userapcpending设为0，然后接下来的操作就跟内核apc执行过程差不多了，取kapc结构体首地址，将几个成员压入栈内便于后续使用，再从链表中将当前apc摘除，接着调用kernelroutine来释放当前apc所占用的内存空间；在这之后就与内核apc执行过程不一样了，先判断normalroutine是否为0，不为0则表示用户apc的总入口是存在的，然后将systemargument2、systemargument1、normalcontext、normalroutine分别压入栈内压入栈内，用于后续的kiinitializeuserapc函数的执行",{"_index":10922,"title":{},"body":{"2424869":{}}}],["蹇呴』瑕佸寘鍚殑澶存枃浠",{"_index":5467,"title":{},"body":{"1015847":{}}}],["蹇呴』瑕佽皟鐢ㄤ竴涓粯璁ょ殑娑堟伅澶勭悊鍑芥暟锛屽叧闂�佹渶灏忓寲銆佹渶澶у寲閮芥槸鐢遍粯璁ゆ秷鎭鐞嗗嚱鏁板鐞嗙殑",{"_index":7733,"title":{},"body":{"1015833":{}}}],["蹇呴』鍦ㄥ綋鍓嶇嚎绋嬫爤涓",{"_index":4402,"title":{},"body":{"2949166":{}}}],["转为二进制：000",{"_index":5131,"title":{},"body":{"1015825":{}}}],["转换完宏之后在调用createobject函数时下断点跟进",{"_index":349,"title":{},"body":{"1015822":{}}}],["转换宏了解本质",{"_index":256,"title":{},"body":{"1015822":{}}}],["转换消息",{"_index":7822,"title":{},"body":{"1015833":{}}}],["软件断点",{"_index":4793,"title":{},"body":{"3440657":{}}}],["软件断点修改的是指令，内存断点修改的是物理页的属性。例如当某一地址，下了内存断点，当该地址被读取、写入时都会断下来。调试器进程通过调用virtualprotectex函数来跨进程对被调试进程物理页属性进行修改",{"_index":4851,"title":{},"body":{"3440657":{}}}],["软件断点就是我们所熟悉的in",{"_index":4794,"title":{},"body":{"3440657":{}}}],["软件模拟的异常记录",{"_index":4260,"title":{},"body":{"2949166":{}}}],["软件调试",{"_index":4518,"title":{"3440657":{}},"body":{"1015827":{},"1015832":{}}}],["软件调试实际上涉及的内容并不多。如果你想开发一个调试器，掌握十几个api的使用就足够了。然而，如果你希望在调试与反调试的对抗中保持主动地位，对细节的了解就变得尤为重要",{"_index":4519,"title":{},"body":{"3440657":{}}}],["软件调试的学习主要涉及到的文件有kernel32.dll、ntdll.dll和ntoskrnl.exe。对于一些未公开的信息，我们可以通过reactos（https://master.dl.sourceforge.net/project/reactos/reactos/0.3.15/reaç",{"_index":4520,"title":{},"body":{"3440657":{}}}],["软件随着更迭会越来越复杂，包含的功能会很多，一个大型软件参与开发的人会非常多，因为不可能一个把所有事情干了，这样就会把软件分为多个模块，每个模块有对应的人去写，静态链接库就是软件模块化的一种解决方案",{"_index":8285,"title":{},"body":{"1015833":{}}}],["辅助概念",{"_index":10427,"title":{},"body":{"1015818":{}}}],["辅助进位标志位：【af】—一个字节运算的时候低4位向高4位的进位和错位",{"_index":5414,"title":{},"body":{"1015825":{}}}],["输入之后回车成功，程序输出的寄存器值就是我们tss中赋予的，则实验成功",{"_index":9359,"title":{},"body":{"1015831":{}}}],["输入迭代器：访问（*p）、赋值（p=p1）、判断（p==p1",{"_index":11730,"title":{},"body":{"1015814":{}}}],["输入：inpu",{"_index":11716,"title":{},"body":{"1015814":{}}}],["输出迭代器：访问（*p）、赋值（p=p1",{"_index":11732,"title":{},"body":{"1015814":{}}}],["输出：outpu",{"_index":11719,"title":{},"body":{"1015814":{}}}],["过渡状态，被按下为0，释放为1",{"_index":1012,"title":{},"body":{"1015822":{}}}],["过程可以借助rsa",{"_index":10451,"title":{},"body":{"1015818":{}}}],["运算符与表达式",{"_index":1701,"title":{},"body":{"1015843":{}}}],["运算符重载",{"_index":3600,"title":{},"body":{"1015840":{}}}],["运行一下来看看效果",{"_index":1741,"title":{},"body":{"1015843":{}}}],["运行如上代码，会在c盘创建一个abc.txt然后写入mappedmemorya，接着将该文件的句柄映射到vad树中实现共享",{"_index":6857,"title":{},"body":{"2949228":{}}}],["运行如上代码，我们可以成功读取共享文件的内容",{"_index":6859,"title":{},"body":{"2949228":{}}}],["运行程序之后，在windbg中断一下，然后通过如下图中的指令找到当前进程中正在等待的线程地址",{"_index":10565,"title":{},"body":{"2424889":{}}}],["运行程序，在第一个getchar停留，看一下vad树，接着继续执行",{"_index":6778,"title":{},"body":{"2949228":{}}}],["运行结果如下",{"_index":7884,"title":{},"body":{"1015833":{}}}],["运行结果如下图",{"_index":7641,"title":{},"body":{"1015833":{}}}],["运行结果如下图所示",{"_index":7623,"title":{},"body":{"1015833":{}}}],["运行该代码就会在debug输出框中发现打印的字符串，这就是一个内存地址",{"_index":7728,"title":{},"body":{"1015833":{}}}],["运行：f5",{"_index":1414,"title":{},"body":{"1015843":{}}}],["返回值",{"_index":2861,"title":{},"body":{"1015823":{},"1015847":{}}}],["返回值在汇编中一般使用eax存储，我们可以使用ecx、edx作为传递参数，接下来我们编写加法函数",{"_index":5370,"title":{},"body":{"1015825":{}}}],["返回映射对象句柄，语法格式",{"_index":6791,"title":{},"body":{"2949228":{}}}],["返回类型",{"_index":3704,"title":{},"body":{"1015840":{}}}],["还是以加法举例，实际场景",{"_index":5376,"title":{},"body":{"1015825":{}}}],["还是老样子直接在vc6中拖拽创建控件",{"_index":1319,"title":{},"body":{"1015822":{}}}],["还是跟之前的步骤一样，找到正在等待的线程地址，然后找到等待块进行查看，我们会发现这时候就有两个等待块了",{"_index":10591,"title":{},"body":{"2424889":{}}}],["这一套运作流程是通过qobject::connect方法进行动态链接的，同样你也可以通过qobject::disconnect方法进行动态卸载",{"_index":4143,"title":{},"body":{"1015820":{}}}],["这三个包就是我们所说的三次握手对应的包",{"_index":9911,"title":{},"body":{"1015818":{}}}],["这两个成员刚好与我们假设的值是一样的，所以这里dos头、pe头与节表加起来按照文件对齐以后的大小就是400，但这样确实比实际大小要多出一些空间，这些空间默认会用0x00填充，但也有可能这些空间会被编译器插入一些信息，接着在400地址之后的就是节数据了",{"_index":6028,"title":{},"body":{"1015828":{}}}],["这两个模版类都继承自ccomptrbase，不同之处在于ccomqiptr能在必要的时候自动的对所需接口进行查询（如：对与此智能指针参数化类型不同的指针赋值时，会自动查询是否有所需的接口",{"_index":3244,"title":{},"body":{"1015823":{}}}],["这两个章节在”多核同步“篇已经学习过了，需要了解的可以自行查看对应章节",{"_index":10540,"title":{},"body":{"2424889":{}}}],["这两种方法其实在建立进程间联系的方式是一样的，唯一不同的是createprocess函数多了一个步骤，即创建进程，因此我们只需要来分析debugactiveprocess函数就能知道建立联系的方法",{"_index":4527,"title":{},"body":{"3440657":{}}}],["这两种状态的地址相互转换，我们可以称之为rva与foa的转换，rva就是相对虚拟地址，foa就是文件偏移地址；从rva转换到foa，就是从文件运行时（动态）的地址转换成在磁盘上（静态）的地址，按如下公式可以进行转换",{"_index":6332,"title":{},"body":{"1015828":{}}}],["这个代码可能看起来非常可怕，好像我们都没有接触过，但实际上其不是什么新的类型，所谓的新的类型无非就是给原有的类型重新起了一个名字，这样做是为了将所有类型统一化，便于读写，如果涉及到跨平台的话将原来的类型修改一下就好了，无需对代码进行重写",{"_index":7158,"title":{},"body":{"1015833":{}}}],["这个值则用于增加节的空间，找到该节的末尾，也就是pointertorawdata的值加上原sizeofrawdata的值",{"_index":6438,"title":{},"body":{"1015828":{}}}],["这个函数很复杂，我们只需要找关键的部分，也就是切换cr3的那一步，追踪它的调用关系，最终在_kiswapprocess函数找到了关键部分，调用链如下",{"_index":11290,"title":{},"body":{"1703937":{}}}],["这个函数，我们就称之为构造函数",{"_index":3347,"title":{},"body":{"1015840":{}}}],["这个地址我选择为0xfe0，先填充8字节的6",{"_index":6354,"title":{},"body":{"1015828":{}}}],["这个地址是rva，它实际上表示的是相对虚拟地址，我们需要将其转为foa，也就在文件中的偏移地址，由于在当前pe文件中文件对齐和内存对齐是一样的，即rva等于foa，所以我们也不需要进行转换",{"_index":6462,"title":{},"body":{"1015828":{}}}],["这个子页面是可以随意移动并且没有填满我们的标签页，所以我们可以先根据getclientrect函数获取当前客户区的坐标然后将该页面移动过去",{"_index":1328,"title":{},"body":{"1015822":{}}}],["这个存储的地址就是0x00401037，这时候切到反汇编代码就然后ctrl+g输入跟进这个地址",{"_index":3596,"title":{},"body":{"1015840":{}}}],["这个对应关系表需要熟练掌握，做到看见二进制可以直接转为十六进制，反之亦然",{"_index":5077,"title":{},"body":{"1015825":{}}}],["这个就很好理解了就是调用createobject函数会判断m_pfncreateobject（这是一个函数指针存放当前的createobject函数的地址），如果不为空则调用这个函数将其返回值给到pobject，最后再返回pobject也就是new",{"_index":350,"title":{},"body":{"1015822":{}}}],["这个成员的宽度就是16个image_data_directory结构体的宽度",{"_index":6020,"title":{},"body":{"1015828":{}}}],["这个我们也了解过了，就是我们所说的ac",{"_index":10372,"title":{},"body":{"1015818":{}}}],["这个我们已经在之前了解过了，就是我们所说的seq",{"_index":10370,"title":{},"body":{"1015818":{}}}],["这个是一个链表结构体，是用于记录类的结构，其中包含了很多类的信息",{"_index":255,"title":{},"body":{"1015822":{}}}],["这个概念实际上就是本机宽度，本机是32位操作系统也就是4字节，在32位操作系统中处理4字节数据时速度最快，这也就出现了需要字节对齐（4字节）的情况",{"_index":1916,"title":{},"body":{"1015843":{}}}],["这个模板想使用的话，我们就需要告诉编译器模板中的t、m分别对应什么，所以如果直接使用bas",{"_index":3648,"title":{},"body":{"1015840":{}}}],["这个流程其实跟软件断点的流程差不多，因此就不必再重复的去跟进代码了",{"_index":4872,"title":{},"body":{"3440657":{}}}],["这个流程我们在异常章节的学习中就已经了解了，那现在我们进入kidispatchexception函数内，之前在异常章节的学习时分析过这个函数，这里我们仅文字描述一下流程，不再重复的截图解释",{"_index":4801,"title":{},"body":{"3440657":{}}}],["这个消息优先于所有其他的客户区域和非客户区域鼠标消息，windows应用程序通常把消息传送给defwindowproc函数，然后windows用wm_nchittest消息产生与鼠标位置相关的所有其他鼠标消息，通俗的讲就是从消息产生消息",{"_index":963,"title":{},"body":{"1015822":{}}}],["这个类型，只不过是换了一个名字罢了",{"_index":7160,"title":{},"body":{"1015833":{}}}],["这个结构体里主要包含驱动程序的一些基础信息，具体的可以看如下代码注释",{"_index":5601,"title":{},"body":{"1015847":{}}}],["这个结构体里面又是一个联合体，联合体和结构体是差不多的，区别在于联合体用于覆盖使用而结构体是不覆盖使用",{"_index":9777,"title":{},"body":{"1015818":{}}}],["这也就表示pte可以没有物理页，那么这个0x0的线性地址我们是否可以进行读写呢？实际上是可以的，我们已经了解0x0这个地址不能读写的原因是因为其对应pte没有物理页，那我们可以给它一个物理页",{"_index":9424,"title":{},"body":{"1015831":{}}}],["这也就表示每一个重定位表是image_base_relocation结构体开始，跟着的就是重定位项",{"_index":6608,"title":{},"body":{"1015828":{}}}],["这也是与调用门不同的地方，中断门会多压入一个值，这也就说明eflag通过中断门跨段时，值会改变",{"_index":9273,"title":{},"body":{"1015831":{}}}],["这也是当年结面临的窘境",{"_index":9990,"title":{},"body":{"1015818":{}}}],["这些回调函数均由user32.dll提供，回调函数表我们可以这样去寻找：fs:[0",{"_index":4075,"title":{},"body":{"3440655":{}}}],["这些成员也有一些精妙之处，你需要判断每一个成员的最高位是否是1，如果是，则去除最高位的值，得出的之的就不是一个地址了，而是函数的导出序号，反之就是一个rva，指向了如下结构体，这个结构体一共只有三个字节，第一个成员hint可能为空，如果不为空，那么它就是函数在导出表中的索引，我们可以使用这个索引直接去导出表找到函数的地址；第二个成员name，也就是函数的名字，只有一个字节，这是因为函数名字的长度无法确定，所以只取名字的第一个，如果你要完整寻找的话，名字是一个ascii字符串，从第一个名字开始找，直至遇见0x00结束",{"_index":6584,"title":{},"body":{"1015828":{}}}],["这些结构体你都可以在microsof",{"_index":6002,"title":{},"body":{"1015828":{}}}],["这些结构体的具体细节，在之后的章节会详细了解，现在我们只需要按照pe文件的整体结构来看一个pe文件（使用010",{"_index":6005,"title":{},"body":{"1015828":{}}}],["这几个主要结构体分别对应的宽度如下所示",{"_index":5994,"title":{},"body":{"1015828":{}}}],["这只有利用反汇编代码来解释了",{"_index":3550,"title":{},"body":{"1015840":{}}}],["这四个函数都有一个参数lpsecurity_attrip",{"_index":7318,"title":{},"body":{"1015833":{}}}],["这就是一个pe指纹，如果能满足这一套流程则表示这是一个模块",{"_index":8591,"title":{},"body":{"1015833":{}}}],["这就是获取输入的字符来攻击、打坐、加血的小程序，我们想要自动化的控制这个程序而不是自己输入该怎么办？这时候就需要使用平时中大家常提的外挂技术，在这里实际上就是远程线程注入，通过进程b控制进程a的执行流程",{"_index":8487,"title":{},"body":{"1015833":{}}}],["这就表示buffer可以存储20个字符，%s是占位符，表示以字符串形式打印，关于数组的细节后面的课程中会学习到，这里了解一下即可",{"_index":1687,"title":{},"body":{"1015843":{}}}],["这张表有128个符号，都是比较常用的，那也就是说在我们赋值a给变量时，编译器会去这张表中寻找大写的a，如上图所示a对应10进制为65，转为16进制就是0x41",{"_index":1651,"title":{},"body":{"1015843":{}}}],["这时候你会发现这里依赖的模块数量远远大于10，这是因为除了当前pe文件本身需要依赖的模块以外，其所依赖的模块也依赖了其他模块，这里就一并展示进来了",{"_index":6559,"title":{},"body":{"1015828":{}}}],["这时候在回到程序按回车执行就会发现我们成功的向0x0线性地址读写了",{"_index":9436,"title":{},"body":{"1015831":{}}}],["这时候就会有提示，那就说明断点下成功了，继续跟进代码",{"_index":520,"title":{},"body":{"1015822":{}}}],["这时候就存在一个问题，printf为什么会知道打印完最后一个感叹号之后就不打印了呢？这是因为在这一串字符串后存在着一个00，当printf看见之后就会停止打印了，也就是说字符串的结束标志在内存中是0",{"_index":1681,"title":{},"body":{"1015843":{}}}],["这时候就有一个新的东西，就是套接字，这是系统给你打包好的，你可以理解这是网络通信过程中端点的抽象表示，而想要客户端去连接服务器端，就需要一对套接字，一个运行在服务器端，一个运行在客户端；如果概念无法很清晰的去了解，没关系，在实际编程中你就会有所体会",{"_index":9723,"title":{},"body":{"1015818":{}}}],["这时候我们f8运行这一条指令，我们就会发现ah=0x700，这里我们来算一下",{"_index":5434,"title":{},"body":{"1015825":{}}}],["这时候我们就可以引出多态的概念：多态就是可以让父类的指针有多种形态，c++中是通过虚函数实现的多态性",{"_index":3572,"title":{},"body":{"1015840":{}}}],["这时候我们就要学习一个新的概念叫做：结构体；结构体的定义如下",{"_index":1980,"title":{},"body":{"1015843":{}}}],["这时候我们就需要使用运算符重栽，使用关键词：operator，例如我们想重载大于符号",{"_index":3613,"title":{},"body":{"1015840":{}}}],["这时候我们暂时的出结论：引用类型就是指针",{"_index":3499,"title":{},"body":{"1015840":{}}}],["这时候我们的环境准备工作已经完成了，重启虚拟机至如下界面，选择xp",{"_index":8980,"title":{},"body":{"1015831":{}}}],["这时候我们需要了解通信中的三种通信模式",{"_index":9919,"title":{},"body":{"1015818":{}}}],["这时候还没有结束，需要使用函数wsastartup进行winsock的初始化，其语法格式如下",{"_index":9831,"title":{},"body":{"1015818":{}}}],["这时候，可能会有人疑惑，为什么定义了变量a为无符号数，存储",{"_index":1554,"title":{},"body":{"1015843":{}}}],["这是一个从高到低的顺序，同时在windbg中对应的也可以按图将数据平铺过来",{"_index":9002,"title":{},"body":{"1015831":{}}}],["这是一个指针，指向了",{"_index":11069,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向了_kprcp结构体，即_kpcr结构体0x120偏移位的成员。这里也是为了方便找到结构体，防止_kpcr结构体发生了变化，就可以通过该成员找到_kprcp结构体",{"_index":11067,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向了一个空闲的线程的结构体",{"_index":11088,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向了任务段tss，每个cpu都有一个",{"_index":11076,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向了全局",{"_index":11073,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向了当前_kpcr结构体",{"_index":11064,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向了当前_nt_tib结构体，也就是_kpcr结构体（便于查找",{"_index":11060,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向即将切换的下一个线程的结构体",{"_index":11086,"title":{},"body":{"1703937":{}}}],["这是一个指针，指向当前线程的结构体",{"_index":11084,"title":{},"body":{"1703937":{}}}],["这是一个结构体，用于进0环时保存环境",{"_index":11034,"title":{},"body":{"1703937":{}}}],["这是可以编译的，但是没有实际意义，所以在使用引用的时候原来是什么类型就应该使用什么类型",{"_index":3520,"title":{},"body":{"1015840":{}}}],["这是向某一地址写入内容，汇编代码中的ds实际上就是段寄存器，真正写入的地址实际上是ds.base+0x123456，base就是ds段寄存器的一个属性。（其他段寄存器的形式也是如此",{"_index":8907,"title":{},"body":{"1015831":{}}}],["这是因为在继承的时候默认将继承过来的a的所有成员设置为private，也就是如下代码",{"_index":3433,"title":{},"body":{"1015840":{}}}],["这是因为我们即将要使用到pcap_open这个函数，只有定义了这个宏，才能包含定义了这个函数的头文件，这个我们可以从pcap.h头文件中看到",{"_index":10199,"title":{},"body":{"1015818":{}}}],["这是因为第二张系统服务表没有放在ssdt中，而是放在了ssdt",{"_index":2567,"title":{},"body":{"1015846":{}}}],["这是因为编译器发现你没有传入参数，就会去寻找没有参数的构造函数，但是在这段代码中没有声明，所以需要声明一下",{"_index":3354,"title":{},"body":{"1015840":{}}}],["这是来自菜单、工具条按钮、加速键等用户接口对象的wm_command通知消息，属于应用程序自己定义的消息。通过消息映射机制，mfc框架把命令按一定的路径分发给多种类型的对象（具备消息处理能力）处理，如文档、窗口、应用程序、文档模板等对象。能处理消息映射的类必须从ccmdtarget类派生",{"_index":449,"title":{},"body":{"1015822":{}}}],["这是由于寄存器是rax，在64位模式下有三种表达方式，所以iv表示的立即数的大小是取决于操作数的属性的",{"_index":11895,"title":{},"body":{"1015817":{}}}],["这条汇编指令只有一行，即使出现线程切换也不会造成上述的情况，但也不能完全避免。因为在单核的情况下是分时执行，所以这条指令是没问题的，但是在多核的情况下可以在某一个时刻同时多个线程执行，因此也会出现不同线程同时执行这条指令的情况，也会产生上述的问题",{"_index":6641,"title":{},"body":{"1933380":{}}}],["这样做的好处就是非常高效，但是却没办法保证数据是否正确地传递过去了",{"_index":9937,"title":{},"body":{"1015818":{}}}],["这样做的好处就是：可以很直观的看见函数名，并且在应用层面可以达到隐藏的目的",{"_index":8337,"title":{},"body":{"1015833":{}}}],["这样再去计算八进制的算术题，就简单多了，其他进制运算以此类推",{"_index":5061,"title":{},"body":{"1015825":{}}}],["这样就可以绕过断点了",{"_index":2333,"title":{},"body":{"1015843":{}}}],["这样就没有任何问题了，你想传参就传，不想就不传",{"_index":3355,"title":{},"body":{"1015840":{}}}],["这样我们在代码中就可以直接去赋值修改编辑框内容，但需注意我们在代码之后要加上updatedata函数才可以生效",{"_index":1046,"title":{},"body":{"1015822":{}}}],["这样我们就可以使用指针的方式来避免内存的重复使用，效率更高",{"_index":3306,"title":{},"body":{"1015840":{}}}],["这样我们就可以完成整个需求了",{"_index":4224,"title":{},"body":{"1015820":{}}}],["这样我们就完成了新增节的所有步骤，你可以基于这个基础再去插入代码执行",{"_index":6415,"title":{},"body":{"1015828":{}}}],["这样我们就构建好调用门了",{"_index":9209,"title":{},"body":{"1015831":{}}}],["这样我们解决了页面显示的问题，但是当前这个子窗口是可以拖拽的并且还有边框，一般来说应用程序不会这么去设计，所以我们需要修改对话框的样式",{"_index":1331,"title":{},"body":{"1015822":{}}}],["这样我们运行代码时候长跳转到getregister函数执行，该函数内有一个",{"_index":9226,"title":{},"body":{"1015831":{}}}],["这样比较大小，多少还是有点麻烦，如果我们想实现跟其他的数一样直接比较大小该怎么办？直接使用a",{"_index":3611,"title":{},"body":{"1015840":{}}}],["这样虽然看似解决了问题，但是实际上也同样会出现一种问题，那就是for循环执行了不止10次，这样会倒是过分的占用计算资源",{"_index":7625,"title":{},"body":{"1015833":{}}}],["这样，我们插入的代码都已经准备完毕，填充到空白区即可",{"_index":6363,"title":{},"body":{"1015828":{}}}],["这段代码写了很多遍了，首先我们创建了一个对象，并在cmainwindow类的构造函数中使用create函数创建了窗口，而后就是一些流程化的东西，最后一个返回为true，这个相信很多人会疑惑，其实在代码中写的就很明确了，如果你不为true，则会异常打印、销毁窗口（如果没有创建窗口则退出实例",{"_index":570,"title":{},"body":{"1015822":{}}}],["这段代码可以编译，但是是无法运行的，我们可以运行一下然后来看看反汇编代码",{"_index":2114,"title":{},"body":{"1015843":{}}}],["这段代码我们要实现的就是，使用成员函数初始化成员的值，但是实际运行却不符合我们的预期",{"_index":3331,"title":{},"body":{"1015840":{}}}],["这段代码执行完成之后的内存空间分布就如下",{"_index":11154,"title":{},"body":{"1703937":{}}}],["这段代码是一个简单的交互程序，它通过接收键盘消息与窗口进行交互。然而，它有一个限制，即只能处理键盘消息，而无法处理鼠标或其他进程发来的消息",{"_index":3790,"title":{},"body":{"3440655":{}}}],["这段代码的意思就是对比esp和ebp是否一样，而我们知道堆栈在使用完成之后要恢复成员来的样子（堆栈平衡），所以在add指令之后ebp与esp应该是一样的，而后的call指令实际上就是调用了一个函数（__chkesp），这个函数就是用来检查你的堆栈是否平衡的",{"_index":1513,"title":{},"body":{"1015843":{}}}],["这段代码的意思就是进入if语句，如果a小于b则打印一个1，如果a大于b则打印一个2，如果前两2个表达式都不成立则打印一个3；在这里我们简单来看一下反汇编代码，看看它如何实现的",{"_index":1788,"title":{},"body":{"1015843":{}}}],["这段代码看着很复杂，但我们有基础后再看它轻而易举，脑子里浮现的就是汇编代码",{"_index":2163,"title":{},"body":{"1015843":{}}}],["这种情况下，数据是如何存储的呢？我们还可以来看一下汇编代码",{"_index":1536,"title":{},"body":{"1015843":{}}}],["这种页面原本属于某个进程或系统工作集，但现在已从工作集中移除。这些页面包含的数据仍然对原来的工作集有效，原来工作集中的页表项pte仍指向该页面，但已被标记为无效的正在转移的pte。这种状态是导致缺页异常的主要原因之一",{"_index":6970,"title":{},"body":{"2949228":{}}}],["这类不可被中断的操作叫做原子操作，windows页提供了一部分api供用户使用来保证在多核情况下的线程同步。（主要位于kernel32.dll和ntdll.dl",{"_index":6645,"title":{},"body":{"1933380":{}}}],["这节课我们先来学习以下整数类型",{"_index":1522,"title":{},"body":{"1015843":{}}}],["这边就涉及到一个新的结构体createstruct，我们跟进看一下",{"_index":462,"title":{},"body":{"1015822":{}}}],["这边我们需要注意的是，由于virtualprotectex函数修改的并不是某一地址的属性，而是地址所在物理页的属性，因此在对应物理页内的地址都有可能出现异常，所以就需要调试器去判断接收到的调试事件中的对应地址是否是下内存断点的地址，如果不是的话就应该放行",{"_index":4864,"title":{},"body":{"3440657":{}}}],["这部分海东老师也是一笔带过，想要具体了解可以阅读《windows内核原理与实现",{"_index":7008,"title":{},"body":{"2949228":{}}}],["这里不管有没有内核调试器，或内核调试器函数返回结果为0，都会跳转或向下执行到同一处代码段，这里调用了一个函数_dbgkforwardexception，它的作用是将异常发送给3环的调试器，如果返回非0则表示有3环调试器且处理了异常，就会跳转",{"_index":4304,"title":{},"body":{"2949166":{}}}],["这里为什么等待的线程要自己把自己从等待网上进行摘除，而不是通过唤醒的线程来摘除，这是因为会出现等待的线程不止有一个等待对象，或者一个等待对象有多个线程在等待的场景，如果通过唤醒的线程去摘除则不符合设计的逻辑",{"_index":10663,"title":{},"body":{"2424889":{}}}],["这里出现了很多，我们没有见过的词，我们来了解一下几个常用的",{"_index":10366,"title":{},"body":{"1015818":{}}}],["这里又调用了cwinthread::run()，我们继续跟进，在很多书中将该函数称为mfc的控制中心，因为在mfc中所有消息队列、消息分派都在cwinthread::run()中去完成，它与afxwinmain一样是对普通程序员来说是不可见的",{"_index":572,"title":{},"body":{"1015822":{}}}],["这里在比较，则b大于a",{"_index":1568,"title":{},"body":{"1015843":{}}}],["这里存储的是2个字节的数据，那么按照大端模式去存储，0x1a2b数据高位就是1a，低位就是2b，内存地址中从小到大，小的则是低位，高的则是高位，所以内存地址0x00000000存储1a，0x00000001存储2b；小端模式则内存地址0x00000000存储2b，0x00000001存储1",{"_index":5226,"title":{},"body":{"1015825":{}}}],["这里实际上有一个细节，虽然当ret指令将启动线程的函数地址弹给了eip，但是启动线程函数是有参数的，这个参数就是一个线程结构体，而这里我们并没有进行参数的传递，那么它是如何找到参数的呢？实际上我们可以通过反汇编来看一下，通过反汇编我们可以看到即使你没有传递参数，但是在反汇编的指令层它会通过[ebp+8]的方式去取参数",{"_index":11190,"title":{},"body":{"1703937":{}}}],["这里就是确保在初始化apc时，挂入的apc队列一定是线程当前环境对应的",{"_index":10881,"title":{},"body":{"2424869":{}}}],["这里我们主要了解以下几个重要的成员",{"_index":6721,"title":{},"body":{"2949228":{}}}],["这里我们举例说明8.25转成浮点存储，整数部分8不断的除以2，直到结果为0，整除不包含小数点，所以最后的1/2结果为0，有余数则为1",{"_index":1582,"title":{},"body":{"1015843":{}}}],["这里我们仍然以notepad.exe为例进行附加调试，从简易调试器的输出结果来看，使用附加进程方式与创建进程方式并没有什么区别",{"_index":4765,"title":{},"body":{"3440657":{}}}],["这里我们以之前的例子，定义一个数组来表示：张三、李四、王五的年龄",{"_index":1907,"title":{},"body":{"1015843":{}}}],["这里我们使用dd指令去查看数据实际上不是很方便，因为它表示以4字节一组的方式展示数据，我们为了看起来更加方便我们可以使用dq指令去查看数据，它是以8字节一组的方式展示数据",{"_index":8994,"title":{},"body":{"1015831":{}}}],["这里我们再来看下char、short、int类型的数组的空间具体是如何分配的",{"_index":1917,"title":{},"body":{"1015843":{}}}],["这里我们可以使用关键词：private、public来控制我们想被人访问的和不想被人访问的成员",{"_index":3421,"title":{},"body":{"1015840":{}}}],["这里我们可以先使用od随便一处下断点，然后等程序停在对应位置，如下图所示指令并没有被修改为",{"_index":4796,"title":{},"body":{"3440657":{}}}],["这里我们可以在初始化函数里去创建",{"_index":1322,"title":{},"body":{"1015822":{}}}],["这里我们想要去在查看gdt表就需要使用windbg调试内核，为了便于未来的学习调试，我们需要来配置一下调试环境。调试模式为双机调试（因为你调试的是内核，本机调试的话，你在内核断点实际上整个系统也就停止了，你也就无法继续调试，所以我们需要使用双机调试模式进行调试。），你需要在你的物理机器上安装vmware虚拟机，接着在vmware中安装window",{"_index":8963,"title":{},"body":{"1015831":{}}}],["这里我们所说的垮段不提权的，是指当前你的段cpl与要跳转过去的段cpl是同级的。执行长调用时，首先会压入调用者的cs，然后再压入长调用指令的下一行地址。调用完成之后，由于压入栈的内容与短调用不一样了，所以当调用完成之后不可以再使用ret来返回了，而是需要使用retf指令，这样就可以同时恢复cs、eip",{"_index":9174,"title":{},"body":{"1015831":{}}}],["这里我们提到了以后新的东西，即kthread.alertable，该成员表示当前线程是否可以被唤醒，这个值可以被sleepex、waitforsingleobjectex等能让线程进入等待状态的函数修改",{"_index":10896,"title":{},"body":{"2424869":{}}}],["这里我们没有，所以继续向下我们会发现其调用了一个createex函数",{"_index":460,"title":{},"body":{"1015822":{}}}],["这里我们知道对应的汇编代码是add，但是表格中的eb,gb却不清楚是什么；实际上这是intel定义的一种zz表示法，第一个字母为大写，第二个字母为小写",{"_index":11830,"title":{},"body":{"1015817":{}}}],["这里既然定义了一个成员为全局可读的变量，那么就会需要在一个地方进行初始化，而初始化的地方就在implement_dynamic宏中，我们来看下implement_dynamic的背后是什么",{"_index":266,"title":{},"body":{"1015822":{}}}],["这里是有符号数比较a和b，a确实是大于b的，但无符号数不一样",{"_index":1567,"title":{},"body":{"1015843":{}}}],["这里最后变量y的值则为255，也就是00",{"_index":1565,"title":{},"body":{"1015843":{}}}],["这里涉及内核知识，建议观看视频简单讲解",{"_index":8593,"title":{},"body":{"1015833":{}}}],["这里的point实际上就是设备坐标，当我们修改了映射模式为mm_lometric则就没有办法看见圆形了，我们就需要使用函数dptolp来转换",{"_index":687,"title":{},"body":{"1015822":{}}}],["这里的根本原因就是变量i没有随着单次循环结束而去自增，我们可以在循环体内使用自增i++解决这一问题",{"_index":1854,"title":{},"body":{"1015843":{}}}],["这里的段实际上表示着段寄存器，如下英文字母都表示是寄存器",{"_index":11798,"title":{},"body":{"1015817":{}}}],["这里肯定很多人会被ntxxx和zwxxx搞得头晕目眩，我们简单了解下这两个命名的区别：在用户角度下也就是我们之前在ntdll.dll中看到的ntopenprocess和zwopenprocess它们本质都是一样的，zwopenprocess只是ntopenprocess的一个别名，它们最终都指向同一个地址；在内核角度下zwopenprocess不仅仅是ntopenprocess的别名，我们可以看如下代码，zwopenprocess实际上也是一个系统调用的过程跟用户侧的zwopenprocess没什么区别，而内核下的ntopenprocess则是真正有实现的函数，所以我们在上面的代码声明中都是以ntopenprocess来命名也是为了规范统一化",{"_index":5851,"title":{},"body":{"1015847":{}}}],["这里需要在双引号之前加上l是因为如果你不加的话，编译器会默认使用当前文件的编码格式去存储，所以我们需要加上。（注意使用这个的时候需要包含stdio.h这个头文件",{"_index":7128,"title":{},"body":{"1015833":{}}}],["这里面有一个结构体，我们需要要看一下它的成员分别是什么",{"_index":10187,"title":{},"body":{"1015818":{}}}],["这里面有很多的模块，每个模块都是一个可执行文件，它们遵守相同的格式，即pe结构，所以我们也可以理解进程就是一堆pe组合",{"_index":7194,"title":{},"body":{"1015833":{}}}],["进位了，可以根据cf标志位得到正确的结果，溢出了，结果已经不正确了",{"_index":5416,"title":{},"body":{"1015825":{}}}],["进位标志：【cf】—运算结果的最高有效位有进位（加法）或者借位（减法）。用于表示两个无符号数高低",{"_index":5408,"title":{},"body":{"1015825":{}}}],["进位针对的是无符号数运算，溢出针对的是有符号数运算",{"_index":5415,"title":{},"body":{"1015825":{}}}],["进入0环的方式",{"_index":2466,"title":{},"body":{"1015846":{}}}],["进入_dbgkppostfakeprocesscreatemessages函数后，我们可以发现与线程相关的虚假消息以及与模块相关的虚假消息都会被发送给调试器。显然，当我们通过附加进程的方式建立调试关系时，看到的dll加载调试事件的情况实际上是由_ntdebugactiveprocess函数发送给调试器的虚构的假消息",{"_index":4771,"title":{},"body":{"3440657":{}}}],["进入_dbgkpsendapimessage函数，我们会发现它立刻就判断了传递过来的第二个参数是否为0，如果不为0，则会调用_dbgkpsuspendprocess函数将当前进程（被调试进程）内除当前线程外的其他线程挂起，当前例子中的",{"_index":4806,"title":{},"body":{"3440657":{}}}],["进入dbgkforwardexception函数，收集调试事件并发送给调试对象",{"_index":4870,"title":{},"body":{"3440657":{}}}],["进入except代码块执行",{"_index":5541,"title":{},"body":{"1015847":{}}}],["进入函数内，发现它调用了_dbgkpqueuemessage函数，该函数有两个参数，一个是event，它是由调试事件采集函数创建的结构体，另一个是fastmutex，这是一个一个互斥体参数，与调试对象的第一个成员相同",{"_index":4612,"title":{},"body":{"3440657":{}}}],["进入循环，判断当前被等待对象（例如event）是否有信号（即判断_dispatcher_header.signalstate的值）或者是否超时（即是否满足激活条件",{"_index":10655,"title":{},"body":{"2424889":{}}}],["进制",{"_index":4985,"title":{},"body":{"1015825":{}}}],["进制的定义：n进制，由n个符号组成，逢n进1。那么问题来了，十进制是由十个符号组成，就一定是0、1、2、3、4、5、6、7、8、9么？其实并不是，我们既然说了是由符号组成，那么十进制也可以是由a、y、b、3、4、5、d、9、0、x组成，由什么符号，取决于定义的那个人，我定义的十进制前20个表格是这样的",{"_index":4988,"title":{},"body":{"1015825":{}}}],["进制运算",{"_index":4999,"title":{},"body":{"1015825":{}}}],["进程b写了一个远程线程创建的代码",{"_index":8403,"title":{},"body":{"1015833":{}}}],["进程id其实我们早就见过了，通常我们称之为pid，在任务管理器的进程栏下就可以很清楚的看见",{"_index":7332,"title":{},"body":{"1015833":{}}}],["进程id通过任务管理器查看",{"_index":8418,"title":{},"body":{"1015833":{}}}],["进程与线程",{"_index":6621,"title":{"1703937":{}},"body":{"1015827":{},"1015832":{}}}],["进程与线程的关系",{"_index":11269,"title":{},"body":{"1703937":{}}}],["进程为线程提供资源，也就是提供cr3的值，cr3中存储的就是页目录表的基址，我们有了cr3也就表示知道了线程能访问的内存",{"_index":11268,"title":{},"body":{"1703937":{}}}],["进程也可以理解为是一堆模块组成的，我们可以使用od打开一个进程看一下",{"_index":7193,"title":{},"body":{"1015833":{}}}],["进程内存空间的地址划分如下，每个进程的内核是同一份（高2g），只有其他三个分区是进程独有的（低2g），而只有用户模式区是我们使用的范围",{"_index":7192,"title":{},"body":{"1015833":{}}}],["进程创建的过程也就是createprocess函数",{"_index":7197,"title":{},"body":{"1015833":{}}}],["进程句柄表",{"_index":7308,"title":{},"body":{"1015833":{}}}],["进程挂靠",{"_index":11267,"title":{},"body":{"1703937":{}}}],["进程挂靠的目的就是让当前线程可以访问其他进程的内存空间",{"_index":11287,"title":{},"body":{"1703937":{}}}],["进程有编号，线程也有自己的编号，也就是这里的cid，需要注意的是这里的cid不光是线程id，也包含了进程id。即_client_id[0]为进程id，_client_id[4]为线程",{"_index":11043,"title":{},"body":{"1703937":{}}}],["进程的创建",{"_index":7195,"title":{},"body":{"1015833":{}}}],["进程的创建过程",{"_index":7187,"title":{},"body":{"1015833":{}}}],["进程相关ap",{"_index":7329,"title":{},"body":{"1015833":{}}}],["进程空间的地址划分",{"_index":6689,"title":{},"body":{"2949228":{}}}],["进程结构体",{"_index":10937,"title":{},"body":{"1703937":{}}}],["进程结构体_eprocess的第一个成员（即0x0偏移位）也是一个结构体_kprocess，我们也可以使用windbg来查看一下",{"_index":10942,"title":{},"body":{"1703937":{}}}],["进程编号，也就是我们通过任务管理器中所看见的pi",{"_index":10971,"title":{},"body":{"1703937":{}}}],["进程间通信",{"_index":8474,"title":{},"body":{"1015833":{}}}],["进行简单的绘画",{"_index":7658,"title":{},"body":{"1015833":{}}}],["远程线程",{"_index":8387,"title":{},"body":{"1015833":{}}}],["远程线程注入",{"_index":8421,"title":{},"body":{"1015833":{}}}],["远程线程注入、apc注入、消息钩子注入、注册表注入、导入表注入、输入法注入等",{"_index":8427,"title":{},"body":{"1015833":{}}}],["远程线程注入的思路就是在进程a中创建线程，将线程函数指向loadlibrary函数",{"_index":8429,"title":{},"body":{"1015833":{}}}],["远程线程注入的流程",{"_index":8428,"title":{},"body":{"1015833":{}}}],["连接",{"_index":8301,"title":{},"body":{"1015833":{}}}],["连续压入堆栈2个数据，堆栈也会根据数据宽度提升，此时我们要在堆栈图中根据变化进行修改",{"_index":1434,"title":{},"body":{"1015843":{}}}],["迭代器",{"_index":11701,"title":{},"body":{"1015814":{}}}],["迭代器按功能由弱到强分为5种",{"_index":11715,"title":{},"body":{"1015814":{}}}],["迭代器的使用",{"_index":11704,"title":{},"body":{"1015814":{}}}],["迭代器类别",{"_index":11743,"title":{},"body":{"1015814":{}}}],["迭代器：可依次存取容器中元素的东西",{"_index":11320,"title":{},"body":{"1015814":{}}}],["退出循环之后，线程会将自己结构体0x5c的位置清0，释放_kwait_block所占内存，然后将自己从等待网上摘除，成功复活（唤醒",{"_index":10662,"title":{},"body":{"2424889":{}}}],["退出线程、进程事件采集",{"_index":4604,"title":{},"body":{"3440657":{}}}],["退出进程的本质也是退出线程，其中退出线程为最后一个时即为退出进程。因此，无论是退出进程还是线程，底层调用的函数是相同的，都是pspexitthread函数",{"_index":4605,"title":{},"body":{"3440657":{}}}],["适配器的混合模式",{"_index":10195,"title":{},"body":{"1015818":{}}}],["逆向工具：dtdebug.rar、ollydebugu",{"_index":5146,"title":{},"body":{"1015825":{}}}],["选择mm_lometric，一个逻辑单位是0.1毫米，x向右则加，y向下则减，所以参数最后要改成",{"_index":663,"title":{},"body":{"1015822":{}}}],["选择vkd",{"_index":5495,"title":{},"body":{"1015847":{}}}],["选项",{"_index":4105,"title":{},"body":{"1015820":{}}}],["通信实现",{"_index":5638,"title":{},"body":{"1015847":{}}}],["通常画笔都是使用临时变量cpen，这样在函数执行后，这个画笔会失效，如果不将oldpen放回去，会造成内存泄露（应该释放但因dc绑定而无法释放，下次放弃使用的时候又无法判断是否应该释放",{"_index":842,"title":{},"body":{"1015822":{}}}],["通常，控件通知在某些重要事件发生时，由控件窗口发送到父窗口，如打开一个组合框。控件通知为父窗口进一步控制子窗口提供了机会。例如，打开一个组合框时，父窗口可以用组合框初建时得不到的消息填充它",{"_index":451,"title":{},"body":{"1015822":{}}}],["通常，适配器(物理网卡)有多种工作模式，设置为混合模式之后，可以接收所有流经当前网卡的数据包，即使不是发给自己的",{"_index":10196,"title":{},"body":{"1015818":{}}}],["通用寄存器",{"_index":5147,"title":{},"body":{"1015825":{}}}],["通用寄存器表示其通用性，可以往里面存储任意数据和值",{"_index":5152,"title":{},"body":{"1015825":{}}}],["通知类型",{"_index":7565,"title":{},"body":{"1015833":{}}}],["通知类型与同步类型的事件对象也是有差异的，具体体现在setevnet函数使用后，等待通知类型的事件对象线程会被唤醒然后向下执行代码，而等待同步类型的事件对象线程仍然处于等待状态",{"_index":10677,"title":{},"body":{"2424889":{}}}],["通知类型，则唤醒所有等待该状态的线程，也就是从等待链表中摘除这些线程",{"_index":10681,"title":{},"body":{"2424889":{}}}],["通过cframewnd类的派生类（子类）的对象，在它的构造函数里面调用成员函数create来创建窗口",{"_index":160,"title":{},"body":{"1015822":{}}}],["通过createfilemapping映射的就是mapped类型内存。（会出现与其他进程共享物理页",{"_index":6737,"title":{},"body":{"2949228":{}}}],["通过create函数来看窗口创建流程",{"_index":457,"title":{},"body":{"1015822":{}}}],["通过getmodulefilename和getcurrentdirectory函数可以分别获得当前模块目录和当前工作目录",{"_index":7367,"title":{},"body":{"1015833":{}}}],["通过ida我们可以看见在线程切换的关键函数swapcontext中，多核模式下在函数开头多了两个函数的使用，即：keacquirequeuedspinlockatdpclevel与kereleasequeuedspinlockfromdpcl",{"_index":6670,"title":{},"body":{"1933380":{}}}],["通过ida打开内核文件（ntoskrnl.exe）找到kideliverapc函数开始分析，首先我们可以看见会将kernelapcpending设为0，获取内核apc队列地址，接着判断队列（链表）是否为空，如果不为空则表示队列中有apc，就会进行跳转",{"_index":10909,"title":{},"body":{"2424869":{}}}],["通过ida直接打开ntoskrnl.exe模块，找到kidispatchexception函数，该函数最开始就是先调用_kecontextfromkframes函数，将trap_frame备份到_context中，为返回3环做准备（这里与用户apc执行过程一样，因为该函数支持内核、用户空间的异常分发和处理，因此我们不知道异常处理函数到底是在用户空间还是内核空间，所以第一件事情就是备份trap_frame，便于中途回到3环",{"_index":4284,"title":{},"body":{"2949166":{}}}],["通过kiprocessorblock我们查看到的kpcr位置实际上是指向kpcr结构体0x120的偏移位，所以如果我们想完整的去查看这个结构体就需要在这个地址上减去0x120",{"_index":2516,"title":{},"body":{"1015846":{}}}],["通过msdn去看mfc的层次结构图",{"_index":33,"title":{},"body":{"1015822":{}}}],["通过ntqueryinformationprocess函数查询当前进程是否正在被调试",{"_index":4499,"title":{},"body":{"2949166":{}}}],["通过select函数遍历socket数组，取出有响应（可读、可写）的socket放进另一个数组",{"_index":10015,"title":{},"body":{"1015818":{}}}],["通过sleep函数进行等待，并没有办法确定具体等待的时间，有可能出现等待过长或过短的情况",{"_index":10544,"title":{},"body":{"2424889":{}}}],["通过virtualalloc/virtualallocex申请的就是private类型内存。（独享物理页",{"_index":6736,"title":{},"body":{"2949228":{}}}],["通过windows任务管理器我们也可以很清晰的看见每个进程当前的线程数量",{"_index":7393,"title":{},"body":{"1015833":{}}}],["通过上文图片中的代码注释可以发现这些宏是属于wm_nchittest和mousehookstruct的，第二个我们不用管，来看下第一个，从命名上就可以看的出来其是一个消息，其代表的具体消息为：光标移动到窗体或鼠标按下、抬起",{"_index":962,"title":{},"body":{"1015822":{}}}],["通过上文的学习，我们了解到句柄表项的低32位可以获取到内核对象的地址，但是这个地址指向的并不是结构体的开头，内核对象在开头都会有一个0x18字节的_object_header结构，这是内核对象的头部，也就是说从0x18字节开始才是进程结构体第一个成员的位置",{"_index":8721,"title":{},"body":{"1933378":{}}}],["通过上述的学习，我们了解到了调试器与被调试进程，通过调试对象结构体_debug_object成功的关联起来",{"_index":4544,"title":{},"body":{"3440657":{}}}],["通过上面几个案例的分析，我们知道dbgkpsendapimessage函数的作用是将已创建的调试事件发送到调试对象的事件链表中",{"_index":4611,"title":{},"body":{"3440657":{}}}],["通过两个步骤构造一个cframewnd对象",{"_index":76,"title":{},"body":{"1015822":{}}}],["通过任务门描述符的tss段选择子，在gdt表中找到tss段描述符",{"_index":9371,"title":{},"body":{"1015831":{}}}],["通过单步调试，熟悉窗口过程处理函数在mfc的实现和命令传递的方式",{"_index":456,"title":{},"body":{"1015822":{}}}],["通过原码：100",{"_index":5116,"title":{},"body":{"1015825":{}}}],["通过反汇编代码我们看不出来其存在什么差别，我们可以借助printf函数来查看区别",{"_index":1740,"title":{},"body":{"1015843":{}}}],["通过反汇编我们可以看见，当有3个_try_except程序块时就会有三个scopetable_entry结构体，它们是对应关系。成员previoustrylevel指向上一个_try_except程序块的编号，不在嵌套里就没有上一层，因此值为",{"_index":4452,"title":{},"body":{"2949166":{}}}],["通过反汇编，我们可以看到数组就是整体连续存储进入堆栈中，从左到右依次进入",{"_index":1913,"title":{},"body":{"1015843":{}}}],["通过多出的代码我们可以知道，原来这里通过atl添加的state属性需要使用get_state来获取值，以及通过put_state来修改值，但是这里的最关键的值我们却没有看见，所以我们可以选择在类中去声明一个成员变量",{"_index":3127,"title":{},"body":{"1015823":{}}}],["通过如上代码所示，我们可以很清晰的看见，ebp",{"_index":2136,"title":{},"body":{"1015843":{}}}],["通过宏的名称也能知道个大概，如果仍然不知道问题的含义，可以在微软的wdk文档中去搜索相关宏名称",{"_index":5532,"title":{},"body":{"1015847":{}}}],["通过报错内容我们可以看出类型不同无法转换，但是我仔细观察报错内容：char*无法转换成int，short**无法转换成int...那么就说明了一点，在我们使用取地址符时，变量会在其原本的数据类型后加一个星号",{"_index":2100,"title":{},"body":{"1015843":{}}}],["通过报错内容我们可以看出类型不同无法转换，但是我仔细观察报错内容：int**无法转换成int，int***无法转换成int...那么就说明了一点，在我们使用取值运算符时，变量会在其原本的数据类型后减去一个星号",{"_index":2119,"title":{},"body":{"1015843":{}}}],["通过拆分宏，让cmainwindow类也支持r",{"_index":290,"title":{},"body":{"1015822":{}}}],["通过查看反汇编代码我们发现c语言调用函数实际上跟我们之前所学的汇编是一样的",{"_index":1371,"title":{},"body":{"1015843":{}}}],["通过汇编代码我们明显可以看出其结果类型的转换。另外需要注意的是：表达式不论怎么复杂，最终只有一个结果",{"_index":1728,"title":{},"body":{"1015843":{}}}],["通过观察堆栈，我们可以发现switch的高明之处",{"_index":1820,"title":{},"body":{"1015843":{}}}],["通过让cpu”空转“进行等待，只有在等待事件很短的情况下才有意义，否则空转时间过长，对cpu资源来说就是一种浪费，并且自旋锁的方式只在多核的环境下存在",{"_index":10545,"title":{},"body":{"2424889":{}}}],["通过调用",{"_index":1138,"title":{},"body":{"1015822":{}}}],["通过调用门时，由调用门决定要执行的代码，但使用retf返回时，由栈中压入的值决定，也就是说，进门时只能按指定路线走，出门时可以翻墙（只要改变栈里面的值就可以想去哪去哪",{"_index":9250,"title":{},"body":{"1015831":{}}}],["通过调试器去调试一个程序有两个办法，第一种方法是通过createprocess函数打开一个未运行的程序，第二种方法是附加进程的方式，通过debugactiveprocess函数附加一个正在运行的进程",{"_index":4526,"title":{},"body":{"3440657":{}}}],["通过这个名字我们就知道什么意思了，其就表示在窗口创建之前挂了一个钩子（hook），跟进这个函数",{"_index":494,"title":{},"body":{"1015822":{}}}],["通过这张表，我们可以直接看到之前举例的定长指令50就正是对应着push",{"_index":11826,"title":{},"body":{"1015817":{}}}],["通过这种方式，写拷贝实现了对受保护文件的写保护，确保进程对文件的修改只会影响到副本，而不会修改源文件本身。（bypass写拷贝也很简单，直接将pte的r/w属性设1",{"_index":7057,"title":{},"body":{"2949228":{}}}],["通过阅读代码我们发现这个函数不是我们想要知道其是如何处理消息的函数，继续跟进，跟到createex函数里面会有一个afxhookwindowcreate函数",{"_index":493,"title":{},"body":{"1015822":{}}}],["通过附加进程的方式建立调试关系时，由于无法观察到进程初始化时加载的dll模块。因此，在执行ntdebugactiveprocess函数时，加入了这些虚假消息，希望为调试器提供必要的信息",{"_index":4773,"title":{},"body":{"3440657":{}}}],["逻辑与",{"_index":1762,"title":{},"body":{"1015843":{}}}],["逻辑或",{"_index":1763,"title":{},"body":{"1015843":{}}}],["逻辑运算符",{"_index":1760,"title":{},"body":{"1015843":{}}}],["遍历所有进程的teb+0xf24处：检查该位置是否有值，如果有值，说明存在调试器，可以选择退出程序",{"_index":4557,"title":{},"body":{"3440657":{}}}],["遍历物理网卡",{"_index":10096,"title":{},"body":{"1015818":{}}}],["遍历进程id：enumproç",{"_index":7387,"title":{},"body":{"1015833":{}}}],["那么cpu遇到这样的指令它的流程是怎么样的呢？它一共有5个步骤，我们以如上指令带入看一下",{"_index":9112,"title":{},"body":{"1015831":{}}}],["那么c语言其调用函数的本质是什么呢？我们可以来具体看看其编译后的反汇编代码",{"_index":1368,"title":{},"body":{"1015843":{}}}],["那么ebp寻址的思路是什么呢？先把ebp的值保存起来，然后将ebp指向esp的位置，接着在原来的堆栈基础上将esp上移，重新变成一块新的堆栈；之后新的程序再使用堆栈的时候，只影响esp但不会影响ebp，那我们寻址的时候使用ebp去寻址，ebp的位置相对固定，程序不管如何操作esp都会不停浮动，但是ebp相对稳定",{"_index":5399,"title":{},"body":{"1015825":{}}}],["那么this指针有什么作用呢？我们可以看下如下代码",{"_index":3329,"title":{},"body":{"1015840":{}}}],["那么为什么不只留一张表呢？这是因为iat的函数地址很有可能会被修改掉，导致地址不正确，如果你只有一张表，就没有一个正确的参照物了",{"_index":6595,"title":{},"body":{"1015828":{}}}],["那么为什么代码中使用esp寻址是这个对应的偏移量呢，我们需要在汇编中写入一个",{"_index":9244,"title":{},"body":{"1015831":{}}}],["那么为什么内核代码需要调用窗口过程函数呢？假设有一个需求，当我们想要在窗口创建时去做一些事情时，由于窗口创建时是肯定没有消息的，因此getmessage函数也没法获取到消息，dispatchmessage函数自然也就无法分发消息",{"_index":4048,"title":{},"body":{"3440655":{}}}],["那么为什么可以这样呢？这是因为我们执行远程线程函数满足返回值是4字节，一个参数是4字节即可（threadproc就是这样的条件",{"_index":8430,"title":{},"body":{"1015833":{}}}],["那么也就表示在当前描述零化物理页的_mmpfn结构体中，u1、u2成员就分别代表了flink、blink，通过这两个成员将所有零化物理页串成一个链表",{"_index":7002,"title":{},"body":{"2949228":{}}}],["那么也就表示如果我们刚刚发送消息的代码使用的函数从sendmessage变成postmessage，在没有translatemessage和dispatchmessage函数的情况下，getmessage函数并不会处理这个消息",{"_index":4009,"title":{},"body":{"3440655":{}}}],["那么以上所示的多维数组在内存中的分布是怎么样的呢？我们可以通过反汇编来看一下",{"_index":1959,"title":{},"body":{"1015843":{}}}],["那么优化之后，image_base_relocation结构体的第一个成员存储的就是0x800000，而这个结构体之后的每2字节存储就包含0x123、0x456、0x789，这样就大大的节省了空间。同时，这也就说明重定位表的实际大小为image_base_relocation结构体（8字节）+n*2字节",{"_index":6613,"title":{},"body":{"1015828":{}}}],["那么内存申请好了我们不想要了，这时候就需要释放，释放函数为virtualfree，其语法格式如下",{"_index":7933,"title":{},"body":{"1015833":{}}}],["那么出现嵌套_try_except使用时会怎么样呢，按照正常逻辑来想，肯定会出现重复挂入链表的操作（设置链表头），但是我们通过反汇编看见，编译器处理实际上只挂入了一次，并且仍然只有一个异常处理函数_except_handler3",{"_index":4429,"title":{},"body":{"2949166":{}}}],["那么取值运算符（星号+指针类型）是什么类型呢？我们来探测下",{"_index":2118,"title":{},"body":{"1015843":{}}}],["那么取地址符（&变量）的类型是什么呢？我们可以来探测下",{"_index":2098,"title":{},"body":{"1015843":{}}}],["那么另外80位的值是从何而来的呢？我们就需要了解这两个概念：gdt（global",{"_index":8958,"title":{},"body":{"1015831":{}}}],["那么可能会有一些极端的情况，如果b进程的y线程还没有来得及调用修改signalstate的函数（例如setevent）就挂掉了，那么等待对象z将被遗弃，这也就意味着x线程将永远等下去，因此为了避免这样的问题，我们可以使用互斥体对象",{"_index":10715,"title":{},"body":{"2424889":{}}}],["那么在实际的线程切换当中用到的到底是0x220偏移位成员还是0x44偏移位成员呢，我们可以来看一下swapcontext函数的实现",{"_index":11274,"title":{},"body":{"1703937":{}}}],["那么在构造类型中又是怎么样的呢",{"_index":3509,"title":{},"body":{"1015840":{}}}],["那么在汇编中如何定义、使用函数呢？既然我们知道函数就是一系列指令的集合，那么只要我们随便写一段汇编代码即可",{"_index":5365,"title":{},"body":{"1015825":{}}}],["那么在调用结束之后的栈变化就如下图所示",{"_index":9183,"title":{},"body":{"1015831":{}}}],["那么在这种进程挂靠的场景下，也是可以向线程apc队列中插入apc的，apcstate内所存储的就是b进程相关的apc信息（挂靠进程），而savedapcstate所存储的就是a进程相关的apc信息（所属进程",{"_index":10809,"title":{},"body":{"2424869":{}}}],["那么在这里192.168.8.0就是其网络号，同样我们可以根据子网掩码来获取主机号，其运算规则是：主机号",{"_index":9675,"title":{},"body":{"1015818":{}}}],["那么在这里我们使用了checkbox的扩展样式，我们要获取这复选框有没有被选中怎么办？这时候就可以通过函数getcheck来获取",{"_index":1212,"title":{},"body":{"1015822":{}}}],["那么在这里是为什么呢，实际在每个_except块内代码执行之前，都会调用一次全局展开函数，即_global_unwind2函数，该函数会从触发异常的那个try开始，依次调用局部展开，这样就可以保证finally块语句一定会得到执行",{"_index":4477,"title":{},"body":{"2949166":{}}}],["那么处理完apc后，原来的值该怎么办呢？实际上在kiinitializeuserapc函数中，要做的第一件事情就是将原来trap_frame的值备份到一个新的结构体中（_context），新的结构体与trap_frame结构体大致一样，我们可以来看一下",{"_index":10926,"title":{},"body":{"2424869":{}}}],["那么如上公式中的下载数据的大小和持续时长如何获取呢？那就是通过之前所学习的回调函数的pcap_pkthdr结构体来获取",{"_index":10397,"title":{},"body":{"1015818":{}}}],["那么如何计算呢？1",{"_index":5002,"title":{},"body":{"1015825":{}}}],["那么如何让这段代码插入到空白区呢？直接插入代码很明显不可取，因为我们没有源文件，所以我们要插入的是之前所学习的硬编码，我们可以在vc6中下断点反编译查看这段代码对应的硬编码",{"_index":6347,"title":{},"body":{"1015828":{}}}],["那么如何证实推断的结果是正确的呢，我们可以直接使用dtdebug之类的调试器打开这个pe文件，调试器会自动在程序入口断点，如下图所示则表示我们的推测是正确的",{"_index":6187,"title":{},"body":{"1015828":{}}}],["那么如何避免重复造轮子呢？c++中使用模板来解决这个问题",{"_index":3632,"title":{},"body":{"1015840":{}}}],["那么它的名字就是kernel32.dll，可以用这张方式依次寻找",{"_index":6557,"title":{},"body":{"1015828":{}}}],["那么引用类型在实际开发中的作用是什么呢？我们可以用在函数参数传递中",{"_index":3507,"title":{},"body":{"1015840":{}}}],["那么当前编译器环境中，异常处理函数_except_handler3就会根据trylevel选择scopetable数组中的结构体，然后找到结构体的ipfnfilter成员，即异常过滤函数地址",{"_index":4464,"title":{},"body":{"2949166":{}}}],["那么当我们将plus函数修改成无返回值，不调用结构体成员后，这个指针还会传递过来么",{"_index":3323,"title":{},"body":{"1015840":{}}}],["那么我们也可以根据tss的结构知道，里面的esp0、esp1、esp2就表示0环、1环、2环，ss[0",{"_index":9292,"title":{},"body":{"1015831":{}}}],["那么我们也就得出结论，在初始化进程时，会通过检查peb中的beingdebugged字段来判断当前进程是否正在被调试。如果当前进程正在被调试，就会为它添加一个",{"_index":4757,"title":{},"body":{"3440657":{}}}],["那么我们再使用if...else来实现相同功能",{"_index":1818,"title":{},"body":{"1015843":{}}}],["那么我们可以根据这个结构去获取网卡的信息",{"_index":10127,"title":{},"body":{"1015818":{}}}],["那么我们可以看见对应的宏就是wm_create，这个消息的意思就是窗口创建，所以我们有很多消息是不需要关注的，而且消息时刻都在产生，非常非常多",{"_index":7807,"title":{},"body":{"1015833":{}}}],["那么我们如何实现临界区呢？第一，我们可以自己来写，但是这需要一定门槛，先不过多的去了解；第二，可以使用windows提供的api来实现",{"_index":7501,"title":{},"body":{"1015833":{}}}],["那么我们想要了解线性地址到底是被谁占用的，就可以来看一下成员controlarea，它同样也是一个结构体：_control_",{"_index":6712,"title":{},"body":{"2949228":{}}}],["那么我们来看一下int中的第一个成员（地址：0x0001d45e）指向的结构体，如下所示，这里的第一个成员hint不为空所以我们可以通过它去导入表中找函数地址，第二个成员0x45，从它开始往后直到0x00就是完整的函数名字exitthr",{"_index":6589,"title":{},"body":{"1015828":{}}}],["那么我们来看下间接调用的流程是什么",{"_index":3585,"title":{},"body":{"1015840":{}}}],["那么接着我们来看一下object成员指向的等待对象，我们知道它是一个_kevent结构体，该结构体只有一个成员，即_dispatcher_header，因此我们可以根据object的地址代入_dispatcher_header结构体进行查看",{"_index":10592,"title":{},"body":{"2424889":{}}}],["那么接着我们需要构建一个jmp",{"_index":9135,"title":{},"body":{"1015831":{}}}],["那么数组在内存中是如何分配的呢？在之前我们学习过很多数据类型，在这里我们以char类型举例",{"_index":1914,"title":{},"body":{"1015843":{}}}],["那么是否可以让我们调用更加简单，更加方便呢？如下代码就可以",{"_index":3309,"title":{},"body":{"1015840":{}}}],["那么有了这些基础的铺垫之后我们可以通过编写代码来实现seh异常处理，这段代码与veh异常处理差不多，唯一的区别在于在我们将fs:[0]指向seh结构体之前需要先保存原fs:[0]的值，然后在结构体的next赋值时将原fs:[0]的值写入，因为可能在原seh链表中是有内容的，最后在seh异常处理函数结束，将fs:[0]的值还原",{"_index":4397,"title":{},"body":{"2949166":{}}}],["那么模版其原理是什么，编译器做了什么工作呢？我们可以看一下如下代码的反汇编代码",{"_index":3638,"title":{},"body":{"1015840":{}}}],["那么物理页面只有这些不够用该怎么办？这时候操作系统会分配硬盘空间来做虚拟内存。我们可以通过系统属性来查看、更改当前分配的虚拟内存大小",{"_index":7906,"title":{},"body":{"1015833":{}}}],["那么短调用的栈图变化就可以使用如下图来表示",{"_index":9166,"title":{},"body":{"1015831":{}}}],["那么结构体的特点是什么呢",{"_index":1983,"title":{},"body":{"1015843":{}}}],["那么继承是什么？这就很好理解了，继承的本质就是数据复制，子类（派生类）继承（复制）父类（基类）的数据，在这里person父类（基类），teacher为子类（派生类）；继承可以减少重复代码的编写",{"_index":3381,"title":{},"body":{"1015840":{}}}],["那么编译器到底是做了什么工作，才能根据我们传入的对象来进行间接调用的呢？这是因为虚表",{"_index":3592,"title":{},"body":{"1015840":{}}}],["那么虚表在哪呢？可以通过vc6来寻找虚标，先创建对象然后下断点运行查看，如下图中，可以很清晰的看见对象t除了继承person父类的age、sex以及本身的level成员外，还有一个__vfptr，上面有一个地址就是0x00422024，那这个地址就是虚表，这个表里面存储的就是函数的地址",{"_index":3594,"title":{},"body":{"1015840":{}}}],["那么赋值运算符实现的对象复制是否会当前复制对象继承的父类进行复制呢",{"_index":3694,"title":{},"body":{"1015840":{}}}],["那么转换过来就是01110000000",{"_index":5435,"title":{},"body":{"1015825":{}}}],["那么这一块物理内存能有多少物理页呢？我们可以将总数/4",{"_index":7904,"title":{},"body":{"1015833":{}}}],["那么这个eax又是从何而来呢，我们可以向上找一下，eax的值是目标线程的栈底，并且将堆栈中存储的浮点寄存器和_trap_frame结构体中用于虚拟8086模式下的成员去除，也就是进行偏移位的修正",{"_index":11248,"title":{},"body":{"1703937":{}}}],["那么这个值我们就对应给到第一个节表成员中的sizeofrawdata、misç",{"_index":6446,"title":{},"body":{"1015828":{}}}],["那么这时候一下就清楚了new的本质，实际上就是malloc+构造函数，同样的方法可以跟下delete看下它跟free函数",{"_index":3467,"title":{},"body":{"1015840":{}}}],["那么这时候我们就需要一个能够放在内核中的令牌来控制，而实现这个作用的，我们称之为互斥体",{"_index":7528,"title":{},"body":{"1015833":{}}}],["那么这样就会存在一个缺点，就是你的代码都会被客户看见，为了解决这个问题我们可以将c++对象打包到dll中",{"_index":2590,"title":{},"body":{"1015823":{}}}],["那么这样我们如何新增节呢？如果pe的dos块没有被占用的情况下，我们完全可以将pe头向上提升，替换dos块的部分，这样就可以多出一块空间出来，但是如果当前pe文件的dos块被占用，这种方法显然就不可取了。所以，我们想要实现新增节可以采用合并其他节的方法，给我们新增的节表成员留出空间",{"_index":6419,"title":{},"body":{"1015828":{}}}],["那么这段代码，拷贝构造函数不仅可以将当前对象的内容复制，还可以将父类的内容复制过来",{"_index":3673,"title":{},"body":{"1015840":{}}}],["那么通知类型到底是什么？我们可以写一段代码来看一下",{"_index":7574,"title":{},"body":{"1015833":{}}}],["那么通知类型实现的原理是什么呢？实际上这个跟waitforsingleobject函数有关，我们可以看下",{"_index":7596,"title":{},"body":{"1015833":{}}}],["那么通过以上的分析，我们发现虽然intel的初衷是希望操作系统用tss去存储更多内容，但是在windows的实际实现中只用到了tss的esp0、cr3、io权限位图这3个成员（实际对于当前的windows系统来说只有2个）来进行线程切换",{"_index":11251,"title":{},"body":{"1703937":{}}}],["那么问题来了，private修饰的函数或者变量真的不能访问吗？并不是，只是我们没有办法通过正常的方式去使用，但是我们可以使用指针的方式去调用",{"_index":3428,"title":{},"body":{"1015840":{}}}],["那么问题来了，抽象类有什么意义呢？我们可以把抽象类看作是对子类的一种约束，或者认为其（抽象类）就是定义一种标准",{"_index":3661,"title":{},"body":{"1015840":{}}}],["那么除了32位的通用寄存器外还有8位、16位，我们分别来看一下",{"_index":5156,"title":{},"body":{"1015825":{}}}],["那么除了入口程序以外，如果我们另起一个线程，是否也会给我们提供一个异常处理的防线呢，我们可以编写一段代码来另起一个线程",{"_index":4483,"title":{},"body":{"2949166":{}}}],["那么高位字节就会被写入0x02，这是因为handle_flag_protect_from_close宏的值为0x00000002，取了其最低字节写入第一部分的高位字节中，因此第一部分最终的值就是0x020",{"_index":8714,"title":{},"body":{"1933378":{}}}],["那么，在扩大节之后又该如何去插入自己的代码调用呢？如果按照之前插入空白区的方法，根据当前的指令地址再加上imagebase去调用，很明显这是不可取的，因为当前文件与内存对齐是不一致的，我们想要去掉用就要知道在内存中当前指令的地址",{"_index":6387,"title":{},"body":{"1015828":{}}}],["那么，这8个位具体是如何工作的呢，intel操作手册给出了一张表(",{"_index":12012,"title":{},"body":{"1015817":{}}}],["那也就是说this指针是编译器默认传入的，通常会通过ecx进行参数的传递，不管你用还是不用，它都存在着",{"_index":3325,"title":{},"body":{"1015840":{}}}],["那也就说明了一点，挂起本质上挂起的是线程，进程还是会创建的，所以，最终如果想恢复的话也是恢复线程",{"_index":7365,"title":{},"body":{"1015833":{}}}],["那假设我们需要做一个任意两个数的加法函数该怎么办？这时候就需要想办法将我们的任意两个数传入函数中，这也就是参数；加法函数计算结果就称之为返回值",{"_index":5369,"title":{},"body":{"1015825":{}}}],["那如果你在32位的模式下去使用16位的寄存器，就可以在硬编码之前加上6",{"_index":11811,"title":{},"body":{"1015817":{}}}],["那如果非要这样使用该怎么办呢？我们可以使用指针传递的方式来，修改一下代码",{"_index":3304,"title":{},"body":{"1015840":{}}}],["那就说明private修饰的成员与普通成员没有区别，只有编译器会检测",{"_index":3429,"title":{},"body":{"1015840":{}}}],["那我们就需要在这里手动修改被除数0为1，然后再次f9，就会顺利的执行_try分支内的代码",{"_index":4783,"title":{},"body":{"3440657":{}}}],["那是因为操作系统可以将坐标之类的作为索引，去找到对应的窗口，窗口在内核中是有窗口对象的，而这个窗口对象就会包含一个成员，这个成员就是线程对象的指针，线程又包含了消息，所以这样一个顺序就很容易理解了",{"_index":7698,"title":{},"body":{"1015833":{}}}],["那这个也就很好理解了：这一段就表示返回的是cwinapp类中的classcwinapp的地址然后强转为了cruntimeclass指针",{"_index":234,"title":{},"body":{"1015822":{}}}],["那这个地址就是teacher的成员函数print的地址",{"_index":3597,"title":{},"body":{"1015840":{}}}],["都会跳转到如下图所示的代码片段，然后调用_dbgkforwardexception函数，将异常发送给3环调试器",{"_index":4804,"title":{},"body":{"3440657":{}}}],["采集函数",{"_index":4594,"title":{},"body":{"3440657":{}}}],["采集流程",{"_index":4596,"title":{},"body":{"3440657":{}}}],["释放信号量对象的函数就是releasesemaphore，它的语法格式如下",{"_index":10703,"title":{},"body":{"2424889":{}}}],["里面的成员）去转换参数",{"_index":529,"title":{},"body":{"1015822":{}}}],["里面的成员，在当前值为afxsig_vwp，这是一个宏，我们可以跟进查看一下",{"_index":437,"title":{},"body":{"1015822":{}}}],["重写debugactiveprocess函数：重新实现debugactiveprocess函数，以增加对反调试技术绕过能力",{"_index":4564,"title":{},"body":{"3440657":{}}}],["重写函数",{"_index":617,"title":{},"body":{"1015822":{}}}],["重定位表",{"_index":6596,"title":{},"body":{"1015828":{}}}],["重定位表中有一个结构体，它一共有8字节",{"_index":6600,"title":{},"body":{"1015828":{}}}],["重定位表是什么？假设某一pe文件使用了一些模块，这些模块都有自己的imagebase（在内存中开始的地址），但是实际上在内存中模块的imagebase被别人占用了，这时候模块就需要偏移，换一个新的内存地址去展开，假设在这模块中有很多已经写好了地址的硬编码（但凡涉及到直接寻址的指令都需要进行重定位处理），当换了地址之后就找不到了，甚至会出现安全隐患，所以硬编码的地址是需要随着偏移而去修改的，这时候就需要一张表去记录需要修正的位置，便于去根据对应偏移修正，这张表我们就称之为重定位表；一般来说，exe文件是没有重定位表的，因为它不会提供函数给其他人用（导出表），所以运行时它理应是第一个载入内存中的，而dll之类的pe文件则一定是需要重定位表的，因为它并不一定会加载在imagebase上",{"_index":6598,"title":{},"body":{"1015828":{}}}],["重定位表是按照一个物理页（4kb）进行存储的，也就表示一个4kb内存有需要修正的位置，就会有一个重定位块，一个重定位表只管自己当前的物理页的重定位",{"_index":6614,"title":{},"body":{"1015828":{}}}],["重定位表的位置信息与导入、导出表一样，在扩展pe头的最后一个成员中的第6个结构体，结构体的成员与导入、导出表一样，分别表示重定位表的起始位置和大小",{"_index":6599,"title":{},"body":{"1015828":{}}}],["重要的dll文件",{"_index":7143,"title":{},"body":{"1015833":{}}}],["重载其他的运算符",{"_index":3617,"title":{},"body":{"1015840":{}}}],["重载内核",{"_index":6678,"title":{},"body":{"1933380":{}}}],["重载完成之后我们是否就可以使用了呢，实际上并不能，我们在系统调用章节学习时了解到3环api本质上就是系统调用，进入0环之后执行的是",{"_index":6681,"title":{},"body":{"1933380":{}}}],["重载赋值运算符",{"_index":3689,"title":{},"body":{"1015840":{}}}],["鈥",{"_index":325,"title":{},"body":{"1015822":{}}}],["鈱堚寜(0x7",{"_index":6432,"title":{},"body":{"1015828":{}}}],["鈱堚寜(0x780",{"_index":6430,"title":{},"body":{"1015828":{}}}],["鈱堚寜(max(sizeofraw",{"_index":6422,"title":{},"body":{"1015828":{}}}],["鈱堚寜(sizeofrawdata(0x80",{"_index":6378,"title":{},"body":{"1015828":{}}}],["銆佹帶鍒跺彴/dll(3",{"_index":6166,"title":{},"body":{"1015828":{}}}],["鍏ユ爤",{"_index":11135,"title":{},"body":{"1703937":{}}}],["鍏ㄥ眬鍙橀噺",{"_index":3725,"title":{},"body":{"1015840":{},"1933380":{}}}],["鍏ㄥ眬鍙鐨勫彉閲忥紝绫诲瀷璁板綍淇℃伅缁撴瀯浣揅runtimecl",{"_index":264,"title":{},"body":{"1015822":{}}}],["鍏变韩妯″紡锛屽鏋滀负0鍒欐槸鎺掍粬鎬э紝灏辨槸鐩墠鍦ㄤ娇鐢ㄦ椂鍏朵粬浜烘槸鏃犳硶浣跨敤鐨",{"_index":8112,"title":{},"body":{"1015833":{}}}],["鍏变韩鍐呭瓨",{"_index":7967,"title":{},"body":{"1015833":{}}}],["鍏变韩鍐呭瓨鐨勫ぇ灏忥紝涓�鑸笌鐗╃悊椤靛ぇ灏忎竴鑷",{"_index":7964,"title":{},"body":{"1015833":{}}}],["鍏堝垽鏂璖entmessageslisthead鏄惁鏈夋秷鎭紝濡傛灉鏈夊氨澶勭悊鎺",{"_index":4000,"title":{},"body":{"3440655":{}}}],["鍏堝墠妯″紡锛岃〃绀鸿皟鐢ㄦ潵鑷粈涔堟ā寮忥紝0琛ㄧず鍐呮牳妯″紡锛�1琛ㄧず鐢ㄦ埛妯″紡",{"_index":4280,"title":{},"body":{"2949166":{}}}],["鍏宠仈",{"_index":7680,"title":{},"body":{"1015833":{}}}],["鍏惰儗鍚庡張鏄竴涓畯锛岀户缁窡杩",{"_index":271,"title":{},"body":{"1015822":{}}}],["鍏抽棴",{"_index":8416,"title":{},"body":{"1015833":{}}}],["鍏抽棴杩涚▼鍙ユ焺",{"_index":8469,"title":{},"body":{"1015833":{}}}],["鍏抽棴濂楁帴瀛",{"_index":9722,"title":{},"body":{"1015818":{}}}],["鍏抽棴璧勬簮",{"_index":8251,"title":{},"body":{"1015833":{}}}],["鍏抽棴鍙ユ焺锛岃繖鏍锋墠鑳介噴鏀剧墿鐞嗛〉锛屼絾闇�瑕佺瓑寰呯墿鐞嗛〉浣跨敤瀹屾瘯鎵嶄細鐪熸鐨勯噴鏀撅紝杩欓噷鍙槸鍛婅瘔绯荤粺鎴戜滑褰撳墠杩涚▼涓嶄娇鐢ㄨ鍙ユ焺锛堢墿鐞嗛〉锛夌舰浜",{"_index":7979,"title":{},"body":{"1015833":{}}}],["鍏抽棴鏂囦欢",{"_index":8138,"title":{},"body":{"1015833":{}}}],["鍏抽棴鏄犲皠锛屽叧闂槧灏勫垯琛ㄧず閲婃斁浜嗙嚎褰㈠湴鍧�锛屼絾鏄墿鐞嗛〉杩樺瓨鍦",{"_index":7977,"title":{},"body":{"1015833":{}}}],["鍏抽棴閫傞厤鍣",{"_index":10213,"title":{},"body":{"1015818":{}}}],["鍏抽棴閫傞厤鍣紝閲婃斁璧勬簮(pcap_freealldevs鍑芥暟",{"_index":10153,"title":{},"body":{"1015818":{}}}],["鍏挜鍔犲瘑鍑芥暟",{"_index":10530,"title":{},"body":{"1015818":{}}}],["鍐",{"_index":2067,"title":{},"body":{"1015843":{}}}],["鍐冲畾杩斿洖鐨勫彞鏌勬槸鍚﹀彲浠ヨ瀛愯繘绋嬬户鎵�,涓篘ull锛屽垯璇ュ彞鏌勪笉鑳借缁ф壙",{"_index":10671,"title":{},"body":{"2424889":{}}}],["鍐呭瓨涓暣涓狿e鏂囦欢鐨勬槧灏勭殑灏哄",{"_index":6160,"title":{},"body":{"1015828":{}}}],["鍐呭瓨澶у皬",{"_index":7936,"title":{},"body":{"1015833":{}}}],["鍐呭瓨瀵归綈",{"_index":6144,"title":{},"body":{"1015828":{}}}],["鍐呭瓨鍖哄煙鐨勫湴鍧",{"_index":7935,"title":{},"body":{"1015833":{}}}],["鍐呭瓨鏂偣锛堣闂繚渚嬶級",{"_index":4892,"title":{},"body":{"3440657":{}}}],["鍐呭瓨闀滃儚鍩哄潃",{"_index":6142,"title":{},"body":{"1015828":{}}}],["鍐呮牳apc鏄惁姝ｅ湪鎵ц",{"_index":10781,"title":{},"body":{"2424869":{}}}],["鍐呮牳浜掓枼浣",{"_index":10762,"title":{},"body":{"2424889":{}}}],["鍐呮牳瀵硅薄鐨勫彞鏌勬暟缁",{"_index":7446,"title":{},"body":{"1015833":{}}}],["鍐呮牳瀵硅薄鐨勬暟閲",{"_index":7444,"title":{},"body":{"1015833":{}}}],["鍐呮牳瀵硅薄锛岃繖涓璞″彲浠ヤ负鎴戜滑鍑嗗鐗╃悊鍐呭瓨锛岃繕鍙互灏嗘枃浠舵槧灏勫埌鐗╃悊椤",{"_index":7950,"title":{},"body":{"1015833":{}}}],["鍐呮牳瀵硅薄锛氬噯澶囧ソ鐗╃悊椤碉紝鏃犳晥鍙ユ焺鍊",{"_index":7971,"title":{},"body":{"1015833":{}}}],["鍐欏叆琛ㄥご瀛楁瘝",{"_index":910,"title":{},"body":{"1015822":{}}}],["鍐欏叆鏁版嵁鑷崇紦鍐插尯",{"_index":5794,"title":{},"body":{"1015847":{}}}],["鍐欏叆鏂囦欢",{"_index":8167,"title":{},"body":{"1015833":{}}}],["鍐欐枃浠",{"_index":8250,"title":{},"body":{"1015833":{}}}],["鍑嗗鐨勫嚱鏁",{"_index":5845,"title":{},"body":{"1015847":{}}}],["鍑芥暟",{"_index":3726,"title":{},"body":{"1015840":{}}}],["鍑芥暟浣",{"_index":1351,"title":{},"body":{"1015840":{},"1015843":{}}}],["鍑芥暟璇硶鏍煎紡锛",{"_index":8274,"title":{},"body":{"1015833":{}}}],["鍑芥暟鍙傛暟鍒楄",{"_index":8370,"title":{},"body":{"1015833":{}}}],["鍑芥暟鍚",{"_index":8321,"title":{},"body":{"1015833":{}}}],["鍑芥暟鍚嶇о",{"_index":8369,"title":{},"body":{"1015833":{}}}],["鍑芥暟鍚�(鍙傛暟鍒楄",{"_index":1350,"title":{},"body":{"1015840":{},"1015843":{}}}],["鍑芥暟鍚�/搴忓彿",{"_index":6527,"title":{},"body":{"1015828":{}}}],["鍑芥暟鎰忎箟锛氬垹闄ゅ鍣ㄥ熬閮ㄧ殑涓�涓厓绱",{"_index":11367,"title":{},"body":{"1015814":{}}}],["鍑芥暟鎰忎箟锛氬垹闄ゆ寚瀹氫綅缃殑鍏冪礌",{"_index":11371,"title":{},"body":{"1015814":{}}}],["鍑芥暟鎰忎箟锛氬垹闄ゆ寚瀹氬尯闂村唴鐨勫厓绱",{"_index":11374,"title":{},"body":{"1015814":{}}}],["鍑芥暟鎰忎箟锛氬垹闄ら閮ㄧ殑鍏冪礌",{"_index":11390,"title":{},"body":{"1015814":{}}}],["鍑芥暟鎰忎箟锛氬皢鍏冪礌鎻掑叆鍒伴閮",{"_index":11387,"title":{},"body":{"1015814":{}}}],["鍑芥暟鎰忎箟锛氬鍔犱竴涓厓绱犲埌瀹瑰櫒鐨勫熬閮",{"_index":11350,"title":{},"body":{"1015814":{}}}],["鍑芥暟鎸囬拡锛屽畾涔変簡涓�涓嚱鏁版寚閽坢_pfncreateobject鐢ㄦ潵瀛樻斁闇�瑕佹敮鎸佸姩鎬佸垱寤虹被鐨凜reateobject鍑芥暟",{"_index":321,"title":{},"body":{"1015822":{}}}],["鍑芥暟鐨剈ser鍙傛暟",{"_index":10184,"title":{},"body":{"1015818":{}}}],["鍒ゆ柇",{"_index":3067,"title":{},"body":{"1015823":{}}}],["鍒ゆ柇createfilemapping鏄惁鎵ц鎴愬姛",{"_index":8241,"title":{},"body":{"1015833":{}}}],["鍒ゆ柇createfile鏄惁鎵ц鎴愬姛",{"_index":8236,"title":{},"body":{"1015833":{}}}],["鍒ゆ柇createremotethread鏄惁鎵ц鎴愬姛",{"_index":8412,"title":{},"body":{"1015833":{}}}],["鍒ゆ柇iocreatedevice鍑芥暟鏄惁鎵ц鎴愬姛",{"_index":5660,"title":{},"body":{"1015847":{}}}],["鍒ゆ柇openprocess鏄惁鎵ц鎴愬姛",{"_index":8407,"title":{},"body":{"1015833":{}}}],["鍒ゆ柇point鐨勭偣鏄惁鍦ㄥ綋鍓岰rect鐨勮寖鍥翠腑",{"_index":821,"title":{},"body":{"1015822":{}}}],["鍒ゆ柇娑堟伅鏄惁鏄鎴峰尯锛屾槸鐨勮瘽鍒欏皢璇ユ秷鎭浆涓洪潪瀹㈡埛鍖烘秷鎭",{"_index":970,"title":{},"body":{"1015822":{}}}],["鍒ゆ柇浜掓枼浣撴槸鍚﹀凡缁忓瓨鍦紝濡傛灉瀛樺湪鍒欒〃绀虹▼搴忚澶氭鎵撳紑",{"_index":7557,"title":{},"body":{"1015833":{}}}],["鍒ゆ柇浜掓枼浣撴槸鍚﹀垱寤哄け璐",{"_index":7556,"title":{},"body":{"1015833":{}}}],["鍒ゆ柇浼戠湢鐘舵�佺殑绾跨▼浼戠湢鏃堕棿鏄惁灏忎簬绋嬪簭鍚姩鑷充粖鐨勬椂闂达紝濡傛灉鏄垯灏嗙嚎绋嬬姸鎬佽皟鏁翠负绛夊緟",{"_index":11164,"title":{},"body":{"1703937":{}}}],["鍒ゆ柇鍑芥暟",{"_index":324,"title":{},"body":{"1015822":{}}}],["鍒ゆ柇鍑芥暟锛屽垽鏂槸鍚︾埗绫",{"_index":250,"title":{},"body":{"1015822":{}}}],["鍒ゆ柇鎺ユ敹娑堟伅鐨勮繑鍥炲�硷紝澶т簬0鍒欒〃绀烘帴鏀舵垚鍔熴",{"_index":10090,"title":{},"body":{"1015818":{}}}],["鍒ゆ柇鎿嶄綔鐮",{"_index":5789,"title":{},"body":{"1015847":{}}}],["鍒ゆ柇鏄惁涓�0",{"_index":10133,"title":{},"body":{"1015818":{}}}],["鍒ゆ柇鏄惁鏄‖浠舵柇鐐瑰鑷寸殑寮傚父",{"_index":4945,"title":{},"body":{"3440657":{}}}],["鍒ゆ柇鏄惁鏄涓�娆″垎鍙戣繖涓紓甯革紝瀵逛簬鍚屼竴涓紓甯革紝windows鏈�澶氬垎鍙戜袱娆",{"_index":4282,"title":{},"body":{"2949166":{}}}],["鍒嗕负",{"_index":10501,"title":{},"body":{"1015818":{}}}],["鍒嗗埆寮瑰嚭瑕佸垏鎹㈢殑绾跨▼缁撴瀯浣撳垵濮嬪寲鐨勫瘎瀛樺櫒鍊",{"_index":11183,"title":{},"body":{"1703937":{}}}],["鍒嗗彂娑堟伅锛氬氨鏄粰绯荤粺璋冪敤绐楀彛澶勭悊鍑芥暟",{"_index":3985,"title":{},"body":{"1015833":{},"3440655":{}}}],["鍒嗛厤3娈靛唴瀛橈細瀛樺偍鍙傛暟锛岀嚎绋嬪嚱鏁帮紝鏂囦欢鍚",{"_index":8642,"title":{},"body":{"1015833":{}}}],["鍒嗛厤绌洪棿",{"_index":8183,"title":{},"body":{"1015833":{}}}],["鍒嗛厤鐨勫ぇ灏忥紝涓�涓墿鐞嗛〉澶у皬鏄�0x1000锛�4kb锛夛紝鐪嬩綘闇�瑕佺敵璇峰灏戜釜鐗╃悊椤靛氨涔樹互澶氬皯",{"_index":7925,"title":{},"body":{"1015833":{}}}],["鍒嗛厤鐨勭被鍨嬶紝甯哥敤鐨勬槸mem_commit锛堝崰鐢ㄧ嚎鎬у湴鍧�锛屼篃闇�瑕佺墿鐞嗗唴瀛橈級鍜孧em_reserve锛堝崰鐢ㄧ嚎鎬у湴鍧�锛屼絾涓嶉渶瑕佺墿鐞嗗唴瀛橈級",{"_index":7927,"title":{},"body":{"1015833":{}}}],["鍒囨崲cr3鐨勫�间负b杩涚",{"_index":11302,"title":{},"body":{"1703937":{}}}],["鍒囨崲绾跨",{"_index":11174,"title":{},"body":{"1703937":{}}}],["鍒囨崲绾跨▼...鍐嶆鑾峰緱cpu鏃讹紝浠庤繖閲屽紑濮嬫墽琛屻",{"_index":10640,"title":{},"body":{"2424889":{}}}],["鍒囨崲鍥濩r3鐨勫",{"_index":11306,"title":{},"body":{"1703937":{}}}],["鍒椼�佽寰幆鍒涘缓",{"_index":902,"title":{},"body":{"1015822":{}}}],["鍒楀悕",{"_index":8844,"title":{},"body":{"1015850":{}}}],["鍒涘缓\"璁剧疆\"鎸夐挳",{"_index":7858,"title":{},"body":{"1015833":{}}}],["鍒涘缓\"鑾峰彇\"鎸夐挳",{"_index":7867,"title":{},"body":{"1015833":{}}}],["鍒涘缓2涓嚎绋",{"_index":7585,"title":{},"body":{"1015833":{}}}],["鍒涘缓filemapping瀵硅薄",{"_index":8240,"title":{},"body":{"1015833":{}}}],["鍒涘缓iunknow",{"_index":3266,"title":{},"body":{"1015823":{}}}],["鍒涘缓杩涚",{"_index":4580,"title":{},"body":{"3440657":{}}}],["鍒涘缓杩滅▼绾跨",{"_index":8410,"title":{},"body":{"1015833":{}}}],["鍒涘缓杩滅▼绾跨▼锛屽姞杞紻l",{"_index":8466,"title":{},"body":{"1015833":{}}}],["鍒涘缓浜嗕竴涓鍣ㄦ槸鎸夌収澶т簬姣旇緝鍣ㄦ帓搴忕殑",{"_index":11589,"title":{},"body":{"1015814":{}}}],["鍒涘缓浜嗕竴涓鍣ㄦ槸鎸夌収灏忎簬姣旇緝鍣ㄦ帓搴忕殑",{"_index":11586,"title":{},"body":{"1015814":{}}}],["鍒涘缓浜嬩欢",{"_index":7581,"title":{},"body":{"1015833":{}}}],["鍒涘缓浜掓枼浣",{"_index":7537,"title":{},"body":{"1015833":{}}}],["鍒涘缓涓�涓┖鐨勫鍣紝key鏄痠nt绫诲瀷锛寁alue鏄痵tring绫诲瀷锛岄粯璁や娇鐢ㄥ皬浜庢瘮杈冨櫒锛屼篃灏辨槸浠庡皬鍒板ぇ鎺掑簭",{"_index":11498,"title":{},"body":{"1015814":{}}}],["鍒涘缓涓�涓┖鐨勫鍣紝榛樿浣跨敤灏忎簬姣旇緝鍣紝涔熷氨鏄粠灏忓埌澶ф帓搴",{"_index":11432,"title":{},"body":{"1015814":{}}}],["鍒涘缓涓�涓┖鐨勫鍣紝浣跨敤澶т簬姣旇緝鍣紝涔熷氨鏄粠澶у埌灏忔帓搴",{"_index":11437,"title":{},"body":{"1015814":{}}}],["鍒涘缓涓�涓┖鐨勫鍣紝浣跨敤灏忎簬姣旇緝鍣紝涔熷氨鏄粠灏忓埌澶ф帓搴",{"_index":11434,"title":{},"body":{"1015814":{}}}],["鍒涘缓涓�涓┖鐨勫鍣紝浣跨敤灏忎簬姣旇緝鍣紝涔熷氨鏄伒寰猭ey鐨勫�间粠灏忓埌澶ф帓搴",{"_index":11500,"title":{},"body":{"1015814":{}}}],["鍒涘缓涓�涓┖鐨勫鍣紝鍏冪礌绫诲瀷涓篿nt绫诲瀷",{"_index":11335,"title":{},"body":{"1015814":{}}}],["鍒涘缓涓�涓�100涓厓绱犵殑瀹瑰櫒锛屾瘡涓厓绱犵殑鍊间负8",{"_index":11339,"title":{},"body":{"1015814":{}}}],["鍒涘缓涓�涓�100涓厓绱犵殑瀹瑰櫒锛屾瘡涓厓绱犻粯璁ゅ�间负0",{"_index":11337,"title":{},"body":{"1015814":{}}}],["鍒涘缓澶辫触",{"_index":7561,"title":{},"body":{"1015833":{}}}],["鍒涘缓濂楁帴瀛",{"_index":9716,"title":{},"body":{"1015818":{}}}],["鍒涘缓瀹瑰櫒",{"_index":11542,"title":{},"body":{"1015814":{}}}],["鍒涘缓璁惧瀵硅薄",{"_index":5646,"title":{},"body":{"1015847":{}}}],["鍒涘缓璁惧鍚嶇о",{"_index":5641,"title":{},"body":{"1015847":{}}}],["鍒涘缓璋冭瘯杩涚",{"_index":4630,"title":{},"body":{"3440657":{}}}],["鍒涘缓绐楀彛",{"_index":4122,"title":{},"body":{"1015820":{},"1015833":{}}}],["鍒涘缓绗﹀彿閾炬帴",{"_index":5674,"title":{},"body":{"1015847":{}}}],["鍒涘缓绾跨",{"_index":4578,"title":{},"body":{"1015833":{},"3440657":{}}}],["鍒涘缓缁撴瀯浣",{"_index":2191,"title":{},"body":{"1015843":{}}}],["鍒涘缓缂栬緫妗",{"_index":7845,"title":{},"body":{"1015833":{}}}],["鍒涘缓鍏ㄥ眬鍙橀噺",{"_index":7516,"title":{},"body":{"1015833":{}}}],["鍒涘缓鍏变韩鍐呭瓨",{"_index":8507,"title":{},"body":{"1015833":{}}}],["鍒涘缓鍙傛暟",{"_index":466,"title":{},"body":{"1015822":{}}}],["鍒涘缓鎸夐挳锛屽熀浜巔widg",{"_index":4163,"title":{},"body":{"1015820":{}}}],["鍒涘缓鏂囦欢",{"_index":8120,"title":{},"body":{"1015833":{}}}],["鍒涘缓鏂囦欢锛堣幏鍙栨枃浠跺彞鏌勶級",{"_index":8234,"title":{},"body":{"1015833":{}}}],["鍒涘缓鐢荤瑪锛岀敾绗旀牱寮忎负铏氱嚎锛岀嚎鏉″搴�(浣跨敤闈炲疄绾垮彧鑳戒娇鐢�1)锛岄鑹蹭负绾㈣壊",{"_index":845,"title":{},"body":{"1015822":{}}}],["鍒涘缓鐢荤瑪锛岃缃嚎鏉＄殑灞炴",{"_index":7671,"title":{},"body":{"1015833":{}}}],["鍒涘缓鐨勪簨浠跺璞＄被鍨",{"_index":10672,"title":{},"body":{"2424889":{}}}],["鍒涘缓鐨勮澶囧璞★紝鎸囧悜鎺ユ敹鎸囧悜鏂板垱寤虹殑",{"_index":5657,"title":{},"body":{"1015847":{}}}],["鍒涘缓鐩綍锛屽鏋滀笉鎸囧畾缁濆璺緞锛屽垯榛樿浼氬湪绋嬪簭褰撳墠鐩綍涓",{"_index":8072,"title":{},"body":{"1015833":{}}}],["鍒涘缓骞舵樉绀虹獥鍙",{"_index":7750,"title":{},"body":{"1015833":{}}}],["鍒濆鍖",{"_index":120,"title":{},"body":{"1015818":{},"1015822":{},"1015823":{}}}],["鍒濆鍖朆ignum缁撴瀯",{"_index":10524,"title":{},"body":{"1015818":{}}}],["鍒濆鍖朇reatefile鍙傛暟",{"_index":8653,"title":{},"body":{"1015833":{}}}],["鍒濆鍖朇reatfile鏂囦欢鍚",{"_index":8663,"title":{},"body":{"1015833":{}}}],["鍒濆鍖栦竴涓猂sa缁撴瀯",{"_index":10470,"title":{},"body":{"1015818":{}}}],["鍒濆鍖栧紑濮嬫椂闂村拰缁撴潫鏃堕棿",{"_index":10398,"title":{},"body":{"1015818":{}}}],["鍒濆鍖栨暟鎹",{"_index":10419,"title":{},"body":{"1015818":{}}}],["鍒濆鍖栨暟鎹暱搴",{"_index":10402,"title":{},"body":{"1015818":{}}}],["鍒濆鍖栨椂淇濈暀鐨勫爢澶у皬",{"_index":6174,"title":{},"body":{"1015828":{}}}],["鍒濆鍖栨椂淇濈暀鐨勬爤澶у皬",{"_index":6170,"title":{},"body":{"1015828":{}}}],["鍒濆鍖栨椂瀹炶返鎻愪氦鐨勫ぇ灏",{"_index":6176,"title":{},"body":{"1015828":{}}}],["鍒濆鍖栨椂瀹為檯鎻愪氦鐨勫ぇ灏",{"_index":6172,"title":{},"body":{"1015828":{}}}],["鍒濆鍖栫▼搴",{"_index":4120,"title":{},"body":{"1015820":{}}}],["鍒濆鍖栫嚎绋嬬殑淇℃伅",{"_index":11121,"title":{},"body":{"1703937":{}}}],["鍒濆鍖栫敾鍒凤紝ltgray_brush",{"_index":785,"title":{},"body":{"1015822":{}}}],["鍒濆鍖栫殑signalstate鍊",{"_index":10696,"title":{},"body":{"2424889":{}}}],["鍒濆鍖栫殑淇″彿鐘舵",{"_index":10673,"title":{},"body":{"2424889":{}}}],["鍒濆鍖栵紝鐢�0濉厖",{"_index":868,"title":{},"body":{"1015822":{}}}],["鍒濆鍫嗘爤",{"_index":7400,"title":{},"body":{"1015833":{}}}],["鍒濆鐘舵�侊紝鍐冲畾鍒涘缓鍑烘潵鏃跺�欐槸鍚︽湁淇″彿锛屾湁涓篢rue锛屾病鏈変负fal",{"_index":7572,"title":{},"body":{"1015833":{}}}],["鍒犻櫎杩唬鍣ㄦ寚鍚戠殑鍏冪礌",{"_index":11467,"title":{},"body":{"1015814":{}}}],["鍒犻櫎瀛楁",{"_index":8836,"title":{},"body":{"1015850":{}}}],["鍒犻櫎鍏冪礌",{"_index":11575,"title":{},"body":{"1015814":{}}}],["鍒犻櫎鎸囧畾杩唬鍣ㄥ尯闂村唴鐨勫厓绱",{"_index":11473,"title":{},"body":{"1015814":{}}}],["鍒犻櫎鎸囧畾绱㈠紩鐨勫瓧绗︿覆閫夐",{"_index":1155,"title":{},"body":{"1015822":{}}}],["鍒犻櫎鏂囦欢",{"_index":8181,"title":{},"body":{"1015833":{}}}],["鍒犻櫎鏍堥《鍏冪礌",{"_index":11549,"title":{},"body":{"1015814":{}}}],["鍒犻櫎鐩綍",{"_index":8078,"title":{},"body":{"1015833":{}}}],["鍒犻櫎闃熷垪澶撮儴锛堟渶澶э級鐨勫厓绱狅紝浣嗕笉杩斿洖",{"_index":11598,"title":{},"body":{"1015814":{}}}],["鍔ㄦ�佸垱寤哄嚱鏁",{"_index":323,"title":{},"body":{"1015822":{}}}],["鍔ㄦ�佽幏鍙朅ddvectoredexceptionhandler鍑芥暟鍦板潃锛屽苟灏嗗紓甯稿鐞嗗嚱鏁版寕鍏eh閾捐",{"_index":4368,"title":{},"body":{"2949166":{}}}],["鍔犺",{"_index":8500,"title":{},"body":{"1015833":{}}}],["鍔犺浇dl",{"_index":4586,"title":{},"body":{"3440657":{}}}],["鍔犺浇璧勬簮",{"_index":1304,"title":{},"body":{"1015822":{}}}],["鍔犺浇绫荤殑妯″紡缂栧彿",{"_index":247,"title":{},"body":{"1015822":{}}}],["鍖呭惈浜嗘寚鍚戞椤甸潰鐨凱te鐨勫師濮嬪唴瀹",{"_index":6918,"title":{},"body":{"2949228":{}}}],["鍖呭惈鎵�鏈夊凡缁忓垵濮嬪寲鏁版嵁鐨勮妭鐨勬�诲ぇ灏忥紙鏂囦欢瀵归綈鍚庣殑澶у皬锛夛紝缂栬瘧鍣ㄥ～鐨勶紙娌＄敤锛",{"_index":6132,"title":{},"body":{"1015828":{}}}],["鍖呭惈鏈垵濮嬪寲鏁版嵁鐨勮妭鐨勬�诲ぇ灏忥紙鏂囦欢瀵归綈鍚庣殑澶у皬锛夛紝缂栬瘧鍣ㄥ～鐨勶紙娌＄敤锛",{"_index":6134,"title":{},"body":{"1015828":{}}}],["鍖呭惈闇�瑕佺殑澶存枃浠",{"_index":117,"title":{},"body":{"1015822":{}}}],["鍗佽繘鍒剁粨鏋",{"_index":9682,"title":{},"body":{"1015818":{}}}],["鍗曚釜鍏冪礌娣诲姞",{"_index":11455,"title":{},"body":{"1015814":{}}}],["鍗歌浇dl",{"_index":4588,"title":{},"body":{"3440657":{}}}],["鍗歌浇鑷韩骞堕��鍑",{"_index":8501,"title":{},"body":{"1015833":{}}}],["鍗砡kthread+0x10",{"_index":10742,"title":{},"body":{"2424889":{}}}],["鍘嬪叆鐨勫搴斿瘎瀛樺櫒鍒濆鍊",{"_index":11143,"title":{},"body":{"1703937":{}}}],["鍘熷鐜",{"_index":10876,"title":{},"body":{"2424869":{}}}],["鍘熸潵鐨勫垵濮嬪寲锛屽凡缁忚繃鏃讹紝涓嶆帹鑽愪娇鐢",{"_index":559,"title":{},"body":{"1015822":{}}}],["鍘熺墿鐞嗛〉灞炴�э紝鐢ㄤ簬淇濆瓨鏀瑰彉鍓嶇殑灞炴",{"_index":4863,"title":{},"body":{"3440657":{}}}],["鍙ユ焺",{"_index":7220,"title":{},"body":{"1015833":{},"2424889":{}}}],["鍙傛暟鍒楄",{"_index":8322,"title":{},"body":{"1015833":{}}}],["鍙屽悜閾捐〃锛屾墍鏈夌殑绛夊緟鍧楅兘鍦ㄨ繖閲",{"_index":10653,"title":{},"body":{"2424889":{}}}],["鍙戦�佺殑鏁版嵁",{"_index":9961,"title":{},"body":{"1015818":{}}}],["鍙戦�佺殑鏁版嵁闀垮害",{"_index":9962,"title":{},"body":{"1015818":{}}}],["鍙戦�侀敊璇",{"_index":10036,"title":{},"body":{"1015818":{}}}],["鍙朠eb缁撴瀯浣",{"_index":8562,"title":{},"body":{"1015833":{}}}],["鍙朠eb缁撴瀯浣撶殑00c鍋忕щ鐨勭粨鏋勪綋锛屽氨鏄疨eb_ldr_",{"_index":8563,"title":{},"body":{"1015833":{}}}],["鍙朣izeofrawdata鍜孧isc涔嬮棿鐨勬渶澶у�奸櫎浠ュ唴瀛樺榻愮殑鍊硷紝鏈�鍚庣殑缁撴灉鍚戜笂鍙栨暣(绗﹀彿鈱堚寜",{"_index":6423,"title":{},"body":{"1015828":{}}}],["鍙栧嚭鏍堥《鍏冪礌",{"_index":11551,"title":{},"body":{"1015814":{}}}],["鍙栧弽瀛愮綉鎺╃爜",{"_index":9677,"title":{},"body":{"1015818":{}}}],["鍙栧緱澶氬瓧鑺傚瓧绗︿覆涓瓧绗﹂暱搴︼紝涓嶅寘鍚",{"_index":7138,"title":{},"body":{"1015833":{}}}],["鍙橀噺x锛屾暟鎹搴︿负4涓瓧鑺傦紝閲岄潰瀛樺偍鐨勬槸琛ョ爜锛堝湪璁＄畻鏈虹郴缁熶腑锛屾暟鍊间竴寰嬬敤琛ョ爜鏉ュ瓨鍌級",{"_index":1644,"title":{},"body":{"1015843":{}}}],["鍙橀噺绫诲瀷鏍囧織锛屽涓婃墍绀篤t_i4瀵瑰簲long绫诲瀷",{"_index":3061,"title":{},"body":{"1015823":{}}}],["鍙橀噺鍚峓甯搁噺琛ㄨ揪寮廬",{"_index":2044,"title":{},"body":{"1015843":{}}}],["鍙橀噺鍚嶏紙甯搁噺杩唬鍣級",{"_index":11710,"title":{},"body":{"1015814":{}}}],["鍙橀噺鍚嶏紙闈炲父閲忚凯浠ｅ櫒锛",{"_index":11707,"title":{},"body":{"1015814":{}}}],["鍙橀噺鍚�)(鍙傛暟鍒楄",{"_index":2312,"title":{},"body":{"1015843":{}}}],["鍙互杩愯鍦ㄤ粈涔堟牱鐨凜pu涓",{"_index":6099,"title":{},"body":{"1015828":{}}}],["鍙互瀹氫箟澶氱绫诲瀷",{"_index":1982,"title":{},"body":{"1015843":{}}}],["鍙互鐞嗚в灏辨槸mysql鐨勪竴涓彞鏌",{"_index":8867,"title":{},"body":{"1015850":{}}}],["鍙瓑寰呭璞＄殑绫诲瀷",{"_index":10645,"title":{},"body":{"2424889":{}}}],["鍚",{"_index":2271,"title":{},"body":{"1015843":{}}}],["鍚嶇оi",{"_index":3727,"title":{},"body":{"1015840":{}}}],["鍚嶇оx",{"_index":3724,"title":{},"body":{"1015840":{}}}],["鍚庝笁涓弬鏁伴兘鏄繃婊ゆ潯浠",{"_index":7781,"title":{},"body":{"1015833":{}}}],["鍚戝唴瀛樹腑鍐欏叆鏁版嵁",{"_index":5203,"title":{},"body":{"1015825":{}}}],["鍚戠墿鐞嗗唴瀛樹腑瀛樺偍",{"_index":7975,"title":{},"body":{"1015833":{}}}],["鍚箟锛欽mp鎸囦护浼氫慨鏀笶ip鐨勫�间负鎸囧畾鐨勬寚浠ゅ湴鍧�锛屼篃灏变慨鏀逛簡绋嬪簭涓嬩竴娆℃墽琛岀殑鎸囦护鍦板潃锛屾垜浠篃鍙互绉颁箣涓鸿烦杞埌鏌愭潯鎸囦护鍦板潃銆",{"_index":5355,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬悜鍫嗘爤涓帇鍏ユ暟鎹紝鍘嬪叆鏁版嵁鍚庝細鎻愬崌锛坰ub锛夋爤椤舵寚閽堬紙esp锛夛紝鎻愬崌澶氬皯鍙栧喅浜庡帇鍏ユ暟鎹殑鏁版嵁瀹藉害",{"_index":5341,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬惊鐜墽琛孧ovs鎸囦护鎴朣tos鎸囦护锛屽惊鐜鏁板彇鍐充簬ecx瀵勫瓨鍣ㄤ腑鐨勫�硷紝姣忔墽琛屼竴娆★紝ecx瀵勫瓨鍣ㄤ腑鐨勫�煎氨浼氬噺涓�锛岀洿鑷充负闆讹紝rep鎸囦护鎵ц瀹屾垚",{"_index":5314,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢al/ax/eax鐨勫�煎偍瀛樺埌edi鎸囧畾鐨勫唴瀛樺湴鍧�锛孲tos鎸囦护鎵ц瀹屾垚鍚嶦di瀵勫瓨鍣ㄧ殑鍊间細鑷鎴栬嚜鍑忥紝鑷鎴栬嚜鍑忓灏戝彇鍐充簬浼犻�佹暟鎹殑鏁版嵁瀹藉害锛屼笌movs鎸囦护涓�鏍疯嚜澧炴垨鑷噺鍙栧喅浜嶥f浣",{"_index":5307,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢esi鎸囧畾鐨勫唴瀛樺湴鍧�鐨勬暟鎹紶閫佸埌edi鎸囧畾鐨勫唴瀛樺湴鍧�锛堜娇鐢∕ovs鎸囦护鏃讹紝榛樿浣跨敤鐨勫氨鏄疎si鍜孍di瀵勫瓨鍣級锛孧ovs鎸囦护鎵ц瀹屾垚鍚嶦si銆丒di瀵勫瓨鍣ㄧ殑鍊间細鑷鎴栬嚜鍑忥紝鑷鎴栬嚜鍑忓灏戝彇鍐充簬浼犻�佹暟鎹殑鏁版嵁瀹藉害",{"_index":5289,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢婧愭搷浣滄暟杩涜闈炶繍绠楋紝鏈�鍚庣粨鏋滅粰鍒扮洰鏍囨搷浣滄暟",{"_index":5285,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢婧愭搷浣滄暟浼犻�佸埌鐩爣鎿嶄綔鏁",{"_index":5251,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢婧愭搷浣滄暟涓庣洰鏍囨搷浣滄暟杩涜寮傛垨杩愮畻锛屾渶鍚庣粨鏋滅粰鍒扮洰鏍囨搷浣滄暟",{"_index":5281,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢婧愭搷浣滄暟涓庣洰鏍囨搷浣滄暟杩涜涓庤繍绠楋紝鏈�鍚庣粨鏋滅粰鍒扮洰鏍囨搷浣滄暟",{"_index":5275,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢婧愭搷浣滄暟涓庣洰鏍囨搷浣滄暟杩涜鎴栬繍绠楋紝鏈�鍚庣粨鏋滅粰鍒扮洰鏍囨搷浣滄暟",{"_index":5278,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢婧愭搷浣滄暟涓庣洰鏍囨搷浣滄暟鐩稿噺锛屾渶鍚庣粨鏋滅粰鍒扮洰鏍囨搷浣滄暟",{"_index":5272,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢婧愭搷浣滄暟涓庣洰鏍囨搷浣滄暟鐩稿姞锛屾渶鍚庣粨鏋滅粰鍒扮洰鏍囨搷浣滄暟",{"_index":5264,"title":{},"body":{"1015825":{}}}],["鍚箟锛氬皢褰撳墠鏍堥《鎸囬拡鐨勫�艰祴缁橢ip锛岀劧鍚庤鏍堥《鎸囬拡鍔�4",{"_index":5362,"title":{},"body":{"1015825":{}}}],["鍚箟锛氳窡jmp鎸囦护鐨勫姛鑳芥槸涓�鏍风殑锛屽悓鏍蜂篃鍙互淇敼eip鐨勫�硷紝涓嶅悓鐨勭偣鏄紝call鎸囦护鎵ц鍚庝細灏嗗叾涓嬩竴鏉℃寚浠ゅ湴鍧�鍘嬪叆鍫嗘爤锛孍sp鏍堥《鎸囬拡鐨勫�煎噺4",{"_index":5358,"title":{},"body":{"1015825":{}}}],["鍚箟锛氶噴鏀惧帇鍏ュ爢鏍堜腑鐨勬暟鎹紝閲婃斁鏁版嵁鍚庝細涓嬮檷锛坅dd锛夋爤椤舵寚閽堬紙esp锛夛紝涓嬮檷澶氬皯鍙栧喅浜庨噴鏀炬暟鎹殑鏁版嵁瀹藉害",{"_index":5348,"title":{},"body":{"1015825":{}}}],["鍚姩绾跨▼鐨勫嚱鏁帮紝鐢ㄤ簬璋冪敤绾跨▼鍑芥暟",{"_index":11142,"title":{},"body":{"1703937":{}}}],["鍚﹀垯灏卞叧闂繛鎺ャ�佸叧闂鎺ュ瓧",{"_index":10091,"title":{},"body":{"1015818":{}}}],["鍛婅瘔琚皟璇曠▼搴忚鍏剁户缁墽琛",{"_index":4664,"title":{},"body":{"3440657":{}}}],["鍛戒护娑堟伅id鐨勮捣濮嬭寖鍥",{"_index":413,"title":{},"body":{"1015822":{}}}],["鍛戒护娑堟伅id鑼冨洿鐨勭粓鐐",{"_index":418,"title":{},"body":{"1015822":{}}}],["鍛戒护琛屼紶鍙",{"_index":7213,"title":{},"body":{"1015833":{}}}],["鍜",{"_index":393,"title":{},"body":{"1015818":{},"1015822":{}}}],["鍜屾椂闂存湁鍏",{"_index":2812,"title":{},"body":{"1015823":{}}}],["鍜岀綉鍗ac鏈夊叧",{"_index":2813,"title":{},"body":{"1015823":{}}}],["鍝嶅簲娑堟伅鏃跺簲鎵ц鐨勫嚱鏁",{"_index":433,"title":{},"body":{"1015822":{}}}],["鍞嚭",{"_index":7493,"title":{},"body":{"1015833":{}}}],["鍥涚鐘舵�侊紝瀵瑰簲kapc.apcstateindex",{"_index":10867,"title":{},"body":{"2424869":{}}}],["鍥炶皟鍑芥暟",{"_index":10173,"title":{},"body":{"1015818":{}}}],["鍥犱负姣忎釜杩涚▼涓殑loadlibrary鍑芥暟閮藉湪kernel32.dll涓紝鑰屼笖姝ll鐨勭墿鐞嗛〉鏄叡浜殑锛屾墍浠ユ垜浠繘绋嬩腑鑾峰緱鐨凩oadlibrary鍦板潃鍜屽埆鐨勮繘绋嬮兘鏄竴鏍风殑",{"_index":8661,"title":{},"body":{"1015833":{}}}],["鍥犱负鍦ㄨ繖閲孲dk鐨勫疄鐜帮紝灏辨槸鍩轰簬tcp/ip鍗忚锛屾墍浠ユ垜浠渶瑕佸寘鍚繖涓ご",{"_index":8859,"title":{},"body":{"1015850":{}}}],["鍦–鐩樹笅鎼滅储.txt鍚庣紑鐨勬枃浠",{"_index":8210,"title":{},"body":{"1015833":{}}}],["鍦╛kthread+0x10澶勬湁涓�涓狹utantlisthead瀛楁锛屾寚鍚戦摼琛ㄥご锛岄摼琛ㄥ湀鐫�鎵�鏈夎绾跨▼鎷ユ湁鐨勪簰鏂ヤ綋瀵硅薄锛岃鍊煎氨琛ㄧず鎸傚湪閾捐〃鐨勪綅缃",{"_index":10721,"title":{},"body":{"2424889":{}}}],["鍦ㄥ唴瀛樹腑鐨勫亸绉诲湴鍧�锛屽姞涓奍magebase鎵嶆槸鍦ㄥ唴瀛樹腑鐨勭湡姝ｅ湴鍧",{"_index":6204,"title":{},"body":{"1015828":{}}}],["鍦ㄥ摢閲屼骇鐢熺殑",{"_index":7795,"title":{},"body":{"1015833":{}}}],["鍦ㄦ寚瀹氱储寮曞鎻掑叆瀛楃涓",{"_index":1167,"title":{},"body":{"1015822":{}}}],["鍦ㄦ寚瀹氱殑杩涚▼涓垎閰嶅唴瀛",{"_index":8647,"title":{},"body":{"1015833":{}}}],["鍦ㄦ娣诲姞瀹炵幇浠ｇ爜",{"_index":3132,"title":{},"body":{"1015823":{}}}],["鍦ㄦ娣诲姞鎺т欢閫氱煡澶勭悊绋嬪簭浠ｇ爜",{"_index":3172,"title":{},"body":{"1015823":{}}}],["鍦ㄧ埗绐楀彛涓婄殑x鍧愭爣",{"_index":7852,"title":{},"body":{"1015833":{}}}],["鍦ㄧ埗绐楀彛涓婄殑y鍧愭爣",{"_index":7853,"title":{},"body":{"1015833":{}}}],["鍦ㄧ洰鏍囪繘绋嬪垎閰嶅唴瀛",{"_index":8452,"title":{},"body":{"1015833":{}}}],["鍦ㄨ璺緞涓婃病鏈夊畨瑁呬换浣曞嵎",{"_index":8021,"title":{},"body":{"1015833":{}}}],["鍦ㄩ�夐」鍓嶉潰鐢熸垚checkbox鎺т欢",{"_index":1201,"title":{},"body":{"1015822":{}}}],["鍦板潃",{"_index":9783,"title":{},"body":{"1015818":{}}}],["鍦板潃鏃忚鑼",{"_index":9789,"title":{},"body":{"1015818":{}}}],["鍦板潃鏃忚鑼冿細涓庡垱寤哄鎺ュ瓧鏃跺�欐墍浣跨敤鐨勪竴鑷村嵆鍙",{"_index":9745,"title":{},"body":{"1015818":{}}}],["鍦板潃鏃忚鑼冿細甯歌鏈塈pv6锛圓f_inet6锛夋垨ipv4锛圓f_inet锛",{"_index":9728,"title":{},"body":{"1015818":{}}}],["鍩烘湰绫诲瀷",{"_index":3486,"title":{},"body":{"1015840":{}}}],["鍩轰簬鍑芥暟杞崲",{"_index":10334,"title":{},"body":{"1015818":{}}}],["鍫",{"_index":7946,"title":{},"body":{"1015833":{}}}],["鍫嗘爤",{"_index":9378,"title":{},"body":{"1015831":{},"1703937":{}}}],["鎴愬憳璧嬪",{"_index":4406,"title":{},"body":{"2949166":{}}}],["鎴愬憳鍙橀噺m_pmainwnd鐢ㄦ潵璁板綍鍒涘缓鐨勪富绐楀彛鐨勫璞",{"_index":145,"title":{},"body":{"1015822":{}}}],["鎴栬",{"_index":2049,"title":{},"body":{"1015843":{}}}],["鎵цexcept鍐呯殑浠ｇ爜",{"_index":4418,"title":{},"body":{"2949166":{}}}],["鎵ц姝ら〉闈㈢殑pte鐨勮櫄鎷熷湴鍧",{"_index":6907,"title":{},"body":{"2949228":{}}}],["鎵ц琚浛鎹㈢殑鎸囦护锛屼繚璇佽繍琛屽畬鏁",{"_index":5921,"title":{},"body":{"1015847":{}}}],["鎵ц缁撴潫",{"_index":1353,"title":{},"body":{"1015843":{}}}],["鎵ц鎴愬姛杩斿洖0锛屽け璐ヨ繑鍥",{"_index":10125,"title":{},"body":{"1015818":{}}}],["鎵╁睍pe澶",{"_index":6091,"title":{},"body":{"1015828":{}}}],["鎵╁睍pe澶寸殑澶у皬",{"_index":6108,"title":{},"body":{"1015828":{}}}],["鎵╁睍绐楀彛鏍峰紡",{"_index":488,"title":{},"body":{"1015822":{}}}],["鎵嬪姩瀛楄妭搴忕殑杞崲",{"_index":10326,"title":{},"body":{"1015818":{}}}],["鎵撳潗",{"_index":8499,"title":{},"body":{"1015833":{}}}],["鎵撳紑filemapping瀵硅薄",{"_index":8273,"title":{},"body":{"1015833":{}}}],["鎵撳紑鎸囧畾鐨勯�傞厤鍣",{"_index":10205,"title":{},"body":{"1015818":{}}}],["鎵撳紑鎸囧畾鐨勯�傞厤鍣�(pcap_open鍑芥暟",{"_index":10152,"title":{},"body":{"1015818":{}}}],["鎵�浠",{"_index":2267,"title":{},"body":{"1015843":{}}}],["鎵�灞炵獥鍙ｅ彞鏌",{"_index":7791,"title":{},"body":{"1015833":{}}}],["鎵�鏈変唬鐮佽妭鐨勬�诲拰锛堟枃浠跺榻愬悗鐨勫ぇ灏忥級锛岀紪璇戝櫒濉殑锛堟病鐢級",{"_index":6130,"title":{},"body":{"1015828":{}}}],["鎵�鏈夊ご鍔犺妭琛ㄦ寜鐓ф枃浠跺榻愬悗鐨勫ぇ灏忥紝鍚﹀垯鍔犺浇浼氬嚭閿",{"_index":6162,"title":{},"body":{"1015828":{}}}],["鎵�鏈夊鍑哄嚱鏁扮殑涓暟",{"_index":6473,"title":{},"body":{"1015828":{}}}],["鎶婂綋鍓嶇嚎绋嬬殑鏍堥《瀛樺叆鍒扮粨鏋勪綋鐨凨ernelstack鎴愬憳涓",{"_index":11179,"title":{},"body":{"1703937":{}}}],["鎶婃秷鎭槦鍒楀姞澶",{"_index":557,"title":{},"body":{"1015822":{}}}],["鎷ユ湁浜掓枼浣撶殑绾跨",{"_index":10723,"title":{},"body":{"2424889":{}}}],["鎷嗗垎",{"_index":2525,"title":{},"body":{"1015846":{}}}],["鎷疯礉dll璺緞鍚嶅瓧鍒扮洰鏍囪繘绋嬬殑鍐呭瓨",{"_index":8455,"title":{},"body":{"1015833":{}}}],["鎷疯礉绾跨▼鍑芥暟",{"_index":8677,"title":{},"body":{"1015833":{}}}],["鎷疯礉鍙傛暟",{"_index":8680,"title":{},"body":{"1015833":{}}}],["鎷疯礉鏂囦欢",{"_index":8174,"title":{},"body":{"1015833":{}}}],["鎷疯礉鏂囦欢鍚",{"_index":8674,"title":{},"body":{"1015833":{}}}],["鎸傚叆鐨凙pc妯″紡锛氬唴鏍搞�佺敤鎴凤紝瀵瑰簲kapc.apç",{"_index":10873,"title":{},"body":{"2424869":{}}}],["鎸傞潬鍦烘櫙",{"_index":10817,"title":{},"body":{"2424869":{}}}],["鎸傞潬鐜",{"_index":10877,"title":{},"body":{"2424869":{}}}],["鎸囦护闃熷垪",{"_index":8524,"title":{},"body":{"1015833":{}}}],["鎸囧悜",{"_index":10815,"title":{},"body":{"2424869":{}}}],["鎸囧悜image_import_by_",{"_index":6574,"title":{},"body":{"1015828":{}}}],["鎸囧悜overlap",{"_index":5763,"title":{},"body":{"1015847":{}}}],["鎸囧悜wsadata鏁版嵁缁撴瀯鐨勬寚閽堬紝鐢ㄤ簬鎺ユ敹window",{"_index":9837,"title":{},"body":{"1015818":{}}}],["鎸囧悜涓婁竴涓猇eh",{"_index":4336,"title":{},"body":{"2949166":{}}}],["鎸囧悜涓嬩竴涓狢runtimeclass缁撴瀯浣撴寚閽",{"_index":254,"title":{},"body":{"1015822":{}}}],["鎸囧悜涓嬩竴涓狢runtimeclass聽",{"_index":326,"title":{},"body":{"1015822":{}}}],["鎸囧悜涓嬩竴涓猇eh",{"_index":4335,"title":{},"body":{"2949166":{}}}],["鎸囧悜涓�涓嚱鏁帮紝鍦ㄥ搴斿嚱鏁板唴璋冪敤浜咵xfreepoolwithtag鏉ラ噴鏀続pc锛屽綋apc鎵ц瀹屾瘯涔嬪悗锛屽唴鏍哥▼搴忓氨浼氳皟鐢ㄨ鎴愬憳鎸囧畾鐨勫嚱鏁拌繘琛岄噴鏀",{"_index":10838,"title":{},"body":{"2424869":{}}}],["鎸囧悜璇ラ〉闈㈢殑pte鎵�鍦ㄧ殑椤佃〃椤甸潰鐨勭墿鐞嗛〉甯х紪鍙凤紝浠ュ強涓�浜涙爣蹇椾綅",{"_index":6929,"title":{},"body":{"2949228":{}}}],["鎸囧悜璇ラ〉闈㈢殑pte鏁伴噺",{"_index":6910,"title":{},"body":{"2949228":{}}}],["鎸囧悜褰撳墠veh鐨勫洖璋冨嚱鏁",{"_index":4338,"title":{},"body":{"2949166":{}}}],["鎸囧悜鐨",{"_index":2279,"title":{},"body":{"1015843":{}}}],["鎸囧畾娉ㄥ唽鐨勫洖璋冨嚱鏁拌璋冪敤鐨勯『搴忥紝璇ュ�间负0琛ㄧず甯屾湜鏈�鍚庤璋冪敤锛屼负1琛ㄧず甯屾湜鏈�鍏堣璋冪敤锛岃嫢娉ㄥ唽浜嗗涓洖璋冨嚱鏁帮紝涓旀墍鏈夌殑firsthandler鍊奸兘涓�1锛岄偅涔堟渶鍚庢敞鍐岀殑鍥炶皟鍑芥暟浼氳鏈�鍏堣皟鐢",{"_index":4329,"title":{},"body":{"2949166":{}}}],["鎸囧畾浜嬩欢瀵硅薄鐨勫悕绉",{"_index":10674,"title":{},"body":{"2424889":{}}}],["鎸囧畾涓�涓捣濮嬩綅缃",{"_index":746,"title":{},"body":{"1015822":{}}}],["鎸囧畾璋冪敤鏂瑰紡鐨勬爣蹇楋紝杩欎釜鎴戜滑灏辩洿鎺ュ啓0鍗冲彲",{"_index":9814,"title":{},"body":{"1015818":{}}}],["鎸囧畾绛夊緟鏃堕棿鍐呮病鏈塻ocket鍝嶅簲锛宑ontinue杩涜涓嬩竴娆＄瓑寰",{"_index":10032,"title":{},"body":{"1015818":{}}}],["鎸囧畾閿�煎垹闄",{"_index":11465,"title":{},"body":{"1015814":{}}}],["鎸囧畾闀垮害璧嬪",{"_index":2931,"title":{},"body":{"1015823":{}}}],["鎸囬拡绫诲瀷",{"_index":3491,"title":{},"body":{"1015840":{}}}],["鎸囬拡锛屾寚鍚慱ldr_data_table_entry缁撴瀯浣",{"_index":5611,"title":{},"body":{"1015847":{}}}],["鎸囬拡锛屾寚鍚戞暟鎹寘鐨勬暟鎹紝鍖呮嫭鍗忚澶淬",{"_index":10186,"title":{},"body":{"1015818":{}}}],["鎸変綅涓",{"_index":9679,"title":{},"body":{"1015818":{}}}],["鎸夐挳鍚嶇о",{"_index":7862,"title":{},"body":{"1015833":{}}}],["鎹曡幏鍒板寘鐨勯暱搴",{"_index":10192,"title":{},"body":{"1015818":{}}}],["鎹曡幏鍖呯殑闀垮害锛圱cp鍖呯殑鏈�澶ч暱搴︽槸1460瀛楄妭锛孶dp鍖呭垯鏄�65535瀛楄妭锛",{"_index":10162,"title":{},"body":{"1015818":{}}}],["鎹曡幏鏁版嵁鍖",{"_index":10214,"title":{},"body":{"1015818":{}}}],["鎺т欢楂樺害",{"_index":7855,"title":{},"body":{"1015833":{}}}],["鎺т欢瀹藉害",{"_index":7854,"title":{},"body":{"1015833":{}}}],["鎺ユ敹娑堟伅骞跺鐞",{"_index":7779,"title":{},"body":{"1015833":{}}}],["鎻愬崌鍫嗘爤",{"_index":11176,"title":{},"body":{"1703937":{}}}],["鎻掑叆apc鏃剁殑褰撳墠鐜",{"_index":10879,"title":{},"body":{"2424869":{}}}],["鎽橀櫎鍒氭彃鍏ョ殑seh锛岃繕鍘烣s:[0",{"_index":4410,"title":{},"body":{"2949166":{}}}],["鎿嶄綔璧勬簮",{"_index":7542,"title":{},"body":{"1015833":{}}}],["鎿嶄綔鐮",{"_index":5747,"title":{},"body":{"1015847":{}}}],["鎿嶄綔鐮佸畾涔",{"_index":5767,"title":{},"body":{"1015847":{}}}],["鏀诲嚮",{"_index":8498,"title":{},"body":{"1015833":{}}}],["鏀跺彂鏁版嵁",{"_index":9720,"title":{},"body":{"1015818":{}}}],["鏁扮粍绫诲瀷",{"_index":2264,"title":{},"body":{"1015840":{},"1015843":{}}}],["鏁扮粍鎸囬拡锛歘mmpfn",{"_index":6882,"title":{},"body":{"2949228":{}}}],["鏁扮粍闀垮害锛歁mnumberofphysicalpagı",{"_index":6884,"title":{},"body":{"2949228":{}}}],["鏁板�间笂鐨勬瘮杈",{"_index":9094,"title":{},"body":{"1015831":{}}}],["鏁版嵁寮�濮嬬殑鍩哄潃锛岀紪璇戝櫒濉殑锛堟病鐢級",{"_index":6140,"title":{},"body":{"1015828":{}}}],["鏁版嵁搴撳悕",{"_index":8759,"title":{},"body":{"1015850":{}}}],["鏁版嵁搴撳悕瀛",{"_index":8887,"title":{},"body":{"1015850":{}}}],["鏁版嵁搴撳悕绉",{"_index":8762,"title":{},"body":{"1015850":{}}}],["鏁版嵁搴撳悕锛屽綋db涓簄ull鐨勬椂鍊欙紝鍑芥暟杩炴帴鍒伴粯璁ゆ暟鎹簱",{"_index":8878,"title":{},"body":{"1015850":{}}}],["鏁版嵁浜ゆ崲鐨勬柟寮",{"_index":5755,"title":{},"body":{"1015847":{}}}],["鏁版嵁绫诲瀷",{"_index":8833,"title":{},"body":{"1015850":{}}}],["鏁版嵁绫诲瀷,瀛楁2",{"_index":8818,"title":{},"body":{"1015850":{}}}],["鏁版嵁绫诲瀷鈥",{"_index":8819,"title":{},"body":{"1015850":{}}}],["鏁版嵁鍖呮崟鑾风殑鏃堕棿鎴",{"_index":10189,"title":{},"body":{"1015818":{}}}],["鏁版嵁闀垮害閫掑",{"_index":10405,"title":{},"body":{"1015818":{}}}],["鏂囦欢澶у皬",{"_index":8213,"title":{},"body":{"1015833":{}}}],["鏂囦欢瀵归綈",{"_index":6146,"title":{},"body":{"1015828":{}}}],["鏂囦欢灞炴",{"_index":6110,"title":{},"body":{"1015828":{}}}],["鏂囦欢灞炴�э紝鍙互鍒涘缓闅愯棌鏂囦欢",{"_index":8117,"title":{},"body":{"1015833":{}}}],["鏂囦欢鍙ユ焺",{"_index":8128,"title":{},"body":{"1015833":{}}}],["鏂囦欢鍙ユ焺銆佺鍑犱釜寮�濮嬭銆侀珮32浣嶃�佷粠鏂囦欢鏈�寮�濮嬬殑浣嶇疆",{"_index":8188,"title":{},"body":{"1015833":{}}}],["鏂囦欢鍙ユ焺锛屽鏋滀笉鎯冲皢鏂囦欢鏄犲皠鍒扮墿鐞嗛〉锛屽垯涓嶆寚瀹氳鍙傛暟",{"_index":7951,"title":{},"body":{"1015833":{}}}],["鏂囦欢鍚",{"_index":8110,"title":{},"body":{"1015833":{}}}],["鏂囦欢鎴栫洰褰曠殑鍚嶇о",{"_index":8144,"title":{},"body":{"1015833":{}}}],["鏂囦欢鐗规",{"_index":6168,"title":{},"body":{"1015828":{}}}],["鏂囧瓧",{"_index":854,"title":{},"body":{"1015822":{}}}],["鏂扮墿鐞嗛〉灞炴",{"_index":4860,"title":{},"body":{"3440657":{}}}],["鏂扮敓鎴愪竴涓狟ignum缁撴瀯",{"_index":10486,"title":{},"body":{"1015818":{}}}],["鏂扮殑鐩綍鍚嶇о",{"_index":8103,"title":{},"body":{"1015833":{}}}],["鏂扮洰褰曞悕",{"_index":8086,"title":{},"body":{"1015833":{}}}],["鏂扮被鍨�(淇敼瀛楁鍚",{"_index":8827,"title":{},"body":{"1015850":{}}}],["鏂拌〃鍚",{"_index":8830,"title":{},"body":{"1015850":{}}}],["鏂板瓧娈靛悕",{"_index":8826,"title":{},"body":{"1015850":{}}}],["鏂紑杩炴帴(涓诲姩",{"_index":9866,"title":{},"body":{"1015818":{}}}],["鏂紑杩炴帴(琚姩",{"_index":9721,"title":{},"body":{"1015818":{}}}],["鏂紑杩炴帴鐨勫舰寮忥細sd_send涓嶅啀鍙戦�佹暟鎹�丼d_receive涓嶅啀鎺ュ彈鏁版嵁銆丼d_both涓嶅啀鏀跺彂鏁版嵁",{"_index":9824,"title":{},"body":{"1015818":{}}}],["鏂摼鍘熺悊寰堢畝鍗曞氨鏄皢灞炴�т氦閿欐浛鎹",{"_index":8573,"title":{},"body":{"1015833":{}}}],["鏃у瓧娈靛悕",{"_index":8825,"title":{},"body":{"1015850":{}}}],["鏃ц〃鍚",{"_index":8828,"title":{},"body":{"1015850":{}}}],["鏃堕棿鎴",{"_index":6543,"title":{},"body":{"1015828":{}}}],["鏃堕棿鎴筹紝琛ㄧず褰撳墠pe鏂囦欢锛圖ll锛夌紪璇戞椂鐨勬椂闂",{"_index":6467,"title":{},"body":{"1015828":{}}}],["鏃犵壒娈婄殑鍚箟锛屽彧鏄负浜嗕笌sockaddr缁撴瀯浣撲竴鑷达紝鍥犱负鍦ㄧ粰濂楁帴瀛楀垎閰嶇綉缁滃湴鍧�鐨勬椂鍊欎細璋冪敤bind鍑芥暟锛屽叾涓殑鍙傛暟浼氭妸sockaddr_in缁撴瀯浣撹浆鍖栦负sockaddr缁撴瀯浣",{"_index":9753,"title":{},"body":{"1015818":{}}}],["鏃犵鍙锋暟",{"_index":1549,"title":{},"body":{"1015843":{}}}],["鏄剧ず璁惧鍏辨湁涓ょ杈撳嚭鏂瑰紡锛歄paque鍜孴ransparent銆",{"_index":809,"title":{},"body":{"1015822":{}}}],["鏄剧ず纭欢鏂偣淇℃伅",{"_index":4949,"title":{},"body":{"3440657":{}}}],["鏄剧ず绐楀彛",{"_index":7774,"title":{},"body":{"1015833":{}}}],["鏄剧ず鍗曟寮傚父淇℃伅",{"_index":4954,"title":{},"body":{"3440657":{}}}],["鏄剧ず鍙嶆眹缂",{"_index":4847,"title":{},"body":{"3440657":{}}}],["鏄剧ず鏂偣浣嶇疆",{"_index":4836,"title":{},"body":{"3440657":{}}}],["鏄剧ず鐨勫舰寮",{"_index":7776,"title":{},"body":{"1015833":{}}}],["鏄犲皠鍐呭瓨",{"_index":8496,"title":{},"body":{"1015833":{}}}],["鏄疌om涓敵璇稡str瀛楃涓茬殑鏂规硶銆",{"_index":2939,"title":{},"body":{"1015823":{}}}],["鏄惁宸茬粡琚斁寮冧笉鐢",{"_index":10726,"title":{},"body":{"2424889":{}}}],["鏄惁甯屾湜浜掓枼浣撳垱寤哄嚭鏉ュ氨鏈変俊鍙凤紝鎴栬�呰灏卞彲浠ヤ娇鐢紝濡傛灉甯屾湜鐨勮瘽灏变负false锛涘畼鏂硅в閲婁负濡傛灉璇ュ�间负true鍒欒〃绀哄綋鍓嶈繘绋嬫嫢鏈夎浜掓枼浣撴墍鏈夋潈",{"_index":7534,"title":{},"body":{"1015833":{}}}],["鏄惁绂佺敤鍐呮牳apc",{"_index":10729,"title":{},"body":{"2424889":{}}}],["鏄惁鍙互琚户鎵",{"_index":7351,"title":{},"body":{"1015833":{}}}],["鏄惁鏈変俊鍙凤紝涓庝俊鍙烽噺鏈夊叧",{"_index":10651,"title":{},"body":{"2424889":{}}}],["鏄惁鏈夋鍦ㄧ瓑寰呮墽琛岀殑鍐呮牳apc",{"_index":10784,"title":{},"body":{"2424869":{}}}],["鏄惁鏈夋鍦ㄧ瓑寰呮墽琛岀殑鐢ㄦ埛apc",{"_index":10786,"title":{},"body":{"2424869":{}}}],["鏄暐绫诲瀷锛",{"_index":2262,"title":{},"body":{"1015843":{}}}],["鏇存柊绐楀彛",{"_index":149,"title":{},"body":{"1015822":{}}}],["鏇挎崲鎸囦护",{"_index":5950,"title":{},"body":{"1015847":{}}}],["鏇挎崲鐨勬寚浠ら暱搴︿负0x6",{"_index":5948,"title":{},"body":{"1015847":{}}}],["鏈塻ocket鍝嶅簲",{"_index":10034,"title":{},"body":{"1015818":{}}}],["鏈夋悳绱㈠埌锛屽氨浣跨敤findnextfile瀵绘壘涓嬩竴涓枃浠讹紝findnextfile鍑芥暟杩斿洖涓虹湡鍒欒〃绀烘悳绱㈠埌浜",{"_index":8217,"title":{},"body":{"1015833":{}}}],["鏈夌紪鍙凤紝娌℃湁鍚嶇о",{"_index":8331,"title":{},"body":{"1015833":{}}}],["鏈夌紪鍙凤紝涔熸湁鍚嶇о",{"_index":8330,"title":{},"body":{"1015833":{}}}],["鏈夌鍙锋暟",{"_index":1547,"title":{},"body":{"1015843":{}}}],["鏈娇鐢",{"_index":6466,"title":{},"body":{"1015828":{},"2424869":{}}}],["鏈�澶у",{"_index":4592,"title":{},"body":{"3440657":{}}}],["鏈�澶х殑鏁伴噺",{"_index":10698,"title":{},"body":{"2424889":{}}}],["鏈�缁堣繕鏄蛋鍚戠湡姝ｇ殑ntopenproç",{"_index":5849,"title":{},"body":{"1015847":{}}}],["鏈�缁堣繕鏄蛋鍚戠湡姝ｇ殑openproç",{"_index":5897,"title":{},"body":{"1015847":{}}}],["鏈�鍚庝竴鏉′俊鎭",{"_index":7784,"title":{},"body":{"1015833":{}}}],["鏈�鍚庣殑const琛ㄧず瀵硅鎴愬憳鏃犳硶鏇存敼",{"_index":265,"title":{},"body":{"1015822":{}}}],["鏉′欢琛ㄨ揪寮",{"_index":8853,"title":{},"body":{"1015850":{}}}],["鏋勫缓涓寸晫鍖猴紝鑾峰彇浠ょ墝",{"_index":7517,"title":{},"body":{"1015833":{}}}],["鏋勯�犻櫎0寮傚父",{"_index":4374,"title":{},"body":{"2949166":{}}}],["鏌ユ壘璧勬簮",{"_index":1293,"title":{},"body":{"1015822":{}}}],["鏌ョ湅gdt琛ㄧ殑浣嶇疆",{"_index":8987,"title":{},"body":{"1015831":{}}}],["鏌ョ湅gdt琛ㄧ殑澶у皬",{"_index":8989,"title":{},"body":{"1015831":{}}}],["鏌ョ湅kpcr浣嶇疆",{"_index":2515,"title":{},"body":{"1015846":{}}}],["鏌ョ湅kpcr缁撴瀯浣",{"_index":2510,"title":{},"body":{"1015846":{}}}],["鏌ョ湅kpcr鏁伴噺",{"_index":2513,"title":{},"body":{"1015846":{}}}],["鏍",{"_index":7945,"title":{},"body":{"1015831":{},"1015833":{}}}],["鏍囧噯pe澶",{"_index":6089,"title":{},"body":{"1015828":{}}}],["鏍囧織",{"_index":7222,"title":{},"body":{"1015833":{}}}],["鏍囧織浣嶏紝璋冭瘯娑堟伅鏄惁宸茶鍙",{"_index":4571,"title":{},"body":{"3440657":{}}}],["鏍囪瘑鎿嶄綔绯荤粺鐗堟湰鍙凤紝娆＄増鏈彿",{"_index":6150,"title":{},"body":{"1015828":{}}}],["鏍囪瘑鎿嶄綔绯荤粺鐗堟湰鍙凤紝涓荤増鏈彿",{"_index":6148,"title":{},"body":{"1015828":{}}}],["鏍囪瘑锛屼篃鍙互浠ユ寕璧峰舰寮忓垱寤虹嚎绋",{"_index":7403,"title":{},"body":{"1015833":{}}}],["鏍圭洰褰曪紝杩欓噷鎴戜滑鍙互浣跨敤椹卞姩鍣ㄥ瓧绗︿覆",{"_index":8013,"title":{},"body":{"1015833":{}}}],["鏍规嵁cr4瀵勫瓨鍣ㄧ殑pae浣嶅垽鏂垎椤垫ā寮",{"_index":5864,"title":{},"body":{"1015847":{}}}],["鏍规嵁杩涚▼鍚嶇о鑾峰彇杩涚▼i",{"_index":8509,"title":{},"body":{"1015833":{}}}],["鏍规嵁瀛楃涓叉寚閽堜笌瀛楃涓暟鏋勯�燘str瀛楃涓层",{"_index":2941,"title":{},"body":{"1015823":{}}}],["鏍规嵁褰撳墠椤圭洰鐨勭紪鐮佽嚜鍔ㄩ�夋嫨char杩樻槸wchar_t锛屽湪win32涓帹鑽愪娇鐢ㄨ繖绉嶆柟寮",{"_index":7166,"title":{},"body":{"1015833":{}}}],["鏍规嵁褰撳墠椤圭洰鐨勭紪鐮佽嚜鍔ㄩ�夋嫨濡俢har*杩樻槸wchar_t*锛屽湪win32涓帹鑽愪娇鐢ㄨ繖绉嶆柟寮",{"_index":7172,"title":{},"body":{"1015833":{}}}],["鏍规嵁鍒嗘瀽锛屾垜浠彂鐜版暟鎹寘鐨勫墠鍏釜瀛楄妭涓虹洰鍦扮殑mac鍦板潃锛岀涓冧釜瀛楄妭鍒扮12涓瓧鑺傚垯涓烘簮鐨凪ac鍦板潃锛屾墍浠ュ湪杩欓噷杈撳嚭",{"_index":10231,"title":{},"body":{"1015818":{}}}],["鏍￠獙鍜",{"_index":6163,"title":{},"body":{"1015828":{}}}],["鐖剁獥鍙ｅ彞鏌",{"_index":7765,"title":{},"body":{"1015833":{}}}],["鐖剁被鎸囬拡",{"_index":249,"title":{},"body":{"1015822":{}}}],["鐖惰繘绋嬬幆澧冨彉閲",{"_index":7226,"title":{},"body":{"1015833":{}}}],["鐖惰繘绋嬬洰褰曚綔涓哄綋鍓嶇洰褰曪紝璁剧疆鐩綍",{"_index":7230,"title":{},"body":{"1015833":{}}}],["鐗╃悊椤垫槧灏勫埌铏氭嫙鍐呭瓨",{"_index":8244,"title":{},"body":{"1015833":{}}}],["鐗╃悊椤电储寮",{"_index":9488,"title":{},"body":{"1015831":{}}}],["鐗堟湰",{"_index":10315,"title":{},"body":{"1015818":{}}}],["鐗堟湰鍙凤紝鎸囧畾鎵�闇�鐨刉indow",{"_index":9834,"title":{},"body":{"1015818":{}}}],["鐢ㄤ簬淇濆瓨琚獺ook鐨勫嚱鏁板湴鍧",{"_index":5831,"title":{},"body":{"1015847":{}}}],["鐢ㄤ簬淇濆瓨琚浛鎹㈢殑鎸囦护",{"_index":5955,"title":{},"body":{"1015847":{}}}],["鐢ㄤ簬淇濆瓨鏇挎崲鎸囦护鐨勫湴鍧�鍜岃繑鍥炲湴鍧",{"_index":5953,"title":{},"body":{"1015847":{}}}],["鐢ㄤ簬瀛樻斁淇敼鎵ц娴佺▼鐨勬寚浠",{"_index":5954,"title":{},"body":{"1015847":{}}}],["鐢ㄤ簬鍚屾鐨勪簰鏂ュ璞",{"_index":4569,"title":{},"body":{"3440657":{}}}],["鐢ㄤ簬鎸囩ず鏈夎皟璇曚簨浠跺彂鐢熺殑浜嬩欢瀵硅薄",{"_index":4568,"title":{},"body":{"3440657":{}}}],["鐢ㄤ簬鑾峰彇鍙傛暟鐨勫叏灞�鍙橀噺",{"_index":5963,"title":{},"body":{"1015847":{}}}],["鐢ㄦ埛浜掓枼浣",{"_index":10758,"title":{},"body":{"2424889":{}}}],["鐢ㄦ埛瀹氫箟鐨勫弬鏁帮紝鍖呭惈浜嗘崟鑾蜂細璇濈殑鐘舵�侊紝瀹冨搴斾簬",{"_index":10182,"title":{},"body":{"1015818":{}}}],["鐢ㄦ埛鍚",{"_index":8875,"title":{},"body":{"1015850":{}}}],["鐢ㄦ埛鑷畾涔夊唴瀹",{"_index":10176,"title":{},"body":{"1015818":{}}}],["鐢ㄦ潵瀛樺偍绾跨▼鍑芥暟",{"_index":8649,"title":{},"body":{"1015833":{}}}],["鐢ㄦ潵瀛樺偍鏂囦欢鍙傛暟",{"_index":8651,"title":{},"body":{"1015833":{}}}],["鐢ㄦ潵瀛樺偍鏂囦欢鍚",{"_index":8644,"title":{},"body":{"1015833":{}}}],["鐢变簬璇ュ嚱鏁扮涓�涓弬鏁颁负lpcrect锛屾墍浠ユ垜浠琑ectangle鍑芥暟涔熶娇鐢↙pcrect锛岃繖鏍蜂究浜庝娇鐢",{"_index":788,"title":{},"body":{"1015822":{}}}],["鐢变簬鍫嗘爤鍦板潃浣跨敤鏄粠澶у埌灏忕殑锛屾墍浠ヤ娇鐢╯ub鎸囦护鎻愬崌esp鏍堥《鎸囬拡锛�4琛ㄧず鎴戜滑涔嬪墠瀛樺偍鐨勬暟鎹搴︿负4瀛楄妭锛屾墍浠ユ爤椤舵寚閽圗sp闇�瑕佹彁鍗�4锛",{"_index":5333,"title":{},"body":{"1015825":{}}}],["鐢变簬鍫嗘爤鐨勬搷浣滄槸浠庨珮鍦板潃寰�浣庡湴鍧�鐨勶紝鎵�浠ヤ负浜嗘ā鎷熻繖涓�鏁堟灉锛屾垜浠皢灏嗙敵璇风殑鍐呭瓨绌洪棿鍦板潃鍔犱笂鍒濆鍖栫殑澶у皬灏卞緱鍒颁簡绾跨▼鐨勫唴瀛樼┖闂村垵濮嬪寲鍦板潃",{"_index":11133,"title":{},"body":{"1703937":{}}}],["鐢宠cdb瀵硅薄",{"_index":2601,"title":{},"body":{"1015823":{}}}],["鐢宠鍐呭瓨绌洪棿锛屽ぇ灏忎负gmthreadstaç",{"_index":11128,"title":{},"body":{"1703937":{}}}],["鐢熶骇瀛樻斁杩涘鍣",{"_index":7616,"title":{},"body":{"1015833":{}}}],["鐢熶骇鑰",{"_index":7611,"title":{},"body":{"1015833":{}}}],["鐢荤瑪",{"_index":7663,"title":{},"body":{"1015833":{}}}],["鐢诲渾",{"_index":681,"title":{},"body":{"1015822":{}}}],["鐩存帴涓嬮檷鏍堥《鎸囬拡esp",{"_index":5335,"title":{},"body":{"1015825":{}}}],["鐩戝惉濂楁帴瀛",{"_index":9718,"title":{},"body":{"1015818":{}}}],["鐩稿浜庣埗绐楀彛x鍧愭爣",{"_index":7759,"title":{},"body":{"1015833":{}}}],["鐩稿浜庣埗绐楀彛y鍧愭爣",{"_index":7761,"title":{},"body":{"1015833":{}}}],["鐩綍椤规暟鐩",{"_index":6179,"title":{},"body":{"1015828":{}}}],["鐩綍鍚",{"_index":8084,"title":{},"body":{"1015833":{}}}],["鐩綍鍚嶇о锛岄渶瑕佹寚瀹氬畬鏁磋矾寰勫寘鍚洏绗︾殑",{"_index":8069,"title":{},"body":{"1015833":{}}}],["鐩爣hos",{"_index":8873,"title":{},"body":{"1015850":{}}}],["鐩爣variant鐨勬寚閽",{"_index":3076,"title":{},"body":{"1015823":{}}}],["鐩爣绔彛",{"_index":8880,"title":{},"body":{"1015850":{}}}],["鐩爣绾跨▼锛屽搴擪apc.thr",{"_index":10865,"title":{},"body":{"2424869":{}}}],["鐩爣鎿嶄綔鏁",{"_index":5284,"title":{},"body":{"1015825":{}}}],["鐩爣鎿嶄綔鏁帮紝婧愭搷浣滄暟",{"_index":5250,"title":{},"body":{"1015825":{}}}],["鐪熷疄瀹藉害锛岃繖涓や釜鍊兼槸涓�涓仈鍚堢粨鏋勶紝鍙互浣跨敤鍏朵腑鐨勪换浣曚竴涓",{"_index":6200,"title":{},"body":{"1015828":{}}}],["鐪熸璇诲灏戝瓧鑺",{"_index":8164,"title":{},"body":{"1015833":{}}}],["鐪熸鍐欏灏戝瓧鑺",{"_index":8172,"title":{},"body":{"1015833":{}}}],["鑱斿悎浣",{"_index":4681,"title":{},"body":{"3440657":{}}}],["鑷畾涔夌殑椹卞姩绋嬪簭鍗歌浇鍑芥暟",{"_index":5468,"title":{},"body":{"1015847":{}}}],["鑷繁鐨勪唬鐮",{"_index":5847,"title":{},"body":{"1015847":{}}}],["鑺傚尯鍦ㄦ枃浠朵腑鐨勫亸绉",{"_index":6208,"title":{},"body":{"1015828":{}}}],["鑺傚湪鏂囦欢涓榻愬悗鐨勫昂瀵",{"_index":6206,"title":{},"body":{"1015828":{}}}],["鑺傜殑灞炴",{"_index":6213,"title":{},"body":{"1015828":{}}}],["鑾峰彇",{"_index":3069,"title":{},"body":{"1015823":{}}}],["鑾峰彇createfile鐨勫湴鍧",{"_index":8660,"title":{},"body":{"1015833":{}}}],["鑾峰彇dll鏂囦欢璺緞鐨勯暱搴︼紝骞跺湪鏈�鍚�+1锛屽洜涓鸿鍔犱笂0缁撳熬鐨勯暱搴",{"_index":8450,"title":{},"body":{"1015833":{}}}],["鑾峰彇irp鏁版嵁",{"_index":5774,"title":{},"body":{"1015847":{}}}],["鑾峰彇loadlibrarya鍑芥暟鍦板潃",{"_index":8461,"title":{},"body":{"1015833":{}}}],["鑾峰彇pde銆丳te锛屽苟淇敼r/w",{"_index":5867,"title":{},"body":{"1015847":{}}}],["鑾峰彇select鍑芥暟鐨勮繑鍥炲",{"_index":10071,"title":{},"body":{"1015818":{}}}],["鑾峰彇妯″潡鍙ユ焺",{"_index":8458,"title":{},"body":{"1015833":{}}}],["鑾峰彇妯″潡鐨勫彞鏌",{"_index":8553,"title":{},"body":{"1015833":{}}}],["鑾峰彇姝ｅ湪鍔犺浇鐨勬ā鍧楀垪琛",{"_index":8565,"title":{},"body":{"1015833":{}}}],["鑾峰彇寮傚父淇℃伅锛屼慨鏀瑰唴瀛樺睘鎬",{"_index":4901,"title":{},"body":{"3440657":{}}}],["鑾峰彇杈撳叆銆佽緭鍑烘暟鎹殑闀垮害",{"_index":5781,"title":{},"body":{"1015847":{}}}],["鑾峰彇杩斿洖鍊",{"_index":10132,"title":{},"body":{"1015818":{}}}],["鑾峰彇杩涚▼鍙ユ焺",{"_index":8406,"title":{},"body":{"1015833":{}}}],["鑾峰彇杩涚▼鐨勫彞鏌",{"_index":8640,"title":{},"body":{"1015833":{}}}],["鑾峰彇浼犲弬鏁",{"_index":5914,"title":{},"body":{"1015847":{}}}],["鑾峰彇涓�涓�昏緫椹卞姩鍣ㄧ殑瀛楃涓",{"_index":8004,"title":{},"body":{"1015833":{}}}],["鑾峰彇瀛楃涓插墠闈㈢殑璁℃暟鍊笺",{"_index":2942,"title":{},"body":{"1015823":{}}}],["鑾峰彇璁惧鐨勪笂涓嬫枃瀵硅薄锛圖c锛",{"_index":7667,"title":{},"body":{"1015833":{}}}],["鑾峰彇璧勬簮澶у皬",{"_index":1301,"title":{},"body":{"1015822":{}}}],["鑾峰彇绋嬪簭褰撳墠鐩綍",{"_index":8096,"title":{},"body":{"1015833":{}}}],["鑾峰彇绾跨▼涓婁笅鏂",{"_index":4839,"title":{},"body":{"3440657":{}}}],["鑾峰彇缁勫悎妗嗘垨鑰呭垪琛ㄦ褰撳墠鐨勯」鐨勪釜鏁",{"_index":1161,"title":{},"body":{"1015822":{}}}],["鑾峰彇缂撳啿鍖哄湴鍧�锛堣緭鍏ャ�佽緭鍑虹殑缂撳啿鍖洪兘鏄竴涓級",{"_index":5786,"title":{},"body":{"1015847":{}}}],["鑾峰彇褰撳墠宸ヤ綔鐩綍",{"_index":7375,"title":{},"body":{"1015833":{}}}],["鑾峰彇褰撳墠杩涚▼i",{"_index":7614,"title":{},"body":{"1015833":{}}}],["鑾峰彇褰撳墠瀹炰緥鍖栫殑瀵硅薄",{"_index":552,"title":{},"body":{"1015822":{}}}],["鑾峰彇褰撳墠绐楀彛鏍峰紡",{"_index":1189,"title":{},"body":{"1015822":{}}}],["鑾峰彇褰撳墠绾跨",{"_index":549,"title":{},"body":{"1015822":{}}}],["鑾峰彇褰撳墠閫変腑閫夐」鐨勭储寮曪紝杩斿洖鍊煎皬浜�0鍒欐病鏈夐�変腑",{"_index":1157,"title":{},"body":{"1015822":{}}}],["鑾峰彇鍑嗗鐘舵�佺殑绾跨▼缁撴瀯浣",{"_index":11169,"title":{},"body":{"1703937":{}}}],["鑾峰彇鍗凤紙閫昏緫椹卞姩鍣級",{"_index":7993,"title":{},"body":{"1015833":{}}}],["鑾峰彇鍗风殑淇℃伅",{"_index":8054,"title":{},"body":{"1015833":{}}}],["鑾峰彇鍗风殑绫诲瀷",{"_index":8015,"title":{},"body":{"1015833":{}}}],["鑾峰彇鍘熸潵鐨勪竴涓墿灞曢鏍",{"_index":1195,"title":{},"body":{"1015822":{}}}],["鑾峰彇鎸囧畾绱㈠紩浣嶇疆鐨勫",{"_index":1165,"title":{},"body":{"1015822":{}}}],["鑾峰彇鎿嶄綔鐮",{"_index":5778,"title":{},"body":{"1015847":{}}}],["鑾峰彇鏂囦欢澶у皬锛屽崟浣嶆槸瀛楄妭",{"_index":8135,"title":{},"body":{"1015833":{}}}],["鑾峰彇闃熷垪澶撮儴鍏冪礌",{"_index":11570,"title":{},"body":{"1015814":{}}}],["鑾峰彇闃熷垪灏鹃儴鍏冪礌",{"_index":11572,"title":{},"body":{"1015814":{}}}],["鑾峰緱cr4瀵勫瓨鍣ㄧ殑鍊",{"_index":5859,"title":{},"body":{"1015847":{}}}],["鑿滃崟鍙ユ焺",{"_index":7768,"title":{},"body":{"1015833":{}}}],["针对debugport检查与置0：不使用debugport，而是在进程结构体中另外选择一个空闲成员来存放_debug_object的地址",{"_index":4561,"title":{},"body":{"3440657":{}}}],["针对ho",{"_index":4562,"title":{},"body":{"3440657":{}}}],["锛",{"_index":6605,"title":{},"body":{"1015828":{}}}],["键盘",{"_index":7797,"title":{},"body":{"1015833":{}}}],["键盘消息",{"_index":990,"title":{},"body":{"1015822":{}}}],["键盘消息处理函数",{"_index":993,"title":{},"body":{"1015822":{}}}],["键盘消息处理函数的格式一般为如下所示",{"_index":994,"title":{},"body":{"1015822":{}}}],["长调用",{"_index":9168,"title":{},"body":{"1015831":{}}}],["长调用与短调用",{"_index":9152,"title":{},"body":{"1015831":{}}}],["长调用分为两种情况，我们这里所讲解的长调用是指垮段不提权的。这段指令去执行的时候，地址并不会跳转到eip，因为这里的eip是废弃的；实际指令是根据cs段选择子查gdt表，找到表中的段描述符（这个段描述符必须是一个调用门），再根据调用门的符号计算出要调转的地址，最终再跳转过去",{"_index":9173,"title":{},"body":{"1015831":{}}}],["长调用就是cal",{"_index":9170,"title":{},"body":{"1015831":{}}}],["长调用的第二种情况就是跨段并提权，其与第一种情况的指令是一样的",{"_index":9177,"title":{},"body":{"1015831":{}}}],["閫変腑鏌愯浣挎暣琛岄珮浜紙鍙�傜敤涓巖eport椋庢牸鐨刲istctrl锛",{"_index":1197,"title":{},"body":{"1015822":{}}}],["閫夋嫨瀛",{"_index":9345,"title":{},"body":{"1015831":{}}}],["閫氬父鎯呭喌涓嬭鍊间负绌猴紝濡傛灉鍙戠敓宓屽寮傚父锛堝嵆澶勭悊寮傚父鏃跺張鍑虹幇浜嗗紓甯革級鍒欐寚鍚戜笅涓�涓紓甯",{"_index":4238,"title":{},"body":{"2949166":{}}}],["閫氱敤瀵勫瓨鍣�/鍐呭瓨鍦板潃",{"_index":5347,"title":{},"body":{"1015825":{}}}],["閫氱敤瀵勫瓨鍣�/鍐呭瓨鍦板潃/绔嬪嵆鏁",{"_index":5340,"title":{},"body":{"1015825":{}}}],["閫氳繃绗﹀彿閾炬帴鎵撳紑璁惧",{"_index":5734,"title":{},"body":{"1015847":{}}}],["閫氳繃鎸囬拡淇敼鏁版嵁",{"_index":2198,"title":{},"body":{"1015843":{}}}],["閫氳繃鎸囬拡璇诲彇鏁版嵁",{"_index":2196,"title":{},"body":{"1015843":{}}}],["閫氳繃鐖剁被鑾峰彇娑堟伅",{"_index":968,"title":{},"body":{"1015822":{}}}],["閫�鍑哄惊鐜",{"_index":10633,"title":{},"body":{"2424889":{}}}],["閫�鍑轰唬鐮",{"_index":7341,"title":{},"body":{"1015833":{}}}],["閬嶅巻缃戝崱",{"_index":10134,"title":{},"body":{"1015818":{}}}],["閬嶅巻鍙啓闆嗗悎锛岀粰姣忎釜socket鍙戦�丠el",{"_index":10074,"title":{},"body":{"1015818":{}}}],["閬嶅巻鍙闆嗗悎",{"_index":10077,"title":{},"body":{"1015818":{}}}],["閬嶅巻鍦板潃",{"_index":10139,"title":{},"body":{"1015818":{}}}],["閬嶅巻閫傞厤鍣",{"_index":10202,"title":{},"body":{"1015818":{}}}],["閬嶅巻閫傞厤鍣紝鎵惧埌闇�瑕佹崟鑾风殑閫傞厤鍣�(pcap_findalldevs鍑芥暟",{"_index":10151,"title":{},"body":{"1015818":{}}}],["閭ｈ繖涓瓨鍌ㄧ殑鏄暐锛",{"_index":1647,"title":{},"body":{"1015843":{}}}],["閲囧彇鐨勫姞瀵嗘柟妗",{"_index":10500,"title":{},"body":{"1015818":{}}}],["閲囧彇鐨勮в瀵嗘柟妗堬紝鍒嗕负锛歊sa_pkcs1_padding銆丷sa_pkcs1_oaep_padding銆丷sa_sslv23_padding銆丷sa_no_p",{"_index":10508,"title":{},"body":{"1015818":{}}}],["閲婃斁",{"_index":2933,"title":{},"body":{"1015823":{}}}],["閲婃斁_kwait_block鎵�鍗犲唴瀛樸",{"_index":10642,"title":{},"body":{"2424889":{}}}],["閲婃斁bignum缁撴瀯",{"_index":10535,"title":{},"body":{"1015818":{}}}],["閲婃斁rsa缁撴瀯",{"_index":10537,"title":{},"body":{"1015818":{}}}],["閲婃斁浠ょ墝",{"_index":7544,"title":{},"body":{"1015833":{}}}],["閲婃斁涓�涓狟ignum缁撴瀯",{"_index":10488,"title":{},"body":{"1015818":{}}}],["閲婃斁涓�涓猂sa缁撴瀯",{"_index":10472,"title":{},"body":{"1015818":{}}}],["閲婃斁瀛楃涓诧紝褰揅om涓殑瀛楃涓诧紙bstr锛変笉鍐嶄娇鐢ㄦ椂锛岃皟鐢ㄨ鍑芥暟銆",{"_index":2943,"title":{},"body":{"1015823":{}}}],["閲婃斁璧勬簮",{"_index":7689,"title":{},"body":{"1015818":{},"1015833":{}}}],["閲婃斁绫诲伐鍘",{"_index":2800,"title":{},"body":{"1015823":{}}}],["閲婃斁绫诲伐鍘傚璞",{"_index":2604,"title":{},"body":{"1015823":{}}}],["閲婃斁鍐呭瓨",{"_index":8193,"title":{},"body":{"1015833":{}}}],["閲岄潰鐨勬垚鍛",{"_index":426,"title":{},"body":{"1015822":{}}}],["閲嶈浇杩愮畻绗︼紝鍙樹负灏忎簬姣旇緝鍣",{"_index":11769,"title":{},"body":{"1015814":{}}}],["閾炬帴鍣ㄧ増鏈彿",{"_index":6127,"title":{},"body":{"1015828":{}}}],["閿欒浠ｇ爜",{"_index":7562,"title":{},"body":{"1015833":{}}}],["閿欒淇℃伅",{"_index":10130,"title":{},"body":{"1015818":{}}}],["閿洏杈撳叆绾跨▼锛欿eyboardthre",{"_index":3944,"title":{},"body":{"3440655":{}}}],["閿�姣並apc鐨勫嚱鏁板湴鍧�锛屽搴擪apc.kernelr",{"_index":10869,"title":{},"body":{"2424869":{}}}],["闀胯皟鐢",{"_index":9351,"title":{},"body":{"1015831":{}}}],["闂存帴璺",{"_index":8668,"title":{},"body":{"1015833":{}}}],["闄勫姞鍙傛暟涓暟",{"_index":4242,"title":{},"body":{"2949166":{}}}],["闄勫姞鍙傛暟鎸囬拡",{"_index":4244,"title":{},"body":{"2949166":{}}}],["闄勫姞鏁版嵁",{"_index":7770,"title":{},"body":{"1015833":{}}}],["闄勫姞鏁版嵁锛岃繘涓�姝ユ弿杩版秷鎭殑",{"_index":7793,"title":{},"body":{"1015833":{}}}],["闄�0寮傚父",{"_index":4359,"title":{},"body":{"2949166":{}}}],["闅忔満鏁",{"_index":2810,"title":{},"body":{"1015823":{}}}],["闇�瑕佸己鍒惰浆鍖栫殑绫诲瀷",{"_index":3082,"title":{},"body":{"1015823":{}}}],["闇�瑕佹墽琛岀殑浠ｇ爜4",{"_index":1875,"title":{},"body":{"1015843":{}}}],["闇�瑕佹敞鍐岀殑鍥炶皟鍑芥暟",{"_index":4332,"title":{},"body":{"2949166":{}}}],["闇�瑕佹敞鎰忚繖閲屽湪鍒涘缓瀹瑰櫒鐨勬椂鍊欑涓�涓弬鏁拌〃绀虹被鍨嬶紝绗簩涓垯琛ㄧず瀹瑰櫒锛岄粯璁や负vector锛岀涓変釜鍒欒〃绀烘帓搴忔柟寮",{"_index":11587,"title":{},"body":{"1015814":{}}}],["闈為浂琛ㄧず鍒濆鍖栨垚鍔燂紝鍚﹀垯涓�0",{"_index":75,"title":{},"body":{"1015822":{}}}],["门",{"_index":9190,"title":{},"body":{"1015831":{}}}],["问题2、3在atl中实际上是换了一个形式出现了，可以在头文件中找到，见如下图注释",{"_index":3099,"title":{},"body":{"1015823":{}}}],["问题：系统中有很多个进程连着网，比如qq、微信、迅雷...那么系统是如何区分出数据包应该分给哪个进程呢",{"_index":9696,"title":{},"body":{"1015818":{}}}],["阻止文件被子进程继承",{"_index":1273,"title":{},"body":{"1015822":{}}}],["除",{"_index":1734,"title":{},"body":{"1015843":{}}}],["除了_kthread以外，我们来看一下其他几个在_ethread结构体中的成员",{"_index":11039,"title":{},"body":{"1703937":{}}}],["除了_try_except程序块之外，编译器还提供了_try_finally，与前者不同的，在_finally块内的代码一定会去执行，无论你_try块内是否出错、中断、正常，都可以得到执行",{"_index":4466,"title":{},"body":{"2949166":{}}}],["除了break外，我们再来学习一个语句：continue，它的作用就是中断当前循环，直接进行下一次循环，这里我们使用打印偶数的例子改造一下变成打印奇数",{"_index":1868,"title":{},"body":{"1015843":{}}}],["除了cpu时间片到期的情况，还有存在备用线程的情况也会进行线程切换，我们可以继续分析kidispatchinterrupt这个函数，回到最开始，我们可以看到即使你的cpu时间片没有过期，但如果_kpcr.prcbdata.nextthread不为0，也就是存在备用线程，也会进行线程切换",{"_index":11233,"title":{},"body":{"1703937":{}}}],["除了esp0之外，还有两个tss的成员会被使用到。一个是tss的cr3会被修改为目标进程的cr3；另外一个是之前学习中没有提到的io权限位图，是将当前线程的io权限位图存到tss的0x66偏移位成员，但是这个在windows2000以后已经不再使用了。（自行了解io权限位图",{"_index":11250,"title":{},"body":{"1703937":{}}}],["除了lock指令的原子操作外，第三行指令还用了xadd，该指令的意思就是交换相加，也就表示这里会将eax的值存入到[ecx]中，然后将[ecx]的值存入到eax中",{"_index":6650,"title":{},"body":{"1933380":{}}}],["除了一些方法还可以设置样式，例如你可以设置按钮控件为一个单选框、复选框，这都可以在create函数中去设置",{"_index":1103,"title":{},"body":{"1015822":{}}}],["除了之前所提到的jmp/call指令进行任务切换外，我们还可以使用任务门，它的优势如下",{"_index":9361,"title":{},"body":{"1015831":{}}}],["除了友元函数，还有加强版的垃圾：友元类，如下是语法格式",{"_index":3708,"title":{},"body":{"1015840":{}}}],["除了可以在定义的时候category选择为control类型，我们还可以直接让其成为一个字符串cstring类型",{"_index":1045,"title":{},"body":{"1015822":{}}}],["除了对象被遗弃问题，互斥体还可以解决重入导致的死锁问题，如下图所示，由于代码设计的问题，在waitforsingleobject等待a对象后，内部代码又调用了waitformultipleobjects等待a对象，这种情况被称为重入。当调用一次waitforsingleobject后，a对象的signalstate变为了0，此时已经没有信号了，当调用waitformultipleobjects时，由于被等待对象a是没有信号的，因此代码会永远困在该函数内部，这种情况叫做死锁",{"_index":10716,"title":{},"body":{"2424889":{}}}],["除了成员数据（变量）以外，还有一些提供给自己用的成员函数也要隐藏",{"_index":3539,"title":{},"body":{"1015840":{}}}],["除了我们上述的方式可以进行共享内核对象以外，windows还设计了一种方式来提供我们共享内核对象，我们先来了解一下句柄是否\"可以\"被继承",{"_index":7316,"title":{},"body":{"1015833":{}}}],["除了构造函数外我们还可以使用成员方法createpen来创建画笔",{"_index":836,"title":{},"body":{"1015822":{}}}],["除了这个以外表达式1和表达式3可以使用逗号分隔，写入多个语句",{"_index":1894,"title":{},"body":{"1015843":{}}}],["除了这个以外，在windows中还有一些特殊的结构体，也称之为可等待对象，如_file_object，我们可以看见该结构体的第一个成员就不是_dispatcher_header，但是在它的0x5c偏移位成员有一个_kevent结构体，这个结构体是一个可等待对象，因此_file_object也是一个可等待对象",{"_index":10552,"title":{},"body":{"2424889":{}}}],["除了这个函数外还有一个打印输出的函数：printf，它就可以一次性打印多个字符",{"_index":1658,"title":{},"body":{"1015843":{}}}],["除了这个操作以外，在waitforsingleobject函数内，我们也可以看见，之所以信号量可以解决生产消费问题，是因为对signalstate值的修改方式是减1，这样信号量就可以精准控制进入临界区线程的数量，从而实现生产资源与消费者线程的数量对等",{"_index":10713,"title":{},"body":{"2424889":{}}}],["除了这种方式以外，我们想实现同样的效果可以使用多重继承（当前类:继承的类a",{"_index":3409,"title":{},"body":{"1015840":{}}}],["除了键盘、鼠标外，消息还来自于其他进程，假设a进程使用了createwindow创建窗口，就会获得一个窗口句柄，窗口句柄具有全局特性（所有窗口对象都存在一张公共表中），这意味着一旦其他进程获取到窗口句柄，都可以利用sendmessage或postmessage函数向a进程创建的窗口发送消息以进行交互",{"_index":3927,"title":{},"body":{"3440655":{}}}],["除了需要了解这个函数以外，我们可以看见其成员是一个fd_set结构体，我们还需要了解一下这个结构体和几个常用的宏",{"_index":10037,"title":{},"body":{"1015818":{}}}],["除此之外",{"_index":9276,"title":{},"body":{"1015831":{}}}],["除此之外我们可以使用while语句实现",{"_index":1840,"title":{},"body":{"1015843":{}}}],["除此之外我们设置编辑框的内容，我们还可以用别的方法也就是动态绑定的思路来修改",{"_index":1041,"title":{},"body":{"1015822":{}}}],["除此之外我们还有一个成员变量m_pmainwnd，这个也是在cwinthread类中定义",{"_index":187,"title":{},"body":{"1015822":{}}}],["除此之外还有一个就是在继承时的区别，我们可以将一个正常的struct继承修改成cl",{"_index":3431,"title":{},"body":{"1015840":{}}}],["除该方式外，我们还可以使用如下这种方式定义",{"_index":1910,"title":{},"body":{"1015843":{}}}],["陷进门与中断门几乎是一样的，陷阱门描述符也存储在idt表中，其与中断门描述符唯一不同的是高32位的第8位为1",{"_index":9275,"title":{},"body":{"1015831":{}}}],["陷阱门",{"_index":9274,"title":{},"body":{"1015831":{}}}],["陷阱门和中断门的区别在于，中断门执行后eflag寄存器的值发生了改变，而陷阱门不会改变eflag的值",{"_index":9277,"title":{},"body":{"1015831":{}}}],["随机",{"_index":11744,"title":{},"body":{"1015814":{}}}],["随机访问迭代器：上面全部，以及如下方式",{"_index":11735,"title":{},"body":{"1015814":{}}}],["随机选取两个数p、q（满足互质数条件",{"_index":10432,"title":{},"body":{"1015818":{}}}],["随机：rand",{"_index":11725,"title":{},"body":{"1015814":{}}}],["隐式栈访问指令：例如push",{"_index":9057,"title":{},"body":{"1015831":{}}}],["隐式链接",{"_index":8356,"title":{},"body":{"1015833":{}}}],["隐式链接有这几个步骤",{"_index":8359,"title":{},"body":{"1015833":{}}}],["隐式链接的实现",{"_index":8372,"title":{},"body":{"1015833":{}}}],["零化",{"_index":6963,"title":{},"body":{"2949228":{}}}],["零标志：【zf】—如果运算结果位0，则zf=1，否则zf=0",{"_index":5409,"title":{},"body":{"1015825":{}}}],["需要了解其不同之处，我们还要去了解原码、反码、补码的相关知识",{"_index":5103,"title":{},"body":{"1015825":{}}}],["需要注意ccomqiptr不能定义iunknown指针，所以只需要修改spdbconn为ccomqiptr即可",{"_index":3272,"title":{},"body":{"1015823":{}}}],["需要注意如下几点",{"_index":1799,"title":{},"body":{"1015843":{}}}],["需要注意的是set容器不允许出现重复的键值（可以使用multiset容器来使用重复的键值），并且默认会自动排序",{"_index":11462,"title":{},"body":{"1015814":{}}}],["需要注意的是在queryinterface成员函数中有一个iid_idb变量，这个是我们自定义的内容，其表示当前com接口的id，这个需要我们自己去自定义",{"_index":2666,"title":{},"body":{"1015823":{}}}],["需要注意的是在改造过程中所有成员函数都需要添加_stdcall调用约定，因为com对象在win32下采用标准调用约定",{"_index":2635,"title":{},"body":{"1015823":{}}}],["需要注意的是如上所述指令中dowrd为数据宽度，存储的数据需要与dowrd数据宽度一致，当然这里也可以为byte、word，例如",{"_index":5197,"title":{},"body":{"1015825":{}}}],["需要注意的是工作目录是可以修改的，我们可以通过createprocess函数来创建一个进程，并且修改其工作目录，这是createprocess函数的第八个参数lpctstr",{"_index":7379,"title":{},"body":{"1015833":{}}}],["需要注意的是我们当前环境是x86的所以用id来代替立即数的表示，在实际表格中立即数是由iv来表示的",{"_index":11894,"title":{},"body":{"1015817":{}}}],["需要注意的是我们生成了工程，其有一个头文件stdafx.h，该文件一定要放在第一行去使用，因为在使用该文件之前的，vc6编译器是不会将其去参与编译的，而是选择忽视掉",{"_index":1025,"title":{},"body":{"1015822":{}}}],["需要注意的是我们获取参数的值，指令应为",{"_index":5392,"title":{},"body":{"1015825":{}}}],["需要注意的是我们首先需要获取函数的地址，这个我们可以通过vc6反汇编来寻找",{"_index":8504,"title":{},"body":{"1015833":{}}}],["需要注意的是段选择子的rpl数值要小于段描述符中的dpl",{"_index":9017,"title":{},"body":{"1015831":{}}}],["需要注意的是这个代码只有debug版本才会有，而在release版本中堆栈的布局与这是不一样的",{"_index":1512,"title":{},"body":{"1015843":{}}}],["需要注意的是这个函数应该搭配着如上所学的2个等待函数一起使用，不然获取到的值就不会是线程函数返回的值",{"_index":7464,"title":{},"body":{"1015833":{}}}],["需要注意的是这个格式是固定的，不要自己「自由发挥",{"_index":3686,"title":{},"body":{"1015840":{}}}],["需要注意的是，cs段寄存器不能通过上述指令进行修改，这是因为cs为代码段，cs的改变会导致eip的改变；如果你想要修改cs，就需要保证cs和eip一起修改，这个在之后的章节中会学到",{"_index":9012,"title":{},"body":{"1015831":{}}}],["需要注意的是，在内核模式下符号链接的名称是以“\\??\\”开头，但是在用户模式下则是以“\\\\.\\”开头，所以在3环代码中符号链接名称应写为“\\\\.\\mytestdriver”。（记得在实际代码中转义特殊符号",{"_index":5679,"title":{},"body":{"1015847":{}}}],["需要注意的是，挂起几次就要恢复几次",{"_index":7426,"title":{},"body":{"1015833":{}}}],["需要注意的是，这个函数返回的是一个迭代器，如果找到了就返回迭代器，如果没有找到就返回与m1.end()一样的迭代器",{"_index":11529,"title":{},"body":{"1015814":{}}}],["需要注意的是，这个函数返回的是一个迭代器，如果找到了就返回迭代器，如果没有找到就返回与s4.end()一样的迭代器",{"_index":11481,"title":{},"body":{"1015814":{}}}],["需要注意的是，这个变量实际上是一个结构体guid，注释就是它更加直观的表现形式",{"_index":2682,"title":{},"body":{"1015823":{}}}],["需要注意，我们不能简单地把返回值与s_ok和s_false比较，而要用secceeded和failed宏进行判断",{"_index":2872,"title":{},"body":{"1015823":{}}}],["需要注意，我们是在堆中创建的，当程序执行完并不会自己删除，所以我们要在代码中去写，这里就写在取消按钮的处理函数内",{"_index":1064,"title":{},"body":{"1015822":{}}}],["需要注意，硬件设备的中断与idt表中的对应关系不是固定的，可以参考apic（advanç",{"_index":9582,"title":{},"body":{"1015831":{}}}],["需要补充的背景知识",{"_index":9892,"title":{},"body":{"1015818":{}}}],["需要说明的是，这里的临界区指的是广义上的临界区，即只允许一个线程进入直到退出的一段代码（不是指用entercriticalsection和leavecriticalsection函数而形成的临界区），这里我们可以认为就是waitforxx和setevent函数所形成的临界区",{"_index":10688,"title":{},"body":{"2424889":{}}}],["静动态差异",{"_index":6029,"title":{},"body":{"1015828":{}}}],["静态文本",{"_index":1092,"title":{},"body":{"1015822":{}}}],["静态链接库",{"_index":8284,"title":{},"body":{"1015833":{}}}],["静态链接库的使用",{"_index":8292,"title":{},"body":{"1015833":{}}}],["静态链接库的使用有两种方法",{"_index":8293,"title":{},"body":{"1015833":{}}}],["静态链接库的缺点",{"_index":8308,"title":{},"body":{"1015833":{}}}],["静态链接库路径：c:\\progr",{"_index":8305,"title":{},"body":{"1015833":{}}}],["非",{"_index":1761,"title":{},"body":{"1015843":{}}}],["非一致代码段描述符",{"_index":9127,"title":{},"body":{"1015831":{}}}],["非一致代码段：我们又称之为普通代码段，它只允许同级访问，例如ring3只能访问ring3（ring0同理可得），严禁不同级别的访问",{"_index":9118,"title":{},"body":{"1015831":{}}}],["非可变序列算法",{"_index":11609,"title":{},"body":{"1015814":{}}}],["非可变序列算法是指不直接修改其所操作的容器内容的算法，如下面的查找、统计、搜索函数",{"_index":11613,"title":{},"body":{"1015814":{}}}],["非客户区鼠标消息",{"_index":952,"title":{},"body":{"1015822":{}}}],["非客户区鼠标消息处理",{"_index":954,"title":{},"body":{"1015822":{}}}],["非客户区鼠标消息处理其实跟我们之前使用的鼠标消息处理没有本质区别，唯一的就是名字里头多了nc这两个字母（个人理解为非客户区英文not",{"_index":955,"title":{},"body":{"1015822":{}}}],["非客户去鼠标消息处理函数的第一个参数可以判断很多东西，例如窗口缩小、放大、关闭按钮之类的都是可以的",{"_index":960,"title":{},"body":{"1015822":{}}}],["非对称加密：加密方和解密方使用不同的密钥；优点：解密的秘钥无法用加密的密钥来解密，即使加密方暴露出了密钥也没事，因为这个密钥只能加密，而无法解密，所以就提高了安全性；缺点：效率比较低下，过程比较繁琐",{"_index":10425,"title":{},"body":{"1015818":{}}}],["非运算：0就是1、1就是0",{"_index":5125,"title":{},"body":{"1015825":{}}}],["面向对象程序设计之多态",{"_index":3552,"title":{},"body":{"1015840":{}}}],["面向对象程序设计之继承与封装",{"_index":3522,"title":{},"body":{"1015840":{}}}],["面向对象设计中的static之静态成员函数",{"_index":3740,"title":{},"body":{"1015840":{}}}],["面向对象设计中的static之静态数据成员",{"_index":3739,"title":{},"body":{"1015840":{}}}],["面向无连接",{"_index":9935,"title":{},"body":{"1015818":{}}}],["面向无连接，就是不用去询问服务器允不允许发送数据，他不管你怎么办，直接就给你发送数据了",{"_index":9936,"title":{},"body":{"1015818":{}}}],["面向连接",{"_index":9710,"title":{},"body":{"1015818":{}}}],["页",{"_index":9382,"title":{},"body":{"1015831":{}}}],["页的大小是确定的，4kb大小不能随便更改，所以2",{"_index":9512,"title":{},"body":{"1015831":{}}}],["页目录表",{"_index":9453,"title":{},"body":{"1015831":{}}}],["页目录表基址",{"_index":10947,"title":{},"body":{"1703937":{}}}],["页目录表基址就是0xc0300000，通过它找到的物理页就是页目录表，这个物理页既是页目录表也是页表。这里的页目录表是一张特殊的页表，每一项pte指向的不是普通的物理页，而是指向其他的页表",{"_index":9454,"title":{},"body":{"1015831":{}}}],["页目录表被映射到了从0xc0300000开始处的4kb地址空间",{"_index":9478,"title":{},"body":{"1015831":{}}}],["页表",{"_index":9461,"title":{},"body":{"1015831":{}}}],["页表（ptt）被映射到了从0xc0000000到0xc03fffff的4mb地址空间（一个表4kb，一共有1024个表",{"_index":9476,"title":{},"body":{"1015831":{}}}],["页面空间（窗口）：逻辑坐标与设备无关，在窗口中进行描述时使用逻辑坐标",{"_index":656,"title":{},"body":{"1015822":{}}}],["项目根目录",{"_index":8294,"title":{},"body":{"1015833":{}}}],["项目配置",{"_index":5454,"title":{},"body":{"1015847":{}}}],["项目需要包含mfc运行库，vc6设置：projeç",{"_index":83,"title":{},"body":{"1015822":{}}}],["预处理一般是指在程序源代码被转换为二进制代码之前，由预处理器对程序源代码文本进行处理，处理后的结果再由编译器进一步编译",{"_index":2335,"title":{},"body":{"1015843":{}}}],["预处理之宏定义、条件编译与文件包含",{"_index":2334,"title":{},"body":{"1015843":{}}}],["预处理功能主要包括宏定义、文件包含、条件编译三部分",{"_index":2336,"title":{},"body":{"1015843":{}}}],["预处理指令：条件编译是通过预处理指令实现的",{"_index":2382,"title":{},"body":{"1015843":{}}}],["预定义的控件有：按钮、复选框、编辑框、静态字符串标签和滚动条等",{"_index":7832,"title":{},"body":{"1015833":{}}}],["题外话：看这个数值，从右到左，偏左的为高位；除特定值以外，汇编不区分大小写",{"_index":5179,"title":{},"body":{"1015825":{}}}],["额外的异常调试事件",{"_index":4744,"title":{},"body":{"3440657":{}}}],["风格",{"_index":1132,"title":{},"body":{"1015822":{}}}],["首位表示小数点移动方向",{"_index":1625,"title":{},"body":{"1015843":{}}}],["首先任意打开一个进程，定位到进程结构体0x1f8偏移位，有一个vm成员，是_mmsupport结构体，该结构体下有一个vmworkingsetlist成员，它记录着当前进程相关的工作集信息",{"_index":7006,"title":{},"body":{"2949228":{}}}],["首先会判断一个菜单名称",{"_index":459,"title":{},"body":{"1015822":{}}}],["首先会有一个令牌，假设线程1获取了这个令牌，那么这时候令牌则只为线程1所有，然后线程1会执行代码去访问全局变量，最后归还令牌；如果其他线程想要去访问这个全局变量就需要获取这个令牌，但当令牌已经被取走时则无法访问",{"_index":7503,"title":{},"body":{"1015833":{}}}],["首先你需要创建一个mfc项目，选择基于对话框dialog创建即可，而后将其他的控件删除留一个按钮便于后续调用，接着你需要引入类型库",{"_index":3108,"title":{},"body":{"1015823":{}}}],["首先分析一下如下代码",{"_index":2218,"title":{},"body":{"1015843":{}}}],["首先创建a进程，代码如下",{"_index":8401,"title":{},"body":{"1015833":{}}}],["首先判断按下的键是否是ctrl键，其次左移14位来获取这个值，我们知道第14位获得的是先前状态，先前键被按下为1，抬起为0，我们按一下ctrl键然后抬起看看结果",{"_index":1014,"title":{},"body":{"1015822":{}}}],["首先在cwinapp类派生的cmywinapp类中使用declare_dynamic这个宏（个人理解：声明这个类可以使用rtti），其用法跟函数是一样的，传参为当前类名",{"_index":224,"title":{},"body":{"1015822":{}}}],["首先在vc6中去绘画两个控件：编辑框和按钮（从旁边的controls拖过去就行），然后我需要单击按钮就可以改变编辑框的内容",{"_index":1039,"title":{},"body":{"1015822":{}}}],["首先安装好v",{"_index":5443,"title":{},"body":{"1015847":{}}}],["首先将代码进程的threadproc复制过去，然后将复制过去之后目标进程的地址给到createremotethread函数，这样就解决了自定义函数的问题",{"_index":8613,"title":{},"body":{"1015833":{}}}],["首先我们使用new关键词的时候会发现，其除了在堆中创建了对象还会调用构造函数",{"_index":3452,"title":{},"body":{"1015840":{}}}],["首先我们创建一个win32控制台应用的项目，其次在头部包含文件和调用lip",{"_index":9725,"title":{},"body":{"1015818":{}}}],["首先我们创建一个关联",{"_index":1184,"title":{},"body":{"1015822":{}}}],["首先我们可以在xp中编译这样一段代码，来看一下一个线程等待一个对象的情况",{"_index":10560,"title":{},"body":{"2424889":{}}}],["首先我们可以基于vc6添加一个txt文件到资源列表中，按如下图操作",{"_index":1290,"title":{},"body":{"1015822":{}}}],["首先我们可以看到第一个包，就是客户端向服务器端发送syn（同步序列编号）包，我们可以看见其有一个seq=0，这表示一个序号，是随机的",{"_index":9912,"title":{},"body":{"1015818":{}}}],["首先我们可以看见有4个传参：6a",{"_index":6348,"title":{},"body":{"1015828":{}}}],["首先我们来了解一下一些常用的运算符",{"_index":1729,"title":{},"body":{"1015843":{}}}],["首先我们来了解一下内核对象，以后会经常与内核对象打交道，例如进程、线程、文件、互斥体、事件等等在内核都有一个对应的结构体，这些结构体都由内核负责管理，所以我们都可以称之为内核对象（当我们创建一个进程，在内核层（高2g）就会创建一个结构体eproç",{"_index":7302,"title":{},"body":{"1015833":{}}}],["首先我们来写一段互斥体下的生产者与消费者的代码",{"_index":7606,"title":{},"body":{"1015833":{}}}],["首先我们来探测attribute属性，如上表中，段寄存器cs的attribute是可读、可执行，也就表示我们没法对该段寄存器进行写入，所以我们可以通过如下代码去探测它，该代码的意义就是将段寄存器cs的值读到ax寄存器中，再将ax寄存器的值读区到ds段寄存器中，最后通过ds段寄存器去写入内容",{"_index":8935,"title":{},"body":{"1015831":{}}}],["首先我们来看一下startupinfo结构体的成员",{"_index":7264,"title":{},"body":{"1015833":{}}}],["首先我们来看一下swapcontext，在该函数内有一处判断，判断esi+0x49（即kthread.apcstate.kernelapcpending）是否为0，也就表示判断当前内核apc队列是否有等待执行的apc函数，如果不为0的情况下就进行跳转，最终ret。我们可以看见整个链是swapcontext←kiswapcontext←kiswapthr",{"_index":10902,"title":{},"body":{"2424869":{}}}],["首先我们来看下hellodialog.cpp文件，在这个文件中我们可以看见theapp这么一个熟悉的名字，通过该名字我们就可以知道这个文件实际上就是用来实例化的",{"_index":1028,"title":{},"body":{"1015822":{}}}],["首先我们来看下sort函数，如下图所示当使用这个函数的时候就会给我们自动按数字大小排序",{"_index":11415,"title":{},"body":{"1015814":{}}}],["首先我们来看某一个模块的pe指纹，这里就用ntdll.dll举例",{"_index":8585,"title":{},"body":{"1015833":{}}}],["首先我们来解决一下第一个问题，我们之前通过vc6是可以查看反汇编代码的，而实际上一个程序能看见具体的汇编代码吗？其实不可以，其表现形式应该是机器码，如下图所示左边是机器码，右边是机器码对应的汇编代码，我们能看见汇编代码是因为vc6的反汇编引擎将机器码转为汇编代码",{"_index":8602,"title":{},"body":{"1015833":{}}}],["首先我们熟知的系统是通过线程id、进程id知道对应的线程和进程的，在每个国家公民都是有身份证号码的，这也用来定位你这个人；在互联网上同样也有这样一个标识去确认终端，这就是ip地址",{"_index":9640,"title":{},"body":{"1015818":{}}}],["首先我们知道第一个字节是0x80，再根据官方文档知道其有gx或ex这样的参数，那就表示它有modr/m这个字节，也就表示它是一个变长指令，所以opcode和modr/m如下所示",{"_index":12036,"title":{},"body":{"1015817":{}}}],["首先我们知道第一个字节是0x88，再根据官方文档知道其有gx或ex这样的参数，那就表示它有modr/m这个字节，也就表示它是一个变长指令，所以opcode和modr/m如下所示",{"_index":12016,"title":{},"body":{"1015817":{}}}],["首先我们要理解什么是消息队列，我们可以编写运行如下代码，在桌面的左上角画上一个窗口，接着我们可以通过发送消息来与窗口进行互动",{"_index":3750,"title":{},"body":{"3440655":{}}}],["首先我们需要创建一个项目，按如下图所示创建",{"_index":4182,"title":{},"body":{"1015820":{}}}],["首先我们需要包含一个头文件和两个库文件",{"_index":10509,"title":{},"body":{"1015818":{}}}],["首先我们需要根据p位的值为1来确定描述符是有效的，接着dpl在windows里只能出现两种情况：00/11（后期章节中会讲解该属性），然后s位必须是1才能是数据段/代码段的描述符，所以我们就可以得出p、dpl、s拼接的值为：1001/1111，转为十六进制就是：0x9/0xf",{"_index":9039,"title":{},"body":{"1015831":{}}}],["首先是declare_dyncreate宏，其代码为",{"_index":333,"title":{},"body":{"1015822":{}}}],["首先是declare_message_map宏",{"_index":371,"title":{},"body":{"1015822":{}}}],["首先是取3环传入的系统调用号给到edi，然后因为系统调用号我们实际使用的只有13位，其他位都是0，所以将edi右移8位之后就还剩下5位，接着这5位又和0x30进行与运算，也就表示运算结果只有两种，即0x10或0x0。继续将运算后的结果给到ecx，因为在之前的kisystemservice函数中esi指向的是_kthread结构体，所以esi+0xe0指向的就是系统服务表地址，又将与运算结果和系统服务表地址相加，即表示取的系统服务表是第一张还是第二张（系统服务表的宽度就是16字节，即0x10），因此我们可以知道这里的计算方式是很精巧的",{"_index":2554,"title":{},"body":{"1015846":{}}}],["首先是获取类的cruntimeclass结构体指针，然后根据这个指针调用isderivedfrom方法，传递的参数也是一个结构体指针，继续跟进该函数",{"_index":288,"title":{},"body":{"1015822":{}}}],["首先来看一下dos部分，首先是",{"_index":6008,"title":{},"body":{"1015828":{}}}],["首先点右键选择控件→classwizard，按下图操作即可",{"_index":1042,"title":{},"body":{"1015822":{}}}],["首先看下数据宽度，我们会发现是16，那也就是说这里不管如何你只要继承了，在编译器中两个成员还是会直接添加过来，teacher的成员依然是4个「4成员*4数据宽度（int类型",{"_index":3389,"title":{},"body":{"1015840":{}}}],["首先第一段代码用来创建映射对象并共享，如下所示",{"_index":6834,"title":{},"body":{"2949228":{}}}],["首先调用构造函数，它构造cframewnd类的对象，然后调用create成员方法，创建windows框架窗口并将其附加到cframewnd类的对象",{"_index":77,"title":{},"body":{"1015822":{}}}],["首先这个1a我们可以查文档的tabl",{"_index":12027,"title":{},"body":{"1015817":{}}}],["首先这里传递的是父类的引用类型，而后去调用的print函数也是person父类的，所以这样还是没法满足我们的需求",{"_index":3570,"title":{},"body":{"1015840":{}}}],["首先通过windbg找到一个非一致的代码段描述符（通过段描述符的s位和type位来确定），然后复制一份写入到gdt表中",{"_index":9128,"title":{},"body":{"1015831":{}}}],["首先需要包含头文件和使用命名空间",{"_index":11383,"title":{},"body":{"1015814":{}}}],["首先需要知道哪个控件发出了信号",{"_index":4139,"title":{},"body":{"1015820":{}}}],["首先，图中不仅有三个窗口，每个进程的窗口内部的按钮、表格等也都是窗口的一部分。因此，一个进程可以拥有多个窗口，但这些窗口只能属于同一个进程",{"_index":3958,"title":{},"body":{"3440655":{}}}],["首先，我们先写一段正常的messagebox程序，然后使用dtdebug来下断点",{"_index":2325,"title":{},"body":{"1015843":{}}}],["首部头长度：该字段用四位表示，表示整个ip报文的头的长度，这里的长度表示有多少个单位，1个单位是4字节，如长度为1则表示该ip报文的头大小为4字节；它得范围即二进制数00",{"_index":10272,"title":{},"body":{"1015818":{}}}],["首部校验和：该值是对整个数据包的包头进行的校验，占16位",{"_index":10283,"title":{},"body":{"1015818":{}}}],["首部长度",{"_index":10289,"title":{},"body":{"1015818":{}}}],["驱动开发",{"_index":5439,"title":{"1015847":{}},"body":{"1015827":{},"1015832":{}}}],["驱动程序代码",{"_index":5462,"title":{},"body":{"1015847":{}}}],["骞宠",{"_index":11140,"title":{},"body":{"1703937":{}}}],["骞跺湪鍐呴儴璋冪敤",{"_index":555,"title":{},"body":{"1015822":{}}}],["高度体现了软件的可复用性",{"_index":11315,"title":{},"body":{"1015814":{}}}],["高级",{"_index":7018,"title":{},"body":{"2949228":{}}}],["默认情况下你要使用段寄存器的地址不加段前缀指令时都为ds段寄存器的地址",{"_index":11806,"title":{},"body":{"1015817":{}}}],["默认情况下静态文本控件是没有处理函数的，但是我们可以自己添加：1.取个新i",{"_index":1107,"title":{},"body":{"1015822":{}}}],["默认的消息处理函数",{"_index":4038,"title":{},"body":{"3440655":{}}}],["鼠标",{"_index":7798,"title":{},"body":{"1015833":{}}}],["鼠标中键双击",{"_index":940,"title":{},"body":{"1015822":{}}}],["鼠标中键抬起",{"_index":938,"title":{},"body":{"1015822":{}}}],["鼠标中键被按下",{"_index":936,"title":{},"body":{"1015822":{}}}],["鼠标右键按下",{"_index":942,"title":{},"body":{"1015822":{}}}],["鼠标左键双击",{"_index":934,"title":{},"body":{"1015822":{}}}],["鼠标左键抬起",{"_index":932,"title":{},"body":{"1015822":{}}}],["鼠标左键按下",{"_index":930,"title":{},"body":{"1015822":{}}}],["鼠标消息",{"_index":923,"title":{},"body":{"1015822":{}}}],["鼠标消息也有对应的消息处理函数，这种函数都是固定的名称和参数，其中参数为：uin",{"_index":946,"title":{},"body":{"1015822":{}}}],["鼠标画线",{"_index":973,"title":{},"body":{"1015822":{}}}]],"pipeline":["stemmer","stemmer-da","stemmer-de","stemmer-es","stemmer-fi","stemmer-fr","stemmer-hu","stemmer-it","stemmer-jp","stemmer-nl","stemmer-no","stemmer-pt","stemmer-ro","stemmer-ru","stemmer-sv","stemmer-tr"]};